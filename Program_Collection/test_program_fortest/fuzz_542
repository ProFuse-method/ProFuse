(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h73):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire3;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire signed [(3'h4):(1'h0)] wire0;
  wire signed [(3'h6):(1'h0)] wire50;
  wire [(2'h2):(1'h0)] wire49;
  wire [(3'h6):(1'h0)] wire41;
  wire [(3'h4):(1'h0)] wire9;
  wire signed [(4'ha):(1'h0)] wire8;
  wire signed [(3'h5):(1'h0)] wire7;
  wire signed [(3'h6):(1'h0)] wire6;
  reg signed [(4'hb):(1'h0)] reg48 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg47 = (1'h0);
  reg [(3'h4):(1'h0)] reg46 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg45 = (1'h0);
  reg [(3'h4):(1'h0)] reg44 = (1'h0);
  reg [(3'h6):(1'h0)] reg43 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg12 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg11 = (1'h0);
  reg [(3'h6):(1'h0)] reg10 = (1'h0);
  reg [(4'ha):(1'h0)] reg5 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg4 = (1'h0);
  assign y = {wire50,
                 wire49,
                 wire41,
                 wire9,
                 wire8,
                 wire7,
                 wire6,
                 reg48,
                 reg47,
                 reg46,
                 reg45,
                 reg44,
                 reg43,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire3;
      reg5 <= (~&$unsigned(wire0[(1'h1):(1'h0)]));
    end
  assign wire6 = $unsigned($unsigned(($signed(wire0) ?
                     (reg4 <= reg4) : reg4[(3'h4):(2'h3)])));
  assign wire7 = ((^$unsigned(wire1[(2'h2):(1'h1)])) ?
                     reg5[(4'h9):(3'h7)] : reg5);
  assign wire8 = wire6[(3'h4):(1'h1)];
  assign wire9 = wire3;
  always
    @(posedge clk) begin
      reg10 <= $signed($signed(wire7[(2'h3):(2'h3)]));
      if ((~wire7))
        begin
          reg11 <= wire2[(1'h1):(1'h1)];
          reg12 <= ($signed($signed($signed(wire3))) ?
              ({reg4} | reg4) : ($unsigned($signed(reg4)) ~^ ($signed(reg10) ?
                  reg11[(1'h0):(1'h0)] : {wire3})));
        end
      else
        begin
          reg11 <= (~wire7);
          reg12 <= wire1[(3'h6):(3'h4)];
        end
      reg13 <= $signed(wire1);
    end
  module14 #() modinst42 (wire41, clk, reg13, wire1, wire2, reg12);
  always
    @(posedge clk) begin
      if ({(&(((8'haa) ? reg10 : wire9) ? reg11[(1'h0):(1'h0)] : (^wire8)))})
        begin
          reg43 <= reg4;
        end
      else
        begin
          reg43 <= {(^{reg43})};
          if ($unsigned((wire1 << ($signed((8'ha5)) ? wire41 : {wire3}))))
            begin
              reg44 <= reg11[(1'h1):(1'h0)];
              reg45 <= ($unsigned($unsigned((wire0 ? reg43 : reg44))) ?
                  {wire3} : wire8);
            end
          else
            begin
              reg44 <= {(8'ha6)};
              reg45 <= (reg10[(2'h2):(1'h1)] >>> {reg45[(2'h3):(1'h0)]});
              reg46 <= (({((8'h9f) <<< wire6)} ?
                  $signed((wire3 ^~ reg5)) : {$signed(wire6)}) * $unsigned($unsigned({reg11})));
            end
        end
      reg47 <= {($signed((reg44 <= wire2)) + (~((8'h9f) ^ reg12)))};
      reg48 <= wire1;
    end
  assign wire49 = (((+reg4[(3'h6):(3'h6)]) * (~$unsigned(reg46))) ?
                      wire7 : ({(wire41 ? reg46 : reg11)} ?
                          (~|((8'ha5) && reg12)) : wire3));
  assign wire50 = $unsigned({wire8});
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module14  (y, clk, wire18, wire17, wire16, wire15);
  output wire [(32'h3b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire18;
  input wire signed [(4'ha):(1'h0)] wire17;
  input wire signed [(4'ha):(1'h0)] wire16;
  input wire [(3'h4):(1'h0)] wire15;
  wire signed [(2'h2):(1'h0)] wire40;
  wire [(4'hb):(1'h0)] wire39;
  wire signed [(3'h4):(1'h0)] wire38;
  wire [(4'h8):(1'h0)] wire37;
  wire [(4'h9):(1'h0)] wire36;
  wire signed [(3'h4):(1'h0)] wire34;
  wire signed [(4'ha):(1'h0)] wire20;
  wire [(4'ha):(1'h0)] wire19;
  assign y = {wire40,
                 wire39,
                 wire38,
                 wire37,
                 wire36,
                 wire34,
                 wire20,
                 wire19,
                 (1'h0)};
  assign wire19 = wire18;
  assign wire20 = ((!(-(~wire15))) ?
                      ((wire16 ? wire17[(4'h9):(1'h1)] : (8'h9c)) ?
                          {$signed(wire17)} : (|(wire16 ?
                              wire16 : wire16))) : $signed(wire19[(4'ha):(3'h6)]));
  module21 #() modinst35 (.clk(clk), .wire23(wire20), .wire25(wire18), .y(wire34), .wire22(wire15), .wire24(wire16));
  assign wire36 = (~&{$signed((!wire16))});
  assign wire37 = wire17;
  assign wire38 = wire34[(3'h4):(1'h1)];
  assign wire39 = {wire34[(2'h3):(1'h0)]};
  assign wire40 = (wire38[(2'h2):(1'h0)] ?
                      (|(~|(~&wire38))) : (!$signed($signed(wire34))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module21
#(parameter param33 = ((-(~((8'hac) > (8'ha5)))) ? (8'ha5) : (!(8'ha2))))
(y, clk, wire25, wire24, wire23, wire22);
  output wire [(32'h37):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire25;
  input wire [(3'h4):(1'h0)] wire24;
  input wire signed [(2'h3):(1'h0)] wire23;
  input wire [(2'h3):(1'h0)] wire22;
  wire signed [(3'h5):(1'h0)] wire32;
  wire signed [(4'h9):(1'h0)] wire27;
  wire signed [(4'hb):(1'h0)] wire26;
  reg [(4'hb):(1'h0)] reg31 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg30 = (1'h0);
  reg [(2'h2):(1'h0)] reg29 = (1'h0);
  reg [(3'h5):(1'h0)] reg28 = (1'h0);
  assign y = {wire32, wire27, wire26, reg31, reg30, reg29, reg28, (1'h0)};
  assign wire26 = $unsigned($unsigned({(8'hac)}));
  assign wire27 = (wire24 ?
                      $unsigned({(~^(8'hb0))}) : $signed($signed((wire26 ?
                          wire22 : wire23))));
  always
    @(posedge clk) begin
      reg28 <= {wire22};
      reg29 <= wire22;
    end
  always
    @(posedge clk) begin
      reg30 <= ((-{(reg29 <<< wire23)}) > wire24);
      reg31 <= $signed((+((reg30 ? reg28 : reg29) >> (wire26 ?
          wire25 : reg28))));
    end
  assign wire32 = wire27[(2'h2):(1'h1)];
endmodule