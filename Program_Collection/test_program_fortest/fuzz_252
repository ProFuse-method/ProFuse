(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'hb0):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire3;
  input wire [(3'h5):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire0;
  wire signed [(4'h9):(1'h0)] wire52;
  wire [(2'h3):(1'h0)] wire51;
  wire [(3'h7):(1'h0)] wire50;
  wire signed [(4'ha):(1'h0)] wire49;
  wire signed [(2'h3):(1'h0)] wire45;
  wire [(2'h3):(1'h0)] wire43;
  wire signed [(4'h8):(1'h0)] wire21;
  wire [(4'h9):(1'h0)] wire10;
  reg signed [(4'ha):(1'h0)] reg48 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg47 = (1'h0);
  reg [(4'ha):(1'h0)] reg46 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg20 = (1'h0);
  reg [(3'h5):(1'h0)] reg19 = (1'h0);
  reg [(3'h7):(1'h0)] reg18 = (1'h0);
  reg [(3'h7):(1'h0)] reg17 = (1'h0);
  reg [(2'h2):(1'h0)] reg16 = (1'h0);
  reg [(4'hb):(1'h0)] reg15 = (1'h0);
  reg [(4'ha):(1'h0)] reg14 = (1'h0);
  reg [(3'h4):(1'h0)] reg13 = (1'h0);
  reg [(4'h9):(1'h0)] reg12 = (1'h0);
  reg [(2'h2):(1'h0)] reg11 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg9 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg6 = (1'h0);
  reg [(3'h5):(1'h0)] reg5 = (1'h0);
  reg [(4'ha):(1'h0)] reg4 = (1'h0);
  assign y = {wire52,
                 wire51,
                 wire50,
                 wire49,
                 wire45,
                 wire43,
                 wire21,
                 wire10,
                 reg48,
                 reg47,
                 reg46,
                 reg20,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= ((({wire3} || $unsigned((8'ha6))) ?
              ((~wire0) ?
                  (wire3 ?
                      (8'ha0) : wire3) : (~&wire2)) : wire1[(3'h4):(2'h2)]) ?
          ($unsigned({wire1}) + wire0[(2'h3):(1'h1)]) : {wire1});
      reg5 <= $unsigned(reg4);
      if ((^wire2))
        begin
          reg6 <= wire1[(3'h5):(3'h4)];
          if ($unsigned((|($unsigned(reg6) ?
              (wire3 ~^ reg4) : $signed(wire1)))))
            begin
              reg7 <= ((^$signed($signed(wire1))) ?
                  ($signed($unsigned(wire2)) && reg5) : wire3[(3'h4):(1'h1)]);
            end
          else
            begin
              reg7 <= reg6[(2'h3):(1'h1)];
              reg8 <= ($unsigned(reg5) & $signed((8'ha9)));
            end
          reg9 <= reg5;
        end
      else
        begin
          reg6 <= wire0[(1'h1):(1'h0)];
          if (reg4)
            begin
              reg7 <= (^((reg4 ? (~|(8'ha7)) : $signed(wire1)) | reg6));
            end
          else
            begin
              reg7 <= wire2;
              reg8 <= (!reg9[(1'h0):(1'h0)]);
            end
        end
    end
  assign wire10 = wire1;
  always
    @(posedge clk) begin
      if (wire0[(1'h0):(1'h0)])
        begin
          reg11 <= ((($unsigned(wire1) ?
              (~^reg6) : reg5[(1'h0):(1'h0)]) == $signed(((8'h9d) ?
              reg6 : wire1))) << reg6);
          reg12 <= ($signed(((|wire2) >> reg6)) ?
              $unsigned(reg6[(3'h5):(3'h4)]) : wire0[(1'h1):(1'h1)]);
          reg13 <= ((reg4[(4'h9):(2'h2)] ?
                  wire3[(2'h3):(2'h2)] : $signed(reg8)) ?
              ($signed((+wire0)) ?
                  ($unsigned(reg5) ?
                      (wire0 >= reg4) : (reg11 ?
                          reg7 : wire2)) : {$signed(reg8)}) : reg6);
        end
      else
        begin
          reg11 <= {wire0};
          if ((({$unsigned(reg4)} ^ $signed({wire0})) ?
              reg11[(1'h1):(1'h1)] : reg9[(1'h1):(1'h1)]))
            begin
              reg12 <= $unsigned((8'ha9));
              reg13 <= (^~((8'hac) << $signed($unsigned(wire10))));
              reg14 <= wire10;
            end
          else
            begin
              reg12 <= $signed($unsigned((-$unsigned(wire0))));
              reg13 <= reg13;
            end
        end
      if ($unsigned(({$unsigned(reg9)} ?
          {$signed((8'ha3))} : reg11[(1'h0):(1'h0)])))
        begin
          reg15 <= (-(+reg7[(3'h4):(1'h0)]));
        end
      else
        begin
          if ($unsigned((-$unsigned({reg12}))))
            begin
              reg15 <= reg9[(1'h0):(1'h0)];
            end
          else
            begin
              reg15 <= reg4[(3'h5):(1'h0)];
              reg16 <= {($signed(reg12[(3'h4):(3'h4)]) ?
                      (8'ha0) : ((~^wire3) < $signed(reg15)))};
            end
          if (wire2[(2'h3):(2'h2)])
            begin
              reg17 <= reg9[(1'h0):(1'h0)];
              reg18 <= {$signed((reg12 | reg6[(3'h5):(3'h5)]))};
              reg19 <= (~|((reg17[(2'h3):(1'h1)] ? {reg13} : (~^(8'ha1))) ?
                  (8'hac) : $unsigned($unsigned(wire1))));
            end
          else
            begin
              reg17 <= reg18;
            end
          reg20 <= ((8'h9d) ?
              (!(^~$signed((8'h9e)))) : (((+reg11) ?
                      ((8'ha0) * wire2) : wire0[(2'h2):(1'h0)]) ?
                  $signed($unsigned((8'ha4))) : reg5));
        end
    end
  assign wire21 = {(^~(reg13[(1'h1):(1'h0)] | $signed(reg20)))};
  module22 #() modinst44 (.y(wire43), .wire26(reg8), .clk(clk), .wire23(wire21), .wire25(reg12), .wire24(wire0));
  assign wire45 = wire43[(1'h0):(1'h0)];
  always
    @(posedge clk) begin
      reg46 <= (reg6 - wire2[(2'h2):(1'h1)]);
    end
  always
    @(posedge clk) begin
      reg47 <= wire10[(3'h7):(3'h6)];
      reg48 <= ({$unsigned((wire45 ? wire1 : reg8))} ?
          wire3[(1'h1):(1'h1)] : $unsigned(((8'hac) >> reg9[(1'h1):(1'h1)])));
    end
  assign wire49 = $unsigned((~(reg17[(3'h6):(2'h3)] != reg46[(3'h7):(1'h1)])));
  assign wire50 = wire0[(1'h1):(1'h0)];
  assign wire51 = ((wire49[(1'h0):(1'h0)] ?
                      $unsigned({reg47}) : $unsigned($signed(wire3))) || $unsigned($signed((&reg7))));
  assign wire52 = $unsigned($signed(({wire1} ? (reg16 | wire3) : reg47)));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module22
#(parameter param42 = ((8'haa) << {(+(+(8'haf)))}))
(y, clk, wire26, wire25, wire24, wire23);
  output wire [(32'h56):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire26;
  input wire signed [(3'h7):(1'h0)] wire25;
  input wire [(4'hb):(1'h0)] wire24;
  input wire [(4'h8):(1'h0)] wire23;
  wire [(2'h2):(1'h0)] wire41;
  wire [(4'ha):(1'h0)] wire37;
  wire [(3'h5):(1'h0)] wire36;
  wire signed [(3'h5):(1'h0)] wire35;
  reg [(2'h3):(1'h0)] reg40 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg39 = (1'h0);
  reg [(3'h6):(1'h0)] reg38 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg34 = (1'h0);
  reg [(3'h6):(1'h0)] reg33 = (1'h0);
  reg [(4'h8):(1'h0)] reg32 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg31 = (1'h0);
  reg [(2'h2):(1'h0)] reg30 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg29 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg28 = (1'h0);
  reg [(3'h7):(1'h0)] reg27 = (1'h0);
  assign y = {wire41,
                 wire37,
                 wire36,
                 wire35,
                 reg40,
                 reg39,
                 reg38,
                 reg34,
                 reg33,
                 reg32,
                 reg31,
                 reg30,
                 reg29,
                 reg28,
                 reg27,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg27 <= $unsigned(wire24);
      reg28 <= $signed(reg27);
      if ((($unsigned($unsigned(wire24)) ?
          ((reg28 >= wire24) ? $unsigned(wire24) : (!reg27)) : ((-wire25) ?
              (wire24 ?
                  wire26 : wire23) : $unsigned(reg27))) < (+{reg27[(3'h5):(3'h4)]})))
        begin
          reg29 <= ((wire26 ?
              ($unsigned(reg27) ? wire24[(3'h6):(1'h0)] : reg28) : (reg27 ?
                  wire23[(4'h8):(1'h1)] : (8'haf))) <= wire26);
          if (reg27[(2'h3):(1'h1)])
            begin
              reg30 <= reg29[(4'h8):(3'h4)];
              reg31 <= $unsigned($unsigned(reg29));
            end
          else
            begin
              reg30 <= (^~$signed($unsigned(wire23)));
            end
          if (wire23[(1'h0):(1'h0)])
            begin
              reg32 <= ((~|{(reg27 <= wire24)}) < $unsigned((^~reg27)));
              reg33 <= $unsigned($unsigned({reg29[(1'h0):(1'h0)]}));
              reg34 <= ($signed($unsigned(reg31)) < $unsigned($unsigned((reg31 ?
                  reg29 : wire26))));
            end
          else
            begin
              reg32 <= ((reg27[(1'h0):(1'h0)] + ((8'hab) | (wire26 ?
                  reg34 : reg27))) ^~ $signed($signed(wire24[(4'ha):(4'ha)])));
            end
        end
      else
        begin
          reg29 <= (+(reg31 ?
              $unsigned(wire24[(3'h7):(3'h7)]) : wire24[(4'h9):(2'h3)]));
          if (wire24[(1'h1):(1'h1)])
            begin
              reg30 <= reg27;
            end
          else
            begin
              reg30 <= (((8'ha8) + $unsigned((reg28 ?
                  (8'ha7) : wire24))) == (~|((~|reg32) ?
                  (reg34 >> reg32) : wire25)));
              reg31 <= $signed(($unsigned((reg29 == reg34)) > $unsigned(reg27)));
            end
          if (wire26[(1'h1):(1'h1)])
            begin
              reg32 <= (-((reg30 ? (wire24 || reg31) : (~|reg33)) ?
                  (+{reg27}) : $unsigned((^wire25))));
            end
          else
            begin
              reg32 <= (wire23 ?
                  $unsigned(($unsigned(reg27) < (reg31 && reg30))) : wire25);
              reg33 <= ($unsigned(wire25) << $unsigned(((reg28 + wire24) & reg29)));
              reg34 <= (reg33 < reg30[(1'h0):(1'h0)]);
            end
        end
    end
  assign wire35 = {(wire26 ^ $signed($signed(reg29)))};
  assign wire36 = reg31;
  assign wire37 = wire25;
  always
    @(posedge clk) begin
      reg38 <= reg29;
      reg39 <= reg38[(3'h4):(1'h1)];
      reg40 <= $unsigned(wire25[(1'h0):(1'h0)]);
    end
  assign wire41 = ($signed({(reg30 ? reg31 : (8'haf))}) & ((~^$signed(reg30)) ?
                      wire25[(3'h4):(2'h2)] : (+$unsigned(wire37))));
endmodule