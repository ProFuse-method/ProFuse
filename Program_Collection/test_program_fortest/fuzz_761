(* use_dsp48="no" *) (* use_dsp="no" *) module top #(parameter param57 = (8'h9c)) (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h3c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire3;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire56;
  wire signed [(2'h2):(1'h0)] wire55;
  wire signed [(4'ha):(1'h0)] wire49;
  wire signed [(4'ha):(1'h0)] wire48;
  wire signed [(3'h7):(1'h0)] wire47;
  wire signed [(4'ha):(1'h0)] wire45;
  reg signed [(2'h2):(1'h0)] reg54 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg53 = (1'h0);
  reg [(3'h5):(1'h0)] reg52 = (1'h0);
  reg [(3'h5):(1'h0)] reg51 = (1'h0);
  assign y = {wire56,
                 wire55,
                 wire49,
                 wire48,
                 wire47,
                 wire45,
                 reg54,
                 reg53,
                 reg52,
                 reg51,
                 (1'h0)};
  module4 #() modinst46 (wire45, clk, wire3, wire0, wire2, wire1);
  assign wire47 = wire3;
  assign wire48 = wire2[(4'h9):(3'h7)];
  module25 #() modinst50 (wire49, clk, wire45, wire48, wire1, wire3);
  always
    @(posedge clk) begin
      if ($signed(((^~wire47) ?
          (~^(wire48 > (8'ha8))) : $unsigned((wire0 == wire49)))))
        begin
          reg51 <= $signed((~{(wire0 ? wire45 : wire2)}));
          if ((-wire45))
            begin
              reg52 <= $signed(($unsigned(wire0[(3'h7):(2'h3)]) * ($signed((8'haf)) * $signed(wire48))));
              reg53 <= reg52;
            end
          else
            begin
              reg52 <= (((+$signed(reg53)) ?
                      ((!wire49) == {reg52}) : (|$unsigned(wire1))) ?
                  reg51 : $signed((~&reg53[(1'h1):(1'h1)])));
              reg53 <= $signed($unsigned(reg52));
            end
          reg54 <= ($signed($unsigned($signed(wire2))) ?
              $signed(wire49) : (~^(wire3 >>> $signed(reg53))));
        end
      else
        begin
          reg51 <= (&(!wire3));
          reg52 <= (^(wire2[(2'h3):(1'h0)] - $signed({reg51})));
        end
    end
  assign wire55 = (^~reg51[(2'h2):(1'h0)]);
  assign wire56 = wire1[(1'h1):(1'h1)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h24):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire8;
  input wire [(4'ha):(1'h0)] wire7;
  input wire [(4'ha):(1'h0)] wire6;
  input wire [(4'ha):(1'h0)] wire5;
  wire [(2'h3):(1'h0)] wire43;
  wire signed [(3'h4):(1'h0)] wire42;
  wire [(4'h8):(1'h0)] wire41;
  wire signed [(4'ha):(1'h0)] wire39;
  wire signed [(4'ha):(1'h0)] wire23;
  assign y = {wire43, wire42, wire41, wire39, wire23, (1'h0)};
  module9 #() modinst24 (.wire11(wire8), .wire12(wire6), .y(wire23), .clk(clk), .wire13(wire7), .wire10(wire5));
  module25 #() modinst40 (wire39, clk, wire23, wire5, wire6, wire8);
  assign wire41 = wire6[(3'h7):(1'h1)];
  assign wire42 = {((+$unsigned((8'h9c))) ?
                          $signed((&wire41)) : $signed(wire8))};
  module9 #() modinst44 (wire43, clk, wire5, wire39, wire42, wire23);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module25  (y, clk, wire29, wire28, wire27, wire26);
  output wire [(32'h39):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire29;
  input wire signed [(4'h9):(1'h0)] wire28;
  input wire [(4'h9):(1'h0)] wire27;
  input wire [(3'h4):(1'h0)] wire26;
  wire [(4'h9):(1'h0)] wire38;
  wire signed [(3'h7):(1'h0)] wire37;
  wire [(4'h9):(1'h0)] wire33;
  wire [(3'h4):(1'h0)] wire32;
  wire [(2'h3):(1'h0)] wire31;
  wire signed [(3'h4):(1'h0)] wire30;
  reg signed [(3'h6):(1'h0)] reg36 = (1'h0);
  reg [(3'h5):(1'h0)] reg35 = (1'h0);
  reg [(4'h9):(1'h0)] reg34 = (1'h0);
  assign y = {wire38,
                 wire37,
                 wire33,
                 wire32,
                 wire31,
                 wire30,
                 reg36,
                 reg35,
                 reg34,
                 (1'h0)};
  assign wire30 = (wire26 ? $unsigned(wire28[(3'h6):(3'h6)]) : wire26);
  assign wire31 = wire29;
  assign wire32 = (+((~$signed(wire30)) > (8'hae)));
  assign wire33 = $signed((wire27 << wire31[(2'h2):(1'h1)]));
  always
    @(posedge clk) begin
      reg34 <= {(wire30[(2'h2):(1'h1)] ?
              ($unsigned(wire32) ?
                  {wire26} : $unsigned(wire32)) : ({(8'ha0)} << ((8'hb0) ?
                  wire26 : (8'h9d))))};
    end
  always
    @(posedge clk) begin
      reg35 <= wire32;
      reg36 <= ($unsigned(wire29[(1'h1):(1'h0)]) ? (|wire30) : (^wire31));
    end
  assign wire37 = $signed($unsigned((-(wire32 ? wire26 : wire33))));
  assign wire38 = ($signed(wire30[(2'h2):(2'h2)]) ?
                      $signed($unsigned(reg36[(3'h6):(2'h2)])) : ((~(wire26 > wire31)) ~^ $signed((reg36 >>> wire32))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9
#(parameter param22 = (~&(8'hac)))
(y, clk, wire13, wire12, wire11, wire10);
  output wire [(32'h3a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire13;
  input wire [(4'ha):(1'h0)] wire12;
  input wire signed [(3'h4):(1'h0)] wire11;
  input wire [(4'ha):(1'h0)] wire10;
  wire signed [(4'hb):(1'h0)] wire21;
  wire signed [(3'h5):(1'h0)] wire20;
  wire [(4'ha):(1'h0)] wire19;
  wire signed [(4'h8):(1'h0)] wire18;
  reg [(2'h3):(1'h0)] reg17 = (1'h0);
  reg [(3'h7):(1'h0)] reg16 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg14 = (1'h0);
  assign y = {wire21,
                 wire20,
                 wire19,
                 wire18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (wire13)
        begin
          reg14 <= wire10;
          reg15 <= (~|{$signed(reg14)});
        end
      else
        begin
          if (($signed($signed((-(8'ha0)))) && reg14[(3'h7):(3'h7)]))
            begin
              reg14 <= (+reg14);
              reg15 <= ($unsigned(wire10[(1'h0):(1'h0)]) ?
                  ((|(~reg14)) == $unsigned({wire13})) : wire13);
              reg16 <= reg14[(2'h3):(2'h2)];
            end
          else
            begin
              reg14 <= $signed(wire13[(2'h3):(1'h0)]);
            end
          reg17 <= ($signed({(reg14 ^ wire10)}) <<< (($signed(reg16) ?
                  wire11 : $signed((8'hae))) ?
              ($signed(wire13) ?
                  (wire12 ? reg16 : reg16) : (reg15 <= wire11)) : ((+wire12) ?
                  {reg15} : (wire11 ^ reg15))));
        end
    end
  assign wire18 = $signed(({reg14[(2'h3):(2'h3)]} > (~|((8'ha0) ?
                      reg17 : reg15))));
  assign wire19 = $unsigned(reg14[(2'h3):(1'h1)]);
  assign wire20 = wire10[(3'h6):(1'h1)];
  assign wire21 = ({(((8'haa) ? wire10 : wire20) ?
                              wire18[(3'h7):(3'h7)] : $signed(wire13))} ?
                      ({{wire20}} ^~ (wire12 < (-reg16))) : $unsigned((8'ha5)));
endmodule