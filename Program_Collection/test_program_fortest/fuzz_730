(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h57):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire0;
  input wire [(3'h7):(1'h0)] wire1;
  input wire [(4'ha):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire3;
  wire signed [(4'h8):(1'h0)] wire51;
  wire [(4'hb):(1'h0)] wire50;
  wire signed [(4'ha):(1'h0)] wire47;
  wire [(4'hb):(1'h0)] wire4;
  wire signed [(3'h5):(1'h0)] wire45;
  reg signed [(4'h8):(1'h0)] reg49 = (1'h0);
  reg [(2'h3):(1'h0)] reg48 = (1'h0);
  reg [(2'h2):(1'h0)] reg5 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg6 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg7 = (1'h0);
  reg [(3'h7):(1'h0)] reg8 = (1'h0);
  assign y = {wire51,
                 wire50,
                 wire47,
                 wire4,
                 wire45,
                 reg49,
                 reg48,
                 reg5,
                 reg6,
                 reg7,
                 reg8,
                 (1'h0)};
  assign wire4 = ((((wire1 ? wire0 : wire2) + {(8'ha6)}) ?
                     wire1 : wire2[(4'ha):(4'h8)]) << ({$unsigned(wire1)} ?
                     wire1[(3'h6):(3'h6)] : ($unsigned(wire3) ?
                         $unsigned(wire1) : wire0)));
  always
    @(posedge clk) begin
      if ({{wire4}})
        begin
          if ({(^((8'ha8) >= (wire0 ? wire3 : (8'hae))))})
            begin
              reg5 <= wire3[(4'h9):(3'h5)];
              reg6 <= $signed((~&$unsigned($signed((8'ha5)))));
            end
          else
            begin
              reg5 <= wire4[(4'h8):(2'h3)];
            end
        end
      else
        begin
          if ($unsigned($signed($signed(wire1))))
            begin
              reg5 <= (reg5[(1'h1):(1'h1)] ?
                  wire3 : ($unsigned($signed(wire2)) != reg6[(4'hb):(4'ha)]));
            end
          else
            begin
              reg5 <= ($unsigned($signed($unsigned(reg6))) * (^~$unsigned(reg6[(4'ha):(1'h1)])));
              reg6 <= (~|(wire0 ? $signed($signed(wire2)) : wire0));
            end
        end
      reg7 <= wire1[(1'h1):(1'h1)];
      reg8 <= $unsigned({reg7[(2'h2):(1'h1)]});
    end
  module9 #() modinst46 (.wire12(wire0), .clk(clk), .wire10(reg7), .y(wire45), .wire13(reg6), .wire11(reg8));
  assign wire47 = (&reg5[(2'h2):(1'h0)]);
  always
    @(posedge clk) begin
      reg48 <= (!(wire45[(3'h4):(2'h3)] ?
          (wire1[(1'h1):(1'h0)] ? $signed(wire2) : reg6) : {(8'ha4)}));
      reg49 <= wire0;
    end
  assign wire50 = reg6;
  assign wire51 = ($unsigned((^~reg6[(3'h7):(1'h0)])) >> ({reg8[(3'h5):(1'h0)]} ?
                      $signed((wire2 ? wire45 : (8'h9f))) : wire50));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9
#(parameter param44 = {(~|((^~(8'ha7)) ? ((8'haf) ? (8'hb0) : (8'hae)) : ((8'ha8) ? (8'h9c) : (8'ha5))))})
(y, clk, wire13, wire12, wire11, wire10);
  output wire [(32'h28):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire13;
  input wire signed [(4'h9):(1'h0)] wire12;
  input wire signed [(3'h7):(1'h0)] wire11;
  input wire signed [(4'ha):(1'h0)] wire10;
  wire signed [(3'h6):(1'h0)] wire43;
  wire signed [(4'h8):(1'h0)] wire41;
  wire signed [(2'h2):(1'h0)] wire28;
  wire [(4'ha):(1'h0)] wire27;
  wire signed [(2'h2):(1'h0)] wire25;
  wire signed [(4'hb):(1'h0)] wire14;
  assign y = {wire43, wire41, wire28, wire27, wire25, wire14, (1'h0)};
  assign wire14 = (+$unsigned((&$signed(wire11))));
  module15 #() modinst26 (wire25, clk, wire12, wire11, wire14, wire13);
  assign wire27 = ((!((wire10 ? wire14 : wire12) ^~ wire14)) - (8'hab));
  assign wire28 = (^~(~^(~&(^wire10))));
  module29 #() modinst42 (wire41, clk, wire10, wire12, wire11, wire14);
  assign wire43 = wire12;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module29  (y, clk, wire33, wire32, wire31, wire30);
  output wire [(32'h29):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire33;
  input wire signed [(2'h3):(1'h0)] wire32;
  input wire signed [(3'h7):(1'h0)] wire31;
  input wire [(4'hb):(1'h0)] wire30;
  wire [(3'h7):(1'h0)] wire36;
  wire [(3'h6):(1'h0)] wire35;
  wire [(3'h5):(1'h0)] wire34;
  reg signed [(3'h5):(1'h0)] reg40 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg39 = (1'h0);
  reg [(2'h2):(1'h0)] reg38 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg37 = (1'h0);
  assign y = {wire36, wire35, wire34, reg40, reg39, reg38, reg37, (1'h0)};
  assign wire34 = (+$unsigned($unsigned($signed(wire30))));
  assign wire35 = (wire33[(3'h7):(1'h1)] || ((wire33 & {(8'h9f)}) ~^ (8'hb0)));
  assign wire36 = $signed(wire32);
  always
    @(posedge clk) begin
      reg37 <= $unsigned(($signed($unsigned((8'ha7))) ?
          ((+wire33) < $signed(wire32)) : wire35));
    end
  always
    @(posedge clk) begin
      if ((wire32 ^~ $signed($unsigned({wire35}))))
        begin
          reg38 <= (-{{((8'had) < reg37)}});
          reg39 <= wire33;
        end
      else
        begin
          reg38 <= wire31[(2'h2):(1'h0)];
          reg39 <= wire36[(3'h7):(3'h5)];
          reg40 <= {{(~|$unsigned(wire35))}};
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15  (y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h1e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire19;
  input wire signed [(3'h5):(1'h0)] wire18;
  input wire signed [(4'h9):(1'h0)] wire17;
  input wire signed [(3'h7):(1'h0)] wire16;
  wire [(3'h6):(1'h0)] wire24;
  wire [(3'h7):(1'h0)] wire23;
  wire [(2'h2):(1'h0)] wire22;
  wire [(3'h6):(1'h0)] wire21;
  wire signed [(4'h8):(1'h0)] wire20;
  assign y = {wire24, wire23, wire22, wire21, wire20, (1'h0)};
  assign wire20 = (wire16 <= (8'h9f));
  assign wire21 = (((~|wire20) ? $signed((~&wire17)) : wire20) ?
                      wire17[(3'h6):(3'h6)] : $signed($unsigned((wire19 ^~ wire18))));
  assign wire22 = (~|{({wire17} & $signed(wire16))});
  assign wire23 = (|((8'ha0) << (~^(wire20 >> wire22))));
  assign wire24 = wire22[(1'h1):(1'h1)];
endmodule