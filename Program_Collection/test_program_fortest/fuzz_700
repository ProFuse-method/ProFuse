(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param43 = (~&(^~(~((8'haf) + (8'ha9))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'hb5):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire [(4'h8):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire0;
  wire [(4'h8):(1'h0)] wire35;
  wire signed [(3'h5):(1'h0)] wire17;
  wire signed [(2'h2):(1'h0)] wire16;
  wire signed [(3'h5):(1'h0)] wire15;
  wire [(3'h4):(1'h0)] wire13;
  reg [(4'h8):(1'h0)] reg42 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg41 = (1'h0);
  reg [(4'ha):(1'h0)] reg40 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg39 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg38 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg37 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg36 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg34 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg33 = (1'h0);
  reg [(2'h3):(1'h0)] reg32 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg31 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg30 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg29 = (1'h0);
  reg [(4'h9):(1'h0)] reg28 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg27 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg26 = (1'h0);
  reg [(3'h4):(1'h0)] reg25 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg24 = (1'h0);
  reg [(3'h5):(1'h0)] reg23 = (1'h0);
  reg [(2'h2):(1'h0)] reg22 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg21 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg20 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg19 = (1'h0);
  reg [(3'h5):(1'h0)] reg18 = (1'h0);
  assign y = {wire35,
                 wire17,
                 wire16,
                 wire15,
                 wire13,
                 reg42,
                 reg41,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 reg36,
                 reg34,
                 reg33,
                 reg32,
                 reg31,
                 reg30,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 reg20,
                 reg19,
                 reg18,
                 (1'h0)};
  module4 #() modinst14 (wire13, clk, wire2, wire1, wire3, wire0);
  assign wire15 = {(!$signed((^~(8'ha4))))};
  assign wire16 = $signed($unsigned($signed((wire2 ? wire3 : wire0))));
  assign wire17 = $signed((((+wire2) ^~ (wire0 ?
                      wire1 : wire16)) << $signed((wire2 <<< wire15))));
  always
    @(posedge clk) begin
      reg18 <= ((({wire0} ? $unsigned(wire2) : (~|wire0)) | (((8'hb0) ?
              wire13 : wire15) ?
          wire15 : (wire15 <= wire3))) >= wire1[(3'h7):(3'h5)]);
      reg19 <= $signed(wire17);
      reg20 <= ((~^((-(8'ha7)) ?
          $unsigned(wire16) : wire17[(2'h2):(1'h1)])) + wire17[(3'h5):(3'h5)]);
    end
  always
    @(posedge clk) begin
      if ({(wire13 ?
              ((wire0 ? wire15 : reg18) ? (!wire3) : $signed(reg20)) : (wire0 ?
                  (wire2 ~^ wire0) : (~wire15)))})
        begin
          reg21 <= wire2;
          reg22 <= wire0[(4'hb):(4'h9)];
          reg23 <= wire15[(2'h3):(1'h0)];
        end
      else
        begin
          reg21 <= (~|$signed(reg21[(2'h3):(2'h3)]));
        end
      if ((((reg19 && (reg23 ? reg21 : wire1)) ?
              $unsigned((wire15 && reg19)) : (~&reg23)) ?
          (+((wire17 ? wire17 : (8'hae)) ?
              wire0 : {wire16})) : ((~^((8'h9e) >> wire1)) != {(wire17 ?
                  reg19 : reg21)})))
        begin
          if ($signed(({$signed(wire13)} ^ $signed((8'ha6)))))
            begin
              reg24 <= wire3;
              reg25 <= wire0;
            end
          else
            begin
              reg24 <= (~wire1[(1'h1):(1'h0)]);
              reg25 <= $unsigned(wire15);
              reg26 <= $unsigned(($signed(wire0) >= wire13));
            end
          if (($signed(((|wire17) || wire1)) ?
              $signed(($signed(wire16) >> $unsigned(reg25))) : ((wire3[(1'h0):(1'h0)] ^~ $unsigned(reg18)) ?
                  $signed((reg23 ? (8'ha8) : wire17)) : reg19)))
            begin
              reg27 <= (reg22 ^ wire15);
              reg28 <= $unsigned(($signed((reg18 >> wire2)) > wire16));
              reg29 <= {($signed((!(8'hac))) ?
                      ((^wire13) >> (wire16 && reg26)) : ((reg19 - reg28) ~^ reg19))};
            end
          else
            begin
              reg27 <= wire1;
            end
        end
      else
        begin
          reg24 <= wire16;
          reg25 <= {((^~(reg27 - reg21)) ?
                  $signed((reg23 != (8'h9c))) : wire3[(3'h4):(1'h0)])};
          reg26 <= ({(^~reg22)} ^~ (((reg22 >= wire16) ? (+reg27) : reg28) ?
              reg23 : {(reg28 ? wire2 : wire13)}));
        end
      reg30 <= (wire16[(1'h0):(1'h0)] ?
          $signed($signed((wire17 ? reg20 : (8'h9e)))) : ($signed((reg23 ?
                  wire1 : reg28)) ?
              {reg24} : wire17[(1'h1):(1'h1)]));
    end
  always
    @(posedge clk) begin
      reg31 <= reg27[(3'h7):(2'h2)];
      reg32 <= {reg25};
      if (($unsigned(wire3[(2'h3):(1'h0)]) || (&$unsigned(wire2))))
        begin
          if ($unsigned((+(!(reg28 ? wire1 : (8'h9d))))))
            begin
              reg33 <= reg28;
              reg34 <= (-$unsigned(((wire13 ? reg18 : reg28) ?
                  $signed(reg22) : wire13[(2'h3):(2'h3)])));
            end
          else
            begin
              reg33 <= $unsigned((^wire3[(3'h7):(1'h0)]));
              reg34 <= {(wire3[(1'h1):(1'h1)] ?
                      $unsigned(reg21) : wire17[(1'h0):(1'h0)])};
            end
        end
      else
        begin
          if ((reg20 << (8'had)))
            begin
              reg33 <= $unsigned(reg31);
              reg34 <= $signed((8'had));
            end
          else
            begin
              reg33 <= wire2;
            end
        end
    end
  assign wire35 = {reg23[(3'h5):(3'h4)]};
  always
    @(posedge clk) begin
      if ((|(($unsigned(reg18) ? wire17 : (~^wire1)) ?
          $unsigned($unsigned(reg32)) : wire3[(1'h1):(1'h1)])))
        begin
          reg36 <= $unsigned(reg33[(1'h1):(1'h0)]);
          reg37 <= reg20[(3'h7):(3'h6)];
          reg38 <= ((((^~wire3) == $unsigned(wire13)) ?
              (~|reg19) : (reg25 >= wire35[(3'h7):(2'h2)])) >= wire2);
        end
      else
        begin
          if ($unsigned({(8'hac)}))
            begin
              reg36 <= (reg23 ?
                  (^$signed((reg21 > reg30))) : (reg23[(1'h1):(1'h0)] << (+$signed(wire1))));
            end
          else
            begin
              reg36 <= $signed($signed(reg37));
            end
          reg37 <= (reg33 ?
              (wire16[(1'h1):(1'h0)] ?
                  $signed(reg18[(3'h5):(3'h5)]) : ({reg30} ^ (~reg20))) : (((!(8'ha6)) & $signed((8'h9d))) <<< $signed((+reg32))));
          reg38 <= $signed({((&reg28) ? {reg32} : {reg30})});
        end
      if ((reg32[(2'h3):(2'h3)] >>> (-wire3[(3'h6):(3'h4)])))
        begin
          reg39 <= (($unsigned((8'hb0)) || $signed({wire3})) + wire17[(3'h5):(3'h4)]);
          reg40 <= (~|{reg29[(3'h4):(1'h0)]});
          reg41 <= reg28;
        end
      else
        begin
          reg39 <= reg33;
        end
      reg42 <= reg25[(3'h4):(2'h3)];
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h2a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire8;
  input wire [(4'h8):(1'h0)] wire7;
  input wire signed [(3'h7):(1'h0)] wire6;
  input wire signed [(4'h9):(1'h0)] wire5;
  wire [(4'hb):(1'h0)] wire12;
  wire [(4'ha):(1'h0)] wire11;
  wire signed [(4'hb):(1'h0)] wire10;
  wire [(4'h9):(1'h0)] wire9;
  assign y = {wire12, wire11, wire10, wire9, (1'h0)};
  assign wire9 = (!(wire8[(3'h7):(2'h3)] ?
                     ((wire7 ?
                         wire7 : wire7) + (8'ha3)) : ((~&wire6) > $unsigned(wire6))));
  assign wire10 = {(((~wire5) != wire5) ^~ $signed(wire6))};
  assign wire11 = wire7;
  assign wire12 = ((($signed(wire10) <= $signed(wire10)) ?
                      $signed($unsigned(wire10)) : (wire7 <= {wire10})) >= (^~{wire11}));
endmodule