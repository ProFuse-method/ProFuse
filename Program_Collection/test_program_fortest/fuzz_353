(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param57 = ({(&((8'ha0) * (8'ha3)))} >= (((8'ha2) ^~ (-(8'hb0))) ? {{(8'hae)}} : ({(8'hab)} && ((8'hb0) || (8'ha1))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h9e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire signed [(2'h2):(1'h0)] wire0;
  wire [(3'h7):(1'h0)] wire55;
  wire [(3'h7):(1'h0)] wire53;
  wire [(2'h3):(1'h0)] wire52;
  wire signed [(3'h4):(1'h0)] wire50;
  wire [(4'hb):(1'h0)] wire15;
  wire [(2'h2):(1'h0)] wire5;
  wire signed [(2'h2):(1'h0)] wire4;
  reg [(4'ha):(1'h0)] reg56 = (1'h0);
  reg [(2'h3):(1'h0)] reg21 = (1'h0);
  reg [(4'hb):(1'h0)] reg20 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg19 = (1'h0);
  reg [(4'hb):(1'h0)] reg18 = (1'h0);
  reg [(4'hb):(1'h0)] reg17 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg16 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg14 = (1'h0);
  reg [(3'h7):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg12 = (1'h0);
  reg [(2'h2):(1'h0)] reg11 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg10 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg9 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg7 = (1'h0);
  reg [(3'h7):(1'h0)] reg6 = (1'h0);
  assign y = {wire55,
                 wire53,
                 wire52,
                 wire50,
                 wire15,
                 wire5,
                 wire4,
                 reg56,
                 reg21,
                 reg20,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 (1'h0)};
  assign wire4 = ({(8'haf)} > (((wire3 << wire3) ?
                         (wire3 >= (8'h9f)) : (wire1 ^ wire3)) ?
                     (+wire3) : ((^~(8'ha3)) - wire0)));
  assign wire5 = (|$unsigned($unsigned($signed(wire0))));
  always
    @(posedge clk) begin
      reg6 <= (wire5[(1'h0):(1'h0)] ^~ (wire0 || {((8'h9f) ? wire1 : wire1)}));
      if ($signed((wire5 ? (8'ha5) : $signed((^wire1)))))
        begin
          reg7 <= ($unsigned($signed(wire2)) ?
              (~&$signed($signed(wire0))) : wire1);
          if (wire2)
            begin
              reg8 <= wire3[(3'h6):(2'h2)];
              reg9 <= ((!((wire1 ? wire3 : reg6) ?
                  $signed(wire3) : $signed(wire1))) | wire0);
            end
          else
            begin
              reg8 <= (8'ha5);
            end
          reg10 <= $signed($unsigned(wire1[(2'h3):(1'h0)]));
        end
      else
        begin
          reg7 <= (wire0[(2'h2):(1'h0)] ?
              wire4 : ((wire1 ? wire3 : (|(8'haa))) ~^ wire1[(1'h0):(1'h0)]));
          if (reg10[(1'h1):(1'h1)])
            begin
              reg8 <= wire0[(2'h2):(1'h1)];
              reg9 <= $signed((^~wire2[(2'h2):(2'h2)]));
              reg10 <= (~|(($signed(reg10) ?
                      (reg7 ? reg6 : wire3) : reg7[(3'h7):(2'h3)]) ?
                  $unsigned(wire5[(1'h0):(1'h0)]) : {wire4}));
            end
          else
            begin
              reg8 <= wire1;
              reg9 <= ((wire1 >= $signed({(8'hae)})) || $unsigned($unsigned((+reg10))));
              reg10 <= wire5[(1'h1):(1'h0)];
            end
          if ((&$signed(reg9)))
            begin
              reg11 <= ((^~(+(wire5 * wire2))) ?
                  $unsigned(wire5[(2'h2):(1'h0)]) : (&(reg10[(1'h0):(1'h0)] || {wire2})));
              reg12 <= ((^~(+wire4)) & wire0[(1'h1):(1'h1)]);
            end
          else
            begin
              reg11 <= {$unsigned($signed(reg9))};
              reg12 <= $unsigned((($signed(reg12) ?
                  {wire5} : (|reg10)) < $unsigned((|reg6))));
              reg13 <= (&(~^($signed(wire0) ? reg9 : (reg6 <= wire5))));
            end
        end
      reg14 <= $signed((~^$unsigned(wire4)));
    end
  assign wire15 = wire0[(1'h0):(1'h0)];
  always
    @(posedge clk) begin
      if (reg13[(1'h1):(1'h0)])
        begin
          reg16 <= $unsigned(reg8[(1'h1):(1'h1)]);
        end
      else
        begin
          reg16 <= (8'hb0);
        end
      if ({reg16})
        begin
          reg17 <= (&$signed((8'hb0)));
          if ({$unsigned((^~{reg9}))})
            begin
              reg18 <= (8'hab);
              reg19 <= (reg7 ?
                  $unsigned((((8'ha2) || reg10) ?
                      wire2 : reg9)) : $signed($signed(reg7[(3'h6):(1'h1)])));
              reg20 <= ($signed(((reg14 ^ (8'ha9)) ?
                  (reg6 ? reg6 : reg19) : (reg17 ?
                      reg9 : wire1))) << $signed(reg19));
            end
          else
            begin
              reg18 <= (^wire1);
            end
        end
      else
        begin
          reg17 <= (wire4 ? (~(&(~^wire1))) : $unsigned($signed({wire0})));
        end
      reg21 <= ({(8'ha6)} ?
          $unsigned(reg14[(2'h3):(1'h1)]) : $signed(((~|wire15) * (reg9 ?
              wire3 : reg18))));
    end
  module22 #() modinst51 (.wire26(reg7), .wire23(wire2), .wire25(wire1), .clk(clk), .wire24(reg9), .y(wire50));
  assign wire52 = reg14;
  module32 #() modinst54 (.wire33(reg13), .wire36(reg18), .wire35(reg20), .clk(clk), .wire34(reg12), .y(wire53));
  assign wire55 = (~(((~|reg13) ^~ reg7[(3'h4):(1'h1)]) ?
                      $signed($unsigned(wire2)) : $unsigned(reg16[(1'h1):(1'h0)])));
  always
    @(posedge clk) begin
      reg56 <= $signed({{wire52[(1'h1):(1'h1)]}});
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module22  (y, clk, wire23, wire24, wire25, wire26);
  output wire [(32'h39):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire23;
  input wire [(4'hb):(1'h0)] wire24;
  input wire signed [(2'h3):(1'h0)] wire25;
  input wire [(3'h4):(1'h0)] wire26;
  wire [(3'h5):(1'h0)] wire49;
  wire [(4'h9):(1'h0)] wire48;
  wire signed [(4'h8):(1'h0)] wire27;
  wire signed [(3'h6):(1'h0)] wire31;
  wire signed [(4'h9):(1'h0)] wire45;
  reg [(3'h4):(1'h0)] reg47 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg28 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg29 = (1'h0);
  reg [(3'h4):(1'h0)] reg30 = (1'h0);
  assign y = {wire49,
                 wire48,
                 wire27,
                 wire31,
                 wire45,
                 reg47,
                 reg28,
                 reg29,
                 reg30,
                 (1'h0)};
  assign wire27 = ((wire26 ?
                          (wire25[(1'h1):(1'h0)] == $signed(wire24)) : (wire23[(4'h9):(4'h8)] ?
                              (!wire24) : wire25)) ?
                      (wire26[(1'h0):(1'h0)] || ($unsigned(wire26) + (wire24 ?
                          wire25 : wire26))) : wire25);
  always
    @(posedge clk) begin
      reg28 <= $signed(wire27[(3'h7):(1'h1)]);
      reg29 <= (wire24 ? wire23[(1'h0):(1'h0)] : wire24[(1'h0):(1'h0)]);
      reg30 <= wire27[(3'h4):(1'h1)];
    end
  assign wire31 = $unsigned(wire23);
  module32 #() modinst46 (.y(wire45), .wire35(wire24), .clk(clk), .wire36(wire26), .wire34(wire23), .wire33(reg29));
  always
    @(posedge clk) begin
      reg47 <= (wire45 ?
          ((wire45[(3'h6):(2'h3)] >= reg28[(3'h4):(2'h2)]) >> (wire27 ?
              wire25[(1'h0):(1'h0)] : (^~(8'ha0)))) : $unsigned(wire24));
    end
  assign wire48 = (($signed((|reg30)) ? $unsigned((8'hb0)) : wire25) ?
                      $unsigned($signed((+wire25))) : (&({wire31} ?
                          wire24 : $signed((8'ha3)))));
  assign wire49 = {(($signed((8'hac)) || $signed(reg30)) ?
                          $unsigned(wire27) : (wire45 ?
                              (wire31 && wire27) : (wire26 ?
                                  (8'hac) : wire26)))};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module32  (y, clk, wire36, wire35, wire34, wire33);
  output wire [(32'h3c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire36;
  input wire [(4'hb):(1'h0)] wire35;
  input wire [(3'h4):(1'h0)] wire34;
  input wire [(3'h7):(1'h0)] wire33;
  wire [(4'hb):(1'h0)] wire43;
  wire signed [(3'h7):(1'h0)] wire42;
  wire [(4'ha):(1'h0)] wire41;
  wire [(4'ha):(1'h0)] wire40;
  wire signed [(3'h7):(1'h0)] wire39;
  wire [(3'h6):(1'h0)] wire38;
  wire signed [(3'h4):(1'h0)] wire37;
  reg signed [(3'h4):(1'h0)] reg44 = (1'h0);
  assign y = {wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire39,
                 wire38,
                 wire37,
                 reg44,
                 (1'h0)};
  assign wire37 = ((8'hac) ?
                      (($unsigned(wire36) ?
                          (+wire36) : (&wire33)) ^ wire34[(2'h2):(1'h0)]) : (wire34 ~^ ($signed(wire36) ?
                          (wire35 ? wire36 : (8'ha3)) : wire34)));
  assign wire38 = $unsigned(($signed($unsigned((8'h9e))) <<< $unsigned((wire36 ?
                      wire36 : wire35))));
  assign wire39 = ((wire33[(3'h5):(1'h1)] ?
                          {wire35[(4'h8):(1'h1)]} : (wire35[(4'hb):(2'h2)] ?
                              ((8'hac) > wire38) : wire34)) ?
                      $signed((&(~wire38))) : (wire35[(2'h2):(1'h0)] && $signed((wire35 ?
                          wire35 : wire34))));
  assign wire40 = ($unsigned($signed(wire34)) ?
                      $unsigned(wire34) : (+{wire34}));
  assign wire41 = wire35[(3'h4):(3'h4)];
  assign wire42 = ((~wire39) ? $signed($signed((&wire39))) : wire39);
  assign wire43 = $unsigned(wire41);
  always
    @(posedge clk) begin
      reg44 <= {($unsigned((wire41 ~^ (8'ha9))) ?
              $unsigned(wire34) : ((wire37 << wire40) ?
                  $unsigned(wire42) : wire41[(2'h2):(2'h2)]))};
    end
endmodule