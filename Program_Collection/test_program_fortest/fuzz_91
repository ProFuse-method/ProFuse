(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h3f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire0;
  input wire [(3'h5):(1'h0)] wire1;
  input wire [(4'h8):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire3;
  wire [(3'h5):(1'h0)] wire56;
  wire [(4'h9):(1'h0)] wire55;
  wire signed [(4'hb):(1'h0)] wire4;
  wire [(3'h7):(1'h0)] wire5;
  wire signed [(4'h8):(1'h0)] wire6;
  wire [(4'h8):(1'h0)] wire53;
  reg signed [(3'h5):(1'h0)] reg7 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg8 = (1'h0);
  assign y = {wire56, wire55, wire4, wire5, wire6, wire53, reg7, reg8, (1'h0)};
  assign wire4 = (($unsigned($unsigned(wire3)) + (~^$signed(wire1))) ?
                     $signed({$unsigned(wire0)}) : wire0);
  assign wire5 = wire3;
  assign wire6 = {(wire5 + (~wire3[(2'h3):(1'h1)]))};
  always
    @(posedge clk) begin
      if ($unsigned(wire5[(2'h2):(2'h2)]))
        begin
          reg7 <= (wire6 & (~^({wire2} ? (~wire1) : wire2)));
        end
      else
        begin
          reg7 <= (wire4 ?
              ($unsigned(wire3[(3'h4):(2'h2)]) && reg7) : (~|wire2));
          reg8 <= ((|$signed($signed(wire0))) * ($signed($signed(wire5)) != wire1));
        end
    end
  module9 #() modinst54 (.clk(clk), .y(wire53), .wire12(wire6), .wire13(reg8), .wire10(wire4), .wire11(wire0));
  assign wire55 = {$unsigned($unsigned({wire3}))};
  assign wire56 = reg8;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9
#(parameter param52 = (~|{{((8'ha9) <<< (8'h9e))}}))
(y, clk, wire10, wire11, wire12, wire13);
  output wire [(32'h4c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire10;
  input wire signed [(4'h9):(1'h0)] wire11;
  input wire [(3'h6):(1'h0)] wire12;
  input wire [(4'h9):(1'h0)] wire13;
  wire [(3'h5):(1'h0)] wire51;
  wire signed [(3'h5):(1'h0)] wire48;
  wire signed [(4'ha):(1'h0)] wire14;
  wire signed [(4'ha):(1'h0)] wire19;
  wire signed [(4'ha):(1'h0)] wire46;
  reg signed [(3'h5):(1'h0)] reg50 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg49 = (1'h0);
  reg [(3'h4):(1'h0)] reg15 = (1'h0);
  reg [(3'h5):(1'h0)] reg16 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg17 = (1'h0);
  reg [(4'ha):(1'h0)] reg18 = (1'h0);
  assign y = {wire51,
                 wire48,
                 wire14,
                 wire19,
                 wire46,
                 reg50,
                 reg49,
                 reg15,
                 reg16,
                 reg17,
                 reg18,
                 (1'h0)};
  assign wire14 = $unsigned(wire13);
  always
    @(posedge clk) begin
      if ($unsigned((~^wire13[(2'h3):(1'h0)])))
        begin
          reg15 <= {$signed({{(8'ha3)}})};
          reg16 <= wire12;
        end
      else
        begin
          if ((reg16 ? wire13[(3'h5):(2'h2)] : (wire12 - (8'ha3))))
            begin
              reg15 <= (~|reg16);
              reg16 <= $unsigned($signed($unsigned(wire11)));
              reg17 <= $unsigned(reg15);
            end
          else
            begin
              reg15 <= ((reg17 ~^ $unsigned($signed((8'ha8)))) ?
                  reg15 : $unsigned(wire12[(1'h1):(1'h1)]));
            end
          reg18 <= $unsigned({$unsigned($unsigned(wire11))});
        end
    end
  assign wire19 = wire14;
  module20 #() modinst47 (.clk(clk), .y(wire46), .wire22(reg16), .wire23(wire19), .wire21(wire14), .wire24(wire11));
  assign wire48 = (~|wire46[(4'h8):(3'h4)]);
  always
    @(posedge clk) begin
      if (reg15[(2'h2):(2'h2)])
        begin
          reg49 <= (((+(wire11 ? wire48 : (8'ha1))) ?
              $unsigned($signed((8'ha8))) : ($unsigned(reg15) ~^ (wire48 != wire19))) > ($signed((&wire19)) ?
              (wire46 ?
                  (+(8'ha6)) : (wire11 && wire19)) : $signed((wire10 && wire13))));
        end
      else
        begin
          reg49 <= $unsigned(wire19);
          reg50 <= $unsigned(wire19);
        end
    end
  assign wire51 = $unsigned($unsigned(((8'hab) == {wire10})));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module20
#(parameter param45 = (((((8'ha0) == (8'hab)) ? (^(8'ha9)) : (!(8'ha8))) == ((!(8'h9c)) <= ((8'had) && (8'ha2)))) ? (~^(~^((8'ha4) ? (8'ha5) : (8'ha7)))) : (((-(8'ha1)) ^ ((8'ha8) >> (8'haa))) ? {((8'ha3) ? (8'haa) : (8'ha7))} : ((~|(8'h9e)) >> ((8'ha0) & (8'ha4))))))
(y, clk, wire24, wire23, wire22, wire21);
  output wire [(32'h88):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire24;
  input wire signed [(4'ha):(1'h0)] wire23;
  input wire [(3'h5):(1'h0)] wire22;
  input wire [(2'h2):(1'h0)] wire21;
  wire signed [(4'h8):(1'h0)] wire44;
  wire [(3'h7):(1'h0)] wire33;
  wire [(3'h6):(1'h0)] wire32;
  wire signed [(4'hb):(1'h0)] wire31;
  wire [(2'h2):(1'h0)] wire27;
  wire [(3'h7):(1'h0)] wire26;
  wire [(4'hb):(1'h0)] wire25;
  reg [(3'h6):(1'h0)] reg43 = (1'h0);
  reg [(4'hb):(1'h0)] reg42 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg41 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg40 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg39 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg38 = (1'h0);
  reg [(2'h3):(1'h0)] reg37 = (1'h0);
  reg [(3'h7):(1'h0)] reg36 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg35 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg34 = (1'h0);
  reg [(2'h2):(1'h0)] reg30 = (1'h0);
  reg [(4'h9):(1'h0)] reg29 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg28 = (1'h0);
  assign y = {wire44,
                 wire33,
                 wire32,
                 wire31,
                 wire27,
                 wire26,
                 wire25,
                 reg43,
                 reg42,
                 reg41,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 reg36,
                 reg35,
                 reg34,
                 reg30,
                 reg29,
                 reg28,
                 (1'h0)};
  assign wire25 = wire23[(3'h7):(2'h3)];
  assign wire26 = (8'h9e);
  assign wire27 = ((wire22 && $unsigned($unsigned(wire23))) ?
                      wire25 : (!$unsigned((wire21 ? wire25 : wire23))));
  always
    @(posedge clk) begin
      if ((($signed(wire21) > wire23) ?
          ((~&{wire21}) < (wire24[(3'h6):(3'h5)] || $signed(wire24))) : $signed((~|wire22))))
        begin
          if ((8'hb0))
            begin
              reg28 <= $signed(wire23[(4'h9):(3'h7)]);
            end
          else
            begin
              reg28 <= wire23[(2'h2):(2'h2)];
            end
        end
      else
        begin
          reg28 <= $signed(wire23);
        end
      reg29 <= (~$signed(wire26[(2'h3):(1'h1)]));
      reg30 <= $signed((($unsigned((8'ha4)) ?
          wire22[(2'h3):(2'h2)] : (wire24 ^ (8'h9f))) + ($signed(wire21) < (reg28 ^~ (8'ha4)))));
    end
  assign wire31 = {($unsigned(((8'ha8) ? wire26 : (8'haf))) ?
                          ((-wire27) <<< $unsigned(wire21)) : reg29)};
  assign wire32 = {(^~$unsigned((!(8'h9f))))};
  assign wire33 = ($signed({((8'hac) ?
                          reg30 : (8'hb0))}) == {$unsigned((-wire23))});
  always
    @(posedge clk) begin
      reg34 <= $signed(reg29);
    end
  always
    @(posedge clk) begin
      if (wire25[(4'h9):(3'h5)])
        begin
          reg35 <= ($signed(reg30) ?
              $signed(reg34[(3'h4):(2'h2)]) : $signed(reg34));
          if (wire23)
            begin
              reg36 <= (-(reg30[(2'h2):(1'h1)] + (~^reg34)));
              reg37 <= $unsigned((reg30[(1'h0):(1'h0)] ?
                  (~&(reg35 ? (8'ha7) : wire27)) : {$signed(wire32)}));
            end
          else
            begin
              reg36 <= reg35[(1'h0):(1'h0)];
              reg37 <= reg35;
              reg38 <= {reg37[(2'h3):(2'h3)]};
            end
          if ($unsigned((|wire24[(3'h5):(2'h2)])))
            begin
              reg39 <= $unsigned($unsigned(reg36));
            end
          else
            begin
              reg39 <= $unsigned($unsigned((!$unsigned(reg28))));
              reg40 <= (reg37[(2'h2):(2'h2)] ?
                  reg34[(2'h2):(1'h0)] : $unsigned(reg36[(3'h6):(1'h0)]));
              reg41 <= $unsigned(((~^(wire33 * wire26)) ?
                  $signed(((8'h9e) ^ wire31)) : $unsigned($signed(wire26))));
            end
        end
      else
        begin
          reg35 <= (((reg38[(1'h0):(1'h0)] ?
                  reg34 : ((8'had) && wire27)) >= reg35) ?
              reg34[(3'h5):(1'h0)] : wire21[(2'h2):(1'h1)]);
        end
      reg42 <= $signed(reg28[(3'h6):(1'h1)]);
      reg43 <= (($unsigned((reg38 ?
          reg35 : reg36)) != $signed($unsigned(reg34))) << $signed(wire33));
    end
  assign wire44 = ((+$unsigned((wire24 << reg30))) >> (&$signed($signed(reg29))));
endmodule