(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param36 = (!((~|(-(8'ha3))) ? (((8'had) ? (8'hae) : (8'hab)) ? (~(8'ha5)) : ((8'h9d) ? (8'hb0) : (8'hab))) : (((8'hae) ? (8'ha2) : (8'ha8)) ? ((8'ha3) ? (8'haa) : (8'h9d)) : (|(8'h9e))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h3a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire3;
  input wire [(4'ha):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire0;
  wire signed [(3'h6):(1'h0)] wire35;
  wire signed [(2'h2):(1'h0)] wire33;
  wire signed [(3'h5):(1'h0)] wire9;
  wire [(3'h7):(1'h0)] wire8;
  wire signed [(4'hb):(1'h0)] wire7;
  reg signed [(4'h9):(1'h0)] reg6 = (1'h0);
  reg [(4'h9):(1'h0)] reg5 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg4 = (1'h0);
  assign y = {wire35, wire33, wire9, wire8, wire7, reg6, reg5, reg4, (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= (((8'had) ?
          ($unsigned(wire1) ?
              wire0[(4'h9):(4'h8)] : wire1[(1'h1):(1'h0)]) : wire2) ~^ wire2[(1'h0):(1'h0)]);
      if ((8'h9f))
        begin
          if (($unsigned($unsigned({wire2})) ?
              $signed(wire0[(3'h7):(2'h2)]) : reg4))
            begin
              reg5 <= {$unsigned(wire2[(4'h9):(3'h5)])};
            end
          else
            begin
              reg5 <= (reg4[(3'h6):(2'h3)] ^~ (($signed(wire1) >> (wire1 ?
                      wire0 : wire2)) ?
                  ($signed(wire2) ~^ (+wire2)) : {{wire0}}));
            end
          reg6 <= $signed((+$unsigned(wire2[(1'h1):(1'h0)])));
        end
      else
        begin
          reg5 <= ($signed($unsigned((wire0 == reg5))) ?
              (^wire3) : $unsigned((wire1[(3'h7):(1'h0)] ?
                  (|wire0) : (~|reg6))));
        end
    end
  assign wire7 = (&(+{{wire2}}));
  assign wire8 = {$signed(wire2)};
  assign wire9 = reg4[(2'h3):(1'h1)];
  module10 #() modinst34 (wire33, clk, wire3, reg4, reg6, wire0);
  assign wire35 = $signed(wire2[(4'h8):(1'h0)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10  (y, clk, wire14, wire13, wire12, wire11);
  output wire [(32'h21):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire14;
  input wire signed [(3'h5):(1'h0)] wire13;
  input wire [(4'h9):(1'h0)] wire12;
  input wire signed [(4'hb):(1'h0)] wire11;
  wire [(3'h6):(1'h0)] wire31;
  wire signed [(4'ha):(1'h0)] wire17;
  wire [(4'h9):(1'h0)] wire16;
  wire signed [(3'h7):(1'h0)] wire15;
  assign y = {wire31, wire17, wire16, wire15, (1'h0)};
  assign wire15 = {(~|(+(wire11 <= wire11)))};
  assign wire16 = (wire13[(2'h2):(2'h2)] || wire11);
  assign wire17 = {(8'hac)};
  module18 #() modinst32 (.wire19(wire12), .wire21(wire17), .wire20(wire16), .y(wire31), .clk(clk), .wire22(wire11));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18  (y, clk, wire22, wire21, wire20, wire19);
  output wire [(32'h3b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire22;
  input wire signed [(2'h2):(1'h0)] wire21;
  input wire [(4'h9):(1'h0)] wire20;
  input wire [(4'h9):(1'h0)] wire19;
  wire [(4'ha):(1'h0)] wire30;
  wire signed [(3'h4):(1'h0)] wire29;
  wire signed [(2'h3):(1'h0)] wire28;
  wire [(4'hb):(1'h0)] wire25;
  wire signed [(4'hb):(1'h0)] wire24;
  wire signed [(4'hb):(1'h0)] wire23;
  reg signed [(3'h6):(1'h0)] reg27 = (1'h0);
  reg [(2'h2):(1'h0)] reg26 = (1'h0);
  assign y = {wire30,
                 wire29,
                 wire28,
                 wire25,
                 wire24,
                 wire23,
                 reg27,
                 reg26,
                 (1'h0)};
  assign wire23 = $unsigned($signed(($unsigned((8'h9f)) == wire22)));
  assign wire24 = wire23;
  assign wire25 = (!wire19);
  always
    @(posedge clk) begin
      reg26 <= $unsigned((wire25 && ((wire22 - wire20) << (wire24 ?
          wire24 : wire20))));
      reg27 <= ($unsigned(wire19) * (wire21[(2'h2):(2'h2)] ?
          (&((8'ha9) || (8'ha7))) : reg26[(2'h2):(2'h2)]));
    end
  assign wire28 = $unsigned(({{(8'haf)}} ?
                      ($unsigned(reg27) ? (wire22 < wire23) : reg26) : {(reg27 ?
                              reg27 : reg26)}));
  assign wire29 = wire24;
  assign wire30 = (~$unsigned({(reg26 ? (8'h9e) : wire20)}));
endmodule