(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h82):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire0;
  input wire signed [(3'h6):(1'h0)] wire1;
  input wire [(4'ha):(1'h0)] wire2;
  input wire signed [(3'h6):(1'h0)] wire3;
  wire signed [(4'ha):(1'h0)] wire4;
  wire signed [(3'h4):(1'h0)] wire23;
  wire [(3'h4):(1'h0)] wire25;
  wire signed [(4'hb):(1'h0)] wire26;
  wire signed [(3'h4):(1'h0)] wire27;
  wire signed [(3'h5):(1'h0)] wire28;
  wire [(4'hb):(1'h0)] wire62;
  reg [(4'hb):(1'h0)] reg5 = (1'h0);
  reg [(4'hb):(1'h0)] reg6 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg7 = (1'h0);
  reg [(4'ha):(1'h0)] reg8 = (1'h0);
  reg [(4'hb):(1'h0)] reg9 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg10 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg11 = (1'h0);
  reg [(4'hb):(1'h0)] reg12 = (1'h0);
  assign y = {wire4,
                 wire23,
                 wire25,
                 wire26,
                 wire27,
                 wire28,
                 wire62,
                 reg5,
                 reg6,
                 reg7,
                 reg8,
                 reg9,
                 reg10,
                 reg11,
                 reg12,
                 (1'h0)};
  assign wire4 = $unsigned(($signed((wire0 ? wire0 : wire0)) ?
                     $signed({wire3}) : {$unsigned((8'h9f))}));
  always
    @(posedge clk) begin
      reg5 <= wire2[(1'h1):(1'h1)];
      if ($unsigned(wire2))
        begin
          reg6 <= (~|$signed((~|(wire3 && reg5))));
          reg7 <= (((reg6 != (wire0 ^~ reg6)) ?
              $unsigned($signed(wire4)) : {wire0}) >> $unsigned(reg6[(2'h2):(2'h2)]));
          if ($unsigned({reg6}))
            begin
              reg8 <= $signed(wire0[(2'h3):(1'h1)]);
              reg9 <= $unsigned($unsigned((((8'ha1) ^ reg8) >>> reg7)));
            end
          else
            begin
              reg8 <= wire2;
            end
        end
      else
        begin
          reg6 <= reg9[(3'h4):(1'h0)];
        end
      if (wire1[(2'h2):(1'h0)])
        begin
          if ($signed((wire3[(3'h4):(2'h3)] < {$unsigned(wire3)})))
            begin
              reg10 <= (reg7[(2'h3):(1'h1)] >= reg6);
              reg11 <= wire3;
            end
          else
            begin
              reg10 <= (reg5 >>> $unsigned(((reg11 ^~ reg7) ?
                  wire3[(2'h2):(1'h0)] : $signed(wire2))));
            end
          reg12 <= wire1[(1'h1):(1'h1)];
        end
      else
        begin
          reg10 <= ((~|((~&reg8) * (reg12 ? (8'h9e) : (8'h9e)))) <<< wire0);
        end
    end
  module13 #() modinst24 (.wire16(reg7), .wire17(reg9), .y(wire23), .clk(clk), .wire14(wire1), .wire15(wire4));
  assign wire25 = reg12[(3'h5):(3'h5)];
  assign wire26 = $signed((&($unsigned((8'hb0)) > (8'ha9))));
  assign wire27 = (~($signed(wire0) ? reg10 : (|wire2[(4'h9):(3'h6)])));
  assign wire28 = (8'had);
  module29 #() modinst63 (.wire31(reg9), .wire32(wire26), .wire30(reg8), .clk(clk), .wire33(reg6), .y(wire62));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module29  (y, clk, wire33, wire32, wire31, wire30);
  output wire [(32'h58):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire33;
  input wire signed [(3'h7):(1'h0)] wire32;
  input wire signed [(4'h8):(1'h0)] wire31;
  input wire [(4'ha):(1'h0)] wire30;
  wire [(3'h7):(1'h0)] wire61;
  wire [(3'h5):(1'h0)] wire60;
  wire [(4'h8):(1'h0)] wire59;
  wire [(4'hb):(1'h0)] wire57;
  wire [(4'hb):(1'h0)] wire56;
  wire [(4'h9):(1'h0)] wire55;
  wire [(3'h6):(1'h0)] wire54;
  wire [(3'h6):(1'h0)] wire53;
  wire signed [(3'h4):(1'h0)] wire51;
  wire signed [(3'h4):(1'h0)] wire35;
  wire signed [(3'h6):(1'h0)] wire34;
  reg [(4'ha):(1'h0)] reg58 = (1'h0);
  assign y = {wire61,
                 wire60,
                 wire59,
                 wire57,
                 wire56,
                 wire55,
                 wire54,
                 wire53,
                 wire51,
                 wire35,
                 wire34,
                 reg58,
                 (1'h0)};
  assign wire34 = $unsigned(((wire33 ? (!(8'haf)) : (wire32 < (8'h9c))) ?
                      wire31[(1'h0):(1'h0)] : wire33));
  assign wire35 = wire30;
  module36 #() modinst52 (wire51, clk, wire34, wire33, wire31, wire32);
  assign wire53 = wire51;
  assign wire54 = $unsigned((~^((wire53 ? wire34 : (8'h9e)) ?
                      (&wire33) : (8'ha2))));
  assign wire55 = $signed(wire33);
  assign wire56 = (wire55 ? wire35 : (|$signed(wire54)));
  assign wire57 = (~|$unsigned(($signed(wire33) >= (wire54 ~^ (8'haa)))));
  always
    @(posedge clk) begin
      reg58 <= {$unsigned(($signed((8'haf)) >> (wire54 * wire32)))};
    end
  assign wire59 = (8'ha3);
  assign wire60 = wire51;
  assign wire61 = $unsigned(({$signed(wire33)} ?
                      (8'ha7) : {$unsigned(wire53)}));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13
#(parameter param22 = ((&{(|(8'h9d))}) ? ((8'h9f) == (((8'h9e) ? (8'ha5) : (8'haa)) ? ((8'haa) ? (8'ha5) : (8'hb0)) : ((8'hb0) ? (8'ha8) : (8'ha0)))) : ((&((8'ha2) >= (8'ha3))) - ((!(8'ha6)) ? (&(8'hac)) : (8'ha0)))))
(y, clk, wire17, wire16, wire15, wire14);
  output wire [(32'h20):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire17;
  input wire signed [(4'h9):(1'h0)] wire16;
  input wire signed [(4'ha):(1'h0)] wire15;
  input wire signed [(3'h6):(1'h0)] wire14;
  wire signed [(4'h8):(1'h0)] wire21;
  wire signed [(4'h9):(1'h0)] wire20;
  wire [(4'hb):(1'h0)] wire19;
  wire [(2'h3):(1'h0)] wire18;
  assign y = {wire21, wire20, wire19, wire18, (1'h0)};
  assign wire18 = wire17[(2'h3):(1'h1)];
  assign wire19 = (wire17[(2'h3):(2'h3)] << (&wire16[(2'h2):(1'h0)]));
  assign wire20 = ($unsigned(({wire18} ?
                          (wire17 ?
                              wire17 : (8'ha1)) : wire14[(2'h2):(1'h0)])) ?
                      ($signed($signed(wire19)) >> wire14[(3'h5):(2'h3)]) : ($signed(wire17[(3'h6):(1'h1)]) > wire15));
  assign wire21 = {$signed(($signed(wire14) ?
                          wire20 : (wire18 ? wire20 : wire18)))};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module36
#(parameter param50 = ((((+(8'ha3)) & (-(8'ha6))) >>> ((|(8'ha9)) ? ((8'ha5) & (8'hab)) : {(8'ha5)})) ^~ ((-{(8'had)}) ? (((8'h9c) ? (8'hae) : (8'ha0)) ? (~&(8'h9f)) : {(8'ha3)}) : (((8'h9c) ? (8'ha6) : (8'ha1)) ? ((8'h9e) ? (8'haf) : (8'ha0)) : ((8'ha0) ? (8'ha6) : (8'haf))))))
(y, clk, wire40, wire39, wire38, wire37);
  output wire [(32'h4f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire40;
  input wire [(4'hb):(1'h0)] wire39;
  input wire [(4'h8):(1'h0)] wire38;
  input wire [(2'h3):(1'h0)] wire37;
  wire [(3'h5):(1'h0)] wire49;
  wire [(4'hb):(1'h0)] wire48;
  wire [(4'h9):(1'h0)] wire47;
  wire signed [(3'h6):(1'h0)] wire46;
  wire signed [(4'hb):(1'h0)] wire45;
  wire signed [(4'ha):(1'h0)] wire44;
  reg [(4'h9):(1'h0)] reg43 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg42 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg41 = (1'h0);
  assign y = {wire49,
                 wire48,
                 wire47,
                 wire46,
                 wire45,
                 wire44,
                 reg43,
                 reg42,
                 reg41,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (wire37)
        begin
          reg41 <= (wire38 > $unsigned(wire39));
          reg42 <= wire39[(1'h0):(1'h0)];
        end
      else
        begin
          reg41 <= {$unsigned((reg41 >= $unsigned(wire37)))};
        end
      reg43 <= ((|wire38) ? reg42[(1'h1):(1'h0)] : wire40);
    end
  assign wire44 = wire40;
  assign wire45 = wire39[(4'hb):(3'h7)];
  assign wire46 = $unsigned((!(8'ha3)));
  assign wire47 = (wire38 >> ({$signed(wire40)} * $signed((wire39 ?
                      wire38 : reg43))));
  assign wire48 = $unsigned(wire38);
  assign wire49 = wire40[(1'h0):(1'h0)];
endmodule