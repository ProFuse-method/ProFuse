(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param21 = (((((8'hab) ? (8'hac) : (8'h9f)) || ((8'h9d) ? (8'h9c) : (8'hb0))) >> ((~|(8'h9c)) & ((8'hab) && (8'hb0)))) - ((((8'ha1) ~^ (8'hac)) < ((8'hb0) >= (8'ha8))) ? (((8'haa) >> (8'hac)) >= {(8'hb0)}) : (((8'ha1) ? (8'haf) : (8'ha8)) ? (~^(8'had)) : {(8'hae)}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h5a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire3;
  input wire signed [(3'h7):(1'h0)] wire2;
  input wire [(4'h9):(1'h0)] wire1;
  input wire [(3'h7):(1'h0)] wire0;
  wire signed [(4'h9):(1'h0)] wire14;
  wire signed [(2'h2):(1'h0)] wire13;
  wire signed [(2'h2):(1'h0)] wire12;
  wire [(3'h7):(1'h0)] wire4;
  reg signed [(3'h6):(1'h0)] reg20 = (1'h0);
  reg [(3'h6):(1'h0)] reg19 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg18 = (1'h0);
  reg [(3'h4):(1'h0)] reg17 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg16 = (1'h0);
  reg [(3'h5):(1'h0)] reg15 = (1'h0);
  reg [(2'h3):(1'h0)] reg11 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg10 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg8 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg7 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg6 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg5 = (1'h0);
  assign y = {wire14,
                 wire13,
                 wire12,
                 wire4,
                 reg20,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 (1'h0)};
  assign wire4 = $unsigned($signed((&(wire1 ? (8'hae) : (8'ha3)))));
  always
    @(posedge clk) begin
      reg5 <= (~^$signed(((wire2 <= wire4) ^ (wire2 ? wire1 : wire3))));
      reg6 <= reg5;
    end
  always
    @(posedge clk) begin
      if (reg6)
        begin
          reg7 <= wire3[(2'h3):(1'h1)];
          reg8 <= (8'had);
          reg9 <= (wire4[(2'h2):(1'h1)] ?
              ({(wire3 ?
                      reg8 : reg5)} >> ($unsigned(reg6) ^~ reg8[(3'h4):(1'h0)])) : (|$unsigned($signed(reg6))));
        end
      else
        begin
          reg7 <= reg5;
        end
      reg10 <= ((|$unsigned((8'haa))) ?
          ({(reg7 ? (8'ha5) : wire4)} ?
              reg7 : (~^(reg9 ? reg8 : reg6))) : $signed(reg7[(1'h1):(1'h0)]));
      reg11 <= wire0;
    end
  assign wire12 = wire0;
  assign wire13 = $signed($signed((&reg9)));
  assign wire14 = (8'h9f);
  always
    @(posedge clk) begin
      reg15 <= (((wire0 || $signed(wire4)) ? reg8 : wire0) ?
          ($unsigned($signed(reg11)) ?
              reg11[(1'h0):(1'h0)] : (wire1[(1'h0):(1'h0)] * $unsigned(reg5))) : reg5[(2'h2):(1'h1)]);
      if ({$unsigned(({reg11} ?
              ((8'ha4) ? wire4 : (8'hb0)) : $signed(wire12)))})
        begin
          reg16 <= (!($unsigned(reg10) ?
              ({wire12} ?
                  (~|(8'ha1)) : (reg10 ? wire0 : (8'hab))) : (|wire12)));
          reg17 <= $unsigned((wire12 << wire4[(3'h4):(1'h0)]));
          reg18 <= reg5[(2'h2):(1'h0)];
        end
      else
        begin
          reg16 <= ((((reg6 ^~ reg7) + (reg9 ? reg17 : (8'ha7))) & reg16) ?
              wire4 : $unsigned($unsigned($signed(reg5))));
          reg17 <= $signed((8'hb0));
        end
      reg19 <= $unsigned({(^$unsigned(reg6))});
    end
  always
    @(posedge clk) begin
      reg20 <= reg8;
    end
endmodule