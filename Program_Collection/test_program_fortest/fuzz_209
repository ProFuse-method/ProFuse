(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h6e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire0;
  input wire signed [(3'h6):(1'h0)] wire1;
  input wire signed [(3'h5):(1'h0)] wire2;
  input wire [(3'h7):(1'h0)] wire3;
  wire signed [(4'hb):(1'h0)] wire45;
  wire [(4'h9):(1'h0)] wire44;
  wire signed [(2'h2):(1'h0)] wire43;
  wire [(4'h9):(1'h0)] wire42;
  wire [(4'h9):(1'h0)] wire41;
  wire [(3'h5):(1'h0)] wire40;
  wire [(4'hb):(1'h0)] wire10;
  wire signed [(4'ha):(1'h0)] wire38;
  reg [(4'h9):(1'h0)] reg4 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg5 = (1'h0);
  reg [(3'h5):(1'h0)] reg6 = (1'h0);
  reg [(3'h6):(1'h0)] reg7 = (1'h0);
  reg [(3'h5):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg9 = (1'h0);
  assign y = {wire45,
                 wire44,
                 wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire10,
                 wire38,
                 reg4,
                 reg5,
                 reg6,
                 reg7,
                 reg8,
                 reg9,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ($unsigned(wire3[(2'h3):(1'h1)]))
        begin
          if ($unsigned((wire0 ~^ $signed($signed(wire3)))))
            begin
              reg4 <= $signed(((8'ha8) ^ {wire1[(1'h1):(1'h0)]}));
              reg5 <= reg4;
              reg6 <= reg4[(2'h3):(1'h0)];
            end
          else
            begin
              reg4 <= ((wire0[(2'h2):(2'h2)] < $signed((&wire2))) >>> (-$unsigned(reg6)));
              reg5 <= {(wire1 ?
                      $signed($unsigned(wire2)) : wire2[(1'h0):(1'h0)])};
              reg6 <= (reg4 ? wire1[(1'h1):(1'h1)] : wire3[(1'h1):(1'h0)]);
            end
        end
      else
        begin
          if (($unsigned($signed(reg4)) ?
              $unsigned(reg6) : (!$unsigned(wire2[(3'h5):(3'h4)]))))
            begin
              reg4 <= (((~|((8'h9d) <<< reg6)) ? $signed(reg4) : reg4) ?
                  reg5[(3'h4):(2'h3)] : $unsigned($unsigned($signed(wire0))));
              reg5 <= wire3[(1'h1):(1'h0)];
              reg6 <= (reg4 ? {{$unsigned(reg4)}} : {$unsigned($signed(reg4))});
            end
          else
            begin
              reg4 <= (+wire0[(1'h1):(1'h1)]);
            end
          if ((wire2 && {wire2}))
            begin
              reg7 <= {(8'hab)};
              reg8 <= wire1;
              reg9 <= reg7[(3'h6):(1'h1)];
            end
          else
            begin
              reg7 <= $unsigned((~^($unsigned(reg9) == reg6)));
            end
        end
    end
  assign wire10 = wire2[(3'h5):(3'h4)];
  module11 #() modinst39 (wire38, clk, reg9, wire10, reg4, reg5);
  assign wire40 = ($unsigned($unsigned((wire1 ?
                      reg7 : wire10))) << {wire2[(1'h1):(1'h0)]});
  assign wire41 = $unsigned($unsigned((((8'h9f) ? reg4 : reg8) ?
                      (^~reg4) : {wire2})));
  assign wire42 = $signed({$signed(wire1)});
  assign wire43 = reg7;
  assign wire44 = (+{$signed(wire40[(3'h4):(2'h3)])});
  assign wire45 = {($signed((wire38 < wire41)) ? wire3 : $unsigned({wire1}))};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11  (y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h3d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire15;
  input wire signed [(4'hb):(1'h0)] wire14;
  input wire [(4'h8):(1'h0)] wire13;
  input wire [(4'hb):(1'h0)] wire12;
  wire [(2'h3):(1'h0)] wire37;
  wire [(3'h4):(1'h0)] wire32;
  wire [(4'hb):(1'h0)] wire18;
  wire signed [(4'hb):(1'h0)] wire17;
  wire signed [(4'ha):(1'h0)] wire16;
  reg signed [(4'h9):(1'h0)] reg36 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg35 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg34 = (1'h0);
  assign y = {wire37,
                 wire32,
                 wire18,
                 wire17,
                 wire16,
                 reg36,
                 reg35,
                 reg34,
                 (1'h0)};
  assign wire16 = wire15;
  assign wire17 = $unsigned((((!wire15) & (wire15 * (8'h9e))) ?
                      $signed($signed(wire14)) : (8'h9c)));
  assign wire18 = ($signed(wire17) ?
                      ({wire15} ?
                          $unsigned($unsigned(wire14)) : (wire13 <<< (wire17 ?
                              wire13 : wire14))) : $unsigned((8'ha9)));
  module19 #() modinst33 (.y(wire32), .wire21(wire13), .wire22(wire12), .wire20(wire18), .clk(clk), .wire23(wire14));
  always
    @(posedge clk) begin
      reg34 <= ({wire17[(3'h6):(3'h5)]} ?
          (8'hb0) : (wire32[(1'h1):(1'h1)] ~^ wire12[(1'h1):(1'h0)]));
      reg35 <= wire13;
      if ((wire12[(2'h2):(1'h0)] < $signed($unsigned((wire18 <= (8'ha1))))))
        begin
          reg36 <= ((($signed(reg35) * (wire18 ? reg34 : wire32)) ?
              wire17[(3'h6):(1'h0)] : wire12[(3'h5):(1'h0)]) != wire32[(1'h1):(1'h1)]);
        end
      else
        begin
          reg36 <= wire32[(1'h0):(1'h0)];
        end
    end
  assign wire37 = $unsigned($unsigned({(reg35 ? wire17 : wire32)}));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module19  (y, clk, wire23, wire22, wire21, wire20);
  output wire [(32'h33):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire23;
  input wire [(4'h8):(1'h0)] wire22;
  input wire signed [(3'h7):(1'h0)] wire21;
  input wire signed [(3'h5):(1'h0)] wire20;
  wire [(3'h6):(1'h0)] wire29;
  wire signed [(2'h3):(1'h0)] wire27;
  wire [(4'h8):(1'h0)] wire26;
  wire signed [(3'h7):(1'h0)] wire25;
  reg signed [(4'h9):(1'h0)] reg31 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg30 = (1'h0);
  reg [(2'h3):(1'h0)] reg28 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg24 = (1'h0);
  assign y = {wire29,
                 wire27,
                 wire26,
                 wire25,
                 reg31,
                 reg30,
                 reg28,
                 reg24,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg24 <= (~|wire22[(1'h0):(1'h0)]);
    end
  assign wire25 = {(reg24 ^ wire22[(3'h6):(2'h3)])};
  assign wire26 = wire21;
  assign wire27 = ((~|((^~(8'h9d)) ?
                      (wire25 ?
                          wire21 : reg24) : $unsigned(wire26))) == $unsigned(((wire20 ?
                          (8'hab) : (8'ha8)) ?
                      (|wire21) : $signed(wire20))));
  always
    @(posedge clk) begin
      reg28 <= wire26;
    end
  assign wire29 = $unsigned($unsigned($unsigned(wire25)));
  always
    @(posedge clk) begin
      reg30 <= wire21[(3'h4):(1'h1)];
      reg31 <= (~|wire23[(4'ha):(2'h2)]);
    end
endmodule