(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param17 = ((~{{(8'ha5)}}) == ((((8'h9f) ^~ (8'ha5)) * (-(8'ha1))) && (!((8'ha2) | (8'h9d))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h50):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire3;
  input wire signed [(2'h3):(1'h0)] wire2;
  input wire [(4'h8):(1'h0)] wire1;
  input wire signed [(3'h4):(1'h0)] wire0;
  wire [(4'h9):(1'h0)] wire16;
  wire signed [(4'hb):(1'h0)] wire15;
  wire [(2'h3):(1'h0)] wire14;
  wire signed [(2'h2):(1'h0)] wire6;
  wire signed [(3'h4):(1'h0)] wire4;
  reg [(2'h3):(1'h0)] reg13 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg12 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg11 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg10 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg9 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg8 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg7 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg5 = (1'h0);
  assign y = {wire16,
                 wire15,
                 wire14,
                 wire6,
                 wire4,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg5,
                 (1'h0)};
  assign wire4 = wire1[(3'h5):(1'h0)];
  always
    @(posedge clk) begin
      reg5 <= ($signed((wire0 ? wire4 : (~^wire1))) ?
          wire2 : ((8'h9f) == (wire1 ^~ $unsigned(wire0))));
    end
  assign wire6 = wire0[(1'h0):(1'h0)];
  always
    @(posedge clk) begin
      if ($signed(wire3[(1'h0):(1'h0)]))
        begin
          if ((~($unsigned((reg5 == wire3)) ^ $signed((|(8'had))))))
            begin
              reg7 <= $unsigned(wire2);
            end
          else
            begin
              reg7 <= ($unsigned(reg7) ?
                  (($signed(wire4) ?
                      (wire1 ?
                          (8'haa) : (8'hae)) : (8'haa)) >= wire3) : ($unsigned($signed(wire3)) >= {(wire6 ?
                          (8'hb0) : reg7)}));
            end
          reg8 <= $unsigned(wire1[(1'h0):(1'h0)]);
        end
      else
        begin
          reg7 <= wire2[(1'h0):(1'h0)];
          if (wire4)
            begin
              reg8 <= (8'ha8);
              reg9 <= $unsigned((reg7[(3'h5):(1'h1)] ~^ (!wire0)));
            end
          else
            begin
              reg8 <= ((wire0[(2'h2):(1'h1)] - ((8'h9e) ?
                      $unsigned(wire6) : wire2)) ?
                  (~^($unsigned(wire4) ?
                      wire0[(1'h0):(1'h0)] : (wire3 ?
                          wire3 : wire0))) : (wire3 >= wire2[(2'h2):(1'h1)]));
            end
        end
      reg10 <= ((((wire0 ? wire2 : wire3) ? reg5 : wire6[(2'h2):(2'h2)]) ?
              $signed((~^(8'ha1))) : (~wire4[(2'h3):(1'h1)])) ?
          $signed(wire1[(3'h4):(1'h0)]) : ({reg8} ^ {$signed(wire2)}));
    end
  always
    @(posedge clk) begin
      reg11 <= wire2;
      reg12 <= $signed($unsigned((wire4[(1'h1):(1'h0)] || ((8'h9c) ?
          reg7 : reg10))));
      reg13 <= $signed({$unsigned(wire1[(3'h5):(2'h2)])});
    end
  assign wire14 = reg10;
  assign wire15 = $signed((8'ha1));
  assign wire16 = ($unsigned(wire0) >>> wire2[(2'h2):(2'h2)]);
endmodule