(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h58):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire3;
  input wire [(3'h7):(1'h0)] wire2;
  input wire [(2'h3):(1'h0)] wire1;
  input wire [(4'h9):(1'h0)] wire0;
  wire signed [(3'h5):(1'h0)] wire49;
  wire signed [(3'h7):(1'h0)] wire48;
  wire [(3'h7):(1'h0)] wire47;
  wire [(3'h5):(1'h0)] wire46;
  wire [(4'h8):(1'h0)] wire45;
  wire [(2'h2):(1'h0)] wire43;
  wire [(3'h7):(1'h0)] wire42;
  wire signed [(4'hb):(1'h0)] wire41;
  wire [(3'h4):(1'h0)] wire40;
  wire [(3'h7):(1'h0)] wire39;
  wire signed [(4'ha):(1'h0)] wire38;
  wire signed [(4'hb):(1'h0)] wire37;
  wire [(2'h3):(1'h0)] wire35;
  assign y = {wire49,
                 wire48,
                 wire47,
                 wire46,
                 wire45,
                 wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire39,
                 wire38,
                 wire37,
                 wire35,
                 (1'h0)};
  module4 #() modinst36 (wire35, clk, wire0, wire2, wire3, wire1);
  assign wire37 = wire35;
  assign wire38 = wire2;
  assign wire39 = $signed(($signed((8'haa)) ?
                      $signed(wire3[(3'h5):(3'h5)]) : wire2));
  assign wire40 = (wire3[(2'h3):(2'h2)] == $signed($unsigned(wire39)));
  assign wire41 = $unsigned((wire3 + $unsigned((wire3 || (8'h9d)))));
  assign wire42 = wire39[(3'h4):(1'h0)];
  module4 #() modinst44 (.wire6(wire38), .y(wire43), .clk(clk), .wire5(wire39), .wire8(wire35), .wire7(wire41));
  assign wire45 = (wire38[(2'h3):(1'h1)] ~^ (&wire3[(2'h2):(1'h0)]));
  assign wire46 = ((($signed(wire35) ?
                          $unsigned(wire43) : wire37[(3'h6):(1'h1)]) ?
                      (^(^wire43)) : ({wire42} - wire38)) + ((-((8'ha6) ?
                          wire45 : wire40)) ?
                      $signed((wire38 ? wire41 : wire37)) : ((wire0 ?
                              wire38 : wire42) ?
                          (^~wire0) : wire43)));
  assign wire47 = wire46[(1'h0):(1'h0)];
  assign wire48 = wire38[(3'h5):(3'h5)];
  assign wire49 = (($signed(wire42) == wire39[(1'h1):(1'h1)]) ?
                      ({(&wire35)} ?
                          (!$signed(wire48)) : (~^wire43)) : wire42[(1'h0):(1'h0)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4
#(parameter param34 = ((-({(8'ha4)} && ((8'ha4) + (8'ha7)))) != ((~&(^~(8'ha7))) ? {((8'ha2) <= (8'hb0))} : (((8'ha5) <= (8'ha0)) - ((8'ha2) >> (8'ha7))))))
(y, clk, wire5, wire6, wire7, wire8);
  output wire [(32'h2e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire5;
  input wire [(3'h4):(1'h0)] wire6;
  input wire [(4'h9):(1'h0)] wire7;
  input wire signed [(2'h3):(1'h0)] wire8;
  wire [(4'h9):(1'h0)] wire10;
  wire [(4'h9):(1'h0)] wire11;
  wire [(3'h7):(1'h0)] wire12;
  wire [(4'h9):(1'h0)] wire32;
  reg [(4'hb):(1'h0)] reg9 = (1'h0);
  assign y = {wire10, wire11, wire12, wire32, reg9, (1'h0)};
  always
    @(posedge clk) begin
      reg9 <= (wire5[(1'h0):(1'h0)] & $unsigned(((~|(8'haa)) >>> wire7[(2'h2):(1'h1)])));
    end
  assign wire10 = (((-{wire6}) ?
                      ($signed(wire5) ?
                          (reg9 ?
                              wire6 : wire8) : wire6) : (~(wire6 ^~ wire5))) >> (((wire8 ?
                          wire6 : wire8) ?
                      (wire8 ?
                          (8'hab) : reg9) : $signed(wire7)) >> $unsigned($signed((8'hab)))));
  assign wire11 = (~reg9[(2'h3):(1'h1)]);
  assign wire12 = $unsigned($unsigned(({reg9} || wire7)));
  module13 #() modinst33 (.wire14(reg9), .clk(clk), .wire17(wire10), .wire16(wire12), .wire15(wire7), .y(wire32));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13
#(parameter param31 = (^~((+(-(8'hac))) ? ((~^(8'ha1)) ? (~|(8'ha7)) : {(8'ha5)}) : (|((8'ha5) << (8'had))))))
(y, clk, wire17, wire16, wire15, wire14);
  output wire [(32'h62):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire17;
  input wire [(2'h2):(1'h0)] wire16;
  input wire signed [(3'h7):(1'h0)] wire15;
  input wire signed [(4'hb):(1'h0)] wire14;
  wire [(4'ha):(1'h0)] wire25;
  wire signed [(4'h8):(1'h0)] wire21;
  reg [(3'h7):(1'h0)] reg30 = (1'h0);
  reg [(3'h7):(1'h0)] reg29 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg28 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg27 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg26 = (1'h0);
  reg [(2'h3):(1'h0)] reg24 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg23 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg22 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg20 = (1'h0);
  reg [(3'h6):(1'h0)] reg19 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg18 = (1'h0);
  assign y = {wire25,
                 wire21,
                 reg30,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg24,
                 reg23,
                 reg22,
                 reg20,
                 reg19,
                 reg18,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ((wire14[(3'h7):(2'h3)] < (~({wire14} == (~wire16)))))
        begin
          reg18 <= $signed((8'ha2));
        end
      else
        begin
          reg18 <= ($signed(reg18) << wire16);
          reg19 <= $signed((~$signed((reg18 ? wire16 : wire15))));
        end
      reg20 <= (~&($unsigned($signed(wire15)) ?
          ((wire16 ? wire15 : wire15) ?
              wire15[(1'h0):(1'h0)] : wire14) : ($signed(wire15) ~^ (reg18 ?
              reg18 : wire14))));
    end
  assign wire21 = ({(^(wire16 < (8'ha8)))} ?
                      reg20 : $signed(wire16[(1'h0):(1'h0)]));
  always
    @(posedge clk) begin
      reg22 <= reg20;
      reg23 <= (wire16[(1'h1):(1'h0)] ^ reg22);
      reg24 <= $unsigned(((((8'haf) ?
          (8'ha1) : wire16) - $signed(reg18)) || ((|(8'hab)) ?
          reg22 : (reg18 ? wire14 : reg22))));
    end
  assign wire25 = ($signed(reg20) ?
                      ($signed($unsigned(reg24)) + reg24[(1'h1):(1'h0)]) : (({wire16} ?
                          (~(8'ha4)) : (^reg24)) <= ($unsigned(reg22) ?
                          reg24[(2'h3):(2'h3)] : $signed(reg20))));
  always
    @(posedge clk) begin
      if ((reg20[(3'h7):(2'h2)] ?
          (^~{$unsigned(wire14)}) : (wire15 ? reg24 : $signed(wire16))))
        begin
          reg26 <= (((wire16 && reg23[(3'h4):(2'h3)]) ?
              $signed(wire21) : reg24[(1'h0):(1'h0)]) ^~ {$signed(wire21)});
          reg27 <= {reg19[(1'h0):(1'h0)]};
          if ($signed(reg26))
            begin
              reg28 <= (~|reg26);
              reg29 <= $unsigned(reg19);
              reg30 <= ((reg18 ?
                      (|reg28[(2'h2):(2'h2)]) : (~&$unsigned(reg24))) ?
                  (reg29[(3'h5):(2'h2)] ?
                      ((reg23 ?
                          reg29 : reg26) >= $unsigned((8'ha6))) : $signed(((8'ha6) || reg26))) : (($unsigned(wire16) ?
                      $signed((8'ha0)) : $signed(reg24)) ^~ reg27));
            end
          else
            begin
              reg28 <= reg20;
              reg29 <= reg20;
            end
        end
      else
        begin
          if (wire21[(2'h3):(1'h1)])
            begin
              reg26 <= ({(-(-reg29))} ?
                  reg20[(1'h1):(1'h0)] : ((reg29 ?
                          (reg27 >>> wire14) : (wire17 * reg30)) ?
                      ($unsigned(reg27) ?
                          reg23 : $unsigned(wire25)) : wire25[(2'h2):(1'h1)]));
              reg27 <= ($signed({(~&reg29)}) ~^ ($signed(wire15) <<< $unsigned(((8'ha0) || (8'ha8)))));
            end
          else
            begin
              reg26 <= (reg18 != (+reg19));
            end
          reg28 <= $unsigned(($signed($signed(wire25)) ?
              reg26 : reg19[(2'h3):(1'h0)]));
        end
    end
endmodule