(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h62):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire [(4'h9):(1'h0)] wire2;
  input wire [(4'h9):(1'h0)] wire1;
  input wire [(4'h9):(1'h0)] wire0;
  wire signed [(4'ha):(1'h0)] wire53;
  wire signed [(2'h2):(1'h0)] wire44;
  wire signed [(4'h9):(1'h0)] wire43;
  wire [(3'h7):(1'h0)] wire42;
  wire [(4'h9):(1'h0)] wire40;
  wire signed [(3'h6):(1'h0)] wire38;
  reg signed [(3'h7):(1'h0)] reg52 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg51 = (1'h0);
  reg [(4'ha):(1'h0)] reg50 = (1'h0);
  reg [(3'h5):(1'h0)] reg49 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg48 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg47 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg46 = (1'h0);
  assign y = {wire53,
                 wire44,
                 wire43,
                 wire42,
                 wire40,
                 wire38,
                 reg52,
                 reg51,
                 reg50,
                 reg49,
                 reg48,
                 reg47,
                 reg46,
                 (1'h0)};
  module4 #() modinst39 (wire38, clk, wire2, wire0, wire3, wire1);
  module4 #() modinst41 (wire40, clk, wire2, wire1, wire38, wire3);
  assign wire42 = wire3;
  assign wire43 = wire2;
  module4 #() modinst45 (wire44, clk, wire40, wire2, wire38, wire3);
  always
    @(posedge clk) begin
      reg46 <= wire3;
      reg47 <= ($unsigned((!(8'ha3))) == (({wire42} ?
          wire1 : (!wire1)) <= $signed(wire43)));
      if ((+(8'ha3)))
        begin
          if ((-wire44))
            begin
              reg48 <= (-($signed((~^wire2)) == wire2[(2'h3):(2'h2)]));
              reg49 <= (($signed($unsigned(wire2)) ?
                  $unsigned((-(8'ha8))) : (wire40 ~^ {reg47})) + $signed((~|wire38[(2'h3):(1'h1)])));
              reg50 <= $signed(wire1);
            end
          else
            begin
              reg48 <= (($unsigned((-wire2)) ?
                      (wire43[(4'h9):(3'h7)] ?
                          (wire1 ?
                              wire44 : (8'ha4)) : wire40) : ((reg50 - (8'haf)) ^ wire3[(4'h8):(4'h8)])) ?
                  reg48 : $unsigned((^~$unsigned(wire1))));
              reg49 <= wire38[(1'h1):(1'h0)];
              reg50 <= $unsigned({($unsigned((8'hb0)) ?
                      $signed((8'ha1)) : (reg46 << wire42))});
            end
          reg51 <= $unsigned((reg49[(1'h0):(1'h0)] >>> (-reg50)));
          if ({{$signed((8'h9c))}})
            begin
              reg52 <= $signed($unsigned(wire1));
            end
          else
            begin
              reg52 <= wire40;
            end
        end
      else
        begin
          reg48 <= reg49;
          reg49 <= (8'had);
          reg50 <= ($signed((-wire43[(2'h2):(2'h2)])) >> wire2);
        end
    end
  assign wire53 = ((|{{reg49}}) ? (^wire40) : $unsigned($signed((8'haa))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire5, wire6, wire7, wire8);
  output wire [(32'h3d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire5;
  input wire [(4'h9):(1'h0)] wire6;
  input wire signed [(3'h4):(1'h0)] wire7;
  input wire [(4'h9):(1'h0)] wire8;
  wire [(4'h9):(1'h0)] wire9;
  wire signed [(4'h9):(1'h0)] wire10;
  wire [(4'h8):(1'h0)] wire11;
  wire [(3'h4):(1'h0)] wire12;
  wire signed [(3'h7):(1'h0)] wire36;
  reg signed [(3'h4):(1'h0)] reg13 = (1'h0);
  reg [(4'ha):(1'h0)] reg14 = (1'h0);
  reg [(4'h9):(1'h0)] reg15 = (1'h0);
  assign y = {wire9,
                 wire10,
                 wire11,
                 wire12,
                 wire36,
                 reg13,
                 reg14,
                 reg15,
                 (1'h0)};
  assign wire9 = (~|$signed(((wire6 ? (8'ha0) : wire8) ?
                     (wire7 ? (8'ha1) : wire6) : (wire5 * (8'ha0)))));
  assign wire10 = (({$signed(wire9)} - (wire9 ?
                      {wire8} : (8'ha6))) | wire9[(1'h1):(1'h0)]);
  assign wire11 = (8'hae);
  assign wire12 = (8'had);
  always
    @(posedge clk) begin
      reg13 <= wire8;
      reg14 <= $signed(($signed(((8'ha7) ? wire6 : wire6)) >>> ((~|wire6) ?
          (wire7 <= wire5) : (wire8 ? wire9 : (8'ha0)))));
      reg15 <= ($unsigned(reg13[(1'h0):(1'h0)]) ?
          wire9[(1'h0):(1'h0)] : {($unsigned(wire10) || reg14)});
    end
  module16 #() modinst37 (wire36, clk, wire8, wire5, wire6, reg15);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module16
#(parameter param35 = (~|({{(8'ha3)}} ^ {{(8'ha1)}})))
(y, clk, wire20, wire19, wire18, wire17);
  output wire [(32'h63):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire20;
  input wire signed [(2'h3):(1'h0)] wire19;
  input wire [(2'h3):(1'h0)] wire18;
  input wire [(4'h9):(1'h0)] wire17;
  wire signed [(2'h2):(1'h0)] wire34;
  wire [(3'h7):(1'h0)] wire33;
  wire [(3'h7):(1'h0)] wire32;
  wire [(4'hb):(1'h0)] wire24;
  wire [(3'h7):(1'h0)] wire23;
  wire [(2'h3):(1'h0)] wire22;
  wire signed [(4'hb):(1'h0)] wire21;
  reg [(3'h5):(1'h0)] reg31 = (1'h0);
  reg [(3'h5):(1'h0)] reg30 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg29 = (1'h0);
  reg [(4'hb):(1'h0)] reg28 = (1'h0);
  reg [(3'h4):(1'h0)] reg27 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg26 = (1'h0);
  reg [(4'hb):(1'h0)] reg25 = (1'h0);
  assign y = {wire34,
                 wire33,
                 wire32,
                 wire24,
                 wire23,
                 wire22,
                 wire21,
                 reg31,
                 reg30,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 (1'h0)};
  assign wire21 = (8'ha7);
  assign wire22 = wire21;
  assign wire23 = (~&((~&$unsigned(wire18)) ^~ $signed($signed(wire20))));
  assign wire24 = ($signed(({wire23} ? wire18 : wire17)) ?
                      (&{$unsigned(wire21)}) : $unsigned($unsigned((wire20 ~^ wire22))));
  always
    @(posedge clk) begin
      reg25 <= wire20[(2'h3):(1'h1)];
    end
  always
    @(posedge clk) begin
      reg26 <= $signed((8'h9f));
    end
  always
    @(posedge clk) begin
      if (wire20)
        begin
          reg27 <= $unsigned((((wire23 ? reg25 : wire20) - $unsigned(wire17)) ?
              (^$unsigned(wire17)) : {(!wire24)}));
          reg28 <= $unsigned(((wire20 <<< reg26[(4'h8):(2'h3)]) ?
              {$signed(reg27)} : (wire18[(2'h2):(2'h2)] ^~ (wire17 < wire23))));
        end
      else
        begin
          reg27 <= ($unsigned($signed((wire20 ? (8'hae) : reg28))) ?
              $signed((+$unsigned(wire24))) : ($signed(wire20[(1'h1):(1'h1)]) & ((!wire19) >= $unsigned(wire21))));
          reg28 <= ($signed(({(8'ha3)} && (!(8'ha6)))) * ({wire17} * {(^~reg28)}));
          if ((wire19 | $signed(wire23[(3'h5):(3'h5)])))
            begin
              reg29 <= ((((wire23 >= wire18) ?
                  $unsigned(reg26) : $unsigned(wire19)) != ($unsigned(wire24) ?
                  $unsigned(wire17) : $unsigned((8'hab)))) <<< ($signed(((8'haa) ~^ wire24)) > $signed((wire23 < wire23))));
              reg30 <= (&$unsigned(wire24));
            end
          else
            begin
              reg29 <= (~$unsigned(($signed(wire22) ?
                  $signed(wire20) : $unsigned(wire18))));
              reg30 <= (+$unsigned($signed($signed(reg27))));
            end
        end
    end
  always
    @(posedge clk) begin
      reg31 <= ($unsigned(reg26[(2'h2):(1'h1)]) & $signed($signed($signed((8'ha8)))));
    end
  assign wire32 = wire21;
  assign wire33 = (^~(wire18 ? wire17[(3'h5):(3'h5)] : (|{(8'ha6)})));
  assign wire34 = (({(|wire24)} ?
                          wire23[(2'h2):(1'h0)] : (reg30[(1'h1):(1'h1)] <= (wire23 << wire23))) ?
                      $unsigned($signed($unsigned(reg29))) : (~|(reg27 <<< wire32)));
endmodule