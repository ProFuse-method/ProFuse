(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h325):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire3;
  input wire signed [(4'hd):(1'h0)] wire2;
  input wire signed [(5'h10):(1'h0)] wire1;
  input wire [(5'h15):(1'h0)] wire0;
  wire signed [(5'h11):(1'h0)] wire68;
  wire [(5'h10):(1'h0)] wire67;
  wire signed [(4'hd):(1'h0)] wire25;
  wire [(5'h15):(1'h0)] wire24;
  wire [(5'h13):(1'h0)] wire5;
  reg [(5'h15):(1'h0)] reg63 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg62 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg61 = (1'h0);
  reg [(5'h12):(1'h0)] reg60 = (1'h0);
  reg [(4'hf):(1'h0)] reg57 = (1'h0);
  reg [(3'h7):(1'h0)] reg55 = (1'h0);
  reg [(2'h2):(1'h0)] reg52 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg50 = (1'h0);
  reg [(4'he):(1'h0)] reg45 = (1'h0);
  reg [(5'h10):(1'h0)] reg43 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg41 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg40 = (1'h0);
  reg [(5'h12):(1'h0)] reg39 = (1'h0);
  reg [(4'hc):(1'h0)] reg37 = (1'h0);
  reg [(3'h5):(1'h0)] reg32 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg31 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg29 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg26 = (1'h0);
  reg [(2'h2):(1'h0)] reg23 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg22 = (1'h0);
  reg [(5'h15):(1'h0)] reg18 = (1'h0);
  reg [(3'h6):(1'h0)] reg15 = (1'h0);
  reg [(4'hd):(1'h0)] reg14 = (1'h0);
  reg [(2'h3):(1'h0)] reg13 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg11 = (1'h0);
  reg [(3'h7):(1'h0)] reg10 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg9 = (1'h0);
  reg [(3'h7):(1'h0)] reg4 = (1'h0);
  reg [(4'hf):(1'h0)] reg66 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg65 = (1'h0);
  reg [(5'h13):(1'h0)] forvar64 = (1'h0);
  reg [(3'h6):(1'h0)] reg59 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar58 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar56 = (1'h0);
  reg [(3'h7):(1'h0)] forvar54 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg53 = (1'h0);
  reg [(4'hd):(1'h0)] reg51 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg49 = (1'h0);
  reg [(3'h4):(1'h0)] reg48 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar47 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar46 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg44 = (1'h0);
  reg [(5'h11):(1'h0)] forvar42 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar38 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg36 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar35 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg34 = (1'h0);
  reg [(4'hf):(1'h0)] forvar33 = (1'h0);
  reg [(4'h8):(1'h0)] reg27 = (1'h0);
  reg [(4'he):(1'h0)] forvar26 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg30 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg28 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar27 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar21 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar20 = (1'h0);
  reg [(4'he):(1'h0)] reg19 = (1'h0);
  reg [(5'h13):(1'h0)] reg17 = (1'h0);
  reg [(4'hf):(1'h0)] forvar16 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar12 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar6 = (1'h0);
  assign y = {wire68,
                 wire67,
                 wire25,
                 wire24,
                 wire5,
                 reg63,
                 reg62,
                 reg61,
                 reg60,
                 reg57,
                 reg55,
                 reg52,
                 reg50,
                 reg45,
                 reg43,
                 reg41,
                 reg40,
                 reg39,
                 reg37,
                 reg32,
                 reg31,
                 reg29,
                 reg26,
                 reg23,
                 reg22,
                 reg18,
                 reg15,
                 reg14,
                 reg13,
                 reg11,
                 reg10,
                 reg9,
                 reg4,
                 reg66,
                 reg65,
                 forvar64,
                 reg59,
                 forvar58,
                 forvar56,
                 forvar54,
                 reg53,
                 reg51,
                 reg49,
                 reg48,
                 forvar47,
                 forvar46,
                 reg44,
                 forvar42,
                 forvar38,
                 reg36,
                 forvar35,
                 reg34,
                 forvar33,
                 reg27,
                 forvar26,
                 reg30,
                 reg28,
                 forvar27,
                 forvar21,
                 forvar20,
                 reg19,
                 reg17,
                 forvar16,
                 forvar12,
                 reg8,
                 reg7,
                 forvar6,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire3[(2'h3):(2'h2)];
    end
  assign wire5 = wire2[(1'h0):(1'h0)];
  always
    @(posedge clk) begin
      for (forvar6 = (1'h0); (forvar6 < (2'h2)); forvar6 = (forvar6 + (1'h1)))
        begin
          if (wire3)
            begin
              reg7 = wire2;
              reg8 = ((^~wire2) ? $unsigned($signed({reg4})) : reg4);
            end
          else
            begin
              reg7 = ((~&wire5[(5'h10):(3'h5)]) * wire2);
              reg9 <= (reg7 <<< reg8[(2'h2):(1'h0)]);
              reg10 <= $unsigned($unsigned((8'hb7)));
              reg11 <= ($signed($signed(reg10[(2'h2):(1'h1)])) && reg10[(2'h3):(2'h3)]);
            end
          for (forvar12 = (1'h0); (forvar12 < (2'h2)); forvar12 = (forvar12 + (1'h1)))
            begin
              reg13 <= wire1[(4'hb):(2'h3)];
              reg14 <= $unsigned((forvar12 || (~(+forvar12[(1'h1):(1'h1)]))));
              reg15 <= $signed(reg4);
            end
          for (forvar16 = (1'h0); (forvar16 < (3'h4)); forvar16 = (forvar16 + (1'h1)))
            begin
              reg17 = wire3[(3'h4):(1'h1)];
              reg18 <= ((({(reg13 ? reg11 : forvar16), (&wire5)} | (^~{reg15,
                  forvar16})) + $signed((8'ha3))) | (reg9 >> ($unsigned((reg13 ?
                  reg17 : wire5)) ~^ $signed($signed(reg7)))));
              reg19 = reg14[(2'h3):(2'h3)];
            end
        end
      for (forvar20 = (1'h0); (forvar20 < (1'h0)); forvar20 = (forvar20 + (1'h1)))
        begin
          for (forvar21 = (1'h0); (forvar21 < (1'h1)); forvar21 = (forvar21 + (1'h1)))
            begin
              reg22 <= ((8'hac) && reg10[(2'h2):(2'h2)]);
            end
        end
      reg23 <= {wire5[(3'h7):(2'h2)]};
    end
  assign wire24 = reg23[(2'h2):(2'h2)];
  assign wire25 = $unsigned({(reg10[(2'h3):(1'h1)] ?
                          wire5[(4'hb):(3'h7)] : $unsigned($unsigned(wire3)))});
  always
    @(posedge clk) begin
      if ((~|reg9))
        begin
          reg26 <= $signed(reg18);
          for (forvar27 = (1'h0); (forvar27 < (2'h2)); forvar27 = (forvar27 + (1'h1)))
            begin
              reg28 = $unsigned($unsigned((8'hae)));
              reg29 <= wire1;
              reg30 = ($signed((-((reg28 ? (8'h9e) : reg4) ?
                      ((8'ha3) < reg26) : reg18))) ?
                  $unsigned((~^forvar27)) : wire5[(3'h4):(2'h3)]);
              reg31 <= ($signed(($signed((wire25 > reg29)) ?
                      $unsigned($signed(wire0)) : ((7'h44) ?
                          {reg22, wire24} : reg28[(2'h3):(2'h3)]))) ?
                  (wire3 ?
                      wire5 : $unsigned(reg14[(4'hc):(3'h4)])) : $signed(reg10));
            end
        end
      else
        begin
          for (forvar26 = (1'h0); (forvar26 < (2'h2)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 = $unsigned($signed($unsigned(((&forvar26) ?
                  (^~reg28) : (reg31 && (8'haf))))));
              reg29 <= $signed(forvar27);
              reg30 = ($unsigned(($unsigned($signed((8'hb4))) >>> $signed(((8'ha8) >= reg28)))) ?
                  (!$unsigned(wire3)) : $signed(({(wire24 ?
                          reg28 : forvar26)} && ($unsigned(reg22) + $unsigned((8'hb8))))));
              reg31 <= ($signed($signed((^(reg10 ? reg23 : reg13)))) ?
                  wire2[(4'h9):(2'h3)] : {((((8'h9c) ? wire0 : reg26) ?
                              $signed(wire3) : $signed(reg9)) ?
                          {(~wire25), (&reg11)} : wire0[(5'h11):(4'h9)]),
                      ($unsigned(((8'h9e) < wire25)) >>> ((~reg30) ?
                          reg14[(3'h6):(1'h0)] : (forvar27 <<< wire5)))});
              reg32 <= (8'hbb);
            end
          for (forvar33 = (1'h0); (forvar33 < (1'h0)); forvar33 = (forvar33 + (1'h1)))
            begin
              reg34 = ((($unsigned(((8'h9f) >> forvar26)) ?
                  (+(reg31 - reg29)) : {{wire0, wire5}}) && (8'hab)) <<< reg27);
            end
          for (forvar35 = (1'h0); (forvar35 < (2'h2)); forvar35 = (forvar35 + (1'h1)))
            begin
              reg36 = $signed(reg13);
              reg37 <= reg22[(3'h4):(2'h3)];
            end
          for (forvar38 = (1'h0); (forvar38 < (3'h4)); forvar38 = (forvar38 + (1'h1)))
            begin
              reg39 <= (8'hac);
              reg40 <= ((^~forvar27) ^ {(|$unsigned(((8'ha4) ? wire1 : reg32))),
                  reg26[(1'h0):(1'h0)]});
              reg41 <= $signed((($unsigned((wire5 ? wire2 : (7'h40))) ?
                  ($signed(reg31) ?
                      {reg32,
                          wire5} : (reg28 + forvar27)) : $signed((reg32 & forvar35))) > $unsigned((|((8'ha3) ?
                  reg23 : (8'ha5))))));
            end
          for (forvar42 = (1'h0); (forvar42 < (2'h2)); forvar42 = (forvar42 + (1'h1)))
            begin
              reg43 <= (!($signed(forvar38) ? reg9[(3'h4):(3'h4)] : {reg9}));
              reg44 = $unsigned(($unsigned($unsigned(reg36)) ~^ ($unsigned($unsigned(reg31)) ^ ((wire25 ?
                      reg37 : forvar33) ?
                  (wire5 ? reg40 : forvar26) : reg26))));
              reg45 <= (($unsigned(reg31[(3'h7):(3'h4)]) > reg43) ?
                  reg4 : {(|$unsigned({reg11}))});
            end
        end
      for (forvar46 = (1'h0); (forvar46 < (3'h4)); forvar46 = (forvar46 + (1'h1)))
        begin
          for (forvar47 = (1'h0); (forvar47 < (3'h4)); forvar47 = (forvar47 + (1'h1)))
            begin
              reg48 = reg26[(1'h0):(1'h0)];
            end
          if (reg11)
            begin
              reg49 = (((~|reg32[(3'h5):(2'h2)]) + $signed(forvar27[(3'h4):(1'h1)])) ^~ $unsigned((($signed(reg27) || (reg13 && (8'hb0))) ?
                  $signed(wire5) : {(reg27 >>> wire0), (+reg27)})));
              reg50 <= $signed(($unsigned({reg31}) ?
                  reg4 : $signed(((wire1 ? reg29 : reg11) || reg32))));
              reg51 = {$signed(reg43[(2'h3):(1'h0)]), wire24[(4'hd):(3'h5)]};
            end
          else
            begin
              reg50 <= (((wire2[(4'hb):(3'h5)] && $unsigned((reg18 <<< wire1))) - $signed(reg18)) ?
                  (reg11[(3'h4):(2'h2)] | $signed(((8'hac) != (forvar38 ?
                      forvar42 : wire3)))) : (8'hb4));
              reg52 <= (~^$unsigned((($signed(wire0) ^ reg34[(2'h2):(1'h0)]) ?
                  reg10 : (reg37[(1'h1):(1'h1)] || $unsigned(wire3)))));
            end
          reg53 = {$signed((reg41[(4'hc):(3'h7)] ?
                  ((~^reg34) ? reg23 : wire2) : forvar38[(4'h8):(3'h6)])),
              (!$signed(((reg36 ? (8'ha2) : forvar33) ?
                  $signed(reg43) : reg30)))};
        end
      for (forvar54 = (1'h0); (forvar54 < (1'h0)); forvar54 = (forvar54 + (1'h1)))
        begin
          reg55 <= (($unsigned($unsigned((+forvar47))) ?
                  reg45[(3'h5):(1'h0)] : (reg13 ^ reg14[(4'ha):(3'h4)])) ?
              ({((reg32 ? forvar27 : forvar26) >= reg13), forvar46} ?
                  ((~|$signed(reg45)) & wire24) : {wire0[(5'h14):(4'ha)]}) : $signed((($unsigned(wire0) ?
                  ((8'hbe) ~^ wire5) : wire25[(4'ha):(4'ha)]) >= $signed($signed(forvar42)))));
        end
      for (forvar56 = (1'h0); (forvar56 < (3'h4)); forvar56 = (forvar56 + (1'h1)))
        begin
          reg57 <= ((reg40[(3'h6):(2'h3)] ?
              (~|(~^(reg48 ? (8'hab) : reg36))) : $signed(reg39)) >> (8'haf));
          for (forvar58 = (1'h0); (forvar58 < (3'h4)); forvar58 = (forvar58 + (1'h1)))
            begin
              reg59 = $signed($unsigned(reg39[(4'hb):(2'h2)]));
              reg60 <= $signed(($unsigned($signed({forvar54})) >>> reg41));
              reg61 <= reg49;
              reg62 <= ((~$unsigned(((reg13 + reg14) ?
                      (reg31 ? reg4 : forvar54) : (wire2 ? wire25 : reg41)))) ?
                  $unsigned((reg23 >> reg28[(1'h1):(1'h1)])) : $unsigned((({wire1,
                          reg49} ?
                      $unsigned(forvar54) : (^~forvar26)) << (8'h9f))));
            end
          reg63 <= reg11;
        end
      for (forvar64 = (1'h0); (forvar64 < (1'h0)); forvar64 = (forvar64 + (1'h1)))
        begin
          reg65 = ($unsigned(($unsigned((forvar35 >>> reg14)) ?
              reg55 : $unsigned($unsigned(reg14)))) ^~ (($signed((reg18 ?
                  (8'haa) : (8'hb3))) ?
              (~&$unsigned(reg37)) : ((forvar47 ? wire24 : reg14) ?
                  $unsigned(forvar42) : $unsigned(forvar27))) <<< reg9));
          reg66 = $unsigned($signed((($signed(wire25) ?
              $signed(reg59) : $unsigned((7'h41))) != (reg37[(4'h8):(3'h6)] ?
              forvar46 : reg4))));
        end
    end
  assign wire67 = ((~(~&reg11)) ?
                      ($signed({reg41[(3'h4):(1'h1)],
                          {(8'hbb)}}) != $unsigned((~(reg22 > wire3)))) : wire3);
  assign wire68 = ({$signed(wire1[(1'h0):(1'h0)])} ?
                      $signed($signed($signed((~reg31)))) : ((((8'hbe) + (reg10 ?
                              reg18 : reg29)) ?
                          (-$signed(reg15)) : reg15[(1'h1):(1'h1)]) <= reg22));
endmodule