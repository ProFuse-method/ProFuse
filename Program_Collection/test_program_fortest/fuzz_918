(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param74 = {({{(^(8'ha6)), ((7'h43) >= (8'hb5))}, (((8'hb7) ? (8'hbe) : (8'hb3)) | {(8'ha7)})} ? ((((7'h43) ? (8'ha1) : (8'hb6)) <<< ((8'ha0) >= (8'hb6))) > (^~(~&(8'ha2)))) : (^(-((8'ha3) ^~ (8'hbe)))))})
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h239):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h11):(1'h0)] wire3;
  input wire signed [(4'hc):(1'h0)] wire2;
  input wire signed [(5'h14):(1'h0)] wire1;
  input wire signed [(3'h7):(1'h0)] wire0;
  wire [(4'hb):(1'h0)] wire73;
  wire signed [(4'h8):(1'h0)] wire72;
  wire signed [(3'h5):(1'h0)] wire71;
  wire [(5'h10):(1'h0)] wire70;
  wire [(5'h13):(1'h0)] wire69;
  wire signed [(4'hc):(1'h0)] wire68;
  wire [(5'h15):(1'h0)] wire67;
  wire signed [(5'h13):(1'h0)] wire66;
  wire [(2'h3):(1'h0)] wire65;
  wire signed [(4'ha):(1'h0)] wire64;
  wire signed [(5'h15):(1'h0)] wire63;
  wire [(4'he):(1'h0)] wire43;
  wire signed [(5'h14):(1'h0)] wire31;
  wire [(4'hc):(1'h0)] wire30;
  wire signed [(4'hb):(1'h0)] wire28;
  reg signed [(4'hf):(1'h0)] reg62 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg61 = (1'h0);
  reg [(3'h6):(1'h0)] reg60 = (1'h0);
  reg [(3'h4):(1'h0)] reg59 = (1'h0);
  reg [(5'h15):(1'h0)] reg58 = (1'h0);
  reg [(3'h7):(1'h0)] reg55 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg53 = (1'h0);
  reg [(4'hb):(1'h0)] reg49 = (1'h0);
  reg [(4'hf):(1'h0)] reg48 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg46 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg42 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg37 = (1'h0);
  reg [(5'h12):(1'h0)] reg36 = (1'h0);
  reg [(5'h10):(1'h0)] reg35 = (1'h0);
  reg [(4'h9):(1'h0)] reg34 = (1'h0);
  reg [(2'h3):(1'h0)] forvar57 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg56 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg54 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg52 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar51 = (1'h0);
  reg [(5'h14):(1'h0)] reg50 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg47 = (1'h0);
  reg [(2'h3):(1'h0)] forvar45 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar44 = (1'h0);
  reg [(4'hb):(1'h0)] forvar41 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar40 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg39 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar38 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar33 = (1'h0);
  reg [(2'h2):(1'h0)] forvar32 = (1'h0);
  assign y = {wire73,
                 wire72,
                 wire71,
                 wire70,
                 wire69,
                 wire68,
                 wire67,
                 wire66,
                 wire65,
                 wire64,
                 wire63,
                 wire43,
                 wire31,
                 wire30,
                 wire28,
                 reg62,
                 reg61,
                 reg60,
                 reg59,
                 reg58,
                 reg55,
                 reg53,
                 reg49,
                 reg48,
                 reg46,
                 reg42,
                 reg37,
                 reg36,
                 reg35,
                 reg34,
                 forvar57,
                 reg56,
                 reg54,
                 reg52,
                 forvar51,
                 reg50,
                 reg47,
                 forvar45,
                 forvar44,
                 forvar41,
                 forvar40,
                 reg39,
                 forvar38,
                 forvar33,
                 forvar32,
                 (1'h0)};
  module4 #() modinst29 (wire28, clk, wire2, wire0, wire3, wire1);
  assign wire30 = $unsigned(((~(~wire1[(3'h6):(1'h0)])) & (+{(wire2 ?
                          wire2 : wire28)})));
  assign wire31 = wire28;
  always
    @(posedge clk) begin
      for (forvar32 = (1'h0); (forvar32 < (3'h4)); forvar32 = (forvar32 + (1'h1)))
        begin
          for (forvar33 = (1'h0); (forvar33 < (1'h1)); forvar33 = (forvar33 + (1'h1)))
            begin
              reg34 <= wire28;
              reg35 <= $signed({($signed(wire2) ^~ ((~^(8'h9f)) ?
                      wire3 : (~^wire1))),
                  ($unsigned((wire31 ~^ forvar33)) ?
                      ((!wire3) ?
                          (wire30 ?
                              forvar32 : (8'hbf)) : wire2) : (^$unsigned(wire31)))});
              reg36 <= (reg34 || (+wire30));
            end
          reg37 <= (((wire2 ?
                  ((reg35 >= forvar32) && wire2) : $signed((!wire30))) ?
              ((~|reg35) || forvar33[(5'h10):(2'h2)]) : (|$unsigned(wire28[(2'h2):(1'h0)]))) << $unsigned(reg36[(4'hf):(3'h4)]));
        end
      for (forvar38 = (1'h0); (forvar38 < (3'h4)); forvar38 = (forvar38 + (1'h1)))
        begin
          reg39 = $unsigned($signed((+forvar38)));
        end
      for (forvar40 = (1'h0); (forvar40 < (2'h3)); forvar40 = (forvar40 + (1'h1)))
        begin
          for (forvar41 = (1'h0); (forvar41 < (1'h0)); forvar41 = (forvar41 + (1'h1)))
            begin
              reg42 <= ($signed($signed($signed((wire3 & wire2)))) ?
                  (reg36 + wire1) : forvar33);
            end
        end
    end
  assign wire43 = (+wire31);
  always
    @(posedge clk) begin
      for (forvar44 = (1'h0); (forvar44 < (1'h0)); forvar44 = (forvar44 + (1'h1)))
        begin
          for (forvar45 = (1'h0); (forvar45 < (1'h0)); forvar45 = (forvar45 + (1'h1)))
            begin
              reg46 <= $signed(((~^(wire43[(3'h7):(3'h7)] + (reg37 ?
                      reg36 : wire43))) ?
                  (reg35 ?
                      wire31[(4'hc):(1'h1)] : $signed(wire2)) : (($unsigned(reg35) ?
                          $signed(reg42) : wire3) ?
                      ((8'hb5) ?
                          $unsigned((8'haa)) : ((8'hbd) ^ wire30)) : {(wire0 ?
                              wire30 : (8'hb4))})));
              reg47 = (wire43[(3'h7):(2'h2)] < $unsigned({$unsigned((reg46 != reg34)),
                  {(wire28 ~^ reg46), $unsigned(reg42)}}));
              reg48 <= wire31;
              reg49 <= $unsigned(forvar44);
            end
        end
      reg50 = reg42;
      for (forvar51 = (1'h0); (forvar51 < (3'h4)); forvar51 = (forvar51 + (1'h1)))
        begin
          if (reg37)
            begin
              reg52 = $signed(wire0[(3'h5):(2'h3)]);
              reg53 <= $unsigned(wire0[(2'h2):(2'h2)]);
              reg54 = {(^{reg36, $signed($unsigned(reg49))})};
              reg55 <= ((((8'hb8) ?
                      ((wire31 ? reg48 : reg37) ?
                          $unsigned(wire1) : (forvar45 ?
                              reg47 : forvar45)) : wire0) <= $unsigned(($unsigned(reg53) <<< (8'ha6)))) ?
                  wire28[(4'hb):(2'h3)] : forvar44[(2'h3):(1'h1)]);
              reg56 = ((((forvar51 - (^~wire43)) ?
                      ((~|reg48) ^~ (8'hbb)) : reg55[(2'h2):(1'h0)]) > $signed(((reg46 ?
                          wire2 : wire28) ?
                      (wire1 ? reg48 : reg37) : (wire31 ? reg53 : reg46)))) ?
                  (|$unsigned(wire43)) : wire28);
            end
          else
            begin
              reg52 = forvar45;
            end
          for (forvar57 = (1'h0); (forvar57 < (3'h4)); forvar57 = (forvar57 + (1'h1)))
            begin
              reg58 <= ($unsigned(reg49) & forvar45);
              reg59 <= (forvar44[(4'h9):(3'h5)] || (({{(8'ha0)}} ?
                      ((!wire31) <<< (~^wire28)) : (~&$unsigned(wire3))) ?
                  $signed((^~reg56[(3'h7):(2'h2)])) : (reg56[(3'h6):(2'h3)] ?
                      (reg47 & (^~reg37)) : reg56)));
              reg60 <= reg50[(3'h4):(1'h0)];
              reg61 <= reg58[(2'h2):(1'h1)];
            end
        end
      reg62 <= (((8'h9f) ?
              $signed(((reg52 ? reg55 : reg47) < (^~wire3))) : {((forvar45 ?
                      reg59 : reg48) ~^ $unsigned(reg48))}) ?
          reg61 : $unsigned($signed(reg52)));
    end
  assign wire63 = reg53;
  assign wire64 = reg59[(2'h2):(1'h1)];
  assign wire65 = $unsigned($unsigned($signed(((reg60 ^~ (8'hae)) && (wire31 <<< (7'h44))))));
  assign wire66 = wire63[(4'hb):(2'h3)];
  assign wire67 = $unsigned((({(~&reg49), (reg61 * wire63)} ?
                          (wire1 ?
                              reg62 : (reg61 ?
                                  reg42 : wire66)) : (reg46[(2'h3):(1'h0)] ?
                              reg36 : (~|reg37))) ?
                      $unsigned({reg49[(3'h4):(2'h3)]}) : (wire64 ?
                          $signed((+reg36)) : $signed((8'haa)))));
  assign wire68 = $signed(wire30[(3'h4):(1'h0)]);
  assign wire69 = wire65[(2'h3):(2'h3)];
  assign wire70 = ((-reg46[(3'h5):(1'h0)]) ? reg36 : reg53);
  assign wire71 = $unsigned(((+(7'h44)) || (reg49 + wire43[(1'h0):(1'h0)])));
  assign wire72 = (-reg53[(4'h8):(1'h0)]);
  assign wire73 = (reg58[(3'h7):(3'h4)] | $unsigned(wire64[(4'ha):(1'h0)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'hca):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hc):(1'h0)] wire8;
  input wire signed [(3'h7):(1'h0)] wire7;
  input wire [(5'h11):(1'h0)] wire6;
  input wire [(4'hd):(1'h0)] wire5;
  wire [(5'h11):(1'h0)] wire27;
  wire signed [(5'h10):(1'h0)] wire26;
  wire [(2'h2):(1'h0)] wire25;
  wire signed [(4'hb):(1'h0)] wire24;
  wire signed [(4'hc):(1'h0)] wire23;
  wire signed [(4'h8):(1'h0)] wire9;
  reg signed [(5'h10):(1'h0)] reg22 = (1'h0);
  reg [(5'h15):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg19 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg18 = (1'h0);
  reg [(2'h2):(1'h0)] reg15 = (1'h0);
  reg [(5'h11):(1'h0)] reg14 = (1'h0);
  reg [(4'h8):(1'h0)] reg21 = (1'h0);
  reg [(3'h4):(1'h0)] forvar17 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg16 = (1'h0);
  reg [(3'h4):(1'h0)] reg13 = (1'h0);
  reg [(4'h9):(1'h0)] reg12 = (1'h0);
  reg [(5'h11):(1'h0)] forvar11 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar10 = (1'h0);
  assign y = {wire27,
                 wire26,
                 wire25,
                 wire24,
                 wire23,
                 wire9,
                 reg22,
                 reg20,
                 reg19,
                 reg18,
                 reg15,
                 reg14,
                 reg21,
                 forvar17,
                 reg16,
                 reg13,
                 reg12,
                 forvar11,
                 forvar10,
                 (1'h0)};
  assign wire9 = {{((~^(8'hb9)) ?
                             ((wire8 >>> wire6) | (wire5 ?
                                 wire7 : wire8)) : wire5[(3'h5):(1'h0)])},
                     $signed(wire6)};
  always
    @(posedge clk) begin
      for (forvar10 = (1'h0); (forvar10 < (2'h3)); forvar10 = (forvar10 + (1'h1)))
        begin
          for (forvar11 = (1'h0); (forvar11 < (3'h4)); forvar11 = (forvar11 + (1'h1)))
            begin
              reg12 = wire9[(2'h2):(1'h0)];
              reg13 = ((wire8 == (~|($signed(wire5) ?
                      (^~wire7) : (forvar10 == reg12)))) ?
                  wire9 : ($unsigned({wire6[(4'hb):(2'h2)]}) ?
                      $unsigned($signed(forvar11)) : ($signed(wire7[(3'h5):(3'h4)]) ?
                          wire8[(4'hc):(1'h0)] : {forvar10[(4'hd):(4'ha)],
                              $unsigned(wire6)})));
              reg14 <= $unsigned((~wire7));
              reg15 <= $unsigned((&($signed(forvar11[(4'hd):(4'hc)]) == ((~reg13) ?
                  (&wire7) : {reg12, forvar10}))));
              reg16 = ((^wire7[(2'h3):(2'h2)]) ?
                  $signed((8'ha4)) : (+wire9[(1'h0):(1'h0)]));
            end
          for (forvar17 = (1'h0); (forvar17 < (2'h2)); forvar17 = (forvar17 + (1'h1)))
            begin
              reg18 <= ((^~wire7[(2'h2):(1'h0)]) ?
                  ($signed(wire5) < reg13) : {reg14[(1'h1):(1'h1)]});
              reg19 <= (!((!wire8[(4'ha):(2'h3)]) < forvar17));
              reg20 <= ((wire8[(3'h4):(1'h1)] ?
                  ($signed((8'hbc)) << (-$unsigned((8'haf)))) : ({$unsigned(wire5)} > (~^((8'ha6) ?
                      forvar10 : wire7)))) <= wire7[(3'h6):(3'h6)]);
              reg21 = forvar17;
            end
          reg22 <= ({((reg18 ?
                      ((8'h9e) ?
                          wire9 : reg12) : (reg15 ^~ forvar10)) & wire8[(4'h9):(3'h7)]),
                  {((|forvar10) ? (~wire9) : (reg13 ^~ reg20))}} ?
              $unsigned(wire9) : $unsigned(reg21[(1'h1):(1'h0)]));
        end
    end
  assign wire23 = reg22;
  assign wire24 = (wire9 ?
                      $signed(reg20[(4'h9):(2'h3)]) : (&{$unsigned((wire23 && wire5)),
                          ({reg22, (8'h9e)} ?
                              (wire7 ? wire7 : reg18) : ((8'ha9) ?
                                  (8'hb1) : reg14))}));
  assign wire25 = (wire9[(3'h5):(1'h0)] ?
                      {(wire24[(1'h1):(1'h0)] < (wire6 << (8'hb4))),
                          $signed($signed($unsigned(reg19)))} : {reg15});
  assign wire26 = reg19[(3'h5):(3'h4)];
  assign wire27 = $signed($unsigned($unsigned($signed((8'ha8)))));
endmodule