(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param14 = (+((((8'ha6) ? (8'ha4) : (8'ha0)) <<< (!(8'hac))) <<< ((+(8'ha7)) ? {(8'h9e)} : ((8'ha3) ? (8'ha2) : (8'ha1))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h40):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire3;
  input wire [(3'h4):(1'h0)] wire2;
  input wire [(3'h5):(1'h0)] wire1;
  input wire [(3'h4):(1'h0)] wire0;
  wire signed [(2'h3):(1'h0)] wire13;
  wire [(4'h9):(1'h0)] wire5;
  wire signed [(4'hb):(1'h0)] wire4;
  reg [(2'h2):(1'h0)] reg12 = (1'h0);
  reg [(2'h2):(1'h0)] reg11 = (1'h0);
  reg [(2'h3):(1'h0)] reg10 = (1'h0);
  reg [(4'h9):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg8 = (1'h0);
  reg [(4'hb):(1'h0)] reg7 = (1'h0);
  reg [(3'h7):(1'h0)] reg6 = (1'h0);
  assign y = {wire13,
                 wire5,
                 wire4,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 (1'h0)};
  assign wire4 = (&(wire3 ? wire3 : (-(8'hae))));
  assign wire5 = wire4[(3'h6):(3'h4)];
  always
    @(posedge clk) begin
      if (($signed((~(wire1 >> wire3))) ? (&wire0) : wire2[(2'h2):(2'h2)]))
        begin
          reg6 <= ((wire1[(2'h3):(2'h3)] ?
                  wire0[(2'h2):(1'h1)] : ($unsigned((8'ha0)) == $signed(wire3))) ?
              (wire3 ?
                  ($signed(wire4) != wire1[(2'h2):(1'h0)]) : wire0[(3'h4):(1'h1)]) : ($signed((8'hac)) ?
                  wire3[(1'h0):(1'h0)] : (8'haf)));
          if (({wire0[(1'h0):(1'h0)]} ? wire4 : wire2[(1'h0):(1'h0)]))
            begin
              reg7 <= {wire0};
              reg8 <= $unsigned(wire4);
              reg9 <= (wire3[(3'h6):(3'h5)] ? wire0 : wire2);
            end
          else
            begin
              reg7 <= $unsigned(reg7);
              reg8 <= ((+(-{reg6})) ?
                  (reg7[(1'h0):(1'h0)] ?
                      (^~$signed(wire1)) : reg8) : wire2[(2'h2):(2'h2)]);
            end
          reg10 <= {reg8[(1'h1):(1'h1)]};
        end
      else
        begin
          reg6 <= wire0[(3'h4):(2'h3)];
        end
      reg11 <= {(+wire3[(3'h6):(3'h6)])};
    end
  always
    @(posedge clk) begin
      reg12 <= reg6[(3'h5):(1'h1)];
    end
  assign wire13 = $unsigned((~($signed((8'hb0)) >> $unsigned(wire3))));
endmodule