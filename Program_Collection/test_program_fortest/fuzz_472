(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param39 = ({(((8'ha7) > (8'haa)) << (+(8'h9f)))} ? (8'hab) : (((~&(8'ha1)) ? {(8'h9c)} : (+(8'ha1))) ? (((8'haf) ? (8'ha5) : (8'haf)) ? ((8'h9f) ~^ (8'h9c)) : (!(8'ha4))) : (|((8'h9c) ? (8'ha3) : (8'hac))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h45):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire [(4'h8):(1'h0)] wire0;
  wire [(4'ha):(1'h0)] wire38;
  wire [(4'hb):(1'h0)] wire37;
  wire signed [(3'h5):(1'h0)] wire36;
  wire [(3'h6):(1'h0)] wire34;
  wire [(4'h8):(1'h0)] wire33;
  wire [(3'h7):(1'h0)] wire31;
  wire signed [(4'hb):(1'h0)] wire30;
  wire signed [(4'ha):(1'h0)] wire28;
  assign y = {wire38,
                 wire37,
                 wire36,
                 wire34,
                 wire33,
                 wire31,
                 wire30,
                 wire28,
                 (1'h0)};
  module4 #() modinst29 (wire28, clk, wire0, wire3, wire1, wire2);
  assign wire30 = wire3;
  module13 #() modinst32 (.clk(clk), .wire15(wire30), .wire17(wire28), .wire16(wire1), .y(wire31), .wire14(wire0));
  assign wire33 = (~&wire31);
  module13 #() modinst35 (.clk(clk), .wire16(wire30), .y(wire34), .wire15(wire3), .wire14(wire0), .wire17(wire33));
  assign wire36 = wire28;
  assign wire37 = {$signed(((wire3 ~^ wire3) - $unsigned(wire31)))};
  assign wire38 = (({wire37} ?
                      wire37[(1'h1):(1'h1)] : $signed((|wire2))) == $signed({(~^wire31)}));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h20):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire8;
  input wire [(3'h4):(1'h0)] wire7;
  input wire signed [(4'hb):(1'h0)] wire6;
  input wire [(3'h4):(1'h0)] wire5;
  wire signed [(2'h2):(1'h0)] wire27;
  wire signed [(3'h6):(1'h0)] wire25;
  wire [(2'h2):(1'h0)] wire12;
  reg signed [(4'ha):(1'h0)] reg11 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg10 = (1'h0);
  reg [(2'h3):(1'h0)] reg9 = (1'h0);
  assign y = {wire27, wire25, wire12, reg11, reg10, reg9, (1'h0)};
  always
    @(posedge clk) begin
      reg9 <= (($unsigned((~^wire7)) ^ wire5[(3'h4):(1'h1)]) >> wire6[(1'h1):(1'h0)]);
      reg10 <= ($signed($signed(((8'h9c) >>> wire6))) ?
          ((~$unsigned(reg9)) ?
              $signed((^wire8)) : (-wire8[(3'h4):(3'h4)])) : wire7[(2'h2):(1'h1)]);
      reg11 <= $unsigned($signed((!$signed(wire6))));
    end
  assign wire12 = (~^({$unsigned(wire6)} >>> (~&reg11[(2'h3):(1'h0)])));
  module13 #() modinst26 (.wire15(wire6), .clk(clk), .y(wire25), .wire17(wire8), .wire14(reg11), .wire16(reg9));
  assign wire27 = wire7;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13  (y, clk, wire17, wire16, wire15, wire14);
  output wire [(32'h2a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire17;
  input wire signed [(2'h3):(1'h0)] wire16;
  input wire [(4'hb):(1'h0)] wire15;
  input wire [(4'h8):(1'h0)] wire14;
  wire [(2'h3):(1'h0)] wire24;
  wire [(3'h7):(1'h0)] wire23;
  wire signed [(3'h4):(1'h0)] wire22;
  wire signed [(4'h9):(1'h0)] wire21;
  wire [(3'h4):(1'h0)] wire20;
  wire [(2'h3):(1'h0)] wire19;
  wire signed [(4'hb):(1'h0)] wire18;
  assign y = {wire24, wire23, wire22, wire21, wire20, wire19, wire18, (1'h0)};
  assign wire18 = $signed((({wire14} ?
                      $unsigned(wire15) : (8'ha0)) <= ({wire14} > wire17[(3'h7):(1'h0)])));
  assign wire19 = (~^wire14);
  assign wire20 = $signed($signed(wire18[(4'h8):(2'h3)]));
  assign wire21 = ($unsigned(((~wire16) ?
                      $unsigned(wire20) : (wire15 ^ wire18))) && {(wire18[(3'h5):(3'h5)] != (wire18 ?
                          wire20 : wire17))});
  assign wire22 = ($unsigned(wire15[(4'ha):(1'h0)]) | wire14[(4'h8):(3'h7)]);
  assign wire23 = wire22[(1'h1):(1'h0)];
  assign wire24 = (((8'ha5) > (wire23 - $unsigned(wire21))) ^~ wire23[(3'h6):(2'h3)]);
endmodule