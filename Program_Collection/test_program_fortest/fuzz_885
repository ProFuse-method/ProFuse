(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3, wire4);
  output wire [(32'h296):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h13):(1'h0)] wire0;
  input wire [(5'h11):(1'h0)] wire1;
  input wire [(5'h15):(1'h0)] wire2;
  input wire [(3'h5):(1'h0)] wire3;
  input wire [(5'h15):(1'h0)] wire4;
  wire signed [(4'he):(1'h0)] wire105;
  wire signed [(3'h6):(1'h0)] wire104;
  wire [(4'h8):(1'h0)] wire103;
  wire [(4'he):(1'h0)] wire102;
  wire [(5'h15):(1'h0)] wire101;
  wire [(5'h12):(1'h0)] wire100;
  wire [(4'h9):(1'h0)] wire67;
  wire [(4'hb):(1'h0)] wire66;
  wire signed [(3'h6):(1'h0)] wire65;
  wire signed [(5'h15):(1'h0)] wire64;
  wire signed [(4'he):(1'h0)] wire63;
  wire [(4'hb):(1'h0)] wire61;
  reg signed [(5'h10):(1'h0)] reg108 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg107 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg98 = (1'h0);
  reg [(4'ha):(1'h0)] reg96 = (1'h0);
  reg [(5'h11):(1'h0)] reg94 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg92 = (1'h0);
  reg [(4'hf):(1'h0)] reg88 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg86 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg82 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg80 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg78 = (1'h0);
  reg [(3'h5):(1'h0)] reg75 = (1'h0);
  reg [(4'hb):(1'h0)] reg74 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg71 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg114 = (1'h0);
  reg [(4'h9):(1'h0)] reg113 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar112 = (1'h0);
  reg [(5'h12):(1'h0)] reg111 = (1'h0);
  reg [(2'h2):(1'h0)] reg110 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar109 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar106 = (1'h0);
  reg [(5'h10):(1'h0)] reg99 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar97 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar95 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg93 = (1'h0);
  reg [(5'h11):(1'h0)] reg91 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar90 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar89 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg87 = (1'h0);
  reg [(3'h6):(1'h0)] reg85 = (1'h0);
  reg [(4'h9):(1'h0)] forvar84 = (1'h0);
  reg [(5'h14):(1'h0)] forvar83 = (1'h0);
  reg [(3'h6):(1'h0)] reg81 = (1'h0);
  reg [(4'hd):(1'h0)] reg79 = (1'h0);
  reg [(3'h4):(1'h0)] reg77 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar76 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg73 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg72 = (1'h0);
  reg [(5'h10):(1'h0)] forvar70 = (1'h0);
  reg [(5'h14):(1'h0)] reg69 = (1'h0);
  reg [(5'h12):(1'h0)] forvar68 = (1'h0);
  assign y = {wire105,
                 wire104,
                 wire103,
                 wire102,
                 wire101,
                 wire100,
                 wire67,
                 wire66,
                 wire65,
                 wire64,
                 wire63,
                 wire61,
                 reg108,
                 reg107,
                 reg98,
                 reg96,
                 reg94,
                 reg92,
                 reg88,
                 reg86,
                 reg82,
                 reg80,
                 reg78,
                 reg75,
                 reg74,
                 reg71,
                 reg114,
                 reg113,
                 forvar112,
                 reg111,
                 reg110,
                 forvar109,
                 forvar106,
                 reg99,
                 forvar97,
                 forvar95,
                 reg93,
                 reg91,
                 forvar90,
                 forvar89,
                 reg87,
                 reg85,
                 forvar84,
                 forvar83,
                 reg81,
                 reg79,
                 reg77,
                 forvar76,
                 reg73,
                 reg72,
                 forvar70,
                 reg69,
                 forvar68,
                 (1'h0)};
  module5 #() modinst62 (wire61, clk, wire4, wire2, wire1, wire0, wire3);
  assign wire63 = $signed($unsigned(wire0));
  assign wire64 = $signed(wire63[(3'h5):(1'h1)]);
  assign wire65 = (8'hbd);
  assign wire66 = wire4[(5'h10):(4'h8)];
  assign wire67 = wire66;
  always
    @(posedge clk) begin
      for (forvar68 = (1'h0); (forvar68 < (2'h2)); forvar68 = (forvar68 + (1'h1)))
        begin
          reg69 = $signed($signed((wire65[(3'h4):(1'h0)] ?
              $unsigned($unsigned((8'hab))) : $signed((wire3 ?
                  (8'hbd) : wire4)))));
          for (forvar70 = (1'h0); (forvar70 < (2'h2)); forvar70 = (forvar70 + (1'h1)))
            begin
              reg71 <= $unsigned(wire0[(3'h4):(2'h2)]);
              reg72 = wire4[(4'hb):(4'h9)];
              reg73 = wire4[(5'h14):(5'h10)];
              reg74 <= wire0;
              reg75 <= ((reg71 <<< wire67[(3'h7):(3'h6)]) <<< ($unsigned(reg71) || (wire61[(1'h1):(1'h0)] >>> (~^wire67[(1'h1):(1'h0)]))));
            end
          for (forvar76 = (1'h0); (forvar76 < (1'h0)); forvar76 = (forvar76 + (1'h1)))
            begin
              reg77 = reg69;
              reg78 <= $signed($signed((^~(wire4[(1'h0):(1'h0)] < (~forvar70)))));
            end
        end
      reg79 = reg71[(4'hd):(1'h0)];
      reg80 <= ({{($unsigned(reg78) <<< wire65),
                  ((reg74 ? forvar70 : (8'ha7)) ?
                      (reg72 ~^ (8'hbf)) : (wire67 ? reg77 : wire67))}} ?
          (reg75 ?
              $signed(reg73[(4'he):(3'h6)]) : $signed(wire61)) : $unsigned(forvar70[(3'h5):(3'h4)]));
      reg81 = ($unsigned((!{(reg73 & wire3)})) ?
          wire0 : (wire64[(3'h6):(1'h0)] ?
              reg77[(1'h0):(1'h0)] : {((-wire63) && $unsigned(reg77))}));
      reg82 <= ($signed(reg77) || (~$signed($unsigned((reg74 <= reg69)))));
    end
  always
    @(posedge clk) begin
      for (forvar83 = (1'h0); (forvar83 < (1'h0)); forvar83 = (forvar83 + (1'h1)))
        begin
          for (forvar84 = (1'h0); (forvar84 < (3'h4)); forvar84 = (forvar84 + (1'h1)))
            begin
              reg85 = $signed((+reg80[(2'h2):(2'h2)]));
              reg86 <= (8'hb6);
              reg87 = reg75;
            end
          reg88 <= (wire4[(5'h15):(1'h1)] >> (+$unsigned(wire0[(4'hd):(4'hb)])));
        end
      for (forvar89 = (1'h0); (forvar89 < (1'h1)); forvar89 = (forvar89 + (1'h1)))
        begin
          for (forvar90 = (1'h0); (forvar90 < (2'h2)); forvar90 = (forvar90 + (1'h1)))
            begin
              reg91 = wire64;
              reg92 <= (($signed(($signed(reg88) ?
                      forvar90 : ((8'hbe) ?
                          reg86 : forvar89))) && ($unsigned(forvar84) ?
                      (reg78[(4'hb):(4'h8)] >>> (reg91 ^~ (7'h42))) : $unsigned(wire64[(4'hb):(4'ha)]))) ?
                  (($signed((8'hba)) ?
                          ($signed(reg87) ?
                              wire4 : forvar90[(2'h3):(2'h2)]) : wire1[(4'ha):(2'h2)]) ?
                      (reg82[(3'h4):(2'h3)] & ((+forvar83) ?
                          (reg80 ~^ forvar90) : (reg71 << wire0))) : wire0) : ($signed({{(8'hb3)},
                          $signed(reg78)}) ?
                      reg82[(3'h4):(1'h0)] : {wire66, $signed((|forvar84))}));
              reg93 = $signed(($unsigned((|(7'h44))) >>> (^((8'h9e) ?
                  $unsigned(wire1) : reg92))));
              reg94 <= {(-forvar90)};
            end
        end
      for (forvar95 = (1'h0); (forvar95 < (1'h1)); forvar95 = (forvar95 + (1'h1)))
        begin
          reg96 <= $signed(wire0[(5'h12):(4'h8)]);
        end
      for (forvar97 = (1'h0); (forvar97 < (1'h1)); forvar97 = (forvar97 + (1'h1)))
        begin
          reg98 <= $signed($unsigned($signed(wire4)));
        end
    end
  always
    @(posedge clk) begin
      reg99 = reg96;
    end
  assign wire100 = (|($unsigned((reg80[(1'h0):(1'h0)] || $signed(reg96))) ?
                       wire1[(5'h10):(3'h4)] : (8'hb1)));
  assign wire101 = wire66[(3'h4):(2'h2)];
  assign wire102 = ($unsigned(reg80) | wire64);
  assign wire103 = $signed((($unsigned($signed(wire63)) ^~ wire4) ?
                       (wire63 ?
                           ((|wire1) ?
                               $signed(reg96) : (&(8'ha3))) : ((|wire101) ^~ $signed(wire1))) : $unsigned((reg88 >> reg80))));
  assign wire104 = $signed($unsigned((|($unsigned(wire61) ?
                       (wire2 ? reg92 : reg98) : (8'hb1)))));
  assign wire105 = reg78;
  always
    @(posedge clk) begin
      for (forvar106 = (1'h0); (forvar106 < (3'h4)); forvar106 = (forvar106 + (1'h1)))
        begin
          reg107 <= wire4;
          reg108 <= {((~|$signed($unsigned(reg78))) < reg107[(4'ha):(2'h3)])};
          for (forvar109 = (1'h0); (forvar109 < (1'h0)); forvar109 = (forvar109 + (1'h1)))
            begin
              reg110 = ($unsigned(forvar106[(2'h2):(1'h1)]) << $unsigned($signed((~^wire0[(5'h13):(5'h11)]))));
              reg111 = (~&((((wire104 ? wire63 : reg96) ?
                          wire3[(3'h5):(3'h5)] : ((8'h9c) ?
                              forvar109 : reg94)) ?
                      ($signed((8'ha5)) ?
                          reg78[(5'h12):(5'h10)] : $signed(wire2)) : wire3[(2'h2):(1'h1)]) ?
                  {($unsigned(wire102) * reg78[(5'h12):(4'h8)]),
                      $unsigned(wire104[(3'h6):(1'h1)])} : $signed($unsigned((reg75 ?
                      reg110 : reg98)))));
            end
          for (forvar112 = (1'h0); (forvar112 < (2'h2)); forvar112 = (forvar112 + (1'h1)))
            begin
              reg113 = forvar106[(3'h5):(1'h1)];
              reg114 = (|(wire64 ? (&reg71) : {wire65[(2'h2):(1'h0)]}));
            end
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module5  (y, clk, wire10, wire9, wire8, wire7, wire6);
  output wire [(32'h145):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h15):(1'h0)] wire10;
  input wire signed [(5'h12):(1'h0)] wire9;
  input wire signed [(5'h11):(1'h0)] wire8;
  input wire [(5'h13):(1'h0)] wire7;
  input wire [(2'h2):(1'h0)] wire6;
  wire signed [(3'h7):(1'h0)] wire60;
  wire signed [(5'h14):(1'h0)] wire51;
  wire [(4'ha):(1'h0)] wire50;
  wire signed [(4'hd):(1'h0)] wire49;
  wire [(2'h2):(1'h0)] wire48;
  wire signed [(5'h15):(1'h0)] wire47;
  wire [(2'h2):(1'h0)] wire46;
  wire [(5'h12):(1'h0)] wire45;
  wire signed [(4'he):(1'h0)] wire44;
  wire signed [(3'h4):(1'h0)] wire43;
  wire [(4'hc):(1'h0)] wire42;
  wire signed [(4'hf):(1'h0)] wire40;
  wire [(2'h2):(1'h0)] wire14;
  wire [(4'hc):(1'h0)] wire12;
  wire signed [(4'hd):(1'h0)] wire11;
  reg [(4'hd):(1'h0)] reg59 = (1'h0);
  reg [(4'hd):(1'h0)] reg58 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg57 = (1'h0);
  reg [(3'h6):(1'h0)] reg55 = (1'h0);
  reg [(2'h2):(1'h0)] reg53 = (1'h0);
  reg [(4'h9):(1'h0)] reg13 = (1'h0);
  reg [(4'h8):(1'h0)] reg16 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg56 = (1'h0);
  reg [(5'h13):(1'h0)] forvar54 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar52 = (1'h0);
  reg [(4'hd):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg19 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg18 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar17 = (1'h0);
  reg [(4'he):(1'h0)] forvar15 = (1'h0);
  assign y = {wire60,
                 wire51,
                 wire50,
                 wire49,
                 wire48,
                 wire47,
                 wire46,
                 wire45,
                 wire44,
                 wire43,
                 wire42,
                 wire40,
                 wire14,
                 wire12,
                 wire11,
                 reg59,
                 reg58,
                 reg57,
                 reg55,
                 reg53,
                 reg13,
                 reg16,
                 reg56,
                 forvar54,
                 forvar52,
                 reg20,
                 reg19,
                 reg18,
                 forvar17,
                 forvar15,
                 (1'h0)};
  assign wire11 = wire8[(3'h4):(2'h2)];
  assign wire12 = wire9;
  always
    @(posedge clk) begin
      reg13 <= wire6;
    end
  assign wire14 = $signed($unsigned(wire8[(4'ha):(2'h2)]));
  always
    @(posedge clk) begin
      for (forvar15 = (1'h0); (forvar15 < (1'h0)); forvar15 = (forvar15 + (1'h1)))
        begin
          reg16 <= (7'h44);
          for (forvar17 = (1'h0); (forvar17 < (2'h2)); forvar17 = (forvar17 + (1'h1)))
            begin
              reg18 = (reg13[(3'h6):(3'h5)] ?
                  wire6 : (($signed(wire14[(2'h2):(2'h2)]) >>> (~|(&(8'haf)))) >> {$signed($unsigned(wire10))}));
              reg19 = (forvar15[(4'hd):(1'h0)] + $unsigned({$signed((~&(8'hac))),
                  {$unsigned(wire6), (reg18 ^~ forvar17)}}));
              reg20 = wire11;
            end
        end
    end
  module21 #() modinst41 (.wire22(reg13), .y(wire40), .wire26(wire9), .clk(clk), .wire25(wire10), .wire23(wire7), .wire24(wire8));
  assign wire42 = ({(($signed(wire8) ?
                              reg16[(3'h7):(3'h4)] : (reg16 ?
                                  wire11 : reg16)) == (~|wire10[(4'h9):(3'h7)]))} ?
                      $unsigned(($unsigned(wire8) ?
                          ($signed(wire11) ?
                              $signed(wire11) : (wire11 - wire6)) : ($signed(wire12) <= $unsigned(reg16)))) : ((-wire6[(1'h1):(1'h0)]) == wire6[(2'h2):(2'h2)]));
  assign wire43 = $signed($unsigned($signed(wire6)));
  assign wire44 = wire9;
  assign wire45 = $unsigned({(8'hbc),
                      ((^~$signed(wire7)) == reg16[(4'h8):(1'h1)])});
  assign wire46 = ($unsigned(wire43[(1'h1):(1'h0)]) ?
                      (wire6 ?
                          ((~^(wire10 ?
                              reg13 : wire42)) << (~&(wire7 || wire42))) : {$signed(wire8),
                              wire10}) : (wire43[(1'h1):(1'h1)] <= (wire14 ?
                          ((wire7 ? wire42 : wire9) ?
                              wire6[(1'h1):(1'h1)] : (~^wire11)) : wire7[(4'hb):(2'h2)])));
  assign wire47 = wire40[(4'hc):(4'h8)];
  assign wire48 = reg13[(4'h8):(1'h0)];
  assign wire49 = (|($unsigned((&(~|(8'hae)))) ?
                      $signed((wire40 ?
                          (reg13 ?
                              reg13 : reg13) : wire14)) : (~wire7[(4'hf):(4'hb)])));
  assign wire50 = ((wire14 < (wire11 ?
                          (((8'hbc) ?
                              wire8 : wire10) >> wire10[(3'h4):(1'h0)]) : $signed(wire7))) ?
                      {wire6} : (~((7'h42) ? wire47 : {$unsigned(wire10)})));
  assign wire51 = ($signed($signed($signed($unsigned(wire43)))) == (!$unsigned($signed({reg13}))));
  always
    @(posedge clk) begin
      for (forvar52 = (1'h0); (forvar52 < (1'h0)); forvar52 = (forvar52 + (1'h1)))
        begin
          reg53 <= $unsigned($unsigned($unsigned(wire11[(1'h0):(1'h0)])));
          for (forvar54 = (1'h0); (forvar54 < (2'h2)); forvar54 = (forvar54 + (1'h1)))
            begin
              reg55 <= $signed($unsigned(wire47[(4'he):(4'hd)]));
              reg56 = $signed($unsigned(wire44[(4'hd):(4'hc)]));
              reg57 <= (^~(^{wire40[(4'he):(4'h9)]}));
              reg58 <= (!(wire9 ? reg53 : wire8));
              reg59 <= $unsigned(reg57);
            end
        end
    end
  assign wire60 = (wire47[(3'h7):(3'h6)] - reg57[(2'h2):(1'h0)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module21
#(parameter param38 = (({{{(8'hb8)}}, (-((8'h9f) ^ (8'hb7)))} || ((~{(8'haa), (8'hb5)}) ? {((8'hb6) ? (8'hb8) : (8'haa)), {(8'hab), (8'ha4)}} : ((~|(8'ha6)) ? {(7'h41), (8'hae)} : ((8'hbe) <= (8'ha1))))) >> (&{(((8'ha9) >> (8'ha0)) <= (8'hb3)), (((8'hb6) ? (8'hb3) : (8'h9e)) ? ((8'hae) & (8'had)) : {(8'hbb), (8'hb4)})})), 
parameter param39 = ((~|(({param38} <= (param38 ? param38 : param38)) >> (~^((8'hb2) ? param38 : param38)))) ? ((8'ha8) + (+param38)) : {(((param38 ? (7'h44) : param38) && (8'hbb)) ? ((param38 ? param38 : (8'ha4)) & (!param38)) : {(param38 < param38), (param38 || param38)}), (param38 ? ((~param38) & {param38, param38}) : (|(&param38)))}))
(y, clk, wire26, wire25, wire24, wire23, wire22);
  output wire [(32'h65):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hf):(1'h0)] wire26;
  input wire [(5'h15):(1'h0)] wire25;
  input wire signed [(3'h5):(1'h0)] wire24;
  input wire [(4'h9):(1'h0)] wire23;
  input wire [(4'h9):(1'h0)] wire22;
  wire [(3'h7):(1'h0)] wire34;
  wire signed [(5'h15):(1'h0)] wire33;
  wire signed [(3'h6):(1'h0)] wire30;
  wire [(2'h2):(1'h0)] wire29;
  wire [(2'h3):(1'h0)] wire28;
  wire [(4'he):(1'h0)] wire27;
  reg signed [(4'ha):(1'h0)] reg37 = (1'h0);
  reg [(5'h15):(1'h0)] reg36 = (1'h0);
  reg [(4'h9):(1'h0)] reg31 = (1'h0);
  reg [(3'h5):(1'h0)] reg35 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg32 = (1'h0);
  assign y = {wire34,
                 wire33,
                 wire30,
                 wire29,
                 wire28,
                 wire27,
                 reg37,
                 reg36,
                 reg31,
                 reg35,
                 reg32,
                 (1'h0)};
  assign wire27 = ($unsigned(($signed($signed(wire23)) < $signed(wire24[(3'h5):(1'h0)]))) >>> ($signed((|(^wire26))) ?
                      $unsigned({$unsigned(wire22), {wire26}}) : wire25));
  assign wire28 = wire23;
  assign wire29 = (8'ha8);
  assign wire30 = (8'haf);
  always
    @(posedge clk) begin
      reg31 <= wire26;
      reg32 = $unsigned($signed(((~$signed(wire27)) ?
          wire23 : $unsigned((^~(8'haa))))));
    end
  assign wire33 = $unsigned((wire22 ? wire23 : $signed({wire23})));
  assign wire34 = $signed(((wire22[(3'h6):(2'h3)] ?
                      ($signed(wire22) ?
                          $signed((8'haf)) : (wire33 ~^ wire23)) : wire24[(3'h4):(1'h0)]) < wire25[(5'h11):(2'h2)]));
  always
    @(posedge clk) begin
      reg35 = wire24;
      reg36 <= (((8'ha5) != reg31[(2'h3):(2'h3)]) ?
          $signed((reg31 ?
              $signed((8'had)) : wire29)) : ((wire26[(3'h7):(1'h1)] >= $signed(wire26)) ?
              $unsigned($signed((~&wire22))) : (wire34 + (wire22 && wire22))));
      reg37 <= wire34[(3'h7):(1'h0)];
    end
endmodule