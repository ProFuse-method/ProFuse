(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h5c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire3;
  input wire signed [(3'h4):(1'h0)] wire2;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire0;
  wire [(3'h4):(1'h0)] wire51;
  wire signed [(3'h4):(1'h0)] wire50;
  wire [(4'h8):(1'h0)] wire48;
  wire signed [(4'hb):(1'h0)] wire47;
  wire signed [(3'h4):(1'h0)] wire46;
  wire [(4'hb):(1'h0)] wire45;
  wire [(4'h9):(1'h0)] wire43;
  wire signed [(4'h8):(1'h0)] wire8;
  wire [(4'hb):(1'h0)] wire7;
  wire [(3'h6):(1'h0)] wire6;
  wire [(2'h2):(1'h0)] wire5;
  wire [(4'h8):(1'h0)] wire4;
  reg signed [(3'h5):(1'h0)] reg52 = (1'h0);
  assign y = {wire51,
                 wire50,
                 wire48,
                 wire47,
                 wire46,
                 wire45,
                 wire43,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 reg52,
                 (1'h0)};
  assign wire4 = {($unsigned($signed(wire2)) ?
                         (^~$signed(wire1)) : $unsigned(wire1))};
  assign wire5 = wire0[(1'h0):(1'h0)];
  assign wire6 = wire5[(1'h1):(1'h0)];
  assign wire7 = $unsigned($signed($unsigned(wire6[(3'h4):(2'h3)])));
  assign wire8 = {(({wire2} << $unsigned(wire2)) ~^ {$unsigned(wire3)})};
  module9 #() modinst44 (wire43, clk, wire6, wire2, wire7, wire0);
  assign wire45 = wire1;
  assign wire46 = wire1[(2'h2):(1'h1)];
  assign wire47 = $signed(((-wire46[(1'h0):(1'h0)]) < ((8'h9e) > (wire4 ?
                      (8'ha1) : wire4))));
  module20 #() modinst49 (.wire21(wire45), .wire22(wire6), .wire23(wire43), .wire24(wire7), .y(wire48), .clk(clk));
  assign wire50 = (~^wire46);
  assign wire51 = (wire8[(3'h5):(2'h3)] ?
                      $unsigned(((wire46 ?
                          wire2 : wire4) && wire3[(2'h3):(1'h0)])) : $signed(($unsigned(wire8) > ((8'hac) ?
                          (8'hac) : wire1))));
  always
    @(posedge clk) begin
      reg52 <= (wire45[(3'h7):(3'h7)] != wire6[(3'h6):(1'h1)]);
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9  (y, clk, wire13, wire12, wire11, wire10);
  output wire [(32'h5f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire13;
  input wire [(3'h4):(1'h0)] wire12;
  input wire signed [(4'hb):(1'h0)] wire11;
  input wire signed [(4'hb):(1'h0)] wire10;
  wire [(3'h4):(1'h0)] wire41;
  wire [(3'h4):(1'h0)] wire40;
  wire signed [(3'h7):(1'h0)] wire39;
  wire signed [(3'h7):(1'h0)] wire38;
  wire signed [(3'h7):(1'h0)] wire37;
  wire signed [(2'h2):(1'h0)] wire35;
  wire [(3'h5):(1'h0)] wire19;
  wire signed [(4'hb):(1'h0)] wire18;
  wire signed [(4'hb):(1'h0)] wire17;
  wire signed [(3'h6):(1'h0)] wire16;
  wire signed [(4'hb):(1'h0)] wire15;
  wire signed [(4'h8):(1'h0)] wire14;
  reg signed [(4'hb):(1'h0)] reg42 = (1'h0);
  assign y = {wire41,
                 wire40,
                 wire39,
                 wire38,
                 wire37,
                 wire35,
                 wire19,
                 wire18,
                 wire17,
                 wire16,
                 wire15,
                 wire14,
                 reg42,
                 (1'h0)};
  assign wire14 = (wire13 ?
                      ((wire10 ? wire11[(1'h0):(1'h0)] : (!wire13)) ?
                          $unsigned(wire13[(1'h1):(1'h0)]) : ((wire11 <= wire11) << wire10[(3'h4):(3'h4)])) : (^$signed($unsigned(wire10))));
  assign wire15 = ({wire10[(2'h3):(1'h0)]} ~^ ({(wire11 || wire12)} <= wire13[(3'h6):(3'h5)]));
  assign wire16 = (8'h9e);
  assign wire17 = wire14;
  assign wire18 = $unsigned(({(-wire12)} ?
                      ($unsigned(wire15) ?
                          (-wire13) : wire14[(3'h4):(3'h4)]) : ($signed((8'ha1)) ?
                          (~^(8'ha3)) : $signed(wire11))));
  assign wire19 = (|(~|(wire12[(2'h2):(2'h2)] + $signed(wire14))));
  module20 #() modinst36 (.y(wire35), .wire21(wire11), .clk(clk), .wire22(wire19), .wire24(wire16), .wire23(wire10));
  assign wire37 = wire14;
  assign wire38 = wire16;
  assign wire39 = $signed($signed((+(wire14 ? wire15 : wire14))));
  assign wire40 = $unsigned(wire13[(1'h1):(1'h1)]);
  assign wire41 = wire19;
  always
    @(posedge clk) begin
      reg42 <= $signed(($unsigned((~^wire40)) ?
          (-((8'hac) ? wire10 : wire17)) : $unsigned(((8'ha0) >> wire12))));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module20  (y, clk, wire24, wire23, wire22, wire21);
  output wire [(32'h41):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire24;
  input wire signed [(4'h9):(1'h0)] wire23;
  input wire signed [(3'h5):(1'h0)] wire22;
  input wire [(4'hb):(1'h0)] wire21;
  wire signed [(4'h8):(1'h0)] wire34;
  wire signed [(4'h9):(1'h0)] wire33;
  wire [(3'h5):(1'h0)] wire32;
  wire signed [(3'h5):(1'h0)] wire31;
  wire signed [(3'h6):(1'h0)] wire30;
  wire signed [(4'hb):(1'h0)] wire29;
  wire [(3'h4):(1'h0)] wire28;
  wire [(2'h3):(1'h0)] wire27;
  wire [(4'h9):(1'h0)] wire26;
  wire [(3'h4):(1'h0)] wire25;
  assign y = {wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire30,
                 wire29,
                 wire28,
                 wire27,
                 wire26,
                 wire25,
                 (1'h0)};
  assign wire25 = (((8'haf) > (~$signed(wire23))) << (~((wire22 ?
                          wire24 : wire23) ?
                      $unsigned((8'haf)) : wire24[(1'h0):(1'h0)])));
  assign wire26 = (^{$unsigned($unsigned(wire24))});
  assign wire27 = (~(8'ha8));
  assign wire28 = wire26;
  assign wire29 = wire28;
  assign wire30 = $signed(wire27[(1'h0):(1'h0)]);
  assign wire31 = $unsigned((wire26[(4'h9):(1'h1)] ?
                      (~^$unsigned(wire28)) : {$signed(wire25)}));
  assign wire32 = (wire30[(3'h5):(3'h4)] != $signed(wire23[(1'h1):(1'h1)]));
  assign wire33 = $signed({(wire26 ? (wire32 || wire27) : (^wire25))});
  assign wire34 = wire26[(3'h4):(1'h1)];
endmodule