(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param65 = (((((8'h9d) ? (8'haf) : (8'h9d)) ? ((8'ha7) < (8'h9c)) : ((8'ha7) ? (8'h9d) : (8'ha2))) ? {((8'ha8) ? (8'had) : (8'ha1))} : {((8'h9e) >> (8'ha2))}) ^~ ((((8'h9d) | (8'hab)) ? (8'hac) : ((8'ha5) && (8'h9f))) <= (~^((8'ha8) > (8'ha6))))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h54):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire0;
  input wire [(4'h9):(1'h0)] wire1;
  input wire signed [(2'h2):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire3;
  wire signed [(3'h7):(1'h0)] wire4;
  wire signed [(4'h9):(1'h0)] wire5;
  wire [(3'h4):(1'h0)] wire51;
  wire [(4'h8):(1'h0)] wire53;
  wire signed [(3'h6):(1'h0)] wire61;
  wire signed [(3'h4):(1'h0)] wire62;
  wire signed [(2'h2):(1'h0)] wire63;
  reg signed [(2'h3):(1'h0)] reg54 = (1'h0);
  reg [(4'ha):(1'h0)] reg55 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg56 = (1'h0);
  reg [(3'h5):(1'h0)] reg57 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg58 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg59 = (1'h0);
  reg [(3'h6):(1'h0)] reg60 = (1'h0);
  assign y = {wire4,
                 wire5,
                 wire51,
                 wire53,
                 wire61,
                 wire62,
                 wire63,
                 reg54,
                 reg55,
                 reg56,
                 reg57,
                 reg58,
                 reg59,
                 reg60,
                 (1'h0)};
  assign wire4 = $signed((wire2[(1'h1):(1'h1)] ?
                     ((wire2 >>> wire3) > {wire3}) : wire0));
  assign wire5 = (~&wire0);
  module6 #() modinst52 (.wire10(wire4), .y(wire51), .clk(clk), .wire8(wire0), .wire9(wire1), .wire7(wire3));
  assign wire53 = (^~wire1);
  always
    @(posedge clk) begin
      reg54 <= {$signed(((wire5 ? wire51 : wire51) <= (wire1 ?
              (8'h9f) : wire1)))};
      if ({(~|wire0)})
        begin
          reg55 <= $unsigned($signed(wire4));
        end
      else
        begin
          reg55 <= (wire0 && wire3[(4'ha):(1'h0)]);
          reg56 <= reg55;
          reg57 <= $unsigned(wire51);
        end
      if ($signed($unsigned(wire2)))
        begin
          reg58 <= $unsigned(wire3);
        end
      else
        begin
          reg58 <= $signed(wire0);
          reg59 <= wire1;
          reg60 <= wire2;
        end
    end
  assign wire61 = (|({{reg55}} ?
                      reg57[(3'h5):(1'h0)] : $unsigned((reg55 * wire0))));
  assign wire62 = {(wire53 >> (~$signed(wire2)))};
  module6 #() modinst64 (.wire9(wire5), .wire10(wire0), .y(wire63), .clk(clk), .wire8(wire1), .wire7(reg56));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module6
#(parameter param50 = (((((8'haa) ^~ (8'ha7)) >>> ((8'ha7) - (8'h9c))) * (((8'ha4) | (8'ha5)) >= ((8'ha5) ? (8'hac) : (8'hb0)))) >>> (8'ha4)))
(y, clk, wire10, wire9, wire8, wire7);
  output wire [(32'h4c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire10;
  input wire signed [(4'h9):(1'h0)] wire9;
  input wire signed [(4'h9):(1'h0)] wire8;
  input wire [(4'ha):(1'h0)] wire7;
  wire signed [(3'h6):(1'h0)] wire45;
  wire signed [(4'h9):(1'h0)] wire44;
  wire [(4'ha):(1'h0)] wire43;
  wire signed [(4'h9):(1'h0)] wire41;
  wire signed [(4'hb):(1'h0)] wire21;
  reg [(4'h8):(1'h0)] reg49 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg48 = (1'h0);
  reg [(3'h6):(1'h0)] reg47 = (1'h0);
  reg [(4'h8):(1'h0)] reg46 = (1'h0);
  assign y = {wire45,
                 wire44,
                 wire43,
                 wire41,
                 wire21,
                 reg49,
                 reg48,
                 reg47,
                 reg46,
                 (1'h0)};
  module11 #() modinst22 (.clk(clk), .wire12(wire7), .y(wire21), .wire13(wire9), .wire15(wire10), .wire14(wire8));
  module23 #() modinst42 (.wire24(wire10), .wire27(wire21), .clk(clk), .wire26(wire7), .y(wire41), .wire25(wire8));
  assign wire43 = (wire7 ? {(wire21[(3'h4):(1'h0)] ^ (wire8 > wire9))} : wire9);
  assign wire44 = (~^((~(~&wire10)) >>> wire21));
  assign wire45 = (&wire41);
  always
    @(posedge clk) begin
      reg46 <= $signed(($unsigned((wire44 ~^ wire41)) >> $unsigned($unsigned(wire43))));
      if ((8'h9d))
        begin
          reg47 <= $unsigned($signed(($unsigned(wire41) ?
              reg46[(3'h7):(3'h6)] : $unsigned(reg46))));
        end
      else
        begin
          if ({wire44})
            begin
              reg47 <= $unsigned(wire21[(4'ha):(2'h2)]);
              reg48 <= $signed(((wire9[(3'h5):(1'h0)] ^ $unsigned(wire21)) > (&wire8[(2'h3):(1'h0)])));
            end
          else
            begin
              reg47 <= $unsigned(((((8'had) * wire9) ?
                  (+wire8) : (wire10 >= reg46)) >> $unsigned((reg46 ?
                  reg48 : wire8))));
              reg48 <= $signed($signed($unsigned(wire9)));
            end
          reg49 <= wire8;
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module23  (y, clk, wire27, wire26, wire25, wire24);
  output wire [(32'h56):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire27;
  input wire signed [(4'ha):(1'h0)] wire26;
  input wire [(2'h3):(1'h0)] wire25;
  input wire signed [(3'h6):(1'h0)] wire24;
  wire [(3'h7):(1'h0)] wire40;
  wire [(2'h3):(1'h0)] wire36;
  wire [(3'h5):(1'h0)] wire35;
  wire [(3'h7):(1'h0)] wire34;
  wire [(3'h5):(1'h0)] wire30;
  wire [(3'h6):(1'h0)] wire29;
  wire [(3'h6):(1'h0)] wire28;
  reg signed [(3'h7):(1'h0)] reg39 = (1'h0);
  reg [(4'ha):(1'h0)] reg38 = (1'h0);
  reg [(3'h7):(1'h0)] reg37 = (1'h0);
  reg [(4'ha):(1'h0)] reg33 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg32 = (1'h0);
  reg [(2'h2):(1'h0)] reg31 = (1'h0);
  assign y = {wire40,
                 wire36,
                 wire35,
                 wire34,
                 wire30,
                 wire29,
                 wire28,
                 reg39,
                 reg38,
                 reg37,
                 reg33,
                 reg32,
                 reg31,
                 (1'h0)};
  assign wire28 = wire25;
  assign wire29 = {wire26};
  assign wire30 = $unsigned(wire28);
  always
    @(posedge clk) begin
      reg31 <= wire29;
    end
  always
    @(posedge clk) begin
      reg32 <= ($unsigned(((wire28 ^~ wire30) ?
              (wire29 ? reg31 : wire29) : (wire26 + wire26))) ?
          wire25 : reg31);
      reg33 <= wire24;
    end
  assign wire34 = ({wire30[(2'h2):(1'h1)]} ? (~^wire30) : wire24);
  assign wire35 = (wire29[(3'h5):(1'h1)] <= $unsigned(wire30));
  assign wire36 = (wire29[(2'h2):(1'h1)] <<< wire28);
  always
    @(posedge clk) begin
      if ((^~{((reg31 < wire35) ? ((8'h9e) ? wire29 : wire25) : (!(8'ha7)))}))
        begin
          reg37 <= (^$unsigned(reg33));
        end
      else
        begin
          reg37 <= $signed((($signed(reg33) ?
                  $unsigned(wire25) : (reg32 ? wire35 : reg32)) ?
              (8'ha7) : (^{reg31})));
          reg38 <= {wire34[(3'h7):(3'h4)]};
          reg39 <= ($unsigned($signed($signed(wire30))) ?
              $unsigned((wire36 < $signed(reg37))) : wire25);
        end
    end
  assign wire40 = (~|wire35);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11  (y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h24):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire15;
  input wire [(4'h9):(1'h0)] wire14;
  input wire [(3'h4):(1'h0)] wire13;
  input wire [(2'h3):(1'h0)] wire12;
  wire signed [(4'hb):(1'h0)] wire20;
  wire [(3'h7):(1'h0)] wire19;
  wire signed [(4'ha):(1'h0)] wire18;
  wire [(3'h4):(1'h0)] wire17;
  wire [(2'h3):(1'h0)] wire16;
  assign y = {wire20, wire19, wire18, wire17, wire16, (1'h0)};
  assign wire16 = ((~|(&((8'h9c) != wire15))) ? wire12[(1'h0):(1'h0)] : wire13);
  assign wire17 = (8'hb0);
  assign wire18 = (+(8'ha0));
  assign wire19 = (^~((8'hac) | $signed(wire12)));
  assign wire20 = wire13;
endmodule