(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param78 = (((((8'ha5) * (8'h9f)) | ((8'hac) < (8'hac))) >>> ((&(8'hb0)) ? ((8'ha8) || (8'ha7)) : ((8'ha2) == (8'had)))) ? (~^((&(8'had)) ? ((8'ha2) ? (8'ha9) : (8'had)) : {(8'ha7)})) : ({((8'ha2) ? (8'hae) : (8'ha8))} <<< (((8'ha8) <= (8'hae)) & ((8'ha0) - (8'ha5))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h9b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire3;
  input wire [(3'h4):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire0;
  wire signed [(3'h7):(1'h0)] wire67;
  wire signed [(2'h2):(1'h0)] wire66;
  wire [(3'h5):(1'h0)] wire65;
  wire [(3'h5):(1'h0)] wire64;
  wire signed [(4'ha):(1'h0)] wire60;
  wire [(3'h4):(1'h0)] wire59;
  wire signed [(4'ha):(1'h0)] wire57;
  wire signed [(4'hb):(1'h0)] wire21;
  reg signed [(4'h8):(1'h0)] reg77 = (1'h0);
  reg [(2'h3):(1'h0)] reg76 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg75 = (1'h0);
  reg [(3'h7):(1'h0)] reg74 = (1'h0);
  reg [(3'h5):(1'h0)] reg73 = (1'h0);
  reg [(4'hb):(1'h0)] reg72 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg71 = (1'h0);
  reg [(3'h7):(1'h0)] reg70 = (1'h0);
  reg [(4'hb):(1'h0)] reg69 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg68 = (1'h0);
  reg [(4'hb):(1'h0)] reg63 = (1'h0);
  reg [(3'h7):(1'h0)] reg62 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg61 = (1'h0);
  assign y = {wire67,
                 wire66,
                 wire65,
                 wire64,
                 wire60,
                 wire59,
                 wire57,
                 wire21,
                 reg77,
                 reg76,
                 reg75,
                 reg74,
                 reg73,
                 reg72,
                 reg71,
                 reg70,
                 reg69,
                 reg68,
                 reg63,
                 reg62,
                 reg61,
                 (1'h0)};
  module4 #() modinst22 (wire21, clk, wire3, wire2, wire0, wire1);
  module23 #() modinst58 (wire57, clk, wire3, wire1, wire21, wire2);
  assign wire59 = (wire57[(4'h8):(3'h5)] * (($signed(wire21) ?
                          (wire3 ? wire0 : wire1) : {wire0}) ?
                      $unsigned(wire0[(3'h7):(1'h1)]) : ($unsigned(wire1) ^~ $unsigned((8'h9d)))));
  assign wire60 = {wire59};
  always
    @(posedge clk) begin
      reg61 <= {(~|$signed({wire2}))};
      if ((((wire2 >> wire3) ?
          (~|(8'ha0)) : {(wire1 != wire1)}) > (&wire0[(4'h9):(4'h8)])))
        begin
          reg62 <= (8'h9c);
          reg63 <= ({wire57[(3'h6):(1'h0)]} & wire1);
        end
      else
        begin
          if (wire60)
            begin
              reg62 <= $unsigned((~^((~(8'h9f)) ?
                  (wire3 ? reg63 : wire60) : (&(8'h9f)))));
              reg63 <= $signed($unsigned((|$signed(wire60))));
            end
          else
            begin
              reg62 <= $signed(wire57);
              reg63 <= (8'ha4);
            end
        end
    end
  assign wire64 = ((~&((!(8'haa)) >= wire0)) * $signed(wire21));
  assign wire65 = reg63;
  assign wire66 = reg63;
  assign wire67 = ($unsigned(wire3) >= $unsigned(wire1));
  always
    @(posedge clk) begin
      reg68 <= (^wire21[(4'h8):(3'h4)]);
      reg69 <= (({reg62[(2'h2):(1'h1)]} ^~ wire57[(3'h7):(2'h2)]) > wire2[(3'h4):(1'h1)]);
      reg70 <= (reg62[(2'h3):(1'h0)] & $signed(wire3));
    end
  always
    @(posedge clk) begin
      if ((8'had))
        begin
          reg71 <= $unsigned((~wire67[(1'h0):(1'h0)]));
        end
      else
        begin
          reg71 <= (wire60[(3'h6):(3'h6)] ?
              wire0 : ({(reg68 <= wire67)} <<< $unsigned((wire66 ?
                  wire67 : (8'ha7)))));
        end
      reg72 <= ((8'hac) >>> ((^{wire57}) == $signed({reg69})));
      if ($unsigned($unsigned($unsigned((wire65 ? reg72 : wire67)))))
        begin
          if (reg63[(1'h1):(1'h0)])
            begin
              reg73 <= (&(((reg61 ^ wire66) ?
                  wire3 : (reg68 ?
                      (8'ha3) : wire66)) * (reg71[(3'h6):(3'h4)] >>> (~reg63))));
              reg74 <= (wire66 <= (~|$signed((reg70 ? reg62 : reg71))));
              reg75 <= {$signed(reg63)};
            end
          else
            begin
              reg73 <= wire1;
              reg74 <= (~|wire3);
              reg75 <= {wire57[(3'h7):(2'h2)]};
            end
          reg76 <= ($unsigned((|(wire21 >= reg73))) || (reg62[(1'h0):(1'h0)] ?
              (wire66[(2'h2):(1'h1)] || wire66) : wire66[(2'h2):(2'h2)]));
        end
      else
        begin
          if ($signed((~^{$signed(reg74)})))
            begin
              reg73 <= (reg76 >> wire59);
              reg74 <= (+(~&((~^reg62) ? reg75 : $unsigned(reg73))));
            end
          else
            begin
              reg73 <= {$signed({$signed(reg71)})};
              reg74 <= ($unsigned(reg63) ?
                  wire2 : (({wire57} == reg73) & reg61[(3'h5):(1'h0)]));
              reg75 <= (-$signed(wire3));
            end
          reg76 <= wire0[(3'h4):(3'h4)];
          reg77 <= $unsigned($unsigned(wire2));
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module23
#(parameter param56 = (((8'had) >> (((8'ha1) ? (8'had) : (8'hab)) <= ((8'had) ? (8'h9d) : (8'ha3)))) ? ((((8'hb0) > (8'ha7)) > ((8'h9f) >= (8'hac))) - ({(8'ha4)} ? {(8'ha9)} : (^~(8'ha7)))) : (((-(8'ha5)) & ((8'hb0) + (8'ha4))) ? (-(8'ha5)) : {(&(8'h9e))})))
(y, clk, wire27, wire26, wire25, wire24);
  output wire [(32'h5b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire27;
  input wire signed [(2'h2):(1'h0)] wire26;
  input wire signed [(4'hb):(1'h0)] wire25;
  input wire signed [(3'h4):(1'h0)] wire24;
  wire signed [(4'h8):(1'h0)] wire55;
  wire [(4'h9):(1'h0)] wire54;
  wire signed [(3'h4):(1'h0)] wire53;
  wire [(2'h2):(1'h0)] wire52;
  wire signed [(3'h7):(1'h0)] wire51;
  wire signed [(3'h6):(1'h0)] wire50;
  wire [(2'h3):(1'h0)] wire48;
  wire [(4'h8):(1'h0)] wire34;
  wire [(3'h5):(1'h0)] wire33;
  wire signed [(3'h5):(1'h0)] wire32;
  wire [(4'h9):(1'h0)] wire31;
  wire signed [(4'hb):(1'h0)] wire30;
  reg [(4'ha):(1'h0)] reg29 = (1'h0);
  reg [(2'h3):(1'h0)] reg28 = (1'h0);
  assign y = {wire55,
                 wire54,
                 wire53,
                 wire52,
                 wire51,
                 wire50,
                 wire48,
                 wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire30,
                 reg29,
                 reg28,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg28 <= wire25[(4'hb):(4'ha)];
      reg29 <= {(|wire25[(4'h9):(3'h4)])};
    end
  assign wire30 = reg29[(1'h1):(1'h1)];
  assign wire31 = $unsigned((~|$unsigned((8'ha7))));
  assign wire32 = reg29;
  assign wire33 = (reg29[(3'h5):(2'h3)] ?
                      $unsigned(((wire30 ? (8'hab) : wire27) ?
                          {wire32} : (8'h9c))) : $signed(wire27));
  assign wire34 = wire30[(3'h5):(2'h3)];
  module35 #() modinst49 (wire48, clk, wire30, wire24, wire34, wire27);
  assign wire50 = (^~wire27);
  assign wire51 = $signed($unsigned(($unsigned(wire50) >>> wire27[(3'h4):(1'h1)])));
  assign wire52 = (8'hb0);
  assign wire53 = wire27;
  assign wire54 = wire51;
  assign wire55 = $signed(reg29[(2'h2):(2'h2)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4
#(parameter param20 = {(^(&(^(8'ha9))))})
(y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h4a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire8;
  input wire signed [(2'h2):(1'h0)] wire7;
  input wire signed [(4'h9):(1'h0)] wire6;
  input wire [(4'h8):(1'h0)] wire5;
  wire signed [(2'h3):(1'h0)] wire19;
  wire [(4'ha):(1'h0)] wire10;
  wire signed [(4'h8):(1'h0)] wire9;
  reg [(3'h5):(1'h0)] reg18 = (1'h0);
  reg [(2'h2):(1'h0)] reg17 = (1'h0);
  reg [(2'h2):(1'h0)] reg16 = (1'h0);
  reg [(4'ha):(1'h0)] reg15 = (1'h0);
  reg [(4'ha):(1'h0)] reg14 = (1'h0);
  reg [(4'hb):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg12 = (1'h0);
  reg [(4'h8):(1'h0)] reg11 = (1'h0);
  assign y = {wire19,
                 wire10,
                 wire9,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 (1'h0)};
  assign wire9 = $signed((($signed(wire5) * (wire5 ? (8'hab) : wire7)) ?
                     {wire8} : wire6));
  assign wire10 = wire8[(2'h2):(1'h1)];
  always
    @(posedge clk) begin
      reg11 <= (!($unsigned($unsigned(wire6)) >>> (8'h9c)));
      if ((reg11[(2'h2):(2'h2)] ?
          (~&{wire6}) : $unsigned({wire5[(2'h2):(1'h1)]})))
        begin
          if (reg11[(2'h2):(2'h2)])
            begin
              reg12 <= {$signed((((8'h9d) * wire10) - (~^wire10)))};
            end
          else
            begin
              reg12 <= {$unsigned((~^wire8[(1'h1):(1'h1)]))};
              reg13 <= $unsigned((wire8[(4'h8):(2'h3)] ?
                  wire8[(3'h5):(2'h3)] : $unsigned($signed(wire10))));
              reg14 <= {wire8[(2'h3):(2'h3)]};
            end
          if (($signed($unsigned($signed(wire6))) ?
              (~|(((8'h9e) <<< wire6) << $unsigned(wire8))) : wire7))
            begin
              reg15 <= $signed(wire9[(2'h3):(2'h3)]);
              reg16 <= $unsigned(($signed(wire7[(1'h1):(1'h0)]) >> (wire9[(1'h0):(1'h0)] + (8'ha1))));
              reg17 <= wire10;
            end
          else
            begin
              reg15 <= ({$unsigned((reg11 == reg16))} <= (^~{reg17[(2'h2):(1'h1)]}));
              reg16 <= wire7;
            end
          reg18 <= $unsigned(reg14);
        end
      else
        begin
          if (wire8[(3'h5):(2'h3)])
            begin
              reg12 <= {$unsigned(wire8[(3'h7):(3'h5)])};
            end
          else
            begin
              reg12 <= reg13[(2'h2):(1'h1)];
              reg13 <= $unsigned((8'ha7));
            end
        end
    end
  assign wire19 = (($unsigned((reg14 != (8'ha6))) ?
                          (wire8[(1'h0):(1'h0)] ?
                              {reg16} : $signed(reg13)) : ({(8'hac)} <<< wire7[(2'h2):(1'h0)])) ?
                      reg12[(2'h2):(1'h1)] : $signed($signed((8'ha1))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module35
#(parameter param47 = {((((8'ha6) ? (8'hae) : (8'hb0)) | ((8'h9d) ^~ (8'had))) ^ (&((8'ha4) ? (8'ha6) : (8'hab))))})
(y, clk, wire39, wire38, wire37, wire36);
  output wire [(32'h2d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire39;
  input wire signed [(2'h3):(1'h0)] wire38;
  input wire [(4'h8):(1'h0)] wire37;
  input wire [(2'h3):(1'h0)] wire36;
  wire signed [(2'h2):(1'h0)] wire46;
  wire [(4'h9):(1'h0)] wire45;
  wire [(4'h9):(1'h0)] wire44;
  wire signed [(4'h9):(1'h0)] wire40;
  reg [(3'h7):(1'h0)] reg43 = (1'h0);
  reg [(3'h4):(1'h0)] reg42 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg41 = (1'h0);
  assign y = {wire46, wire45, wire44, wire40, reg43, reg42, reg41, (1'h0)};
  assign wire40 = {$signed(((!wire37) * {wire37}))};
  always
    @(posedge clk) begin
      reg41 <= wire37[(3'h6):(3'h6)];
      reg42 <= $signed(wire40);
      reg43 <= ($signed(($signed(wire36) >= $unsigned(wire39))) ?
          (wire40 ? $unsigned((~|wire37)) : wire37[(3'h4):(1'h1)]) : reg42);
    end
  assign wire44 = $unsigned(((^$unsigned(wire40)) ?
                      $signed(wire40[(2'h2):(1'h0)]) : ((reg43 ?
                          reg41 : wire39) && reg42[(1'h1):(1'h1)])));
  assign wire45 = $signed(wire44[(2'h3):(2'h2)]);
  assign wire46 = reg43[(3'h7):(2'h3)];
endmodule