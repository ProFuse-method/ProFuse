(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'ha3):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire3;
  input wire [(4'ha):(1'h0)] wire2;
  input wire signed [(3'h4):(1'h0)] wire1;
  input wire signed [(3'h7):(1'h0)] wire0;
  wire signed [(3'h6):(1'h0)] wire29;
  wire signed [(2'h3):(1'h0)] wire28;
  wire [(4'h8):(1'h0)] wire18;
  wire signed [(2'h2):(1'h0)] wire17;
  wire [(3'h6):(1'h0)] wire15;
  wire signed [(2'h2):(1'h0)] wire14;
  wire [(3'h5):(1'h0)] wire5;
  wire [(2'h2):(1'h0)] wire4;
  reg [(2'h2):(1'h0)] reg27 = (1'h0);
  reg [(3'h4):(1'h0)] reg26 = (1'h0);
  reg [(3'h6):(1'h0)] reg25 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg24 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg22 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg21 = (1'h0);
  reg [(4'h9):(1'h0)] reg20 = (1'h0);
  reg [(4'hb):(1'h0)] reg19 = (1'h0);
  reg [(4'hb):(1'h0)] reg16 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg13 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg12 = (1'h0);
  reg [(4'h9):(1'h0)] reg11 = (1'h0);
  reg [(2'h3):(1'h0)] reg10 = (1'h0);
  reg [(3'h5):(1'h0)] reg9 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg8 = (1'h0);
  reg [(4'h8):(1'h0)] reg7 = (1'h0);
  reg [(2'h3):(1'h0)] reg6 = (1'h0);
  assign y = {wire29,
                 wire28,
                 wire18,
                 wire17,
                 wire15,
                 wire14,
                 wire5,
                 wire4,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 reg20,
                 reg19,
                 reg16,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 (1'h0)};
  assign wire4 = {wire0};
  assign wire5 = (wire2 >>> $signed((^~(&(8'ha4)))));
  always
    @(posedge clk) begin
      if (wire1[(1'h1):(1'h1)])
        begin
          reg6 <= $signed($signed((wire5 ? {wire0} : $unsigned(wire5))));
          reg7 <= (^(+((wire5 ? wire1 : (8'ha6)) ? (|wire3) : {wire4})));
          reg8 <= wire3[(2'h2):(1'h0)];
        end
      else
        begin
          if (({(~&((8'had) >= (8'ha0)))} ?
              ({(reg8 ? reg8 : (8'h9f))} && reg8) : {(~|reg7)}))
            begin
              reg6 <= $unsigned(wire0[(1'h0):(1'h0)]);
            end
          else
            begin
              reg6 <= reg7[(1'h1):(1'h1)];
              reg7 <= ($signed((wire0 ?
                  (reg6 ? wire5 : wire2) : (|reg8))) - (((reg7 ?
                          wire2 : wire0) ?
                      $unsigned(wire4) : $signed(reg7)) ?
                  (~&$unsigned(wire4)) : ($unsigned(wire4) != (wire4 ^ reg6))));
              reg8 <= (~|(~|(reg7 + $signed(wire3))));
            end
          reg9 <= (reg7[(2'h3):(1'h0)] ~^ $unsigned(reg7));
        end
      reg10 <= $signed($signed({(wire0 && (8'haf))}));
      if ($signed((!reg7[(3'h4):(1'h0)])))
        begin
          if ((~&reg9))
            begin
              reg11 <= (~|{$unsigned(reg9)});
              reg12 <= reg6;
              reg13 <= (reg7 ?
                  (~^((reg11 ? wire5 : wire1) ?
                      wire4[(2'h2):(2'h2)] : {(8'ha7)})) : (~|$unsigned($unsigned(wire2))));
            end
          else
            begin
              reg11 <= ((reg7 ? (8'hb0) : {(reg13 ~^ reg10)}) ?
                  (&(~|wire5[(1'h1):(1'h0)])) : wire2);
              reg12 <= wire1;
            end
        end
      else
        begin
          reg11 <= wire0[(2'h3):(1'h0)];
          reg12 <= (^~($signed(reg11[(2'h3):(1'h0)]) ?
              $unsigned({wire1}) : {(8'ha7)}));
          reg13 <= $unsigned({reg10});
        end
    end
  assign wire14 = $signed(($signed($unsigned(wire4)) ? reg9 : reg9));
  assign wire15 = reg12;
  always
    @(posedge clk) begin
      reg16 <= wire3[(1'h0):(1'h0)];
    end
  assign wire17 = {($signed((wire3 ?
                          wire3 : reg8)) > $unsigned(wire14[(1'h1):(1'h0)]))};
  assign wire18 = (!reg9);
  always
    @(posedge clk) begin
      reg19 <= $unsigned(((|$signed(wire17)) ~^ (~|(~reg6))));
      reg20 <= $signed(reg6);
      if ({(~|(^~reg10[(2'h3):(2'h2)]))})
        begin
          reg21 <= (8'h9f);
        end
      else
        begin
          reg21 <= (8'ha1);
          reg22 <= {(~(wire4 && {wire3}))};
          if (wire1[(3'h4):(3'h4)])
            begin
              reg23 <= wire17[(1'h1):(1'h1)];
              reg24 <= (^{(|(~&reg12))});
            end
          else
            begin
              reg23 <= wire14;
              reg24 <= reg6;
            end
        end
    end
  always
    @(posedge clk) begin
      if ($signed({{(wire5 ? wire15 : wire3)}}))
        begin
          reg25 <= (($unsigned(wire5) ? wire18 : $unsigned({wire15})) ?
              (((reg24 ? reg22 : (8'ha3)) ?
                  $signed((8'had)) : $unsigned(reg20)) + reg22) : reg19);
          reg26 <= reg25;
          reg27 <= $signed((^~$signed($signed(wire5))));
        end
      else
        begin
          if (($unsigned($signed($unsigned(reg6))) ?
              {($signed(reg7) && $signed(reg7))} : $signed($signed((reg19 ?
                  reg10 : wire3)))))
            begin
              reg25 <= reg21;
              reg26 <= (((8'hac) ?
                  (((8'ha7) || wire3) ?
                      {reg10} : (wire3 ~^ reg16)) : wire4[(1'h1):(1'h1)]) ^ ((~$unsigned(reg7)) <= $signed($unsigned(reg10))));
            end
          else
            begin
              reg25 <= $unsigned(($unsigned((wire5 >> reg26)) ?
                  wire0[(1'h0):(1'h0)] : ($signed(wire0) ?
                      {reg26} : reg26[(1'h0):(1'h0)])));
              reg26 <= $unsigned({{(8'hb0)}});
            end
        end
    end
  assign wire28 = $unsigned(reg22[(3'h5):(2'h2)]);
  assign wire29 = $signed(((8'ha4) * {reg23[(4'h9):(3'h4)]}));
endmodule