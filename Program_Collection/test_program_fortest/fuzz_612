(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h41):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire3;
  input wire [(2'h2):(1'h0)] wire2;
  input wire signed [(3'h6):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire [(3'h6):(1'h0)] wire32;
  wire signed [(4'ha):(1'h0)] wire31;
  wire [(4'hb):(1'h0)] wire26;
  wire [(2'h2):(1'h0)] wire24;
  wire [(3'h5):(1'h0)] wire5;
  wire signed [(4'h9):(1'h0)] wire4;
  reg signed [(3'h5):(1'h0)] reg30 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg29 = (1'h0);
  reg [(3'h7):(1'h0)] reg28 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg27 = (1'h0);
  assign y = {wire32,
                 wire31,
                 wire26,
                 wire24,
                 wire5,
                 wire4,
                 reg30,
                 reg29,
                 reg28,
                 reg27,
                 (1'h0)};
  assign wire4 = (~|wire0);
  assign wire5 = wire4[(3'h7):(2'h3)];
  module6 #() modinst25 (wire24, clk, wire4, wire5, wire1, wire0);
  assign wire26 = wire2[(1'h0):(1'h0)];
  always
    @(posedge clk) begin
      if (({wire1} >>> $unsigned(wire1[(2'h3):(1'h1)])))
        begin
          if ({($unsigned({wire1}) | $unsigned((^~(8'haf))))})
            begin
              reg27 <= ({$signed(((8'haa) ^~ wire4))} ^~ $signed($unsigned(wire2[(1'h1):(1'h0)])));
              reg28 <= reg27;
            end
          else
            begin
              reg27 <= reg28;
            end
        end
      else
        begin
          reg27 <= $unsigned($signed(((reg27 & wire1) < ((8'had) | reg27))));
        end
      reg29 <= ((reg27 ~^ {wire0}) ?
          wire3[(3'h7):(1'h1)] : (reg28 ?
              $unsigned($signed(wire4)) : (^~$unsigned(wire4))));
      reg30 <= (~^wire1);
    end
  assign wire31 = (8'ha3);
  assign wire32 = ($signed((((8'ha1) | reg30) - (wire3 ?
                      reg29 : reg30))) ~^ (((~wire0) <<< (reg27 > wire31)) <= $unsigned($signed(wire4))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module6  (y, clk, wire10, wire9, wire8, wire7);
  output wire [(32'h6c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire10;
  input wire [(3'h4):(1'h0)] wire9;
  input wire [(3'h5):(1'h0)] wire8;
  input wire [(3'h5):(1'h0)] wire7;
  wire signed [(3'h4):(1'h0)] wire17;
  wire [(4'h9):(1'h0)] wire16;
  wire signed [(3'h4):(1'h0)] wire15;
  wire signed [(4'hb):(1'h0)] wire12;
  reg signed [(4'h8):(1'h0)] reg23 = (1'h0);
  reg [(3'h7):(1'h0)] reg22 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg21 = (1'h0);
  reg [(4'h8):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg19 = (1'h0);
  reg [(4'hb):(1'h0)] reg18 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg14 = (1'h0);
  reg [(4'ha):(1'h0)] reg13 = (1'h0);
  reg [(3'h6):(1'h0)] reg11 = (1'h0);
  assign y = {wire17,
                 wire16,
                 wire15,
                 wire12,
                 reg23,
                 reg22,
                 reg21,
                 reg20,
                 reg19,
                 reg18,
                 reg14,
                 reg13,
                 reg11,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg11 <= wire10;
    end
  assign wire12 = (-(wire10[(1'h0):(1'h0)] ?
                      (wire9 * (8'ha4)) : {(wire9 ? wire9 : (8'hae))}));
  always
    @(posedge clk) begin
      reg13 <= ((^~reg11[(3'h6):(3'h4)]) || wire8);
    end
  always
    @(posedge clk) begin
      reg14 <= {$unsigned(reg13[(4'h8):(2'h3)])};
    end
  assign wire15 = ((!{wire8[(1'h0):(1'h0)]}) * (~|((wire7 ? wire12 : wire9) ?
                      {reg14} : wire7[(1'h1):(1'h1)])));
  assign wire16 = (+((wire8 < (wire8 - wire12)) - wire9[(3'h4):(1'h1)]));
  assign wire17 = $signed(wire8[(2'h2):(2'h2)]);
  always
    @(posedge clk) begin
      reg18 <= wire12[(3'h6):(3'h6)];
      reg19 <= (($signed((reg14 ? wire16 : reg13)) ?
          $unsigned((^wire10)) : reg18[(1'h1):(1'h0)]) ^ reg18[(1'h1):(1'h1)]);
      if (reg19[(2'h3):(2'h3)])
        begin
          reg20 <= wire8;
          if (wire10)
            begin
              reg21 <= (reg19 ?
                  (wire12 ? reg18 : reg14[(2'h3):(1'h1)]) : wire16);
              reg22 <= ((wire9 << wire9) ? (~&(^~wire9)) : reg13);
            end
          else
            begin
              reg21 <= reg22[(3'h4):(2'h2)];
              reg22 <= (8'ha9);
              reg23 <= $signed(wire15[(3'h4):(3'h4)]);
            end
        end
      else
        begin
          reg20 <= wire16[(4'h9):(4'h9)];
          reg21 <= ($unsigned((reg23[(3'h4):(1'h1)] ?
                  reg14 : wire16[(1'h0):(1'h0)])) ?
              wire8 : (8'h9c));
          reg22 <= reg14;
        end
    end
endmodule