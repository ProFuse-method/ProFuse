(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h4c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire signed [(4'hb):(1'h0)] wire63;
  wire [(3'h5):(1'h0)] wire61;
  wire [(2'h3):(1'h0)] wire37;
  wire [(4'h9):(1'h0)] wire36;
  wire [(4'h8):(1'h0)] wire35;
  wire [(3'h5):(1'h0)] wire34;
  wire [(4'h8):(1'h0)] wire33;
  wire signed [(4'ha):(1'h0)] wire30;
  wire signed [(4'h8):(1'h0)] wire4;
  reg signed [(4'h8):(1'h0)] reg32 = (1'h0);
  assign y = {wire63,
                 wire61,
                 wire37,
                 wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire30,
                 wire4,
                 reg32,
                 (1'h0)};
  assign wire4 = $signed(($unsigned($unsigned(wire1)) & (wire1[(1'h1):(1'h1)] ?
                     $unsigned(wire1) : (wire0 ? (8'ha5) : wire1))));
  module5 #() modinst31 (.clk(clk), .y(wire30), .wire8(wire1), .wire6(wire0), .wire9(wire2), .wire7(wire3));
  always
    @(posedge clk) begin
      reg32 <= wire2;
    end
  assign wire33 = (!reg32);
  assign wire34 = (wire3[(2'h3):(2'h3)] ? wire3 : wire0[(4'h9):(2'h2)]);
  assign wire35 = (~^$signed($unsigned((wire4 >= wire0))));
  assign wire36 = (+(~^{wire34[(2'h2):(2'h2)]}));
  assign wire37 = (8'hab);
  module38 #() modinst62 (.wire39(wire36), .wire41(wire30), .wire42(wire35), .y(wire61), .clk(clk), .wire40(wire4));
  assign wire63 = (wire34[(2'h2):(1'h0)] ?
                      $unsigned($unsigned(((8'ha1) * wire30))) : (^~wire0));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module38  (y, clk, wire42, wire41, wire40, wire39);
  output wire [(32'h18):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire42;
  input wire signed [(4'ha):(1'h0)] wire41;
  input wire [(4'h8):(1'h0)] wire40;
  input wire [(4'h9):(1'h0)] wire39;
  wire signed [(2'h2):(1'h0)] wire60;
  wire signed [(2'h2):(1'h0)] wire59;
  wire [(4'h8):(1'h0)] wire58;
  wire signed [(3'h5):(1'h0)] wire57;
  wire signed [(3'h6):(1'h0)] wire55;
  assign y = {wire60, wire59, wire58, wire57, wire55, (1'h0)};
  module43 #() modinst56 (.y(wire55), .wire45(wire40), .clk(clk), .wire47(wire39), .wire44(wire42), .wire46(wire41));
  assign wire57 = ($signed($unsigned(wire39)) ?
                      $unsigned(($unsigned(wire41) ?
                          wire41[(2'h3):(1'h1)] : wire41[(3'h6):(1'h1)])) : (8'ha6));
  assign wire58 = ($unsigned(wire40[(3'h6):(1'h1)]) && $signed($unsigned((wire55 ?
                      wire39 : wire41))));
  assign wire59 = $signed((~&wire40[(3'h4):(1'h1)]));
  assign wire60 = $unsigned((~^$signed((wire58 ? wire39 : wire58))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module5  (y, clk, wire9, wire8, wire7, wire6);
  output wire [(32'h82):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire9;
  input wire signed [(4'h8):(1'h0)] wire8;
  input wire [(4'ha):(1'h0)] wire7;
  input wire [(4'hb):(1'h0)] wire6;
  wire signed [(3'h6):(1'h0)] wire29;
  wire [(2'h2):(1'h0)] wire28;
  wire signed [(2'h3):(1'h0)] wire27;
  wire [(4'hb):(1'h0)] wire26;
  wire signed [(4'h9):(1'h0)] wire21;
  wire [(3'h6):(1'h0)] wire12;
  wire [(3'h5):(1'h0)] wire11;
  reg [(4'h9):(1'h0)] reg25 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg24 = (1'h0);
  reg [(2'h2):(1'h0)] reg23 = (1'h0);
  reg [(3'h4):(1'h0)] reg22 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg20 = (1'h0);
  reg [(3'h4):(1'h0)] reg19 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg18 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg17 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg16 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg15 = (1'h0);
  reg [(4'ha):(1'h0)] reg14 = (1'h0);
  reg [(3'h7):(1'h0)] reg13 = (1'h0);
  reg [(4'h8):(1'h0)] reg10 = (1'h0);
  assign y = {wire29,
                 wire28,
                 wire27,
                 wire26,
                 wire21,
                 wire12,
                 wire11,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg20,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg10,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg10 <= ($signed(wire6) ?
          $signed(wire9[(3'h4):(1'h1)]) : $signed((8'ha6)));
    end
  assign wire11 = wire7[(3'h5):(3'h5)];
  assign wire12 = (~wire8);
  always
    @(posedge clk) begin
      if ((wire6[(4'ha):(3'h7)] ? wire9[(2'h2):(1'h0)] : wire9[(2'h2):(2'h2)]))
        begin
          reg13 <= ((8'ha1) && $signed($unsigned($unsigned(reg10))));
        end
      else
        begin
          reg13 <= wire6;
          reg14 <= $signed(((~|$unsigned(wire6)) ^ (~|wire11)));
        end
      if (((+$signed((wire9 > wire11))) ?
          $unsigned(reg13[(1'h0):(1'h0)]) : reg14[(3'h6):(1'h1)]))
        begin
          reg15 <= ({$signed($signed(wire9))} ~^ $signed($signed(wire7[(4'h9):(3'h7)])));
          reg16 <= $unsigned({reg10[(3'h6):(3'h4)]});
          if ((($signed({reg13}) <= $signed(wire6[(1'h0):(1'h0)])) ?
              {(wire6 ?
                      (reg14 ?
                          reg15 : reg14) : ((8'hab) >= wire7))} : wire8[(3'h6):(3'h5)]))
            begin
              reg17 <= (+(wire9[(1'h0):(1'h0)] ?
                  ((8'ha1) ?
                      $unsigned((8'ha8)) : {wire7}) : $signed(reg14[(1'h0):(1'h0)])));
              reg18 <= (({wire7[(1'h1):(1'h1)]} <= ((-(8'ha6)) ^~ reg13[(2'h3):(2'h2)])) ?
                  wire8 : $unsigned((8'h9d)));
            end
          else
            begin
              reg17 <= wire7;
              reg18 <= (~&$signed({$unsigned((8'ha2))}));
              reg19 <= wire9[(1'h0):(1'h0)];
            end
        end
      else
        begin
          reg15 <= wire8;
          if (($unsigned(((wire8 == (8'ha8)) ?
                  $unsigned(wire9) : (reg18 <<< wire12))) ?
              (^$unsigned((wire12 ?
                  (8'h9e) : reg10))) : $signed((~(~|wire12)))))
            begin
              reg16 <= reg13;
            end
          else
            begin
              reg16 <= {$signed(reg13[(2'h2):(2'h2)])};
              reg17 <= $signed(($signed((wire8 ? (8'hae) : reg16)) ?
                  ((wire11 ^ wire11) || $signed((8'h9f))) : {$unsigned((8'ha1))}));
              reg18 <= ((-{reg19}) * wire9[(3'h4):(2'h3)]);
            end
          reg19 <= $signed(reg14[(4'h8):(3'h4)]);
        end
      reg20 <= (&wire9);
    end
  assign wire21 = ({$signed((8'ha7))} ?
                      $signed((-(^~(8'ha5)))) : wire12[(3'h5):(2'h3)]);
  always
    @(posedge clk) begin
      reg22 <= $unsigned(reg16);
      if ((~|$unsigned($unsigned((~|reg10)))))
        begin
          reg23 <= (&$unsigned(reg13[(3'h7):(1'h0)]));
          reg24 <= (reg16 << $signed(({wire21} ? wire6 : (+wire9))));
          reg25 <= (~|(reg20[(1'h1):(1'h1)] ? (~^$signed(reg10)) : reg23));
        end
      else
        begin
          if ($unsigned((8'ha2)))
            begin
              reg23 <= reg14;
              reg24 <= reg17[(1'h0):(1'h0)];
            end
          else
            begin
              reg23 <= ((8'ha7) << $unsigned($signed(reg18[(3'h4):(1'h1)])));
            end
        end
    end
  assign wire26 = ((~^((8'haa) > reg18[(2'h3):(1'h1)])) <= $signed(reg10));
  assign wire27 = $signed((($signed(reg25) <= $unsigned(wire26)) ^ {(reg10 << reg20)}));
  assign wire28 = {($signed(reg20) == ($signed(reg24) > $unsigned(wire8)))};
  assign wire29 = ({((reg18 ? wire6 : (8'hab)) ?
                          (wire21 < reg13) : wire26[(3'h4):(2'h3)])} || (((wire11 ?
                      reg14 : (8'had)) << (!wire6)) + reg23[(1'h1):(1'h1)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module43
#(parameter param54 = {((!{(8'haa)}) ? (~&{(8'hb0)}) : (~|((8'haf) ^ (8'had))))})
(y, clk, wire47, wire46, wire45, wire44);
  output wire [(32'h25):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire47;
  input wire signed [(3'h7):(1'h0)] wire46;
  input wire [(4'h8):(1'h0)] wire45;
  input wire signed [(3'h4):(1'h0)] wire44;
  wire signed [(4'ha):(1'h0)] wire51;
  wire [(2'h3):(1'h0)] wire50;
  wire [(3'h7):(1'h0)] wire49;
  wire [(3'h6):(1'h0)] wire48;
  reg [(2'h3):(1'h0)] reg53 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg52 = (1'h0);
  assign y = {wire51, wire50, wire49, wire48, reg53, reg52, (1'h0)};
  assign wire48 = (((wire46 ? (-wire44) : (wire46 ? wire44 : wire47)) ?
                      wire47[(1'h1):(1'h0)] : ((wire46 ?
                          wire44 : wire44) << $unsigned(wire44))) > ((^wire44) + wire46[(3'h5):(1'h1)]));
  assign wire49 = wire47[(3'h5):(3'h5)];
  assign wire50 = wire45;
  assign wire51 = $signed((((wire44 ? wire45 : wire45) ? wire47 : (^wire45)) ?
                      wire45[(3'h6):(3'h4)] : {{wire47}}));
  always
    @(posedge clk) begin
      reg52 <= wire46[(1'h0):(1'h0)];
      reg53 <= (wire44 ?
          wire48 : ({(wire49 ?
                  wire51 : wire47)} < $unsigned((wire51 <<< wire51))));
    end
endmodule