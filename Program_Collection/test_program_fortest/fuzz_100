(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param38 = ({(((8'haf) ? (8'ha7) : (8'h9c)) ? ((8'h9f) || (8'haf)) : ((8'ha7) >> (8'h9d)))} ? ({((8'h9f) ? (8'ha1) : (8'h9e))} ? ({(8'hae)} ? ((8'haf) ? (8'hab) : (8'haa)) : ((8'haf) <<< (8'h9c))) : {(~&(8'hae))}) : (~^({(8'ha4)} ? {(8'had)} : ((8'had) & (8'haa))))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'ha1):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire0;
  input wire [(3'h6):(1'h0)] wire1;
  input wire [(3'h4):(1'h0)] wire2;
  input wire signed [(4'h8):(1'h0)] wire3;
  wire signed [(4'h8):(1'h0)] wire4;
  wire signed [(4'h8):(1'h0)] wire5;
  wire [(3'h5):(1'h0)] wire6;
  wire [(4'h9):(1'h0)] wire7;
  wire signed [(3'h4):(1'h0)] wire14;
  wire [(2'h3):(1'h0)] wire15;
  wire signed [(4'hb):(1'h0)] wire23;
  wire signed [(3'h7):(1'h0)] wire36;
  reg [(4'ha):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg9 = (1'h0);
  reg [(4'ha):(1'h0)] reg10 = (1'h0);
  reg [(3'h7):(1'h0)] reg11 = (1'h0);
  reg [(4'h8):(1'h0)] reg12 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg13 = (1'h0);
  reg [(4'h8):(1'h0)] reg16 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg17 = (1'h0);
  reg [(4'h9):(1'h0)] reg18 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg19 = (1'h0);
  reg [(3'h6):(1'h0)] reg20 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg21 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg22 = (1'h0);
  assign y = {wire4,
                 wire5,
                 wire6,
                 wire7,
                 wire14,
                 wire15,
                 wire23,
                 wire36,
                 reg8,
                 reg9,
                 reg10,
                 reg11,
                 reg12,
                 reg13,
                 reg16,
                 reg17,
                 reg18,
                 reg19,
                 reg20,
                 reg21,
                 reg22,
                 (1'h0)};
  assign wire4 = wire0;
  assign wire5 = (wire4[(3'h6):(1'h1)] <= $signed($signed({wire4})));
  assign wire6 = {((+wire0[(2'h3):(2'h3)]) * {(wire5 && wire4)})};
  assign wire7 = (~$unsigned($unsigned((wire3 ? wire5 : wire5))));
  always
    @(posedge clk) begin
      reg8 <= (-wire2[(2'h3):(1'h1)]);
      reg9 <= $unsigned((|(wire4 <= (~^wire3))));
      if (($signed(wire6[(3'h5):(1'h0)]) ^~ (~&{$unsigned(wire7)})))
        begin
          if ({(wire6[(3'h4):(1'h1)] >= $unsigned(wire3))})
            begin
              reg10 <= ($signed((~(wire3 - wire0))) ?
                  reg8[(3'h6):(3'h5)] : (({wire5} - wire6) ?
                      (~(wire3 ^~ wire3)) : $signed((8'ha7))));
              reg11 <= wire3;
              reg12 <= {(8'ha0)};
            end
          else
            begin
              reg10 <= (($signed(reg10) <<< ((wire7 ^~ wire4) ?
                      $unsigned(reg11) : $signed(wire6))) ?
                  ($signed($unsigned(reg12)) ~^ reg9) : (reg8 >> {wire2[(2'h2):(1'h0)]}));
              reg11 <= $signed($unsigned(reg8[(4'h9):(2'h3)]));
            end
          reg13 <= ((wire3 ? wire1 : $signed($unsigned(wire2))) ?
              $unsigned(reg8[(4'ha):(3'h4)]) : $unsigned(((~&wire4) ?
                  $unsigned(wire6) : (!reg11))));
        end
      else
        begin
          if ((~|(^((wire7 & (8'h9f)) ? {reg12} : (8'h9f)))))
            begin
              reg10 <= ($unsigned(({wire0} ? {(8'haa)} : (wire7 <= wire3))) ?
                  (reg13 ? wire1[(1'h1):(1'h0)] : wire4) : reg9);
              reg11 <= (8'hac);
            end
          else
            begin
              reg10 <= (8'ha0);
              reg11 <= reg10;
              reg12 <= (^~({(reg13 ? wire4 : reg10)} != wire0));
            end
          reg13 <= (~&(wire4[(1'h1):(1'h0)] ?
              reg10 : ($unsigned(reg12) ^~ reg9)));
        end
    end
  assign wire14 = $signed((reg8 + $unsigned((wire2 ? reg10 : reg11))));
  assign wire15 = {$signed((~$signed(reg11)))};
  always
    @(posedge clk) begin
      if ({wire15})
        begin
          reg16 <= ((~^(!((8'h9d) << wire2))) ^ (((reg12 & reg11) <= {reg11}) + reg12));
          reg17 <= {$signed(((~&reg11) <<< $unsigned(wire4)))};
        end
      else
        begin
          if ((^~$signed(((reg13 ? wire15 : reg17) + (~&(8'haa))))))
            begin
              reg16 <= $signed(reg12[(2'h3):(2'h3)]);
              reg17 <= wire3[(1'h1):(1'h0)];
            end
          else
            begin
              reg16 <= wire5[(2'h3):(1'h1)];
              reg17 <= (reg12 ? $signed(wire4) : (~|wire6[(3'h4):(2'h2)]));
              reg18 <= ($unsigned(wire14[(3'h4):(2'h2)]) ?
                  (($unsigned(reg12) ?
                          wire4[(3'h6):(2'h2)] : (reg17 < (8'ha0))) ?
                      $signed({reg13}) : (|$unsigned(wire0))) : $signed((+$signed(reg11))));
            end
          if ((8'ha3))
            begin
              reg19 <= wire5;
            end
          else
            begin
              reg19 <= $signed(((reg9 && reg13[(2'h2):(1'h1)]) ^ (|((8'haf) <<< reg12))));
              reg20 <= $unsigned((wire3[(2'h2):(1'h1)] != $signed((reg8 && wire6))));
            end
        end
      reg21 <= (($unsigned(reg12[(1'h0):(1'h0)]) ?
          (~^(~&reg11)) : wire0) | wire14[(2'h3):(2'h2)]);
      reg22 <= reg9;
    end
  assign wire23 = (~^$signed($signed(((8'hae) ? reg20 : reg16))));
  module24 #() modinst37 (wire36, clk, reg11, wire5, reg10, reg8);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module24
#(parameter param35 = {(((~(8'ha6)) ? {(8'haa)} : ((8'ha6) ? (8'ha6) : (8'hae))) + (8'ha5))})
(y, clk, wire28, wire27, wire26, wire25);
  output wire [(32'h1f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire28;
  input wire signed [(3'h5):(1'h0)] wire27;
  input wire [(2'h3):(1'h0)] wire26;
  input wire signed [(4'ha):(1'h0)] wire25;
  wire [(4'h9):(1'h0)] wire34;
  wire signed [(3'h7):(1'h0)] wire33;
  wire signed [(3'h6):(1'h0)] wire32;
  wire [(2'h3):(1'h0)] wire31;
  reg [(2'h3):(1'h0)] reg30 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg29 = (1'h0);
  assign y = {wire34, wire33, wire32, wire31, reg30, reg29, (1'h0)};
  always
    @(posedge clk) begin
      if (wire25)
        begin
          reg29 <= $unsigned((~(8'h9d)));
          reg30 <= $unsigned(($unsigned($unsigned(wire28)) >> (8'h9f)));
        end
      else
        begin
          reg29 <= (&(8'h9e));
        end
    end
  assign wire31 = ($signed((-$signed(wire26))) ?
                      wire28 : ((^~{(8'haf)}) != (reg30[(1'h0):(1'h0)] < wire27[(1'h0):(1'h0)])));
  assign wire32 = wire27[(3'h5):(1'h1)];
  assign wire33 = wire26[(2'h2):(1'h0)];
  assign wire34 = ({(8'ha6)} && (&$unsigned((&(8'ha2)))));
endmodule