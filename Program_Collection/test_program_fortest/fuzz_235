(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h3e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire3;
  input wire [(3'h4):(1'h0)] wire2;
  input wire [(4'ha):(1'h0)] wire1;
  input wire signed [(3'h6):(1'h0)] wire0;
  wire signed [(3'h4):(1'h0)] wire11;
  wire [(4'ha):(1'h0)] wire10;
  wire signed [(4'h8):(1'h0)] wire8;
  wire [(2'h3):(1'h0)] wire7;
  reg signed [(3'h5):(1'h0)] reg16 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg15 = (1'h0);
  reg [(3'h6):(1'h0)] reg14 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg13 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg12 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg6 = (1'h0);
  reg [(3'h7):(1'h0)] reg5 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg4 = (1'h0);
  assign y = {wire11,
                 wire10,
                 wire8,
                 wire7,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg9,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= $unsigned((wire2[(3'h4):(1'h1)] ?
          $signed((wire3 + wire0)) : $unsigned({wire1})));
      reg5 <= wire3;
      reg6 <= reg5[(3'h7):(1'h0)];
    end
  assign wire7 = ((8'haa) ?
                     reg5[(3'h6):(1'h0)] : (((wire2 - wire3) <= (8'ha5)) <<< (wire0[(3'h5):(3'h5)] ?
                         (!wire1) : reg4[(1'h1):(1'h0)])));
  assign wire8 = $signed($unsigned(reg4));
  always
    @(posedge clk) begin
      reg9 <= $unsigned($unsigned((((8'ha6) - (8'had)) ? wire8 : (+wire0))));
    end
  assign wire10 = reg9[(1'h1):(1'h1)];
  assign wire11 = {(((wire2 ? wire3 : wire8) ?
                          (~^reg9) : (wire3 | reg6)) << (8'h9d))};
  always
    @(posedge clk) begin
      reg12 <= wire2;
      if (wire3[(2'h2):(1'h0)])
        begin
          reg13 <= wire7;
        end
      else
        begin
          if (($signed(reg13[(2'h2):(2'h2)]) ? $signed(wire1) : wire7))
            begin
              reg13 <= reg6[(2'h3):(1'h1)];
            end
          else
            begin
              reg13 <= wire10[(3'h6):(2'h3)];
              reg14 <= {(8'hac)};
            end
          reg15 <= reg4[(2'h2):(2'h2)];
          reg16 <= $unsigned(wire2);
        end
    end
endmodule