(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h1c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire0;
  input wire [(4'h8):(1'h0)] wire1;
  input wire signed [(4'h8):(1'h0)] wire2;
  input wire [(3'h4):(1'h0)] wire3;
  wire [(3'h5):(1'h0)] wire36;
  wire [(2'h3):(1'h0)] wire35;
  wire [(3'h5):(1'h0)] wire4;
  wire signed [(3'h4):(1'h0)] wire33;
  reg signed [(4'ha):(1'h0)] reg5 = (1'h0);
  assign y = {wire36, wire35, wire4, wire33, reg5, (1'h0)};
  assign wire4 = ($unsigned($signed(wire0)) ?
                     $signed(((wire0 ? wire3 : wire3) ?
                         (wire2 ?
                             wire0 : wire3) : $unsigned(wire2))) : wire1[(1'h1):(1'h1)]);
  always
    @(posedge clk) begin
      reg5 <= wire4[(2'h2):(1'h1)];
    end
  module6 #() modinst34 (wire33, clk, wire4, wire0, wire1, reg5);
  assign wire35 = wire0[(1'h1):(1'h1)];
  assign wire36 = wire33[(2'h3):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module6  (y, clk, wire10, wire9, wire8, wire7);
  output wire [(32'h24):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire10;
  input wire signed [(2'h3):(1'h0)] wire9;
  input wire [(4'h8):(1'h0)] wire8;
  input wire [(4'ha):(1'h0)] wire7;
  wire signed [(2'h2):(1'h0)] wire32;
  wire [(4'h9):(1'h0)] wire30;
  wire signed [(2'h3):(1'h0)] wire14;
  wire signed [(4'h8):(1'h0)] wire13;
  wire signed [(4'h8):(1'h0)] wire12;
  wire [(3'h5):(1'h0)] wire11;
  assign y = {wire32, wire30, wire14, wire13, wire12, wire11, (1'h0)};
  assign wire11 = ({wire10} ?
                      (((wire10 >= wire9) * {wire10}) ?
                          $unsigned(wire10) : {$unsigned(wire10)}) : (wire9 ^~ (wire8 ?
                          {wire10} : (wire10 ^ wire7))));
  assign wire12 = {((!(~&(8'ha2))) == wire9)};
  assign wire13 = wire11[(3'h4):(2'h2)];
  assign wire14 = wire7[(2'h3):(1'h1)];
  module15 #() modinst31 (wire30, clk, wire13, wire11, wire12, wire8);
  assign wire32 = (8'ha5);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15
#(parameter param29 = (^((^~(~^(8'hae))) << {((8'hab) & (8'had))})))
(y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h45):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire19;
  input wire signed [(3'h5):(1'h0)] wire18;
  input wire [(3'h6):(1'h0)] wire17;
  input wire signed [(4'h8):(1'h0)] wire16;
  wire signed [(4'ha):(1'h0)] wire28;
  wire [(3'h5):(1'h0)] wire27;
  wire signed [(4'hb):(1'h0)] wire24;
  wire [(2'h2):(1'h0)] wire23;
  reg signed [(4'hb):(1'h0)] reg26 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg25 = (1'h0);
  reg [(4'h8):(1'h0)] reg22 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg21 = (1'h0);
  reg [(2'h3):(1'h0)] reg20 = (1'h0);
  assign y = {wire28,
                 wire27,
                 wire24,
                 wire23,
                 reg26,
                 reg25,
                 reg22,
                 reg21,
                 reg20,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg20 <= $unsigned(wire16[(2'h3):(1'h0)]);
      reg21 <= (wire19 <<< ({reg20[(1'h1):(1'h0)]} ? wire18 : wire17));
      reg22 <= $signed($unsigned(wire16[(4'h8):(1'h1)]));
    end
  assign wire23 = (wire16 >> $unsigned(reg22));
  assign wire24 = (8'h9c);
  always
    @(posedge clk) begin
      reg25 <= (|((^~(8'haf)) ? (^(reg22 ? wire24 : reg21)) : (|{reg20})));
    end
  always
    @(posedge clk) begin
      reg26 <= wire24;
    end
  assign wire27 = (~$unsigned(reg22));
  assign wire28 = wire18[(2'h3):(2'h3)];
endmodule