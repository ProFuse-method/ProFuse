(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h3b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire3;
  input wire [(4'ha):(1'h0)] wire2;
  input wire signed [(3'h4):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire [(3'h7):(1'h0)] wire30;
  wire signed [(3'h4):(1'h0)] wire22;
  wire signed [(4'h9):(1'h0)] wire20;
  reg [(3'h7):(1'h0)] reg29 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg28 = (1'h0);
  reg [(4'h8):(1'h0)] reg27 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg26 = (1'h0);
  reg [(2'h2):(1'h0)] reg25 = (1'h0);
  reg [(3'h4):(1'h0)] reg24 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg23 = (1'h0);
  assign y = {wire30,
                 wire22,
                 wire20,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 (1'h0)};
  module4 #() modinst21 (wire20, clk, wire2, wire3, wire1, wire0);
  assign wire22 = (8'h9d);
  always
    @(posedge clk) begin
      reg23 <= {(wire2 + wire3[(3'h6):(3'h4)])};
      if ($signed(($signed((wire0 < wire1)) ?
          ((reg23 ? wire2 : wire2) ?
              {wire20} : wire22[(3'h4):(1'h0)]) : wire1)))
        begin
          reg24 <= {$signed(wire2)};
        end
      else
        begin
          if ($unsigned(((-$unsigned((8'hab))) & wire0)))
            begin
              reg24 <= $unsigned(wire0[(4'h9):(1'h1)]);
              reg25 <= wire20[(1'h1):(1'h1)];
              reg26 <= wire1;
            end
          else
            begin
              reg24 <= wire22[(2'h3):(1'h1)];
              reg25 <= $unsigned((|(!{(8'ha8)})));
            end
        end
    end
  always
    @(posedge clk) begin
      reg27 <= $unsigned($signed(((^~reg25) > $signed(reg23))));
    end
  always
    @(posedge clk) begin
      reg28 <= $unsigned((-($unsigned(wire0) >> (reg25 ? wire22 : wire20))));
      reg29 <= ($unsigned((-$unsigned(wire2))) ?
          {wire20} : {((reg23 + reg27) ?
                  reg23[(1'h0):(1'h0)] : (reg27 ? wire20 : wire2))});
    end
  assign wire30 = reg23[(2'h2):(2'h2)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h42):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire8;
  input wire [(3'h6):(1'h0)] wire7;
  input wire signed [(2'h2):(1'h0)] wire6;
  input wire signed [(4'h9):(1'h0)] wire5;
  wire [(3'h6):(1'h0)] wire19;
  wire [(3'h4):(1'h0)] wire18;
  wire [(4'ha):(1'h0)] wire17;
  wire signed [(4'h9):(1'h0)] wire16;
  wire signed [(3'h7):(1'h0)] wire10;
  wire signed [(3'h4):(1'h0)] wire9;
  reg signed [(2'h2):(1'h0)] reg15 = (1'h0);
  reg [(4'h8):(1'h0)] reg14 = (1'h0);
  reg [(2'h3):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg12 = (1'h0);
  reg [(3'h6):(1'h0)] reg11 = (1'h0);
  assign y = {wire19,
                 wire18,
                 wire17,
                 wire16,
                 wire10,
                 wire9,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 (1'h0)};
  assign wire9 = ((wire6[(1'h1):(1'h1)] ?
                         $signed($signed(wire7)) : ((wire7 ?
                             wire6 : wire8) & (~&wire6))) ?
                     wire8 : (($signed(wire8) >> wire6) != ((wire8 ^~ wire5) ?
                         {wire6} : $signed(wire6))));
  assign wire10 = $unsigned((^$unsigned(wire9)));
  always
    @(posedge clk) begin
      if ($signed(wire5[(3'h6):(1'h1)]))
        begin
          reg11 <= ((wire7[(2'h3):(2'h3)] ?
              ($signed(wire8) ?
                  wire7 : $unsigned(wire5)) : wire5[(4'h8):(3'h6)]) && (wire6 ?
              (wire10[(3'h7):(1'h0)] ?
                  (wire5 ?
                      wire9 : wire6) : $signed((8'ha9))) : $signed({wire10})));
          if (reg11[(3'h4):(2'h3)])
            begin
              reg12 <= {(wire10[(2'h3):(1'h0)] ^~ (wire8 ~^ (~^(8'hb0))))};
            end
          else
            begin
              reg12 <= (~&wire6);
              reg13 <= $signed(wire7);
            end
          reg14 <= {$signed(reg12)};
        end
      else
        begin
          reg11 <= (((-reg12[(3'h5):(2'h2)]) ?
                  (reg13 ?
                      wire9[(3'h4):(1'h1)] : wire8) : (~&$unsigned(reg12))) ?
              {$unsigned((reg11 >> wire10))} : $unsigned(wire8));
        end
      reg15 <= (((((8'ha9) || reg12) ?
              reg14 : (reg13 ?
                  reg12 : wire5)) >> ($signed(reg14) ~^ wire10[(1'h0):(1'h0)])) ?
          (reg12 + ((8'ha9) ?
              (reg14 ?
                  wire10 : wire8) : $signed((8'ha3)))) : {$unsigned((wire9 ?
                  (8'ha7) : reg11))});
    end
  assign wire16 = wire6;
  assign wire17 = $unsigned((|(^~$unsigned((8'h9f)))));
  assign wire18 = wire16;
  assign wire19 = ((((wire7 ? reg11 : wire5) ?
                          wire7[(1'h1):(1'h0)] : reg12[(3'h6):(2'h2)]) >> $unsigned($unsigned(wire5))) ?
                      reg14 : $signed((8'had)));
endmodule