(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param41 = ({(~((~&(8'h9c)) == {(8'hb4)}))} < ((-({(8'hb9), (8'hab)} ? ((8'hb9) < (8'hba)) : ((8'hb1) >= (8'h9c)))) | (((-(8'ha9)) * {(8'ha9), (8'hb0)}) < (((8'hb9) - (8'h9c)) ? (+(8'haa)) : (!(7'h44)))))), 
parameter param42 = (!((+((~^param41) <<< ((7'h41) ? param41 : param41))) && {((param41 << param41) > (param41 ? param41 : (8'ha9))), (&(^param41))})))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h1a1):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hc):(1'h0)] wire4;
  input wire signed [(3'h5):(1'h0)] wire3;
  input wire [(5'h12):(1'h0)] wire2;
  input wire signed [(4'hc):(1'h0)] wire1;
  input wire signed [(2'h2):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire28;
  wire signed [(5'h11):(1'h0)] wire27;
  wire signed [(5'h13):(1'h0)] wire26;
  reg signed [(5'h11):(1'h0)] reg40 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg38 = (1'h0);
  reg [(5'h12):(1'h0)] reg37 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg35 = (1'h0);
  reg [(4'hb):(1'h0)] reg34 = (1'h0);
  reg [(5'h14):(1'h0)] reg33 = (1'h0);
  reg [(4'ha):(1'h0)] reg32 = (1'h0);
  reg [(5'h13):(1'h0)] reg25 = (1'h0);
  reg [(2'h3):(1'h0)] reg22 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg21 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg19 = (1'h0);
  reg [(4'h9):(1'h0)] reg17 = (1'h0);
  reg [(4'hd):(1'h0)] reg16 = (1'h0);
  reg [(5'h11):(1'h0)] reg14 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg12 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg11 = (1'h0);
  reg [(5'h12):(1'h0)] reg9 = (1'h0);
  reg [(3'h7):(1'h0)] reg8 = (1'h0);
  reg [(4'hf):(1'h0)] reg5 = (1'h0);
  reg [(4'hd):(1'h0)] reg39 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg36 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg31 = (1'h0);
  reg [(3'h6):(1'h0)] forvar30 = (1'h0);
  reg [(3'h4):(1'h0)] forvar29 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg24 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg23 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar20 = (1'h0);
  reg [(3'h4):(1'h0)] reg18 = (1'h0);
  reg [(3'h6):(1'h0)] forvar15 = (1'h0);
  reg [(3'h6):(1'h0)] reg13 = (1'h0);
  reg [(4'hb):(1'h0)] reg6 = (1'h0);
  reg [(2'h2):(1'h0)] reg10 = (1'h0);
  reg [(3'h5):(1'h0)] reg7 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar6 = (1'h0);
  assign y = {wire28,
                 wire27,
                 wire26,
                 reg40,
                 reg38,
                 reg37,
                 reg35,
                 reg34,
                 reg33,
                 reg32,
                 reg25,
                 reg22,
                 reg21,
                 reg19,
                 reg17,
                 reg16,
                 reg14,
                 reg12,
                 reg11,
                 reg9,
                 reg8,
                 reg5,
                 reg39,
                 reg36,
                 reg31,
                 forvar30,
                 forvar29,
                 reg24,
                 reg23,
                 forvar20,
                 reg18,
                 forvar15,
                 reg13,
                 reg6,
                 reg10,
                 reg7,
                 forvar6,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (wire2[(1'h0):(1'h0)])
        begin
          reg5 <= (~(($signed(((8'hb5) != wire2)) ?
                  wire3[(1'h0):(1'h0)] : (8'hac)) ?
              {wire2[(4'he):(4'h8)],
                  wire3[(3'h4):(2'h3)]} : (~((wire4 ^~ wire1) >> (^wire0)))));
          for (forvar6 = (1'h0); (forvar6 < (3'h4)); forvar6 = (forvar6 + (1'h1)))
            begin
              reg7 = {$signed($signed(((wire4 <<< wire1) && (forvar6 ?
                      reg5 : wire4)))),
                  {{({reg5} ? $signed(wire3) : wire1)}, wire3}};
              reg8 <= ($signed((wire2 ?
                      (wire1[(2'h2):(2'h2)] != wire3[(1'h1):(1'h0)]) : ($unsigned((8'hb4)) ?
                          reg5[(4'h8):(3'h4)] : (-forvar6)))) ?
                  $unsigned((wire3 ?
                      ($unsigned(reg5) ?
                          forvar6[(2'h3):(2'h3)] : $unsigned((8'hb2))) : (((8'hbe) ?
                              wire4 : wire3) ?
                          $signed(wire2) : ((8'ha1) ?
                              wire2 : (8'ha5))))) : reg5[(3'h6):(3'h6)]);
              reg9 <= ($unsigned((~^forvar6)) ?
                  reg5[(3'h4):(1'h1)] : (wire2 ?
                      forvar6[(4'he):(3'h6)] : (wire0 ? {(!reg5)} : reg8)));
              reg10 = $unsigned(reg9[(3'h5):(1'h0)]);
            end
          reg11 <= $signed(reg9);
        end
      else
        begin
          if (($unsigned(reg10[(1'h1):(1'h1)]) ?
              (((^~(reg9 ?
                  wire4 : (7'h41))) < (!wire4[(3'h5):(1'h1)])) ~^ (+reg10)) : ((8'ha6) ?
                  {(reg11[(3'h5):(3'h5)] ? (|reg5) : $unsigned(reg10)),
                      (|$signed(reg5))} : (($unsigned(wire3) ~^ (wire2 + wire3)) >= $signed({reg8})))))
            begin
              reg6 = (&(7'h44));
              reg7 = {{$signed(({(8'ha9), wire2} - reg9))},
                  ($unsigned($signed($unsigned(reg9))) ?
                      ((8'hb3) >>> ((wire1 ~^ reg5) ?
                          (&reg10) : (~(8'ha1)))) : $unsigned(($unsigned(wire0) << (reg6 ?
                          reg5 : (8'had)))))};
              reg10 = {$unsigned((!wire2[(4'h8):(1'h1)]))};
            end
          else
            begin
              reg6 = (^~$unsigned((-reg10)));
              reg8 <= $unsigned(reg10);
              reg9 <= (wire2[(3'h5):(2'h3)] - (^$unsigned($unsigned($signed(wire2)))));
              reg11 <= reg5[(4'hc):(3'h4)];
              reg12 <= $unsigned($unsigned(({(reg11 ? wire0 : (8'hb5)),
                      (wire1 > wire0)} ?
                  wire1 : $signed($signed((8'hb4))))));
            end
          reg13 = (8'ha3);
          reg14 <= (-(-$unsigned((~(reg6 >= reg11)))));
          for (forvar15 = (1'h0); (forvar15 < (2'h2)); forvar15 = (forvar15 + (1'h1)))
            begin
              reg16 <= $signed($signed($unsigned((~&{reg12}))));
              reg17 <= reg16;
              reg18 = forvar15;
              reg19 <= $unsigned((((reg12[(1'h0):(1'h0)] ?
                          $signed(reg6) : {(8'ha7), (8'hbb)}) ?
                      wire2[(5'h10):(4'hb)] : wire2) ?
                  reg7[(1'h1):(1'h1)] : (|$unsigned({reg9}))));
            end
        end
      for (forvar20 = (1'h0); (forvar20 < (2'h2)); forvar20 = (forvar20 + (1'h1)))
        begin
          reg21 <= reg8[(3'h5):(2'h2)];
          if (($unsigned(($signed({reg19,
              (8'ha6)}) ~^ (((8'ha4) >>> reg17) < reg18[(2'h2):(1'h1)]))) ~^ (forvar6[(1'h1):(1'h1)] << $signed((~|(^forvar15))))))
            begin
              reg22 <= (&(~$unsigned(((forvar15 ^ forvar20) ?
                  reg17[(2'h3):(2'h3)] : $signed(reg12)))));
            end
          else
            begin
              reg23 = reg13[(1'h1):(1'h1)];
              reg24 = ($signed(($unsigned((reg6 >>> (8'hb0))) ?
                      (forvar15 >>> (~^forvar20)) : ($signed(reg19) * $unsigned(reg13)))) ?
                  (($signed({(8'ha8)}) - reg23[(3'h4):(1'h0)]) ?
                      ((((8'h9c) ? wire0 : reg7) >> $signed(reg5)) ?
                          ((~^reg13) ~^ reg11[(4'h9):(3'h6)]) : ((forvar15 | reg16) ?
                              (~&wire4) : reg7[(3'h4):(3'h4)])) : $unsigned(reg17[(4'h8):(3'h6)])) : (reg21 ?
                      ((^wire2) <= $unsigned((wire3 > (8'hbe)))) : (^~$unsigned($signed(wire3)))));
            end
          reg25 <= (~$signed((!(8'hb7))));
        end
    end
  assign wire26 = ((|($unsigned({(8'hbd)}) <<< reg19)) > (+($signed((reg16 ?
                      reg14 : reg11)) ^ reg11)));
  assign wire27 = reg21[(4'h9):(1'h0)];
  assign wire28 = $unsigned($unsigned((-(wire3[(2'h3):(2'h2)] ?
                      (wire1 | wire3) : $unsigned(reg9)))));
  always
    @(posedge clk) begin
      for (forvar29 = (1'h0); (forvar29 < (1'h1)); forvar29 = (forvar29 + (1'h1)))
        begin
          for (forvar30 = (1'h0); (forvar30 < (3'h4)); forvar30 = (forvar30 + (1'h1)))
            begin
              reg31 = $unsigned({{reg22[(1'h0):(1'h0)],
                      $unsigned((reg17 && (8'haf)))},
                  $unsigned({wire2[(2'h3):(1'h0)], (reg14 <<< wire28)})});
              reg32 <= ((reg25[(4'he):(3'h4)] ?
                  wire0 : $signed(reg21[(3'h4):(1'h0)])) >= $signed({(!(&reg22)),
                  (8'ha8)}));
              reg33 <= $signed({$unsigned(wire1[(1'h0):(1'h0)])});
              reg34 <= ((7'h44) & $unsigned(($signed(wire28) >> {((8'ha2) ?
                      reg22 : reg11)})));
            end
          if (($unsigned(($signed((reg31 + wire27)) << reg33)) ?
              $signed(reg34[(3'h7):(3'h6)]) : {($signed((reg32 >>> wire4)) ?
                      wire26[(4'he):(1'h1)] : {(wire2 | reg32)}),
                  {reg11}}))
            begin
              reg35 <= ($unsigned(($signed(((8'hb7) ? (8'hb8) : reg8)) ?
                  wire2[(3'h4):(2'h2)] : (((8'ha9) + wire3) > $unsigned(wire2)))) + $unsigned(forvar30[(2'h3):(2'h3)]));
              reg36 = {$unsigned({((wire0 < (7'h41)) ?
                          $signed((8'ha7)) : (|reg33))})};
              reg37 <= reg36;
              reg38 <= (~|$unsigned(reg5));
              reg39 = (($signed(reg35) ?
                  $unsigned(($unsigned(reg5) || $unsigned(wire1))) : (~|wire26[(4'he):(4'ha)])) >> $unsigned((~^$unsigned($signed(wire27)))));
            end
          else
            begin
              reg35 <= {(8'ha2)};
              reg37 <= wire2[(3'h5):(1'h1)];
              reg38 <= reg39;
            end
          reg40 <= reg39[(1'h1):(1'h0)];
        end
    end
endmodule