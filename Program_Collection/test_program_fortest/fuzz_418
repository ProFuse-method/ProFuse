(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param49 = ((~{(8'ha6)}) * ({((8'ha9) ? (8'haf) : (8'ha2))} ^~ (((8'ha9) == (8'ha4)) ? ((8'ha5) ? (8'ha7) : (8'ha6)) : (&(8'hb0))))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h63):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire0;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire signed [(3'h6):(1'h0)] wire2;
  input wire signed [(3'h6):(1'h0)] wire3;
  wire [(4'ha):(1'h0)] wire48;
  wire [(4'h9):(1'h0)] wire47;
  wire [(4'hb):(1'h0)] wire46;
  wire signed [(3'h7):(1'h0)] wire45;
  wire [(4'hb):(1'h0)] wire10;
  wire [(4'h9):(1'h0)] wire43;
  reg signed [(4'hb):(1'h0)] reg4 = (1'h0);
  reg [(2'h2):(1'h0)] reg5 = (1'h0);
  reg [(4'h8):(1'h0)] reg6 = (1'h0);
  reg [(2'h2):(1'h0)] reg7 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg8 = (1'h0);
  reg [(3'h7):(1'h0)] reg9 = (1'h0);
  assign y = {wire48,
                 wire47,
                 wire46,
                 wire45,
                 wire10,
                 wire43,
                 reg4,
                 reg5,
                 reg6,
                 reg7,
                 reg8,
                 reg9,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire3[(3'h4):(1'h0)];
    end
  always
    @(posedge clk) begin
      if (($unsigned(({wire1} == (!wire0))) ?
          ((reg4 ? $signed(wire3) : wire2[(1'h1):(1'h0)]) ?
              $signed((&(8'hae))) : $signed((^wire0))) : (wire0[(4'h8):(1'h1)] ?
              $unsigned((wire1 || wire0)) : ($signed(wire2) ? reg4 : (~reg4)))))
        begin
          reg5 <= (-wire1);
          if ((~|wire1))
            begin
              reg6 <= $signed(reg5);
            end
          else
            begin
              reg6 <= $unsigned(($unsigned((~&wire1)) ?
                  ($signed((8'had)) ?
                      (wire2 << (8'ha9)) : {reg4}) : $unsigned($signed(wire1))));
            end
          if ((~wire0))
            begin
              reg7 <= $signed((((wire3 >= wire2) ? {(8'h9f)} : (reg4 != reg5)) ?
                  $signed(reg6[(2'h2):(2'h2)]) : $signed({wire3})));
              reg8 <= (-(|wire0));
            end
          else
            begin
              reg7 <= $unsigned((^reg6[(2'h2):(2'h2)]));
              reg8 <= {reg7};
              reg9 <= reg5;
            end
        end
      else
        begin
          reg5 <= (~wire2);
          reg6 <= $signed($signed(($unsigned(wire2) ? {reg5} : {reg9})));
        end
    end
  assign wire10 = reg9;
  module11 #() modinst44 (.y(wire43), .wire13(wire1), .clk(clk), .wire14(reg4), .wire12(wire10), .wire15(wire0));
  assign wire45 = wire0[(1'h0):(1'h0)];
  assign wire46 = wire3;
  assign wire47 = (~|reg5[(1'h1):(1'h0)]);
  assign wire48 = $signed({((~&(8'h9f)) ? (~&wire47) : {(8'h9c)})});
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11
#(parameter param42 = ((((~&(8'haf)) >= ((8'h9d) ? (8'haa) : (8'ha2))) == (((8'had) ? (8'h9c) : (8'hac)) ? (~^(8'ha9)) : (+(8'ha6)))) & (~|(+((8'had) ? (8'ha7) : (8'h9e))))))
(y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'ha7):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire15;
  input wire [(4'hb):(1'h0)] wire14;
  input wire signed [(4'ha):(1'h0)] wire13;
  input wire signed [(2'h2):(1'h0)] wire12;
  wire signed [(2'h3):(1'h0)] wire34;
  wire [(3'h6):(1'h0)] wire33;
  wire [(4'hb):(1'h0)] wire32;
  wire signed [(2'h2):(1'h0)] wire31;
  wire [(4'h9):(1'h0)] wire30;
  wire [(2'h3):(1'h0)] wire29;
  wire signed [(4'hb):(1'h0)] wire27;
  wire signed [(2'h3):(1'h0)] wire26;
  wire [(3'h5):(1'h0)] wire17;
  wire [(3'h7):(1'h0)] wire16;
  reg signed [(4'h8):(1'h0)] reg41 = (1'h0);
  reg [(2'h2):(1'h0)] reg40 = (1'h0);
  reg [(4'ha):(1'h0)] reg39 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg38 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg37 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg36 = (1'h0);
  reg [(3'h5):(1'h0)] reg35 = (1'h0);
  reg [(4'h9):(1'h0)] reg28 = (1'h0);
  reg [(3'h4):(1'h0)] reg25 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg24 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg22 = (1'h0);
  reg [(4'ha):(1'h0)] reg21 = (1'h0);
  reg [(2'h2):(1'h0)] reg20 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg19 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg18 = (1'h0);
  assign y = {wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire30,
                 wire29,
                 wire27,
                 wire26,
                 wire17,
                 wire16,
                 reg41,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 reg36,
                 reg35,
                 reg28,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 reg20,
                 reg19,
                 reg18,
                 (1'h0)};
  assign wire16 = (((~&$unsigned(wire15)) ?
                      ($signed(wire12) && wire12[(2'h2):(1'h1)]) : ((~^wire14) <= {wire14})) << wire12);
  assign wire17 = wire13;
  always
    @(posedge clk) begin
      reg18 <= (wire15 ^~ wire13[(3'h7):(2'h3)]);
      if ((~|(~|$signed(wire12[(1'h1):(1'h0)]))))
        begin
          if (wire16[(2'h2):(1'h1)])
            begin
              reg19 <= ((wire12[(1'h1):(1'h1)] ?
                  wire12[(2'h2):(1'h1)] : (|wire15)) * (reg18[(1'h0):(1'h0)] ?
                  wire16[(2'h3):(2'h3)] : (wire14[(4'hb):(1'h0)] > wire12[(1'h0):(1'h0)])));
              reg20 <= (~&(((~&wire14) >= wire17) == reg19[(2'h3):(1'h0)]));
              reg21 <= $signed((wire15[(1'h0):(1'h0)] ?
                  reg19 : wire13[(4'ha):(3'h7)]));
            end
          else
            begin
              reg19 <= $signed((($signed(wire16) > $signed(wire14)) ?
                  wire16[(2'h2):(2'h2)] : {$unsigned(wire12)}));
            end
          reg22 <= $unsigned($unsigned(reg20[(1'h0):(1'h0)]));
          if ($unsigned(reg22))
            begin
              reg23 <= (reg18 && (~&wire12));
            end
          else
            begin
              reg23 <= wire14;
              reg24 <= (({$signed(wire16)} ?
                      wire16[(3'h5):(1'h0)] : $signed((reg23 >>> (8'h9e)))) ?
                  $signed({$unsigned(wire12)}) : (($signed(reg18) ?
                      (~^(8'ha3)) : $unsigned(reg20)) == (^(^~reg20))));
              reg25 <= {($signed((-wire12)) ^~ (~|$signed(wire13)))};
            end
        end
      else
        begin
          reg19 <= ($unsigned(((|(8'hae)) >> reg21[(2'h2):(2'h2)])) ?
              (($unsigned(wire16) ?
                  $unsigned((8'had)) : {wire12}) > wire13[(4'ha):(1'h1)]) : (~|wire12));
        end
    end
  assign wire26 = wire17[(2'h3):(1'h0)];
  assign wire27 = ((reg21[(2'h3):(2'h2)] ^~ {((8'ha7) << wire16)}) ^~ ($signed((reg22 < wire16)) & {$unsigned(reg18)}));
  always
    @(posedge clk) begin
      reg28 <= wire16;
    end
  assign wire29 = $unsigned($unsigned(wire15));
  assign wire30 = (-$unsigned(reg22[(1'h1):(1'h0)]));
  assign wire31 = $signed(((^~(reg24 ? (8'h9f) : wire16)) ?
                      $signed((reg22 < wire13)) : ((wire16 ? wire30 : reg19) ?
                          (reg23 ? reg22 : wire12) : (~&wire14))));
  assign wire32 = (wire17 ?
                      (^reg25) : ((~|reg24[(1'h0):(1'h0)]) ?
                          (((8'hb0) ? reg25 : wire12) ?
                              (reg22 ?
                                  wire31 : wire16) : (wire14 | wire30)) : $signed(wire15[(2'h2):(1'h0)])));
  assign wire33 = wire32[(3'h6):(2'h3)];
  assign wire34 = ({$signed(wire29)} ?
                      (((wire17 >= wire17) ?
                              $unsigned(wire27) : (wire27 ? wire14 : wire15)) ?
                          {$unsigned(wire15)} : $signed((wire16 < reg22))) : $signed((8'had)));
  always
    @(posedge clk) begin
      reg35 <= (-$unsigned((~^(wire32 <<< wire31))));
      if (reg18)
        begin
          reg36 <= (~$unsigned((-wire12[(1'h1):(1'h1)])));
          reg37 <= (wire17[(2'h3):(1'h1)] ?
              $signed(reg36[(2'h2):(1'h1)]) : ($signed((+wire15)) <<< ((8'ha4) ^ ((8'hae) ?
                  wire17 : (8'h9d)))));
        end
      else
        begin
          if (($unsigned((~(reg20 == wire26))) ^~ ($signed((wire33 != reg22)) || $signed({(8'h9c)}))))
            begin
              reg36 <= $unsigned(((~&$unsigned(reg37)) ?
                  (~$signed(wire26)) : reg35[(3'h4):(3'h4)]));
              reg37 <= ($unsigned({(wire16 ? (8'h9f) : reg22)}) ?
                  (|reg23[(3'h6):(3'h4)]) : (~|{$unsigned(reg19)}));
              reg38 <= {((wire16[(1'h0):(1'h0)] <<< (wire12 - wire16)) ?
                      ((wire34 ~^ reg20) > reg19[(3'h5):(1'h0)]) : wire34[(2'h2):(1'h1)])};
            end
          else
            begin
              reg36 <= $unsigned((((reg36 ?
                      (8'ha8) : reg38) - $unsigned(wire16)) ?
                  wire27 : wire15));
              reg37 <= $unsigned(wire34);
              reg38 <= reg25[(2'h2):(1'h0)];
            end
          reg39 <= wire31;
          reg40 <= {(reg24 ?
                  $unsigned((^reg18)) : ($signed(wire27) <= $unsigned(reg36)))};
        end
      reg41 <= (wire31 ?
          wire31 : ({wire12[(2'h2):(1'h1)]} || reg28[(2'h3):(2'h2)]));
    end
endmodule