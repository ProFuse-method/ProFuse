(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param18 = (((((8'haf) ? (|(7'h40)) : ((8'h9c) ? (8'ha7) : (8'hb3))) == {(|(8'ha7)), {(8'hac)}}) <= (({(8'ha7), (8'h9f)} < ((8'hbc) ? (8'ha9) : (8'hbe))) || (((8'hb9) ? (8'ha3) : (8'haa)) < (|(8'hb1))))) <= {({((7'h40) ^~ (8'hb5)), (8'hb2)} >> (8'hbe))}), 
parameter param19 = (((((param18 * param18) ? param18 : param18) < ((~^param18) ? (param18 & (8'ha1)) : (param18 & (8'h9c)))) ? (param18 << (param18 < param18)) : ({param18} ? (~|param18) : param18)) != (!param18)))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h8e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hc):(1'h0)] wire4;
  input wire [(3'h5):(1'h0)] wire3;
  input wire signed [(5'h12):(1'h0)] wire2;
  input wire [(5'h13):(1'h0)] wire1;
  input wire signed [(5'h15):(1'h0)] wire0;
  wire signed [(5'h10):(1'h0)] wire17;
  wire [(3'h5):(1'h0)] wire16;
  wire signed [(4'hd):(1'h0)] wire15;
  wire signed [(2'h2):(1'h0)] wire6;
  wire [(4'hc):(1'h0)] wire5;
  reg [(4'hd):(1'h0)] reg13 = (1'h0);
  reg [(5'h10):(1'h0)] reg12 = (1'h0);
  reg [(4'he):(1'h0)] reg14 = (1'h0);
  reg [(3'h6):(1'h0)] reg11 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar10 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg9 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg8 = (1'h0);
  reg [(5'h15):(1'h0)] forvar7 = (1'h0);
  assign y = {wire17,
                 wire16,
                 wire15,
                 wire6,
                 wire5,
                 reg13,
                 reg12,
                 reg14,
                 reg11,
                 forvar10,
                 reg9,
                 reg8,
                 forvar7,
                 (1'h0)};
  assign wire5 = wire2[(3'h4):(3'h4)];
  assign wire6 = (wire3[(1'h0):(1'h0)] ?
                     ((!{$unsigned(wire0)}) ^ $unsigned(wire2[(4'hb):(3'h4)])) : (~^{{{wire2,
                                 wire5}},
                         wire1}));
  always
    @(posedge clk) begin
      for (forvar7 = (1'h0); (forvar7 < (2'h3)); forvar7 = (forvar7 + (1'h1)))
        begin
          reg8 = ($signed(wire6) ?
              (&(+(!$unsigned(forvar7)))) : wire4[(4'h8):(2'h3)]);
          reg9 = wire1;
          for (forvar10 = (1'h0); (forvar10 < (1'h1)); forvar10 = (forvar10 + (1'h1)))
            begin
              reg11 = ((&(|wire2[(1'h1):(1'h0)])) < ((^(forvar10[(3'h6):(1'h1)] - forvar7)) * wire4));
              reg12 <= (+wire4);
            end
          reg13 <= {($unsigned($unsigned(reg9)) << $signed((wire6[(1'h0):(1'h0)] ?
                  (reg11 << wire1) : wire4[(3'h7):(3'h6)]))),
              (wire4[(3'h5):(3'h4)] > $unsigned($unsigned((reg12 + wire3))))};
        end
      reg14 = (&$unsigned(reg13[(1'h1):(1'h0)]));
    end
  assign wire15 = (-reg12[(4'hf):(4'he)]);
  assign wire16 = $unsigned((~^(^wire5[(3'h7):(3'h7)])));
  assign wire17 = $signed(((-(~^$signed(wire6))) != wire6));
endmodule