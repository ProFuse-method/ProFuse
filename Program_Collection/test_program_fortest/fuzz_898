(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param115 = (~((((|(8'ha8)) < ((8'hb4) << (7'h40))) ? (((8'ha1) ? (8'ha5) : (8'hb4)) ? (8'hb8) : {(8'hb0), (8'hac)}) : ((8'h9f) >>> {(8'hb7), (8'ha6)})) ^~ (&(|((8'hb8) >>> (7'h42)))))))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h518):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'he):(1'h0)] wire4;
  input wire signed [(4'hf):(1'h0)] wire3;
  input wire [(5'h13):(1'h0)] wire2;
  input wire signed [(3'h4):(1'h0)] wire1;
  input wire signed [(5'h14):(1'h0)] wire0;
  wire signed [(5'h11):(1'h0)] wire114;
  wire [(2'h2):(1'h0)] wire113;
  wire signed [(2'h3):(1'h0)] wire112;
  wire signed [(3'h5):(1'h0)] wire111;
  wire [(4'ha):(1'h0)] wire110;
  wire signed [(2'h3):(1'h0)] wire109;
  wire [(5'h11):(1'h0)] wire108;
  wire [(4'hc):(1'h0)] wire107;
  wire [(5'h14):(1'h0)] wire106;
  wire [(2'h3):(1'h0)] wire105;
  wire signed [(5'h15):(1'h0)] wire104;
  wire [(4'h9):(1'h0)] wire75;
  wire [(5'h15):(1'h0)] wire74;
  wire [(5'h13):(1'h0)] wire73;
  wire [(4'hb):(1'h0)] wire6;
  wire [(5'h14):(1'h0)] wire5;
  reg [(3'h4):(1'h0)] reg102 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg101 = (1'h0);
  reg [(5'h12):(1'h0)] reg99 = (1'h0);
  reg [(4'ha):(1'h0)] reg98 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg97 = (1'h0);
  reg [(4'hd):(1'h0)] reg95 = (1'h0);
  reg [(4'hc):(1'h0)] reg93 = (1'h0);
  reg [(5'h10):(1'h0)] reg91 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg90 = (1'h0);
  reg [(4'hf):(1'h0)] reg86 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg84 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg82 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg79 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg76 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg72 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg70 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg68 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg66 = (1'h0);
  reg [(2'h2):(1'h0)] reg64 = (1'h0);
  reg [(3'h6):(1'h0)] reg63 = (1'h0);
  reg [(4'hc):(1'h0)] reg62 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg57 = (1'h0);
  reg [(5'h10):(1'h0)] reg55 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg52 = (1'h0);
  reg [(4'hc):(1'h0)] reg49 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg48 = (1'h0);
  reg [(4'ha):(1'h0)] reg47 = (1'h0);
  reg [(5'h13):(1'h0)] reg45 = (1'h0);
  reg [(3'h4):(1'h0)] reg44 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg43 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg37 = (1'h0);
  reg [(5'h14):(1'h0)] reg32 = (1'h0);
  reg [(5'h15):(1'h0)] reg27 = (1'h0);
  reg [(4'hd):(1'h0)] reg26 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg25 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg24 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg23 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg16 = (1'h0);
  reg [(4'ha):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg13 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg12 = (1'h0);
  reg [(4'hd):(1'h0)] reg9 = (1'h0);
  reg [(5'h13):(1'h0)] reg103 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar100 = (1'h0);
  reg [(2'h2):(1'h0)] forvar96 = (1'h0);
  reg [(4'he):(1'h0)] reg94 = (1'h0);
  reg [(5'h13):(1'h0)] reg92 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar89 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg88 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar87 = (1'h0);
  reg [(4'he):(1'h0)] forvar85 = (1'h0);
  reg [(4'hb):(1'h0)] forvar83 = (1'h0);
  reg [(3'h6):(1'h0)] reg78 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg81 = (1'h0);
  reg signed [(4'he):(1'h0)] reg80 = (1'h0);
  reg [(4'hf):(1'h0)] forvar78 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg77 = (1'h0);
  reg [(5'h14):(1'h0)] forvar71 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg69 = (1'h0);
  reg [(5'h13):(1'h0)] reg67 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar65 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg61 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg60 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar59 = (1'h0);
  reg [(4'he):(1'h0)] reg58 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar56 = (1'h0);
  reg [(2'h3):(1'h0)] forvar54 = (1'h0);
  reg [(5'h14):(1'h0)] forvar53 = (1'h0);
  reg [(3'h6):(1'h0)] reg51 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg50 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg46 = (1'h0);
  reg [(3'h4):(1'h0)] reg42 = (1'h0);
  reg [(4'he):(1'h0)] forvar41 = (1'h0);
  reg [(3'h5):(1'h0)] forvar40 = (1'h0);
  reg signed [(4'he):(1'h0)] reg39 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg38 = (1'h0);
  reg [(3'h4):(1'h0)] forvar36 = (1'h0);
  reg [(4'h9):(1'h0)] forvar35 = (1'h0);
  reg [(5'h10):(1'h0)] reg34 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg33 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar31 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg30 = (1'h0);
  reg [(2'h3):(1'h0)] reg29 = (1'h0);
  reg [(4'hd):(1'h0)] forvar28 = (1'h0);
  reg [(4'hd):(1'h0)] forvar22 = (1'h0);
  reg [(4'hf):(1'h0)] reg21 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg20 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar19 = (1'h0);
  reg [(4'he):(1'h0)] forvar18 = (1'h0);
  reg [(4'hc):(1'h0)] reg17 = (1'h0);
  reg [(5'h12):(1'h0)] forvar14 = (1'h0);
  reg [(2'h2):(1'h0)] reg11 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg10 = (1'h0);
  reg [(4'hb):(1'h0)] forvar8 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar7 = (1'h0);
  assign y = {wire114,
                 wire113,
                 wire112,
                 wire111,
                 wire110,
                 wire109,
                 wire108,
                 wire107,
                 wire106,
                 wire105,
                 wire104,
                 wire75,
                 wire74,
                 wire73,
                 wire6,
                 wire5,
                 reg102,
                 reg101,
                 reg99,
                 reg98,
                 reg97,
                 reg95,
                 reg93,
                 reg91,
                 reg90,
                 reg86,
                 reg84,
                 reg82,
                 reg79,
                 reg76,
                 reg72,
                 reg70,
                 reg68,
                 reg66,
                 reg64,
                 reg63,
                 reg62,
                 reg57,
                 reg55,
                 reg52,
                 reg49,
                 reg48,
                 reg47,
                 reg45,
                 reg44,
                 reg43,
                 reg37,
                 reg32,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 reg16,
                 reg15,
                 reg13,
                 reg12,
                 reg9,
                 reg103,
                 forvar100,
                 forvar96,
                 reg94,
                 reg92,
                 forvar89,
                 reg88,
                 forvar87,
                 forvar85,
                 forvar83,
                 reg78,
                 reg81,
                 reg80,
                 forvar78,
                 reg77,
                 forvar71,
                 reg69,
                 reg67,
                 forvar65,
                 reg61,
                 reg60,
                 forvar59,
                 reg58,
                 forvar56,
                 forvar54,
                 forvar53,
                 reg51,
                 reg50,
                 reg46,
                 reg42,
                 forvar41,
                 forvar40,
                 reg39,
                 reg38,
                 forvar36,
                 forvar35,
                 reg34,
                 reg33,
                 forvar31,
                 reg30,
                 reg29,
                 forvar28,
                 forvar22,
                 reg21,
                 reg20,
                 forvar19,
                 forvar18,
                 reg17,
                 forvar14,
                 reg11,
                 reg10,
                 forvar8,
                 forvar7,
                 (1'h0)};
  assign wire5 = wire2[(2'h2):(1'h0)];
  assign wire6 = wire3;
  always
    @(posedge clk) begin
      for (forvar7 = (1'h0); (forvar7 < (2'h2)); forvar7 = (forvar7 + (1'h1)))
        begin
          for (forvar8 = (1'h0); (forvar8 < (1'h1)); forvar8 = (forvar8 + (1'h1)))
            begin
              reg9 <= wire5[(5'h14):(4'he)];
              reg10 = (forvar8[(3'h5):(3'h5)] ~^ (^~wire4));
              reg11 = (~^((((8'h9f) == (8'ha7)) ~^ $signed({wire0})) && $unsigned(wire5)));
              reg12 <= ($unsigned((|forvar8[(3'h6):(1'h1)])) ?
                  {$unsigned(wire1[(2'h2):(2'h2)]),
                      (wire1 ^~ {$signed(wire2)})} : wire4);
              reg13 <= $signed($unsigned($signed((~$signed((8'hb9))))));
            end
          for (forvar14 = (1'h0); (forvar14 < (3'h4)); forvar14 = (forvar14 + (1'h1)))
            begin
              reg15 <= wire4[(4'h9):(3'h6)];
              reg16 <= (+({((wire6 && (8'hac)) - {reg9})} | $signed(forvar14[(5'h12):(4'hc)])));
            end
        end
      reg17 = wire5[(5'h13):(3'h4)];
      for (forvar18 = (1'h0); (forvar18 < (3'h4)); forvar18 = (forvar18 + (1'h1)))
        begin
          for (forvar19 = (1'h0); (forvar19 < (1'h0)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 = ((8'hb2) ?
                  wire2 : $unsigned($signed(($unsigned(reg17) ?
                      $signed(reg13) : reg9[(4'h9):(4'h9)]))));
              reg21 = (^~($unsigned((^~(wire2 ^ (7'h43)))) ?
                  forvar7 : (reg13 ?
                      reg13[(1'h1):(1'h1)] : {(reg17 | (8'hbd)), (|forvar8)})));
            end
          for (forvar22 = (1'h0); (forvar22 < (1'h1)); forvar22 = (forvar22 + (1'h1)))
            begin
              reg23 <= forvar22;
              reg24 <= ($signed((reg11[(1'h1):(1'h0)] ?
                  $signed((8'ha4)) : ($unsigned((7'h44)) ?
                      $unsigned(wire4) : (forvar7 >>> forvar19)))) - {reg11[(1'h1):(1'h0)],
                  $unsigned({$unsigned((8'hb8))})});
              reg25 <= ($unsigned(reg21) >>> (((wire6[(3'h5):(3'h5)] == $signed(reg15)) && (|wire2)) > ($unsigned(reg20) + $unsigned(wire5[(3'h4):(1'h1)]))));
              reg26 <= ((|(reg24[(4'hd):(4'hc)] ?
                      $signed(forvar7) : (wire1[(2'h2):(1'h1)] ?
                          reg21[(3'h7):(2'h2)] : reg25[(5'h11):(3'h5)]))) ?
                  {$unsigned($unsigned(wire2))} : $unsigned($signed($signed((~&reg13)))));
              reg27 <= (-reg9[(3'h6):(1'h0)]);
            end
          for (forvar28 = (1'h0); (forvar28 < (2'h2)); forvar28 = (forvar28 + (1'h1)))
            begin
              reg29 = (~&(&reg11[(2'h2):(1'h0)]));
              reg30 = (-reg11);
            end
          for (forvar31 = (1'h0); (forvar31 < (2'h3)); forvar31 = (forvar31 + (1'h1)))
            begin
              reg32 <= $unsigned(wire6[(4'h8):(3'h4)]);
              reg33 = (+(~^reg16[(2'h2):(1'h0)]));
            end
          reg34 = (&(forvar8[(3'h6):(2'h3)] ?
              wire4[(3'h4):(3'h4)] : (forvar8[(4'h8):(3'h5)] ?
                  reg12[(1'h1):(1'h1)] : reg27[(4'ha):(3'h5)])));
        end
    end
  always
    @(posedge clk) begin
      for (forvar35 = (1'h0); (forvar35 < (1'h0)); forvar35 = (forvar35 + (1'h1)))
        begin
          for (forvar36 = (1'h0); (forvar36 < (1'h0)); forvar36 = (forvar36 + (1'h1)))
            begin
              reg37 <= (|$signed($signed(((wire4 ? reg26 : reg9) ~^ wire4))));
              reg38 = $unsigned($unsigned({$signed((-forvar35))}));
              reg39 = (wire6 - (($signed($signed(reg32)) ~^ $unsigned($unsigned(reg26))) ?
                  (-((+wire1) ?
                      (reg24 ?
                          (8'hba) : (7'h43)) : (7'h44))) : (wire5[(3'h6):(2'h2)] <<< reg9)));
            end
        end
      for (forvar40 = (1'h0); (forvar40 < (1'h1)); forvar40 = (forvar40 + (1'h1)))
        begin
          for (forvar41 = (1'h0); (forvar41 < (1'h1)); forvar41 = (forvar41 + (1'h1)))
            begin
              reg42 = ($unsigned($signed(($signed((8'hb7)) <<< reg37))) ?
                  wire0[(4'hc):(2'h2)] : (({(reg16 ~^ wire5),
                          ((8'hbd) ? reg25 : reg24)} ?
                      (wire2 ^~ reg23[(3'h4):(2'h2)]) : {(|reg15)}) << (({forvar40,
                          reg39} ?
                      $signed(wire1) : {reg37, reg16}) >> (~&((8'ha1) ?
                      wire0 : (8'haa))))));
              reg43 <= ($unsigned($signed(({reg39} ?
                  reg37[(1'h1):(1'h0)] : (forvar35 & reg12)))) * $signed((~^((forvar41 ?
                      reg42 : wire2) ?
                  ((8'hb6) - forvar35) : ((8'ha6) ? forvar40 : reg37)))));
              reg44 <= (reg9 - wire6[(3'h6):(3'h4)]);
            end
          if ((forvar36 ~^ forvar40[(1'h1):(1'h0)]))
            begin
              reg45 <= ((~&wire2[(3'h6):(2'h2)]) ?
                  ((^~reg23) ?
                      (8'hb2) : $unsigned(wire4)) : reg37[(4'h8):(2'h3)]);
              reg46 = (~|forvar41);
              reg47 <= {(forvar40 >= ($unsigned(reg13) + ((|reg23) ?
                      reg9[(3'h7):(3'h4)] : reg46[(2'h2):(1'h0)]))),
                  (((|(reg9 ~^ reg9)) ^~ (^~$signed(reg23))) & (~&(|((8'hbd) ?
                      wire1 : reg13))))};
              reg48 <= $unsigned((&$signed((!$signed((8'ha3))))));
            end
          else
            begin
              reg45 <= {{$signed(wire1[(3'h4):(1'h1)])}};
              reg47 <= $signed({((reg37[(1'h0):(1'h0)] && (reg27 ?
                      reg24 : forvar35)) < reg13),
                  ($unsigned(reg9) ?
                      (~^reg16[(1'h1):(1'h0)]) : (reg39 ?
                          (reg37 ? reg39 : wire0) : (reg43 ? reg15 : reg38)))});
              reg48 <= (forvar36[(1'h1):(1'h0)] <<< ($unsigned(($unsigned(wire1) && $signed(wire6))) ?
                  wire0 : $unsigned({((8'hb8) ^ reg43), (reg44 <<< reg15)})));
              reg49 <= reg16[(3'h6):(1'h1)];
              reg50 = ((-((-$signed(reg23)) <<< (+(8'ha8)))) << (8'hbf));
            end
          reg51 = reg37[(2'h2):(1'h0)];
        end
      reg52 <= (-(~^reg12[(3'h7):(3'h6)]));
      for (forvar53 = (1'h0); (forvar53 < (1'h1)); forvar53 = (forvar53 + (1'h1)))
        begin
          for (forvar54 = (1'h0); (forvar54 < (2'h3)); forvar54 = (forvar54 + (1'h1)))
            begin
              reg55 <= reg12;
            end
          for (forvar56 = (1'h0); (forvar56 < (1'h1)); forvar56 = (forvar56 + (1'h1)))
            begin
              reg57 <= (8'ha2);
              reg58 = forvar40[(3'h4):(2'h2)];
            end
        end
      if (reg49[(4'h9):(4'h9)])
        begin
          for (forvar59 = (1'h0); (forvar59 < (3'h4)); forvar59 = (forvar59 + (1'h1)))
            begin
              reg60 = $signed((&$unsigned(($unsigned(forvar59) + $unsigned(reg44)))));
              reg61 = (|(^(|wire4[(4'hc):(2'h2)])));
            end
        end
      else
        begin
          for (forvar59 = (1'h0); (forvar59 < (1'h0)); forvar59 = (forvar59 + (1'h1)))
            begin
              reg60 = reg60;
              reg61 = forvar40[(1'h1):(1'h1)];
              reg62 <= (8'hb6);
            end
          reg63 <= reg47[(4'h9):(3'h6)];
          reg64 <= $signed($signed({($unsigned(reg24) - wire6[(4'h9):(4'h9)])}));
          for (forvar65 = (1'h0); (forvar65 < (3'h4)); forvar65 = (forvar65 + (1'h1)))
            begin
              reg66 <= (reg45[(5'h11):(1'h0)] <<< (((&(^~reg44)) ?
                      (|reg13[(3'h4):(3'h4)]) : wire4[(4'hb):(3'h7)]) ?
                  (({reg23, wire2} ?
                      ((8'hba) ?
                          reg39 : (8'hb3)) : (reg13 | reg32)) ~^ $signed({forvar36,
                      wire2})) : forvar35));
              reg67 = {(reg58[(1'h0):(1'h0)] - reg44[(2'h2):(2'h2)]),
                  reg32[(4'hc):(4'ha)]};
              reg68 <= reg66[(1'h0):(1'h0)];
              reg69 = ($signed(forvar53) & (((+(reg48 >= reg61)) ?
                      ($signed((8'hac)) - $signed((8'hb4))) : reg68) ?
                  (((&reg37) ?
                      $signed((8'h9f)) : forvar56[(2'h2):(1'h1)]) << ((+forvar54) ?
                      {(8'h9d),
                          reg23} : reg58)) : $signed($unsigned((8'h9c)))));
              reg70 <= $signed((|((~|reg25) & $signed($signed(reg39)))));
            end
          for (forvar71 = (1'h0); (forvar71 < (1'h0)); forvar71 = (forvar71 + (1'h1)))
            begin
              reg72 <= $unsigned($unsigned({({reg55} ?
                      reg25[(5'h10):(4'he)] : (reg24 ? forvar54 : wire2)),
                  reg57[(3'h7):(3'h7)]}));
            end
        end
    end
  assign wire73 = ((^~reg37) ^ $unsigned((^~{$unsigned((7'h40))})));
  assign wire74 = (((wire0[(3'h4):(1'h1)] & ({reg70} ?
                          $unsigned((8'hae)) : reg25)) > ((wire2[(5'h13):(2'h2)] ?
                          (wire2 | (8'ha9)) : (|reg32)) - ($signed(reg70) ?
                          reg55 : {reg12, reg45}))) ?
                      $signed((reg24 ?
                          ((^~reg27) ?
                              (wire4 ?
                                  (8'hbe) : reg27) : $signed((7'h40))) : (reg45[(5'h13):(3'h4)] ?
                              $unsigned(reg32) : (-reg57)))) : reg27[(4'hf):(4'hb)]);
  assign wire75 = $signed($signed($unsigned((&reg48[(4'hb):(3'h5)]))));
  always
    @(posedge clk) begin
      if (((8'hb4) ?
          wire0 : ($unsigned($signed((reg16 ?
              wire74 : wire75))) - reg47[(3'h7):(3'h4)])))
        begin
          reg76 <= (^~$signed($unsigned(reg37[(4'hb):(2'h3)])));
          reg77 = $signed((reg55 ? reg70[(2'h3):(2'h3)] : reg72));
          for (forvar78 = (1'h0); (forvar78 < (1'h0)); forvar78 = (forvar78 + (1'h1)))
            begin
              reg79 <= $signed($signed({(~|{reg9, reg45}), reg76}));
              reg80 = $signed(reg16[(1'h0):(1'h0)]);
              reg81 = ($signed((!wire75[(3'h5):(2'h3)])) ?
                  $signed(reg80) : $unsigned(reg37[(3'h6):(1'h1)]));
              reg82 <= $unsigned(wire1);
            end
        end
      else
        begin
          if ($unsigned(reg82))
            begin
              reg76 <= ($signed($signed(((reg26 ? (8'hb4) : reg16) ?
                  $signed(wire6) : $unsigned((8'hb2))))) >= $signed(reg76));
            end
          else
            begin
              reg77 = (-(8'hb7));
              reg78 = reg27;
              reg80 = (reg66[(4'h9):(4'h9)] ?
                  (reg32[(3'h4):(2'h2)] * (!{{reg62,
                          reg81}})) : $unsigned((-($signed(reg52) ?
                      reg80[(2'h3):(2'h2)] : reg23[(5'h11):(3'h7)]))));
              reg82 <= reg55;
            end
          for (forvar83 = (1'h0); (forvar83 < (1'h1)); forvar83 = (forvar83 + (1'h1)))
            begin
              reg84 <= (|(reg55 ?
                  $signed(reg81[(4'hc):(4'ha)]) : ($unsigned((reg45 || (7'h40))) ?
                      $signed((~reg15)) : $unsigned({reg24, reg32}))));
            end
          for (forvar85 = (1'h0); (forvar85 < (3'h4)); forvar85 = (forvar85 + (1'h1)))
            begin
              reg86 <= $signed($signed(reg81[(4'he):(3'h5)]));
            end
        end
      for (forvar87 = (1'h0); (forvar87 < (2'h2)); forvar87 = (forvar87 + (1'h1)))
        begin
          reg88 = reg45[(5'h10):(1'h1)];
        end
      for (forvar89 = (1'h0); (forvar89 < (1'h1)); forvar89 = (forvar89 + (1'h1)))
        begin
          if (((reg76[(2'h2):(2'h2)] ?
              (8'ha5) : (reg62 ?
                  $signed(reg43) : ((~(8'hae)) ?
                      $unsigned((8'hb6)) : reg64[(2'h2):(1'h1)]))) ~^ $signed({{(wire74 ?
                      forvar83 : wire4)}})))
            begin
              reg90 <= reg48;
              reg91 <= $unsigned($unsigned(($unsigned($unsigned(reg76)) ?
                  $unsigned(wire5) : {reg44[(3'h4):(1'h0)]})));
              reg92 = {(reg90[(1'h1):(1'h1)] ?
                      $unsigned(((~|reg91) + reg49[(3'h6):(3'h4)])) : reg26[(3'h6):(3'h6)])};
              reg93 <= $unsigned((8'hbc));
              reg94 = ((~^reg12) ?
                  (~^{forvar83[(3'h5):(3'h5)]}) : (!($unsigned(reg62) | $unsigned($unsigned(reg91)))));
            end
          else
            begin
              reg90 <= (reg94 <<< reg88[(3'h4):(3'h4)]);
              reg91 <= reg37;
            end
          reg95 <= reg52[(3'h5):(2'h2)];
          for (forvar96 = (1'h0); (forvar96 < (1'h1)); forvar96 = (forvar96 + (1'h1)))
            begin
              reg97 <= reg93[(3'h4):(1'h1)];
              reg98 <= forvar96;
              reg99 <= $signed(reg77[(3'h7):(3'h4)]);
            end
          for (forvar100 = (1'h0); (forvar100 < (2'h2)); forvar100 = (forvar100 + (1'h1)))
            begin
              reg101 <= reg93[(4'ha):(4'ha)];
              reg102 <= {{$signed({$unsigned(reg23), $unsigned(reg91)}),
                      $signed(reg66)},
                  (-$unsigned({$signed(reg9), ((8'h9f) ? (8'hb5) : reg72)}))};
              reg103 = (((($unsigned(reg77) + reg66[(1'h0):(1'h0)]) ?
                  ($signed(reg52) || (~^reg76)) : (reg52 ^ {wire2,
                      (8'hbd)})) || ((reg57[(4'hb):(2'h2)] || (|reg88)) ^ ({wire75} ?
                  ((8'hac) ?
                      reg32 : forvar100) : {reg66}))) ^~ (((reg55 && {reg9,
                      reg43}) - ($unsigned(reg12) ?
                      reg97[(4'hb):(2'h3)] : $signed(reg91))) ?
                  wire73 : $signed($unsigned(wire0[(3'h4):(1'h1)]))));
            end
        end
    end
  assign wire104 = (((~(8'ha4)) != (((&reg90) ?
                           $unsigned(reg101) : (reg64 ? wire73 : reg91)) ?
                       (-$unsigned(reg13)) : reg45)) | reg66);
  assign wire105 = ((($signed((~&reg86)) ^ reg43[(2'h3):(2'h2)]) ?
                       (($signed(reg9) == reg86) ?
                           (wire1[(1'h0):(1'h0)] ?
                               reg99[(1'h1):(1'h0)] : (+reg55)) : reg49) : reg86) * (^~(reg68 ?
                       ({reg79, (8'hae)} != ((8'hbf) ?
                           reg49 : reg82)) : (reg95[(2'h2):(1'h1)] << $unsigned(reg44)))));
  assign wire106 = $signed(reg102);
  assign wire107 = reg48[(2'h3):(2'h2)];
  assign wire108 = $signed($signed(wire1[(2'h2):(2'h2)]));
  assign wire109 = ({$signed($unsigned((wire73 ^~ reg79)))} ?
                       {$unsigned(reg62[(3'h4):(2'h3)])} : ((wire105[(1'h1):(1'h0)] ^ (^(!reg93))) ?
                           reg98 : reg97));
  assign wire110 = ((!(-((wire106 <<< (8'hb2)) ?
                       reg26 : reg43[(4'hb):(3'h7)]))) <= $unsigned(($unsigned(((8'hae) ?
                       wire2 : wire109)) | (~reg97[(4'hc):(2'h2)]))));
  assign wire111 = ((($signed({wire1, reg90}) >> $unsigned(((8'ha2) ?
                       wire110 : (7'h42)))) >>> $signed(reg57)) + reg70);
  assign wire112 = (-{{$unsigned((~|wire73))}});
  assign wire113 = $unsigned((({wire107[(4'h9):(3'h6)],
                           (reg27 && wire110)} <<< (~&$signed(wire0))) ?
                       (~&$signed($signed(reg15))) : reg64[(1'h0):(1'h0)]));
  assign wire114 = (((|{(wire107 ? wire106 : reg82),
                       (~|wire4)}) == reg86[(1'h0):(1'h0)]) | ($signed($signed((reg97 <= reg93))) ?
                       (~^$unsigned($signed((8'ha0)))) : ((reg86 ?
                               (reg99 * (7'h42)) : (~wire74)) ?
                           {$signed(wire74),
                               (reg52 ^ reg62)} : reg47[(1'h0):(1'h0)])));
endmodule