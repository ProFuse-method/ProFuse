(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h31):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire3;
  input wire [(3'h5):(1'h0)] wire2;
  input wire signed [(3'h5):(1'h0)] wire1;
  input wire [(4'h8):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire47;
  wire signed [(4'h8):(1'h0)] wire44;
  wire signed [(4'hb):(1'h0)] wire6;
  wire [(4'hb):(1'h0)] wire5;
  wire [(2'h3):(1'h0)] wire4;
  reg [(4'ha):(1'h0)] reg46 = (1'h0);
  assign y = {wire47, wire44, wire6, wire5, wire4, reg46, (1'h0)};
  assign wire4 = wire3;
  assign wire5 = (&(8'ha2));
  assign wire6 = (($signed((wire3 != (8'ha6))) ?
                         $signed(wire3[(1'h1):(1'h0)]) : wire0[(3'h6):(3'h4)]) ?
                     {$signed((-wire3))} : wire4);
  module7 #() modinst45 (.wire8(wire3), .wire10(wire6), .clk(clk), .wire9(wire1), .wire11(wire0), .y(wire44));
  always
    @(posedge clk) begin
      reg46 <= ((((8'ha9) ? (wire4 & wire5) : {(8'hac)}) ?
              wire1 : (&((8'hab) + wire44))) ?
          (8'haa) : $unsigned(wire2));
    end
  assign wire47 = (8'hac);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7
#(parameter param43 = (((((8'ha2) ? (8'ha2) : (8'ha5)) ? ((8'ha6) ? (8'haf) : (8'ha1)) : ((8'haf) ? (8'ha3) : (8'ha1))) <= {((8'ha3) ? (8'ha7) : (8'ha4))}) ? ({(-(8'ha1))} ? {((8'ha6) ? (8'h9d) : (8'ha6))} : (((8'hae) ^~ (8'hb0)) ? ((8'ha7) ? (8'ha4) : (8'ha8)) : ((8'ha8) ? (8'h9c) : (8'h9f)))) : ({((8'h9f) ? (8'hab) : (8'ha7))} * {(8'ha0)})))
(y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h92):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire11;
  input wire signed [(4'hb):(1'h0)] wire10;
  input wire signed [(3'h4):(1'h0)] wire9;
  input wire [(4'hb):(1'h0)] wire8;
  wire [(3'h5):(1'h0)] wire42;
  wire signed [(3'h6):(1'h0)] wire41;
  wire signed [(3'h6):(1'h0)] wire40;
  wire [(4'ha):(1'h0)] wire33;
  wire signed [(2'h2):(1'h0)] wire31;
  wire signed [(4'h8):(1'h0)] wire19;
  wire signed [(3'h7):(1'h0)] wire14;
  reg signed [(3'h7):(1'h0)] reg39 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg38 = (1'h0);
  reg [(4'hb):(1'h0)] reg37 = (1'h0);
  reg [(3'h7):(1'h0)] reg36 = (1'h0);
  reg [(4'h9):(1'h0)] reg35 = (1'h0);
  reg [(4'hb):(1'h0)] reg34 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg18 = (1'h0);
  reg [(2'h2):(1'h0)] reg17 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg16 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg15 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg13 = (1'h0);
  reg [(4'h8):(1'h0)] reg12 = (1'h0);
  assign y = {wire42,
                 wire41,
                 wire40,
                 wire33,
                 wire31,
                 wire19,
                 wire14,
                 reg39,
                 reg38,
                 reg37,
                 reg36,
                 reg35,
                 reg34,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg13,
                 reg12,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg12 <= $signed($unsigned((wire10[(4'hb):(3'h4)] ?
          $unsigned((8'h9f)) : (^~wire8))));
      reg13 <= {reg12[(2'h3):(2'h3)]};
    end
  assign wire14 = $signed(($unsigned(wire9[(1'h1):(1'h0)]) && ($unsigned(wire10) + wire9[(1'h0):(1'h0)])));
  always
    @(posedge clk) begin
      if (wire10)
        begin
          reg15 <= wire11;
          reg16 <= $unsigned(wire9);
          reg17 <= ($unsigned($signed((reg13 ?
              reg13 : wire11))) || $signed((~|(-reg13))));
        end
      else
        begin
          reg15 <= $signed(($signed(reg12[(2'h3):(2'h2)]) ?
              (((8'haa) >= (8'ha2)) - (wire11 ?
                  reg16 : wire14)) : (-$signed((8'ha4)))));
          reg16 <= wire11[(1'h1):(1'h0)];
        end
      reg18 <= reg13[(2'h2):(2'h2)];
    end
  assign wire19 = reg13;
  module20 #() modinst32 (wire31, clk, reg16, wire14, wire9, reg12);
  assign wire33 = ((wire14 ?
                      (8'haf) : wire11) * ((reg13[(2'h3):(2'h2)] <= $unsigned(wire14)) < {$unsigned(wire9)}));
  always
    @(posedge clk) begin
      if (reg15)
        begin
          reg34 <= ($signed((^~reg12[(1'h0):(1'h0)])) ?
              $unsigned($unsigned({reg15})) : $signed((^wire31)));
          reg35 <= (!(~^(+$signed(reg12))));
          reg36 <= (reg12 == (~^wire33[(4'ha):(3'h6)]));
        end
      else
        begin
          if ({reg18[(2'h3):(2'h3)]})
            begin
              reg34 <= $signed(((!reg15[(3'h4):(1'h1)]) ~^ $unsigned($signed(reg16))));
            end
          else
            begin
              reg34 <= ($signed(reg16[(4'h9):(3'h5)]) ^~ (-(^~(reg35 ?
                  wire14 : wire14))));
            end
          reg35 <= (~^$unsigned(reg36[(2'h3):(1'h1)]));
          reg36 <= (8'ha4);
        end
      if ({reg15[(4'h9):(2'h2)]})
        begin
          if ((~^reg17))
            begin
              reg37 <= (~&$signed(((reg18 ~^ reg17) ~^ reg34[(4'hb):(4'h8)])));
              reg38 <= ($signed((~|wire33[(3'h7):(3'h5)])) ?
                  $unsigned(($unsigned(reg34) ?
                      (wire9 ?
                          reg17 : reg35) : reg37)) : wire11[(3'h4):(2'h2)]);
            end
          else
            begin
              reg37 <= (8'haa);
            end
          reg39 <= $signed(wire33);
        end
      else
        begin
          reg37 <= wire8[(4'h9):(2'h3)];
        end
    end
  assign wire40 = reg17[(1'h0):(1'h0)];
  assign wire41 = (~&((-reg34) ?
                      ((reg37 ? wire33 : reg34) ?
                          (wire19 <<< wire19) : $signed(reg34)) : reg34[(4'hb):(1'h1)]));
  assign wire42 = wire40[(2'h2):(1'h1)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module20
#(parameter param30 = ((((8'hb0) != ((8'h9f) ? (8'ha2) : (8'haa))) < (((8'ha5) ? (8'h9d) : (8'h9c)) ? (|(8'ha2)) : {(8'hae)})) ? ((((8'haa) >>> (8'ha0)) ? ((8'ha5) * (8'had)) : ((8'haa) && (8'ha8))) ? (^~((8'hac) << (8'ha7))) : ({(8'h9f)} >= ((8'ha9) ? (8'h9d) : (8'h9e)))) : (+(+((8'hb0) <= (8'ha2))))))
(y, clk, wire24, wire23, wire22, wire21);
  output wire [(32'h21):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire24;
  input wire [(3'h6):(1'h0)] wire23;
  input wire [(3'h4):(1'h0)] wire22;
  input wire [(4'h8):(1'h0)] wire21;
  wire [(2'h3):(1'h0)] wire27;
  wire [(3'h4):(1'h0)] wire26;
  wire signed [(2'h3):(1'h0)] wire25;
  reg signed [(4'hb):(1'h0)] reg29 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg28 = (1'h0);
  assign y = {wire27, wire26, wire25, reg29, reg28, (1'h0)};
  assign wire25 = (-{($signed(wire24) ?
                          $signed(wire22) : (wire21 >>> wire24))});
  assign wire26 = wire21[(3'h6):(1'h0)];
  assign wire27 = $unsigned(wire21);
  always
    @(posedge clk) begin
      reg28 <= (~&(^($signed(wire25) ? (8'ha1) : (wire25 ? wire22 : wire22))));
      reg29 <= (wire24 ?
          $unsigned((|wire22[(2'h3):(1'h1)])) : (~|((^(8'h9e)) | wire26)));
    end
endmodule