(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param329 = ((~((^~((8'ha3) < (7'h43))) ? ((!(8'hb0)) * ((8'haa) <= (8'ha4))) : ((~^(8'hb1)) ? ((8'h9c) + (7'h43)) : ((8'hbf) > (8'ha6))))) ? (((((8'hb2) > (8'hbb)) ? ((8'ha4) ? (8'haf) : (8'h9f)) : {(8'hbd)}) ? ((|(8'hbe)) - ((8'hb4) ? (8'ha1) : (8'hbb))) : ((~|(8'hb8)) ^~ ((8'hbb) == (8'ha0)))) ? {(((8'ha6) ? (8'ha6) : (8'hb6)) ? {(8'ha2), (8'h9c)} : (~(8'ha3))), (~|((8'hb3) << (8'haa)))} : {((^~(8'ha1)) >= ((8'haa) || (8'hb5)))}) : (!(({(8'haa), (8'h9f)} <= ((8'ha2) ? (8'hbb) : (8'ha0))) ? ({(8'hb9), (8'ha7)} ~^ ((8'hb1) ? (8'ha6) : (8'hac))) : (((8'hb5) ? (8'ha5) : (8'hb0)) ^~ (8'ha7))))), 
parameter param330 = param329)
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h22c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h11):(1'h0)] wire0;
  input wire [(5'h11):(1'h0)] wire1;
  input wire [(5'h13):(1'h0)] wire2;
  input wire signed [(5'h13):(1'h0)] wire3;
  wire signed [(4'h8):(1'h0)] wire327;
  wire signed [(5'h14):(1'h0)] wire288;
  wire [(5'h13):(1'h0)] wire287;
  wire signed [(3'h5):(1'h0)] wire286;
  wire signed [(5'h10):(1'h0)] wire285;
  wire [(4'hd):(1'h0)] wire284;
  wire [(5'h14):(1'h0)] wire4;
  wire [(3'h5):(1'h0)] wire282;
  reg signed [(5'h10):(1'h0)] reg291 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg295 = (1'h0);
  reg [(5'h14):(1'h0)] reg299 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg304 = (1'h0);
  reg [(4'hc):(1'h0)] reg305 = (1'h0);
  reg [(4'he):(1'h0)] reg306 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg309 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg312 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg315 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg320 = (1'h0);
  reg [(4'hd):(1'h0)] reg326 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg325 = (1'h0);
  reg [(3'h7):(1'h0)] forvar324 = (1'h0);
  reg [(4'h9):(1'h0)] reg323 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg322 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg321 = (1'h0);
  reg [(3'h6):(1'h0)] forvar319 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg318 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar317 = (1'h0);
  reg [(4'ha):(1'h0)] forvar316 = (1'h0);
  reg [(4'h9):(1'h0)] reg314 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar313 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg311 = (1'h0);
  reg [(5'h14):(1'h0)] reg310 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar308 = (1'h0);
  reg [(4'hd):(1'h0)] reg307 = (1'h0);
  reg [(2'h3):(1'h0)] reg303 = (1'h0);
  reg [(2'h2):(1'h0)] forvar302 = (1'h0);
  reg [(5'h15):(1'h0)] forvar301 = (1'h0);
  reg [(4'he):(1'h0)] reg300 = (1'h0);
  reg [(2'h3):(1'h0)] forvar298 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg297 = (1'h0);
  reg [(4'hd):(1'h0)] reg296 = (1'h0);
  reg [(5'h15):(1'h0)] forvar294 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar293 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg292 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar290 = (1'h0);
  reg [(2'h3):(1'h0)] forvar289 = (1'h0);
  assign y = {wire327,
                 wire288,
                 wire287,
                 wire286,
                 wire285,
                 wire284,
                 wire4,
                 wire282,
                 reg291,
                 reg295,
                 reg299,
                 reg304,
                 reg305,
                 reg306,
                 reg309,
                 reg312,
                 reg315,
                 reg320,
                 reg326,
                 reg325,
                 forvar324,
                 reg323,
                 reg322,
                 reg321,
                 forvar319,
                 reg318,
                 forvar317,
                 forvar316,
                 reg314,
                 forvar313,
                 reg311,
                 reg310,
                 forvar308,
                 reg307,
                 reg303,
                 forvar302,
                 forvar301,
                 reg300,
                 forvar298,
                 reg297,
                 reg296,
                 forvar294,
                 forvar293,
                 reg292,
                 forvar290,
                 forvar289,
                 (1'h0)};
  assign wire4 = (~&($signed($unsigned($signed(wire1))) >= (~^((~&wire0) ^ $unsigned(wire2)))));
  module5 #() modinst283 (wire282, clk, wire3, wire2, wire1, wire0, wire4);
  assign wire284 = (&(^~$signed($unsigned((wire282 ? wire2 : wire4)))));
  assign wire285 = wire2[(4'hb):(3'h5)];
  assign wire286 = ({($unsigned($signed(wire1)) ?
                               wire0 : (((7'h44) ? wire282 : wire284) ?
                                   $signed(wire2) : $unsigned(wire4)))} ?
                       wire2 : (~&wire1));
  assign wire287 = (+(~^$unsigned(wire286[(2'h3):(2'h2)])));
  assign wire288 = wire284;
  always
    @(posedge clk) begin
      for (forvar289 = (1'h0); (forvar289 < (1'h0)); forvar289 = (forvar289 + (1'h1)))
        begin
          for (forvar290 = (1'h0); (forvar290 < (1'h0)); forvar290 = (forvar290 + (1'h1)))
            begin
              reg291 <= ((~^wire287[(4'hf):(3'h6)]) ?
                  wire287 : wire3[(4'hd):(1'h0)]);
              reg292 = ((8'h9c) ?
                  {{$signed({wire285}),
                          $signed({wire3})}} : {(-wire287[(4'ha):(3'h4)])});
            end
        end
      for (forvar293 = (1'h0); (forvar293 < (1'h0)); forvar293 = (forvar293 + (1'h1)))
        begin
          for (forvar294 = (1'h0); (forvar294 < (2'h3)); forvar294 = (forvar294 + (1'h1)))
            begin
              reg295 <= ($signed(forvar289) + forvar293[(3'h4):(1'h0)]);
            end
          reg296 = $signed({forvar289});
          reg297 = forvar294;
          for (forvar298 = (1'h0); (forvar298 < (1'h1)); forvar298 = (forvar298 + (1'h1)))
            begin
              reg299 <= (7'h44);
              reg300 = (forvar290[(5'h14):(1'h1)] ?
                  (wire3[(4'hf):(3'h7)] ?
                      {(^$signed(reg297)),
                          reg295} : forvar293) : $unsigned(wire0[(3'h6):(1'h1)]));
            end
        end
      for (forvar301 = (1'h0); (forvar301 < (2'h2)); forvar301 = (forvar301 + (1'h1)))
        begin
          for (forvar302 = (1'h0); (forvar302 < (3'h4)); forvar302 = (forvar302 + (1'h1)))
            begin
              reg303 = wire2[(4'h9):(2'h3)];
              reg304 <= (({$signed((reg295 > forvar294)),
                          ((-(8'hbf)) ?
                              (wire286 ? reg299 : forvar294) : (reg297 ?
                                  reg292 : forvar289))} ?
                      $unsigned(wire282[(3'h4):(1'h0)]) : {reg295}) ?
                  $unsigned((~$unsigned((reg292 | wire285)))) : ((wire287[(4'h8):(3'h7)] >>> $unsigned(forvar290[(4'he):(4'hc)])) ?
                      {(&(reg300 ? reg300 : reg303)),
                          (~|{wire4,
                              forvar301})} : ((!$signed(reg296)) > forvar294[(4'ha):(2'h3)])));
              reg305 <= forvar289;
              reg306 <= (({$unsigned((~|reg291))} ?
                      ($unsigned($unsigned(reg295)) >> ($unsigned((8'hb7)) <<< wire3)) : forvar294) ?
                  ((8'hbc) ?
                      ({(reg303 ? forvar294 : reg295)} ?
                          ((wire4 || wire0) >> wire287) : ((reg299 ?
                                  (8'hba) : reg297) ?
                              wire285[(2'h2):(1'h0)] : $signed(reg303))) : ($unsigned({(8'haf)}) >>> wire284)) : (~|((reg299 >> wire1) + reg295)));
              reg307 = $signed($unsigned({(reg299 - (reg295 ?
                      wire285 : wire288)),
                  (~|(+reg299))}));
            end
          for (forvar308 = (1'h0); (forvar308 < (1'h1)); forvar308 = (forvar308 + (1'h1)))
            begin
              reg309 <= wire1;
              reg310 = ((~^$signed($unsigned($unsigned(forvar293)))) ?
                  reg307 : {((~(-forvar293)) ~^ reg306)});
              reg311 = $unsigned(reg304);
              reg312 <= (wire1 ?
                  $signed($signed(reg305[(4'ha):(2'h2)])) : $unsigned(((reg291 ?
                      (~|reg295) : {wire0}) * ({(8'h9f)} <= $signed(reg309)))));
            end
          for (forvar313 = (1'h0); (forvar313 < (2'h2)); forvar313 = (forvar313 + (1'h1)))
            begin
              reg314 = (wire0[(4'hb):(1'h1)] ? reg296 : forvar302);
              reg315 <= $signed(($unsigned((8'h9c)) ?
                  {wire4[(5'h11):(5'h11)],
                      $signed((~(8'hbb)))} : ((~^(&reg291)) ?
                      $unsigned($unsigned(reg304)) : (^~(~&wire288)))));
            end
        end
      for (forvar316 = (1'h0); (forvar316 < (1'h0)); forvar316 = (forvar316 + (1'h1)))
        begin
          for (forvar317 = (1'h0); (forvar317 < (2'h2)); forvar317 = (forvar317 + (1'h1)))
            begin
              reg318 = reg312;
            end
          for (forvar319 = (1'h0); (forvar319 < (1'h0)); forvar319 = (forvar319 + (1'h1)))
            begin
              reg320 <= $signed(((~&forvar317) ~^ reg295));
              reg321 = {((reg311[(1'h1):(1'h0)] ?
                          (|{forvar289,
                              reg318}) : $unsigned(forvar319[(3'h6):(3'h4)])) ?
                      reg310[(4'hf):(3'h7)] : $unsigned($signed({reg311,
                          forvar294}))),
                  reg311};
              reg322 = wire284;
              reg323 = (((wire285[(3'h6):(3'h6)] ^ $unsigned((-reg321))) ^ (reg320[(3'h5):(2'h3)] != forvar317[(3'h5):(2'h2)])) <= (^(($unsigned(reg307) ?
                  (8'hb9) : (^wire284)) <= reg305)));
            end
          for (forvar324 = (1'h0); (forvar324 < (1'h0)); forvar324 = (forvar324 + (1'h1)))
            begin
              reg325 = {reg306, reg311[(2'h2):(2'h2)]};
              reg326 = (({reg300} ?
                  (~{$signed(reg300)}) : wire282[(2'h2):(2'h2)]) < (~^forvar319));
            end
        end
    end
  module5 #() modinst328 (wire327, clk, wire2, wire1, wire285, reg291, wire288);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module5  (y, clk, wire10, wire9, wire8, wire7, wire6);
  output wire [(32'h2da):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h13):(1'h0)] wire10;
  input wire signed [(5'h11):(1'h0)] wire9;
  input wire [(5'h10):(1'h0)] wire8;
  input wire [(5'h10):(1'h0)] wire7;
  input wire [(5'h14):(1'h0)] wire6;
  wire signed [(4'hd):(1'h0)] wire281;
  wire [(4'hf):(1'h0)] wire279;
  wire [(2'h2):(1'h0)] wire245;
  wire signed [(3'h4):(1'h0)] wire244;
  wire [(4'hd):(1'h0)] wire243;
  wire signed [(3'h7):(1'h0)] wire242;
  wire signed [(4'hd):(1'h0)] wire240;
  wire [(3'h6):(1'h0)] wire215;
  wire [(5'h10):(1'h0)] wire214;
  wire signed [(4'h8):(1'h0)] wire209;
  wire [(5'h14):(1'h0)] wire177;
  wire signed [(3'h4):(1'h0)] wire110;
  wire signed [(4'h9):(1'h0)] wire11;
  wire signed [(2'h3):(1'h0)] wire152;
  wire [(5'h11):(1'h0)] wire153;
  wire signed [(5'h14):(1'h0)] wire175;
  reg signed [(4'hd):(1'h0)] reg151 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg149 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg146 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg145 = (1'h0);
  reg [(5'h10):(1'h0)] reg143 = (1'h0);
  reg [(5'h13):(1'h0)] reg142 = (1'h0);
  reg [(4'h8):(1'h0)] reg140 = (1'h0);
  reg [(5'h15):(1'h0)] reg139 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg138 = (1'h0);
  reg [(4'he):(1'h0)] reg134 = (1'h0);
  reg [(5'h12):(1'h0)] reg132 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg131 = (1'h0);
  reg [(5'h15):(1'h0)] reg130 = (1'h0);
  reg [(4'hf):(1'h0)] reg129 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg126 = (1'h0);
  reg [(3'h7):(1'h0)] reg124 = (1'h0);
  reg [(3'h4):(1'h0)] reg122 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg121 = (1'h0);
  reg [(4'hf):(1'h0)] reg117 = (1'h0);
  reg [(5'h11):(1'h0)] reg115 = (1'h0);
  reg [(4'he):(1'h0)] reg211 = (1'h0);
  reg [(4'h9):(1'h0)] reg212 = (1'h0);
  reg [(5'h12):(1'h0)] reg213 = (1'h0);
  reg [(4'hc):(1'h0)] reg150 = (1'h0);
  reg [(5'h13):(1'h0)] forvar148 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg147 = (1'h0);
  reg [(5'h15):(1'h0)] forvar144 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg141 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar137 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar136 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg135 = (1'h0);
  reg [(4'hf):(1'h0)] reg133 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar128 = (1'h0);
  reg [(5'h12):(1'h0)] forvar127 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg125 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar123 = (1'h0);
  reg [(5'h13):(1'h0)] forvar120 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg119 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg118 = (1'h0);
  reg [(5'h12):(1'h0)] reg116 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar114 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar113 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg112 = (1'h0);
  assign y = {wire281,
                 wire279,
                 wire245,
                 wire244,
                 wire243,
                 wire242,
                 wire240,
                 wire215,
                 wire214,
                 wire209,
                 wire177,
                 wire110,
                 wire11,
                 wire152,
                 wire153,
                 wire175,
                 reg151,
                 reg149,
                 reg146,
                 reg145,
                 reg143,
                 reg142,
                 reg140,
                 reg139,
                 reg138,
                 reg134,
                 reg132,
                 reg131,
                 reg130,
                 reg129,
                 reg126,
                 reg124,
                 reg122,
                 reg121,
                 reg117,
                 reg115,
                 reg211,
                 reg212,
                 reg213,
                 reg150,
                 forvar148,
                 reg147,
                 forvar144,
                 reg141,
                 forvar137,
                 forvar136,
                 reg135,
                 reg133,
                 forvar128,
                 forvar127,
                 reg125,
                 forvar123,
                 forvar120,
                 reg119,
                 reg118,
                 reg116,
                 forvar114,
                 forvar113,
                 reg112,
                 (1'h0)};
  assign wire11 = $signed(((wire8[(4'h8):(2'h3)] ~^ wire6) << (^~((^~wire10) ~^ $signed((8'had))))));
  module12 #() modinst111 (wire110, clk, wire6, wire11, wire7, wire8, wire10);
  always
    @(posedge clk) begin
      reg112 = $signed(((wire9 != (8'ha9)) ?
          $unsigned({$signed((8'hab)), wire9}) : wire110[(2'h3):(1'h0)]));
      for (forvar113 = (1'h0); (forvar113 < (2'h3)); forvar113 = (forvar113 + (1'h1)))
        begin
          for (forvar114 = (1'h0); (forvar114 < (1'h0)); forvar114 = (forvar114 + (1'h1)))
            begin
              reg115 <= wire10[(2'h3):(2'h3)];
              reg116 = ((!{wire9,
                      ((reg112 ? wire7 : wire6) ?
                          $unsigned(forvar113) : (forvar114 << wire6))}) ?
                  $signed(wire110) : forvar113[(4'hb):(4'ha)]);
              reg117 <= ($unsigned(wire6[(5'h13):(2'h2)]) ^~ wire6);
              reg118 = (forvar114 ~^ $unsigned($signed(($signed(forvar113) ?
                  (^(8'ha7)) : (reg115 ? (8'hb1) : reg115)))));
              reg119 = wire6[(3'h4):(2'h2)];
            end
          for (forvar120 = (1'h0); (forvar120 < (2'h2)); forvar120 = (forvar120 + (1'h1)))
            begin
              reg121 <= (^{(wire8 <= (&wire11[(3'h4):(1'h0)]))});
              reg122 <= $signed(wire9[(3'h5):(2'h3)]);
            end
          for (forvar123 = (1'h0); (forvar123 < (2'h2)); forvar123 = (forvar123 + (1'h1)))
            begin
              reg124 <= ((reg119 ?
                      $signed(wire9) : {((!wire7) ?
                              {reg122, (7'h41)} : $signed(wire10))}) ?
                  ({((reg121 * reg118) ?
                          reg117[(4'h9):(2'h2)] : {reg122})} != $unsigned({wire11[(4'h8):(3'h4)],
                      wire9[(1'h0):(1'h0)]})) : ((&reg112[(1'h1):(1'h0)]) ?
                      $unsigned($signed((reg122 ?
                          forvar120 : reg118))) : {(reg118 ~^ (7'h40)),
                          (wire10 <<< wire9)}));
              reg125 = $signed(wire8[(2'h3):(2'h3)]);
              reg126 <= {$signed(((|{(7'h42),
                      wire10}) != $signed((reg122 == reg118))))};
            end
        end
      for (forvar127 = (1'h0); (forvar127 < (1'h0)); forvar127 = (forvar127 + (1'h1)))
        begin
          for (forvar128 = (1'h0); (forvar128 < (2'h2)); forvar128 = (forvar128 + (1'h1)))
            begin
              reg129 <= forvar113;
              reg130 <= $unsigned((($signed(forvar113) ?
                  $signed((!reg122)) : (wire8[(4'ha):(3'h4)] ?
                      (reg118 ?
                          reg118 : forvar114) : (forvar123 == wire110))) && {(^forvar113[(1'h0):(1'h0)]),
                  (8'ha5)}));
              reg131 <= (wire7 ?
                  (((7'h43) ^~ $unsigned(wire7[(4'hd):(3'h6)])) > (~&(!{wire9}))) : reg118);
            end
          reg132 <= ((&(wire10 ? (-(~^forvar128)) : wire6)) ?
              (^~(reg112[(4'h8):(3'h4)] << $signed(wire10[(5'h11):(4'hb)]))) : reg121[(1'h0):(1'h0)]);
          reg133 = $unsigned(reg116);
          reg134 <= (wire7 && $signed(((wire6 ?
              (forvar120 ? reg112 : reg133) : ((8'hbe) ?
                  reg126 : forvar113)) > ($unsigned(forvar128) ?
              (forvar123 ? (8'hac) : (8'ha1)) : $unsigned(reg118)))));
        end
      reg135 = ({forvar123[(2'h2):(2'h2)],
          $signed(((reg124 >> forvar128) ?
              (8'hab) : (^~forvar113)))} ^ $signed(((^$signed((8'had))) ?
          $unsigned({(8'hb0)}) : {reg118})));
    end
  always
    @(posedge clk) begin
      for (forvar136 = (1'h0); (forvar136 < (1'h0)); forvar136 = (forvar136 + (1'h1)))
        begin
          for (forvar137 = (1'h0); (forvar137 < (2'h3)); forvar137 = (forvar137 + (1'h1)))
            begin
              reg138 <= ({(reg115[(4'hb):(3'h6)] ?
                          (((8'ha0) ? reg117 : reg115) ?
                              reg131 : reg129[(3'h6):(3'h5)]) : reg132[(5'h12):(4'h9)]),
                      $unsigned((+wire10[(4'he):(3'h4)]))} ?
                  $unsigned((&($unsigned(reg126) >>> $unsigned(reg132)))) : $unsigned((~|(~|(reg115 < wire11)))));
              reg139 <= ((^~wire10[(4'hc):(3'h6)]) ?
                  wire8[(4'ha):(3'h7)] : reg117[(2'h3):(1'h1)]);
              reg140 <= $signed((+$unsigned(reg126)));
              reg141 = $signed($unsigned((((forvar137 ~^ reg134) ?
                  $signed(reg117) : (wire9 ? reg121 : reg132)) - (~wire7))));
              reg142 <= (~^(reg115 ?
                  {$unsigned($signed(reg141)),
                      (reg121[(2'h3):(2'h3)] > (reg121 << reg138))} : {$signed((~|reg138)),
                      $unsigned(reg131)}));
            end
          reg143 <= $unsigned((wire11[(2'h2):(2'h2)] ?
              ((!(reg142 ? reg141 : (8'had))) ^~ (^~{(8'hbb),
                  forvar136})) : (|reg129)));
          for (forvar144 = (1'h0); (forvar144 < (3'h4)); forvar144 = (forvar144 + (1'h1)))
            begin
              reg145 <= $unsigned($unsigned(((7'h40) ?
                  reg121[(2'h3):(2'h3)] : (+(+reg131)))));
              reg146 <= (^wire7[(4'hf):(3'h4)]);
              reg147 = {{$signed(($unsigned(reg126) < $unsigned((8'hbc))))}};
            end
          for (forvar148 = (1'h0); (forvar148 < (2'h3)); forvar148 = (forvar148 + (1'h1)))
            begin
              reg149 <= reg140[(3'h6):(2'h3)];
              reg150 = $unsigned($signed($signed($signed((reg146 ?
                  reg139 : reg129)))));
            end
        end
      reg151 <= (((|((reg115 << wire11) ?
          (reg140 > reg145) : (forvar137 ^~ reg130))) <= ($unsigned((8'had)) >>> (((8'hb5) >> wire7) ?
          (reg140 ? reg146 : wire6) : reg139))) << ({(8'ha0)} ?
          {$unsigned({reg115, (8'ha5)}),
              reg147[(2'h2):(2'h2)]} : reg126[(1'h0):(1'h0)]));
    end
  assign wire152 = (reg145[(4'hb):(2'h3)] <<< wire11[(4'h8):(4'h8)]);
  assign wire153 = reg142[(5'h12):(4'he)];
  module154 #() modinst176 (.clk(clk), .y(wire175), .wire158(reg134), .wire157(reg131), .wire156(wire9), .wire155(reg121));
  assign wire177 = (-($unsigned(reg140[(4'h8):(4'h8)]) ?
                       (^(~&reg134)) : wire110));
  module178 #() modinst210 (wire209, clk, reg131, reg139, wire9, wire153);
  always
    @(posedge clk) begin
      reg211 <= {reg117[(3'h5):(3'h4)],
          {$signed(((reg143 & reg122) ?
                  (reg134 ? reg124 : reg129) : (reg126 ? (8'ha0) : wire209))),
              (^~$signed((reg132 == (8'hab))))}};
      reg212 <= $signed(({($signed(reg134) ?
              (wire110 ? reg146 : wire10) : {reg121}),
          (8'ha5)} < reg146[(1'h0):(1'h0)]));
      reg213 <= $signed({$unsigned((~&$unsigned(wire153)))});
    end
  assign wire214 = (-$unsigned($signed($unsigned((|(7'h44))))));
  assign wire215 = wire175;
  module216 #() modinst241 (wire240, clk, wire153, reg131, wire175, wire214, wire6);
  assign wire242 = {wire153[(1'h1):(1'h0)]};
  assign wire243 = $unsigned(($unsigned((^~reg129)) ?
                       $signed(($signed(reg130) ?
                           {reg126,
                               reg142} : (^~reg117))) : {($unsigned(wire242) <<< $unsigned(wire7)),
                           wire9}));
  assign wire244 = reg131;
  assign wire245 = ($signed((wire209 || reg212)) ? wire215 : wire8);
  module246 #() modinst280 (.y(wire279), .wire250(reg211), .clk(clk), .wire247(wire175), .wire248(reg139), .wire249(wire243));
  assign wire281 = reg131;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module246  (y, clk, wire250, wire249, wire248, wire247);
  output wire [(32'h14d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire250;
  input wire [(4'hd):(1'h0)] wire249;
  input wire [(4'h9):(1'h0)] wire248;
  input wire [(5'h11):(1'h0)] wire247;
  wire signed [(5'h13):(1'h0)] wire278;
  wire [(4'hd):(1'h0)] wire277;
  wire signed [(4'h9):(1'h0)] wire252;
  wire signed [(5'h10):(1'h0)] wire251;
  reg signed [(4'hd):(1'h0)] reg276 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg274 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg272 = (1'h0);
  reg [(5'h12):(1'h0)] reg270 = (1'h0);
  reg signed [(4'he):(1'h0)] reg269 = (1'h0);
  reg [(4'hf):(1'h0)] reg267 = (1'h0);
  reg [(5'h10):(1'h0)] reg265 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg262 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg261 = (1'h0);
  reg [(4'ha):(1'h0)] reg260 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg258 = (1'h0);
  reg [(4'hc):(1'h0)] reg257 = (1'h0);
  reg [(4'ha):(1'h0)] reg255 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar275 = (1'h0);
  reg [(4'h9):(1'h0)] reg273 = (1'h0);
  reg [(5'h11):(1'h0)] forvar271 = (1'h0);
  reg [(3'h4):(1'h0)] forvar268 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg266 = (1'h0);
  reg [(5'h13):(1'h0)] reg264 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg263 = (1'h0);
  reg [(4'hf):(1'h0)] forvar259 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar256 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg254 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar253 = (1'h0);
  assign y = {wire278,
                 wire277,
                 wire252,
                 wire251,
                 reg276,
                 reg274,
                 reg272,
                 reg270,
                 reg269,
                 reg267,
                 reg265,
                 reg262,
                 reg261,
                 reg260,
                 reg258,
                 reg257,
                 reg255,
                 forvar275,
                 reg273,
                 forvar271,
                 forvar268,
                 reg266,
                 reg264,
                 reg263,
                 forvar259,
                 forvar256,
                 reg254,
                 forvar253,
                 (1'h0)};
  assign wire251 = wire248[(3'h4):(2'h3)];
  assign wire252 = wire248;
  always
    @(posedge clk) begin
      for (forvar253 = (1'h0); (forvar253 < (2'h2)); forvar253 = (forvar253 + (1'h1)))
        begin
          reg254 = $unsigned(wire250);
          reg255 <= (!(~^$unsigned($signed($signed(wire248)))));
          for (forvar256 = (1'h0); (forvar256 < (3'h4)); forvar256 = (forvar256 + (1'h1)))
            begin
              reg257 <= $unsigned($signed($unsigned(wire250[(1'h0):(1'h0)])));
            end
        end
      reg258 <= $signed($signed($signed({(wire247 ? reg257 : (7'h44)),
          {reg255, reg254}})));
      for (forvar259 = (1'h0); (forvar259 < (1'h0)); forvar259 = (forvar259 + (1'h1)))
        begin
          if (((&$signed($unsigned($unsigned(reg254)))) <<< forvar253[(1'h1):(1'h0)]))
            begin
              reg260 <= forvar259;
              reg261 <= (^reg255[(4'ha):(3'h7)]);
              reg262 <= wire252;
            end
          else
            begin
              reg263 = ((|wire251) ?
                  ((~|wire252) ?
                      (&((&wire251) != wire249)) : wire250) : (($unsigned((forvar253 ?
                      wire247 : wire250)) <= (reg258 ?
                      wire249[(4'hc):(3'h4)] : $unsigned(wire252))) == ($signed(reg262) ?
                      (wire248 - {reg255,
                          (8'h9d)}) : $unsigned(forvar256[(3'h4):(3'h4)]))));
              reg264 = ((+(8'h9e)) || $signed(reg258[(4'ha):(1'h0)]));
              reg265 <= reg257;
              reg266 = $unsigned($unsigned($unsigned(reg258[(1'h0):(1'h0)])));
              reg267 <= wire250;
            end
          for (forvar268 = (1'h0); (forvar268 < (1'h0)); forvar268 = (forvar268 + (1'h1)))
            begin
              reg269 <= reg255;
              reg270 <= {(($signed((reg260 ~^ (8'hac))) ^ forvar253[(3'h5):(1'h0)]) <= (~$signed((!reg258))))};
            end
          for (forvar271 = (1'h0); (forvar271 < (1'h0)); forvar271 = (forvar271 + (1'h1)))
            begin
              reg272 <= (~{(wire248 ?
                      (forvar259 >= (reg255 ?
                          reg263 : forvar253)) : $unsigned(reg266)),
                  $unsigned(($unsigned(reg260) ? (~^forvar271) : (+wire251)))});
              reg273 = ((~&$unsigned({reg272})) ?
                  reg265[(4'hb):(3'h6)] : ((reg264 & (forvar268 || $signed(reg254))) | wire249));
              reg274 <= (reg266[(2'h2):(1'h1)] ?
                  (($signed($unsigned(forvar253)) || {(^~wire249)}) ?
                      (+(!(reg267 & (8'h9d)))) : reg255) : $signed((~((reg269 ?
                          wire247 : wire252) ?
                      (forvar268 ? (7'h41) : reg267) : wire248))));
            end
          for (forvar275 = (1'h0); (forvar275 < (2'h2)); forvar275 = (forvar275 + (1'h1)))
            begin
              reg276 <= ({$signed($signed($unsigned(reg262))),
                      ($signed((forvar275 ? wire249 : forvar271)) ?
                          reg254 : ((reg260 ?
                              forvar275 : forvar271) * $unsigned(reg257)))} ?
                  reg270 : $unsigned(forvar253));
            end
        end
    end
  assign wire277 = $unsigned($unsigned($unsigned(($signed((8'ha2)) ~^ (|wire248)))));
  assign wire278 = (^$unsigned({wire277[(4'h9):(3'h6)]}));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module216
#(parameter param239 = ((^{{((8'hbe) ? (8'hb1) : (8'h9c))}}) <= (((((8'hbf) | (8'hb7)) != (+(8'hb6))) ? ((8'h9e) ? ((8'hac) ? (8'ha3) : (8'h9c)) : ((7'h43) << (8'haa))) : (((8'ha3) ? (8'ha3) : (8'h9e)) ? ((7'h40) & (8'haf)) : ((8'haf) ? (8'h9c) : (8'hac)))) ? (8'hb2) : (~&{(-(8'hba))}))))
(y, clk, wire221, wire220, wire219, wire218, wire217);
  output wire [(32'hc1):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hf):(1'h0)] wire221;
  input wire signed [(4'hd):(1'h0)] wire220;
  input wire signed [(3'h4):(1'h0)] wire219;
  input wire [(5'h10):(1'h0)] wire218;
  input wire signed [(5'h10):(1'h0)] wire217;
  wire [(4'hf):(1'h0)] wire238;
  wire signed [(4'hb):(1'h0)] wire237;
  wire signed [(5'h11):(1'h0)] wire236;
  wire [(2'h2):(1'h0)] wire235;
  wire [(4'he):(1'h0)] wire234;
  wire [(4'h9):(1'h0)] wire233;
  wire signed [(3'h7):(1'h0)] wire232;
  wire signed [(4'hc):(1'h0)] wire231;
  wire signed [(5'h14):(1'h0)] wire230;
  wire signed [(4'ha):(1'h0)] wire229;
  wire [(3'h6):(1'h0)] wire228;
  wire [(2'h3):(1'h0)] wire227;
  wire [(4'hb):(1'h0)] wire226;
  wire [(3'h4):(1'h0)] wire225;
  wire [(4'hf):(1'h0)] wire224;
  wire signed [(5'h14):(1'h0)] wire223;
  wire [(5'h10):(1'h0)] wire222;
  assign y = {wire238,
                 wire237,
                 wire236,
                 wire235,
                 wire234,
                 wire233,
                 wire232,
                 wire231,
                 wire230,
                 wire229,
                 wire228,
                 wire227,
                 wire226,
                 wire225,
                 wire224,
                 wire223,
                 wire222,
                 (1'h0)};
  assign wire222 = (({((8'haf) << wire221[(3'h7):(2'h2)]),
                           wire217[(4'h8):(2'h3)]} ?
                       (~|(!wire220[(4'ha):(4'h9)])) : (+(8'hae))) || (wire218[(2'h3):(2'h2)] ?
                       $unsigned((^$unsigned((8'hb1)))) : (~((wire220 ?
                           (8'ha3) : (7'h44)) != wire218[(2'h3):(2'h3)]))));
  assign wire223 = wire220;
  assign wire224 = wire220[(4'hd):(1'h0)];
  assign wire225 = wire219;
  assign wire226 = wire225;
  assign wire227 = $signed((((wire225 + $signed(wire223)) ? wire226 : wire220) ?
                       (~|wire225) : $unsigned($signed($signed(wire224)))));
  assign wire228 = ((&(+wire222[(3'h4):(1'h1)])) ?
                       $signed((&(~^$signed(wire218)))) : wire226);
  assign wire229 = wire225[(3'h4):(2'h2)];
  assign wire230 = wire223[(4'hc):(3'h4)];
  assign wire231 = ((+(wire222[(5'h10):(3'h5)] ?
                           $unsigned(wire218[(3'h6):(1'h1)]) : {(wire218 && wire229),
                               wire227})) ?
                       {wire219[(1'h1):(1'h1)],
                           ((8'hb5) << (wire225 & (wire225 ?
                               wire217 : wire228)))} : ((wire225[(2'h2):(1'h1)] ^~ (~wire226[(3'h6):(3'h5)])) ^~ ($signed($signed(wire222)) ?
                           wire220[(4'h9):(1'h0)] : ($signed(wire229) ?
                               $unsigned(wire226) : (-wire230)))));
  assign wire232 = (^$unsigned((8'hba)));
  assign wire233 = $unsigned((&(^(|$signed(wire217)))));
  assign wire234 = ((((^~((8'hb4) ^ wire230)) <= (wire223 ?
                           wire218[(2'h2):(2'h2)] : (wire221 != wire222))) ?
                       ($unsigned((wire220 >= wire229)) | wire220[(4'h9):(3'h7)]) : (-{(~^wire219),
                           wire228})) + ($signed($signed($unsigned(wire231))) < ($signed((!wire232)) == $unsigned((wire226 ^~ wire220)))));
  assign wire235 = $signed({$signed(wire230), wire222[(2'h2):(1'h1)]});
  assign wire236 = ((~^wire218) ?
                       (~|(~$signed($unsigned((7'h41))))) : $signed((+(~^(+wire228)))));
  assign wire237 = wire226;
  assign wire238 = wire227;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module178
#(parameter param207 = ((((((7'h42) ? (8'ha9) : (8'hb0)) ~^ ((8'ha1) == (8'hb4))) <<< (&((8'h9e) ? (8'h9e) : (8'ha9)))) ? (~{{(8'h9d), (8'ha6)}, ((8'hbd) <= (7'h44))}) : ((((8'hae) ? (8'hb6) : (8'hab)) ? ((8'hac) ? (8'hb8) : (8'hbd)) : ((8'ha2) ? (8'hb9) : (8'h9f))) ? (~((8'hbc) ? (8'hb7) : (8'hb9))) : (((8'haf) ? (8'hba) : (8'ha8)) <<< ((7'h41) ? (8'hb5) : (8'h9c))))) ^~ (-(({(8'hb3), (8'h9c)} ? (~(8'hb8)) : ((8'h9f) ? (8'had) : (8'ha6))) | (((7'h41) ? (7'h42) : (8'hab)) || (~^(7'h43)))))), 
parameter param208 = ((((~^(8'h9c)) ? param207 : {{param207}}) ? ((param207 < (param207 ? param207 : param207)) ? ((param207 ? (8'hba) : param207) && (~&param207)) : ((param207 ? param207 : param207) ^~ (param207 ? param207 : param207))) : {(((8'hb9) << param207) << (param207 ^ param207))}) && (param207 << ((8'had) != ((^(7'h44)) ? ((8'ha9) ? param207 : param207) : param207)))))
(y, clk, wire182, wire181, wire180, wire179);
  output wire [(32'h11e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hc):(1'h0)] wire182;
  input wire [(5'h15):(1'h0)] wire181;
  input wire [(4'hb):(1'h0)] wire180;
  input wire [(5'h11):(1'h0)] wire179;
  wire signed [(3'h4):(1'h0)] wire206;
  wire signed [(2'h2):(1'h0)] wire189;
  wire [(3'h7):(1'h0)] wire188;
  wire [(5'h13):(1'h0)] wire187;
  wire signed [(3'h4):(1'h0)] wire186;
  reg [(4'he):(1'h0)] reg205 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg203 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg199 = (1'h0);
  reg [(5'h13):(1'h0)] reg197 = (1'h0);
  reg [(3'h7):(1'h0)] reg196 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg194 = (1'h0);
  reg [(4'hb):(1'h0)] reg191 = (1'h0);
  reg [(4'h8):(1'h0)] reg185 = (1'h0);
  reg [(5'h15):(1'h0)] reg204 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg202 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg201 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar200 = (1'h0);
  reg [(5'h14):(1'h0)] reg198 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar195 = (1'h0);
  reg [(5'h10):(1'h0)] forvar193 = (1'h0);
  reg [(5'h11):(1'h0)] forvar192 = (1'h0);
  reg [(5'h10):(1'h0)] forvar190 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar184 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar183 = (1'h0);
  assign y = {wire206,
                 wire189,
                 wire188,
                 wire187,
                 wire186,
                 reg205,
                 reg203,
                 reg199,
                 reg197,
                 reg196,
                 reg194,
                 reg191,
                 reg185,
                 reg204,
                 reg202,
                 reg201,
                 forvar200,
                 reg198,
                 forvar195,
                 forvar193,
                 forvar192,
                 forvar190,
                 forvar184,
                 forvar183,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar183 = (1'h0); (forvar183 < (2'h2)); forvar183 = (forvar183 + (1'h1)))
        begin
          for (forvar184 = (1'h0); (forvar184 < (3'h4)); forvar184 = (forvar184 + (1'h1)))
            begin
              reg185 <= $unsigned(((($signed(wire179) >>> forvar183) > $unsigned((~|forvar184))) ?
                  (-{wire179,
                      $unsigned(forvar184)}) : (~|forvar184[(3'h7):(3'h6)])));
            end
        end
    end
  assign wire186 = $unsigned((($unsigned(wire179[(3'h5):(2'h3)]) ?
                           (wire180 ?
                               $unsigned(wire182) : wire182) : $signed(wire180[(4'h9):(4'h9)])) ?
                       ((~^(~&wire179)) << (+(wire182 ?
                           wire181 : wire179))) : (((^reg185) ^~ $unsigned(wire181)) ?
                           (wire180 | wire182[(1'h1):(1'h1)]) : ({reg185,
                                   wire182} ?
                               $unsigned(wire182) : $unsigned((8'ha3))))));
  assign wire187 = (|wire180[(4'hb):(3'h7)]);
  assign wire188 = (($unsigned(($signed(wire187) ?
                               wire187 : (wire186 ? (8'hbe) : wire186))) ?
                           $signed(((reg185 ? wire179 : wire187) ?
                               (reg185 ? wire181 : wire187) : ((8'hb8) ?
                                   wire182 : wire187))) : reg185) ?
                       ($signed(wire181) >> ((((8'hb2) ? reg185 : wire182) ?
                           {wire180, wire180} : (wire181 ?
                               (8'h9c) : wire186)) != $signed(wire186))) : ((wire180 + wire182) ~^ (^{reg185[(3'h4):(2'h3)]})));
  assign wire189 = {wire182[(4'hb):(4'h8)]};
  always
    @(posedge clk) begin
      for (forvar190 = (1'h0); (forvar190 < (1'h1)); forvar190 = (forvar190 + (1'h1)))
        begin
          reg191 <= wire186[(3'h4):(1'h1)];
        end
      for (forvar192 = (1'h0); (forvar192 < (1'h1)); forvar192 = (forvar192 + (1'h1)))
        begin
          for (forvar193 = (1'h0); (forvar193 < (2'h2)); forvar193 = (forvar193 + (1'h1)))
            begin
              reg194 <= ((wire187[(1'h0):(1'h0)] ?
                  $unsigned((~&(wire189 + wire187))) : (~{wire186})) ~^ wire179);
            end
          for (forvar195 = (1'h0); (forvar195 < (2'h2)); forvar195 = (forvar195 + (1'h1)))
            begin
              reg196 <= wire188;
              reg197 <= wire188;
              reg198 = $signed($unsigned(forvar192));
            end
          reg199 <= reg198;
          for (forvar200 = (1'h0); (forvar200 < (1'h1)); forvar200 = (forvar200 + (1'h1)))
            begin
              reg201 = {(wire181 > forvar190), wire181[(4'hb):(3'h7)]};
              reg202 = reg185[(3'h7):(1'h1)];
              reg203 <= forvar200;
              reg204 = reg194[(1'h0):(1'h0)];
              reg205 <= (wire187 ?
                  $unsigned((7'h40)) : ((reg191 ?
                          $unsigned($signed((7'h42))) : wire182) ?
                      wire189[(2'h2):(1'h1)] : (wire181 ?
                          reg185 : $unsigned($unsigned((8'hb8))))));
            end
        end
    end
  assign wire206 = reg191[(2'h3):(2'h2)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module154
#(parameter param173 = (7'h42), 
parameter param174 = param173)
(y, clk, wire158, wire157, wire156, wire155);
  output wire [(32'h97):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire158;
  input wire signed [(3'h7):(1'h0)] wire157;
  input wire [(5'h11):(1'h0)] wire156;
  input wire [(4'h9):(1'h0)] wire155;
  wire signed [(4'hf):(1'h0)] wire172;
  wire [(3'h6):(1'h0)] wire171;
  wire [(2'h2):(1'h0)] wire170;
  wire [(3'h6):(1'h0)] wire169;
  wire [(5'h14):(1'h0)] wire168;
  reg signed [(5'h14):(1'h0)] reg167 = (1'h0);
  reg [(4'ha):(1'h0)] reg164 = (1'h0);
  reg [(4'hc):(1'h0)] reg162 = (1'h0);
  reg [(2'h3):(1'h0)] reg160 = (1'h0);
  reg [(4'hc):(1'h0)] reg166 = (1'h0);
  reg [(5'h15):(1'h0)] forvar165 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar163 = (1'h0);
  reg [(3'h4):(1'h0)] forvar161 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar159 = (1'h0);
  assign y = {wire172,
                 wire171,
                 wire170,
                 wire169,
                 wire168,
                 reg167,
                 reg164,
                 reg162,
                 reg160,
                 reg166,
                 forvar165,
                 forvar163,
                 forvar161,
                 forvar159,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar159 = (1'h0); (forvar159 < (3'h4)); forvar159 = (forvar159 + (1'h1)))
        begin
          reg160 <= (&(~&wire157[(1'h0):(1'h0)]));
          for (forvar161 = (1'h0); (forvar161 < (1'h1)); forvar161 = (forvar161 + (1'h1)))
            begin
              reg162 <= (!(~^$signed($unsigned((wire155 ?
                  wire156 : wire155)))));
            end
        end
      for (forvar163 = (1'h0); (forvar163 < (1'h1)); forvar163 = (forvar163 + (1'h1)))
        begin
          reg164 <= {{((~&{forvar159, wire158}) ?
                      ({forvar161} ?
                          $signed(forvar161) : $signed(forvar163)) : forvar161),
                  ({(forvar161 > (7'h40))} ?
                      reg160 : (reg160[(1'h1):(1'h0)] > (-forvar161)))}};
          for (forvar165 = (1'h0); (forvar165 < (3'h4)); forvar165 = (forvar165 + (1'h1)))
            begin
              reg166 = ($unsigned($unsigned($unsigned((&(7'h41))))) ^~ reg162[(3'h4):(2'h3)]);
            end
        end
      reg167 <= {$unsigned($unsigned($signed((-wire155))))};
    end
  assign wire168 = wire158[(3'h5):(1'h1)];
  assign wire169 = wire155[(2'h3):(2'h2)];
  assign wire170 = (wire168[(5'h13):(1'h0)] <= wire155);
  assign wire171 = $signed($signed($signed(($signed(reg167) - reg162))));
  assign wire172 = (((|$unsigned(((8'hb1) ? wire169 : wire155))) ?
                           ((^(!(8'hbd))) ?
                               (|reg162) : $signed((~&(8'ha8)))) : $signed($signed((reg162 != (8'h9c))))) ?
                       $unsigned($unsigned($unsigned(((8'ha4) - wire168)))) : wire157[(3'h5):(1'h1)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module12
#(parameter param109 = ({(({(8'ha9), (7'h40)} >> ((7'h44) ? (8'h9c) : (8'ha1))) ? (((8'hb4) - (8'haf)) ? ((8'hb3) >>> (8'hb7)) : ((8'h9e) ? (7'h41) : (8'hb0))) : (8'hb4)), ((^~(~(8'ha1))) >= (((7'h42) || (8'ha3)) ? ((8'hba) ? (7'h40) : (8'ha6)) : {(8'hb7), (7'h42)}))} > (((~(+(8'hbe))) < (&(!(8'hb1)))) ? (((+(8'hbb)) ? (~^(8'h9e)) : {(8'h9f), (8'h9e)}) == (((8'haf) ? (8'ha9) : (8'hbf)) ~^ (~(8'h9f)))) : ((((8'hb0) ? (8'hbc) : (8'ha5)) ? ((7'h43) >> (8'hb6)) : (-(8'h9c))) & (~&((8'hb9) * (8'hb4)))))))
(y, clk, wire17, wire16, wire15, wire14, wire13);
  output wire [(32'h3fa):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire17;
  input wire signed [(2'h2):(1'h0)] wire16;
  input wire [(4'hb):(1'h0)] wire15;
  input wire [(4'h8):(1'h0)] wire14;
  input wire signed [(3'h5):(1'h0)] wire13;
  wire signed [(4'ha):(1'h0)] wire108;
  wire signed [(2'h3):(1'h0)] wire107;
  wire signed [(3'h7):(1'h0)] wire65;
  wire signed [(5'h11):(1'h0)] wire64;
  wire [(5'h15):(1'h0)] wire63;
  wire [(4'ha):(1'h0)] wire62;
  wire signed [(4'h9):(1'h0)] wire61;
  wire signed [(4'h8):(1'h0)] wire60;
  wire signed [(4'h8):(1'h0)] wire59;
  wire signed [(5'h13):(1'h0)] wire58;
  wire signed [(5'h13):(1'h0)] wire57;
  wire [(5'h12):(1'h0)] wire40;
  wire [(3'h7):(1'h0)] wire22;
  wire signed [(4'hb):(1'h0)] wire21;
  wire signed [(5'h10):(1'h0)] wire20;
  wire [(5'h11):(1'h0)] wire19;
  wire signed [(5'h14):(1'h0)] wire18;
  reg signed [(2'h2):(1'h0)] reg106 = (1'h0);
  reg [(4'hd):(1'h0)] reg103 = (1'h0);
  reg [(5'h11):(1'h0)] reg102 = (1'h0);
  reg [(4'h9):(1'h0)] reg99 = (1'h0);
  reg [(2'h3):(1'h0)] reg98 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg97 = (1'h0);
  reg [(3'h6):(1'h0)] reg93 = (1'h0);
  reg [(4'hc):(1'h0)] reg92 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg89 = (1'h0);
  reg [(3'h7):(1'h0)] reg88 = (1'h0);
  reg [(4'hc):(1'h0)] reg86 = (1'h0);
  reg [(4'hf):(1'h0)] reg77 = (1'h0);
  reg [(2'h2):(1'h0)] reg71 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg70 = (1'h0);
  reg [(3'h7):(1'h0)] reg54 = (1'h0);
  reg [(2'h2):(1'h0)] reg51 = (1'h0);
  reg [(4'hd):(1'h0)] reg50 = (1'h0);
  reg [(5'h13):(1'h0)] reg46 = (1'h0);
  reg [(2'h2):(1'h0)] reg44 = (1'h0);
  reg [(4'hf):(1'h0)] reg43 = (1'h0);
  reg signed [(4'he):(1'h0)] reg39 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg35 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg31 = (1'h0);
  reg [(4'he):(1'h0)] reg28 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg23 = (1'h0);
  reg [(3'h6):(1'h0)] forvar105 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg104 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar101 = (1'h0);
  reg [(5'h14):(1'h0)] forvar100 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar96 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg95 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg94 = (1'h0);
  reg [(4'hb):(1'h0)] reg91 = (1'h0);
  reg [(4'hc):(1'h0)] forvar90 = (1'h0);
  reg [(5'h11):(1'h0)] reg87 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg85 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg84 = (1'h0);
  reg [(5'h14):(1'h0)] reg83 = (1'h0);
  reg [(3'h6):(1'h0)] forvar82 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg81 = (1'h0);
  reg [(4'h9):(1'h0)] reg80 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg79 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg78 = (1'h0);
  reg [(5'h10):(1'h0)] forvar76 = (1'h0);
  reg [(4'hc):(1'h0)] forvar75 = (1'h0);
  reg [(5'h10):(1'h0)] reg74 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg73 = (1'h0);
  reg signed [(4'he):(1'h0)] reg72 = (1'h0);
  reg [(3'h7):(1'h0)] reg69 = (1'h0);
  reg [(2'h2):(1'h0)] reg68 = (1'h0);
  reg [(2'h2):(1'h0)] forvar67 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar66 = (1'h0);
  reg [(5'h10):(1'h0)] reg56 = (1'h0);
  reg [(5'h12):(1'h0)] reg55 = (1'h0);
  reg [(5'h11):(1'h0)] forvar53 = (1'h0);
  reg [(2'h2):(1'h0)] reg52 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg49 = (1'h0);
  reg [(4'h8):(1'h0)] reg48 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar47 = (1'h0);
  reg [(3'h5):(1'h0)] reg45 = (1'h0);
  reg [(4'hb):(1'h0)] forvar42 = (1'h0);
  reg [(4'hb):(1'h0)] forvar41 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg38 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg37 = (1'h0);
  reg [(4'hc):(1'h0)] forvar36 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar34 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg33 = (1'h0);
  reg [(2'h2):(1'h0)] reg32 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar30 = (1'h0);
  reg [(4'hd):(1'h0)] reg29 = (1'h0);
  reg [(3'h7):(1'h0)] forvar27 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar26 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg25 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar24 = (1'h0);
  assign y = {wire108,
                 wire107,
                 wire65,
                 wire64,
                 wire63,
                 wire62,
                 wire61,
                 wire60,
                 wire59,
                 wire58,
                 wire57,
                 wire40,
                 wire22,
                 wire21,
                 wire20,
                 wire19,
                 wire18,
                 reg106,
                 reg103,
                 reg102,
                 reg99,
                 reg98,
                 reg97,
                 reg93,
                 reg92,
                 reg89,
                 reg88,
                 reg86,
                 reg77,
                 reg71,
                 reg70,
                 reg54,
                 reg51,
                 reg50,
                 reg46,
                 reg44,
                 reg43,
                 reg39,
                 reg35,
                 reg31,
                 reg28,
                 reg23,
                 forvar105,
                 reg104,
                 forvar101,
                 forvar100,
                 forvar96,
                 reg95,
                 reg94,
                 reg91,
                 forvar90,
                 reg87,
                 reg85,
                 reg84,
                 reg83,
                 forvar82,
                 reg81,
                 reg80,
                 reg79,
                 reg78,
                 forvar76,
                 forvar75,
                 reg74,
                 reg73,
                 reg72,
                 reg69,
                 reg68,
                 forvar67,
                 forvar66,
                 reg56,
                 reg55,
                 forvar53,
                 reg52,
                 reg49,
                 reg48,
                 forvar47,
                 reg45,
                 forvar42,
                 forvar41,
                 reg38,
                 reg37,
                 forvar36,
                 forvar34,
                 reg33,
                 reg32,
                 forvar30,
                 reg29,
                 forvar27,
                 forvar26,
                 reg25,
                 forvar24,
                 (1'h0)};
  assign wire18 = (wire14 ?
                      {(((^wire17) != (wire14 && wire15)) < ((~|(8'ha6)) ?
                              wire14 : (8'ha2))),
                          {(wire14[(2'h3):(1'h1)] ?
                                  wire14[(2'h3):(1'h0)] : (wire16 ?
                                      wire17 : (8'h9d)))}} : wire16);
  assign wire19 = wire18[(5'h14):(5'h12)];
  assign wire20 = wire13[(1'h1):(1'h0)];
  assign wire21 = (|($signed(((~&wire18) ?
                      (&wire17) : ((8'ha4) ? wire13 : wire16))) ^ wire18));
  assign wire22 = (^~wire18);
  always
    @(posedge clk) begin
      reg23 <= wire17[(3'h6):(1'h0)];
      for (forvar24 = (1'h0); (forvar24 < (3'h4)); forvar24 = (forvar24 + (1'h1)))
        begin
          reg25 = (((({forvar24} ~^ wire20[(4'ha):(1'h0)]) * wire16) ?
              (((wire20 ? wire18 : wire17) ? wire19 : (!wire16)) ?
                  $signed(wire18) : {(8'hb7)}) : (^(!wire20[(4'h9):(3'h7)]))) * $unsigned({(8'hba),
              ($unsigned(wire15) != $signed(wire20))}));
        end
      for (forvar26 = (1'h0); (forvar26 < (2'h2)); forvar26 = (forvar26 + (1'h1)))
        begin
          for (forvar27 = (1'h0); (forvar27 < (2'h2)); forvar27 = (forvar27 + (1'h1)))
            begin
              reg28 <= ((wire17 ~^ $unsigned(forvar26[(2'h2):(1'h0)])) || (-wire16[(2'h2):(1'h0)]));
              reg29 = ({(|forvar26[(2'h2):(1'h0)]),
                  $signed(((&wire14) * {wire16,
                      wire20}))} >= (^~$unsigned($unsigned($unsigned(wire20)))));
            end
          for (forvar30 = (1'h0); (forvar30 < (2'h2)); forvar30 = (forvar30 + (1'h1)))
            begin
              reg31 <= wire22;
              reg32 = $unsigned($unsigned((($unsigned((8'hbe)) ?
                      wire14 : $signed(wire20)) ?
                  wire18 : reg28[(2'h3):(1'h0)])));
            end
          reg33 = {(~^($unsigned($unsigned(wire18)) > $signed((^reg31)))),
              ($signed(reg31) ?
                  $signed(wire22[(1'h0):(1'h0)]) : (+$signed($signed(reg32))))};
          for (forvar34 = (1'h0); (forvar34 < (2'h3)); forvar34 = (forvar34 + (1'h1)))
            begin
              reg35 <= wire21[(2'h2):(2'h2)];
            end
          for (forvar36 = (1'h0); (forvar36 < (2'h3)); forvar36 = (forvar36 + (1'h1)))
            begin
              reg37 = $signed((((forvar26 || $unsigned(reg28)) + ((forvar36 ?
                          wire13 : wire18) ?
                      {forvar34} : reg29)) ?
                  $unsigned(wire13) : {wire13[(3'h4):(3'h4)],
                      ((wire17 ? forvar26 : wire13) ^~ $unsigned(reg32))}));
              reg38 = forvar26[(1'h1):(1'h1)];
              reg39 <= $signed((forvar27[(3'h7):(3'h6)] + $signed($signed((forvar30 | reg23)))));
            end
        end
    end
  assign wire40 = ((7'h40) ?
                      (($signed({(7'h43), wire17}) >= ($unsigned(wire20) ?
                          (wire15 && reg28) : ((8'ha8) | reg28))) * wire18[(1'h1):(1'h0)]) : $unsigned(wire18));
  always
    @(posedge clk) begin
      for (forvar41 = (1'h0); (forvar41 < (2'h3)); forvar41 = (forvar41 + (1'h1)))
        begin
          for (forvar42 = (1'h0); (forvar42 < (2'h3)); forvar42 = (forvar42 + (1'h1)))
            begin
              reg43 <= ((($unsigned({wire19}) <<< $signed({forvar41,
                  reg35})) ^~ wire18[(3'h5):(3'h5)]) >= ({(reg35[(3'h4):(2'h3)] ?
                      $unsigned(wire20) : wire18[(5'h12):(4'h8)]),
                  (^(!wire19))} || ($signed({forvar42,
                  forvar42}) || ({wire21} == $unsigned(reg23)))));
              reg44 <= ((~&wire13) < $unsigned(forvar42));
              reg45 = $signed($signed($unsigned(((-wire21) ?
                  reg35[(2'h2):(1'h1)] : (reg35 ? wire15 : reg43)))));
              reg46 <= $unsigned($unsigned((-((wire20 ? wire19 : wire13) ?
                  (reg31 << wire18) : (forvar42 ? reg31 : wire18)))));
            end
          for (forvar47 = (1'h0); (forvar47 < (3'h4)); forvar47 = (forvar47 + (1'h1)))
            begin
              reg48 = forvar41;
              reg49 = ($unsigned((forvar41[(4'h8):(4'h8)] ?
                  $unsigned(reg35[(4'hf):(4'he)]) : $signed((~|reg43)))) >> forvar47[(3'h7):(2'h2)]);
              reg50 <= (^~$unsigned($unsigned(wire21[(3'h4):(1'h1)])));
              reg51 <= $unsigned((&wire18));
              reg52 = wire18;
            end
          for (forvar53 = (1'h0); (forvar53 < (1'h0)); forvar53 = (forvar53 + (1'h1)))
            begin
              reg54 <= wire22[(3'h4):(3'h4)];
            end
          reg55 = ((+(wire14 ?
                  reg48[(1'h0):(1'h0)] : forvar53[(5'h10):(4'hc)])) ?
              $signed(({$unsigned((8'hbc))} ?
                  ((7'h43) ? reg43 : $signed(forvar42)) : {(~|reg51),
                      {reg52, reg48}})) : reg35[(4'hc):(1'h1)]);
          reg56 = (~{$unsigned($unsigned(reg48))});
        end
    end
  assign wire57 = (~^reg46[(4'hb):(3'h5)]);
  assign wire58 = reg46;
  assign wire59 = $unsigned((($unsigned((wire20 ?
                      wire19 : wire17)) || $unsigned($unsigned(wire18))) >= reg31[(4'h8):(4'h8)]));
  assign wire60 = (wire16[(1'h1):(1'h1)] ^~ ((($unsigned((8'hb3)) > (+(8'hbd))) ?
                          ($signed(wire59) >> {wire40,
                              reg39}) : ($signed(reg23) == (wire18 ?
                              wire19 : (8'hab)))) ?
                      wire19 : {((^~wire13) ? (wire14 ^ reg46) : wire18),
                          (8'h9e)}));
  assign wire61 = (^($unsigned((+(reg43 ^ (7'h41)))) ?
                      $unsigned(($unsigned(wire21) ?
                          reg44 : (reg51 && wire59))) : {wire20}));
  assign wire62 = wire18[(5'h11):(4'hc)];
  assign wire63 = (-$unsigned((($signed((8'ha6)) ?
                      $signed(reg28) : (~|wire21)) || wire57)));
  assign wire64 = ((wire22 <<< $unsigned(reg50[(2'h3):(1'h1)])) | {(&reg46),
                      reg44});
  assign wire65 = wire61[(2'h3):(2'h3)];
  always
    @(posedge clk) begin
      for (forvar66 = (1'h0); (forvar66 < (1'h0)); forvar66 = (forvar66 + (1'h1)))
        begin
          for (forvar67 = (1'h0); (forvar67 < (2'h2)); forvar67 = (forvar67 + (1'h1)))
            begin
              reg68 = {(reg35[(4'hf):(1'h0)] + ((-(~wire16)) ?
                      (8'hb9) : (wire20[(3'h6):(3'h6)] ?
                          $unsigned(wire16) : ((8'hb5) ~^ (8'hbe))))),
                  {reg39, $unsigned($signed(wire63[(2'h3):(2'h3)]))}};
              reg69 = $signed(((7'h43) ?
                  (+(wire63 == $signed((8'hb9)))) : $unsigned((reg28 != (-reg23)))));
              reg70 <= reg46;
              reg71 <= ((wire61 ?
                  $unsigned(reg50[(2'h3):(1'h1)]) : forvar67) >= $signed(($signed((wire19 ?
                  wire58 : reg69)) <<< $unsigned(wire58))));
              reg72 = ({(+$signed(forvar66)),
                      ($unsigned((^reg31)) ? $signed(reg23) : (|(|(7'h43))))} ?
                  (reg69 ^ (+(8'ha1))) : ($signed(wire21[(3'h6):(1'h1)]) < ({wire62[(3'h7):(2'h3)]} ?
                      (reg69 >= $unsigned(wire17)) : $unsigned(((8'hbf) >>> wire21)))));
            end
          reg73 = $signed(wire13);
          reg74 = $unsigned(wire17[(1'h1):(1'h1)]);
        end
      for (forvar75 = (1'h0); (forvar75 < (1'h1)); forvar75 = (forvar75 + (1'h1)))
        begin
          for (forvar76 = (1'h0); (forvar76 < (2'h2)); forvar76 = (forvar76 + (1'h1)))
            begin
              reg77 <= $unsigned($signed(($unsigned(reg73) + $unsigned(reg73))));
              reg78 = ({$signed((8'hab)),
                  $signed((reg23[(4'h8):(3'h4)] == $unsigned(wire19)))} == (reg77[(1'h1):(1'h1)] ?
                  (~^wire21) : wire61));
              reg79 = (|$signed(($signed($unsigned(reg72)) ?
                  forvar75[(1'h0):(1'h0)] : $signed(wire16))));
              reg80 = wire58;
              reg81 = ({{(wire20[(4'hf):(2'h2)] * wire63[(4'hf):(4'hd)]),
                      reg54[(1'h1):(1'h0)]},
                  $unsigned({$unsigned((7'h42))})} + (($unsigned((wire13 ?
                      reg71 : wire58)) | $unsigned({reg31})) ?
                  ({reg70} ?
                      (reg68 <= (reg78 != reg39)) : $signed($signed(wire15))) : (((7'h41) ?
                          ((8'ha6) || forvar66) : (^wire16)) ?
                      ($unsigned((8'hb5)) != $unsigned((8'ha3))) : ((|wire20) & (~wire60)))));
            end
          for (forvar82 = (1'h0); (forvar82 < (1'h1)); forvar82 = (forvar82 + (1'h1)))
            begin
              reg83 = (~&((reg46[(2'h3):(2'h2)] - reg39[(2'h2):(1'h1)]) ?
                  $unsigned((^~{reg23})) : wire64));
              reg84 = ($signed($unsigned($signed({wire22}))) > {wire15[(1'h1):(1'h1)]});
              reg85 = (forvar76 - {$unsigned(wire19[(5'h11):(4'he)])});
              reg86 <= forvar76;
            end
          if (((~^wire16) ?
              $unsigned($signed($signed((wire40 ?
                  forvar76 : wire59)))) : $signed({forvar82[(1'h1):(1'h1)],
                  forvar82[(2'h3):(2'h3)]})))
            begin
              reg87 = reg43[(2'h3):(1'h0)];
            end
          else
            begin
              reg88 <= $signed(($unsigned(reg70) ?
                  ($signed(reg70) ?
                      ((forvar67 << (8'hb0)) << $signed((8'hbc))) : wire59) : (((-reg77) ?
                      {wire57,
                          reg80} : $signed(reg28)) ~^ $unsigned($signed(reg83)))));
              reg89 <= ($signed($unsigned(((wire65 ? (8'hb3) : wire63) ?
                      (~(8'haf)) : $signed(wire63)))) ?
                  {(7'h43)} : (wire40 > ({$unsigned(reg87),
                      $unsigned(reg35)} & reg23)));
            end
          for (forvar90 = (1'h0); (forvar90 < (2'h3)); forvar90 = (forvar90 + (1'h1)))
            begin
              reg91 = (^~(reg46 + $unsigned((^~{reg80, reg23}))));
              reg92 <= (((8'hab) + (^~((+reg81) ?
                      (^wire40) : (reg43 && reg85)))) ?
                  ({$signed((|wire60)), ($signed(reg43) >= reg35)} ?
                      (!$signed(wire22)) : (8'hbb)) : ((($signed(reg86) && {reg43,
                              (8'hb9)}) ?
                          ((wire57 ?
                              wire20 : forvar82) - $unsigned(wire64)) : $unsigned((reg23 + wire16))) ?
                      $unsigned($signed(wire18)) : (^(+$signed(reg74)))));
              reg93 <= $signed(((^wire59) + {(reg50[(4'h8):(1'h0)] ?
                      $signed((8'ha7)) : (^reg78)),
                  wire15}));
              reg94 = reg71;
              reg95 = reg71;
            end
          for (forvar96 = (1'h0); (forvar96 < (2'h3)); forvar96 = (forvar96 + (1'h1)))
            begin
              reg97 <= $signed(({$signed(reg84[(2'h2):(1'h0)])} ~^ {reg39[(3'h6):(2'h3)],
                  $signed(wire15[(2'h3):(2'h3)])}));
              reg98 <= reg86[(1'h0):(1'h0)];
            end
        end
      reg99 <= (reg23[(3'h6):(3'h4)] ?
          (8'ha1) : (forvar76[(4'h9):(2'h3)] || reg97));
      for (forvar100 = (1'h0); (forvar100 < (2'h2)); forvar100 = (forvar100 + (1'h1)))
        begin
          for (forvar101 = (1'h0); (forvar101 < (3'h4)); forvar101 = (forvar101 + (1'h1)))
            begin
              reg102 <= ($unsigned(reg95[(2'h2):(1'h1)]) && $unsigned({$signed((&forvar96)),
                  $signed(((8'h9c) ? (8'hbe) : (8'hb2)))}));
              reg103 <= reg86[(3'h5):(3'h4)];
              reg104 = (($signed($signed(((7'h40) ?
                      (7'h41) : reg71))) || (-(~^{wire62}))) ?
                  $unsigned($signed(((reg99 << reg78) ?
                      (~|wire59) : (^~reg99)))) : reg102);
            end
          for (forvar105 = (1'h0); (forvar105 < (1'h0)); forvar105 = (forvar105 + (1'h1)))
            begin
              reg106 <= $unsigned(reg71);
            end
        end
    end
  assign wire107 = wire18[(4'ha):(3'h4)];
  assign wire108 = (+(((~&(reg39 ? (8'hb8) : (7'h41))) ?
                       wire15 : {wire21}) * wire59));
endmodule