(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param25 = (~^((^~((~^(8'ha7)) && ((8'hb8) << (8'h9f)))) ? (+(7'h44)) : (^{(^~(8'hb1))}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'hd4):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire3;
  input wire signed [(3'h7):(1'h0)] wire2;
  input wire [(4'he):(1'h0)] wire1;
  input wire signed [(4'hd):(1'h0)] wire0;
  wire [(3'h7):(1'h0)] wire24;
  wire [(4'h9):(1'h0)] wire23;
  wire [(4'he):(1'h0)] wire22;
  wire [(4'hc):(1'h0)] wire21;
  wire signed [(4'h9):(1'h0)] wire20;
  wire [(2'h3):(1'h0)] wire19;
  wire signed [(4'h8):(1'h0)] wire18;
  wire [(5'h10):(1'h0)] wire17;
  wire [(3'h6):(1'h0)] wire16;
  wire signed [(4'hd):(1'h0)] wire15;
  reg signed [(4'hf):(1'h0)] reg14 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg12 = (1'h0);
  reg [(3'h5):(1'h0)] reg11 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg7 = (1'h0);
  reg [(4'h9):(1'h0)] reg6 = (1'h0);
  reg [(4'hc):(1'h0)] reg13 = (1'h0);
  reg [(4'h9):(1'h0)] forvar10 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg8 = (1'h0);
  reg [(2'h3):(1'h0)] forvar5 = (1'h0);
  reg [(5'h15):(1'h0)] forvar4 = (1'h0);
  assign y = {wire24,
                 wire23,
                 wire22,
                 wire21,
                 wire20,
                 wire19,
                 wire18,
                 wire17,
                 wire16,
                 wire15,
                 reg14,
                 reg12,
                 reg11,
                 reg7,
                 reg6,
                 reg13,
                 forvar10,
                 reg9,
                 reg8,
                 forvar5,
                 forvar4,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar4 = (1'h0); (forvar4 < (2'h3)); forvar4 = (forvar4 + (1'h1)))
        begin
          for (forvar5 = (1'h0); (forvar5 < (1'h1)); forvar5 = (forvar5 + (1'h1)))
            begin
              reg6 <= (^~(-((8'hb4) ? {(forvar4 | wire3)} : {(8'h9e), wire3})));
              reg7 <= (7'h43);
              reg8 = {(wire3[(1'h1):(1'h1)] ?
                      reg7 : (wire2[(3'h4):(1'h1)] - $signed(reg6)))};
              reg9 = reg8;
            end
          for (forvar10 = (1'h0); (forvar10 < (2'h3)); forvar10 = (forvar10 + (1'h1)))
            begin
              reg11 <= ($unsigned(($unsigned(wire0[(1'h0):(1'h0)]) ?
                      {(forvar10 * reg8)} : (wire2 ?
                          {forvar4, reg7} : (wire0 ? reg7 : forvar10)))) ?
                  (~(&{forvar5[(2'h2):(2'h2)]})) : (|wire3));
              reg12 <= $signed($signed((forvar5[(1'h1):(1'h1)] != {wire0})));
              reg13 = reg8[(3'h4):(2'h3)];
            end
          reg14 <= $signed((|reg12[(2'h2):(1'h1)]));
        end
    end
  assign wire15 = wire3;
  assign wire16 = $signed($signed($unsigned((^~reg12))));
  assign wire17 = $signed({({wire3} ?
                          (!$unsigned(reg11)) : $unsigned((reg12 * (8'hbb))))});
  assign wire18 = (~^({wire1[(4'hb):(2'h3)], (~((8'hae) ? wire0 : wire2))} ?
                      {((~^reg6) ?
                              (wire15 ?
                                  wire2 : reg12) : wire15[(4'h8):(3'h4)])} : $unsigned($unsigned($signed(reg12)))));
  assign wire19 = $signed({(&$unsigned(((8'hba) ? reg7 : reg6)))});
  assign wire20 = wire1[(4'hb):(4'ha)];
  assign wire21 = wire19[(2'h3):(1'h0)];
  assign wire22 = (8'hab);
  assign wire23 = wire21;
  assign wire24 = (^~reg11);
endmodule