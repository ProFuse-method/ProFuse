(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param52 = {(!((^~(8'ha0)) * {(8'h9d)}))})
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h6b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire [(3'h4):(1'h0)] wire2;
  input wire signed [(3'h7):(1'h0)] wire1;
  input wire [(4'ha):(1'h0)] wire0;
  wire signed [(3'h4):(1'h0)] wire47;
  wire [(4'h8):(1'h0)] wire46;
  wire signed [(2'h2):(1'h0)] wire45;
  wire [(4'ha):(1'h0)] wire44;
  wire [(2'h2):(1'h0)] wire42;
  wire [(4'ha):(1'h0)] wire41;
  wire signed [(4'h8):(1'h0)] wire39;
  wire signed [(4'h8):(1'h0)] wire8;
  wire signed [(4'ha):(1'h0)] wire7;
  wire signed [(4'h8):(1'h0)] wire6;
  wire [(2'h3):(1'h0)] wire5;
  wire [(4'h8):(1'h0)] wire4;
  reg [(4'h8):(1'h0)] reg51 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg50 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg49 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg48 = (1'h0);
  assign y = {wire47,
                 wire46,
                 wire45,
                 wire44,
                 wire42,
                 wire41,
                 wire39,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 reg51,
                 reg50,
                 reg49,
                 reg48,
                 (1'h0)};
  assign wire4 = ((((8'haa) ? ((8'ha8) ? wire3 : wire2) : {wire0}) ?
                         (~|$signed((8'ha5))) : $unsigned(wire0)) ?
                     ((8'h9d) >>> ($signed((8'h9e)) ?
                         (8'h9f) : $unsigned((8'ha3)))) : {{wire1[(3'h4):(3'h4)]}});
  assign wire5 = wire3;
  assign wire6 = wire5[(2'h3):(2'h3)];
  assign wire7 = ($unsigned($unsigned(((8'had) ~^ wire6))) - (wire5 >>> $unsigned(wire6)));
  assign wire8 = $signed($signed($signed($signed(wire5))));
  module9 #() modinst40 (wire39, clk, wire1, wire3, wire6, wire0);
  assign wire41 = $unsigned(wire0);
  module9 #() modinst43 (.wire12(wire4), .wire13(wire41), .wire11(wire7), .y(wire42), .clk(clk), .wire10(wire8));
  assign wire44 = wire7;
  assign wire45 = wire4;
  assign wire46 = ((wire45[(1'h0):(1'h0)] - wire42[(2'h2):(1'h1)]) ~^ ({$signed(wire7)} | wire8));
  assign wire47 = (^~{(wire45 ? (-wire42) : wire45[(1'h1):(1'h1)])});
  always
    @(posedge clk) begin
      if (wire39)
        begin
          reg48 <= (($signed($signed(wire42)) ?
                  (!(!wire0)) : wire39[(4'h8):(1'h0)]) ?
              wire1[(3'h7):(1'h0)] : $unsigned(wire8));
          reg49 <= $unsigned(wire46[(3'h4):(2'h2)]);
        end
      else
        begin
          if ($signed({wire45[(1'h0):(1'h0)]}))
            begin
              reg48 <= wire4;
            end
          else
            begin
              reg48 <= $signed(wire41[(3'h4):(1'h0)]);
              reg49 <= wire44;
            end
          reg50 <= {(wire1 ?
                  wire41[(4'h9):(2'h3)] : $unsigned($unsigned(wire0)))};
        end
      reg51 <= reg49[(2'h2):(1'h0)];
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9  (y, clk, wire10, wire11, wire12, wire13);
  output wire [(32'h3f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire10;
  input wire [(4'ha):(1'h0)] wire11;
  input wire [(4'h8):(1'h0)] wire12;
  input wire [(3'h5):(1'h0)] wire13;
  wire [(3'h5):(1'h0)] wire34;
  wire signed [(4'h8):(1'h0)] wire33;
  wire [(2'h3):(1'h0)] wire14;
  wire signed [(2'h2):(1'h0)] wire16;
  wire [(2'h3):(1'h0)] wire17;
  wire [(2'h3):(1'h0)] wire31;
  reg signed [(3'h4):(1'h0)] reg38 = (1'h0);
  reg [(3'h4):(1'h0)] reg37 = (1'h0);
  reg [(4'hb):(1'h0)] reg36 = (1'h0);
  reg [(4'h8):(1'h0)] reg35 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg15 = (1'h0);
  assign y = {wire34,
                 wire33,
                 wire14,
                 wire16,
                 wire17,
                 wire31,
                 reg38,
                 reg37,
                 reg36,
                 reg35,
                 reg15,
                 (1'h0)};
  assign wire14 = $unsigned((-$unsigned($signed(wire12))));
  always
    @(posedge clk) begin
      reg15 <= {$signed($unsigned({wire13}))};
    end
  assign wire16 = ($unsigned(((wire13 ? reg15 : wire12) < (+wire11))) ?
                      $signed((|reg15[(1'h0):(1'h0)])) : {reg15});
  assign wire17 = {(~^{wire12[(1'h1):(1'h1)]})};
  module18 #() modinst32 (.clk(clk), .y(wire31), .wire19(wire13), .wire21(reg15), .wire22(wire11), .wire20(wire12));
  assign wire33 = (-(wire13 ?
                      (^(wire14 >>> wire14)) : ({wire12} >> wire10[(1'h0):(1'h0)])));
  assign wire34 = wire13[(2'h2):(1'h1)];
  always
    @(posedge clk) begin
      reg35 <= wire14;
      reg36 <= ($unsigned($signed(((8'haa) >>> wire34))) ?
          wire14 : (~&$signed((reg35 ? wire14 : reg15))));
      reg37 <= ((~$signed({reg36})) > ($signed({reg35}) | wire10[(1'h1):(1'h1)]));
    end
  always
    @(posedge clk) begin
      reg38 <= $signed({(wire31 ?
              (wire31 != wire13) : (wire17 ? reg36 : reg15))});
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18
#(parameter param30 = (~((-((8'hac) ? (8'ha2) : (8'had))) ? (((8'haa) ? (8'ha7) : (8'ha1)) >= (8'h9f)) : (~&((8'ha2) != (8'ha2))))))
(y, clk, wire22, wire21, wire20, wire19);
  output wire [(32'h36):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire22;
  input wire signed [(4'hb):(1'h0)] wire21;
  input wire signed [(4'h8):(1'h0)] wire20;
  input wire signed [(2'h2):(1'h0)] wire19;
  wire signed [(4'hb):(1'h0)] wire27;
  wire signed [(4'hb):(1'h0)] wire26;
  wire signed [(3'h6):(1'h0)] wire25;
  wire [(4'h8):(1'h0)] wire23;
  reg [(4'h8):(1'h0)] reg29 = (1'h0);
  reg [(2'h2):(1'h0)] reg28 = (1'h0);
  reg [(3'h7):(1'h0)] reg24 = (1'h0);
  assign y = {wire27, wire26, wire25, wire23, reg29, reg28, reg24, (1'h0)};
  assign wire23 = {(^$unsigned(wire22[(3'h7):(1'h0)]))};
  always
    @(posedge clk) begin
      reg24 <= (^wire23[(3'h7):(1'h0)]);
    end
  assign wire25 = ($signed((^~(-wire20))) ?
                      $signed(({wire23} - (wire23 || reg24))) : (wire19 ?
                          wire21[(4'ha):(4'h9)] : ((wire23 << (8'haa)) || $unsigned(wire19))));
  assign wire26 = (reg24 && $unsigned($unsigned((~^wire23))));
  assign wire27 = reg24;
  always
    @(posedge clk) begin
      reg28 <= $unsigned($signed($unsigned((~wire20))));
      reg29 <= $signed((wire22[(4'h8):(3'h4)] ?
          (-$signed((8'haf))) : (~$unsigned(reg24))));
    end
endmodule