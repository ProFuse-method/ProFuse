(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h67):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire signed [(2'h2):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire0;
  wire signed [(2'h2):(1'h0)] wire26;
  wire [(4'ha):(1'h0)] wire24;
  wire [(3'h7):(1'h0)] wire9;
  wire [(4'h8):(1'h0)] wire8;
  wire signed [(4'h9):(1'h0)] wire7;
  reg [(4'hb):(1'h0)] reg14 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg13 = (1'h0);
  reg [(4'ha):(1'h0)] reg12 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg11 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg10 = (1'h0);
  reg [(4'ha):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg5 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg4 = (1'h0);
  assign y = {wire26,
                 wire24,
                 wire9,
                 wire8,
                 wire7,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (($unsigned(wire2) ?
          ($unsigned(wire3[(1'h0):(1'h0)]) ?
              ((wire3 <= wire3) ?
                  ((8'ha4) ?
                      wire0 : wire2) : wire0) : $signed($signed(wire1))) : (-(8'h9d))))
        begin
          reg4 <= (^((~{wire1}) ?
              (^~wire3[(1'h1):(1'h0)]) : ((wire0 ?
                  wire0 : wire2) || $signed(wire1))));
        end
      else
        begin
          reg4 <= wire0[(1'h1):(1'h0)];
          reg5 <= wire1;
        end
      reg6 <= (reg4 ?
          ((^~{wire0}) ?
              $unsigned(wire0) : (reg4[(1'h1):(1'h1)] ?
                  $signed(wire2) : wire0)) : (((wire3 - wire3) <= wire0) ?
              $signed(wire2[(3'h5):(1'h1)]) : reg4[(2'h2):(1'h0)]));
    end
  assign wire7 = ((!(~^$unsigned(wire1))) >>> (8'ha4));
  assign wire8 = ({{$unsigned(reg4)}} & reg4);
  assign wire9 = $signed(($unsigned(wire1[(1'h1):(1'h1)]) ?
                     $unsigned($signed(wire2)) : reg5));
  always
    @(posedge clk) begin
      reg10 <= $unsigned((+wire1[(1'h1):(1'h0)]));
      reg11 <= (-reg10);
      reg12 <= {wire3[(3'h5):(2'h2)]};
    end
  always
    @(posedge clk) begin
      reg13 <= $unsigned($unsigned({(^~wire2)}));
      reg14 <= ((~&$unsigned((wire2 & wire8))) ?
          $unsigned((~&(wire1 ? reg5 : wire7))) : ((reg10 ?
              (&(8'hae)) : (wire3 > reg4)) < $signed((wire7 >>> reg5))));
    end
  module15 #() modinst25 (.clk(clk), .wire18(reg6), .wire16(wire0), .y(wire24), .wire19(wire2), .wire17(reg4));
  assign wire26 = reg12[(4'h8):(3'h7)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15  (y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h15):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire19;
  input wire [(4'h9):(1'h0)] wire18;
  input wire [(3'h7):(1'h0)] wire17;
  input wire [(4'h9):(1'h0)] wire16;
  wire signed [(3'h5):(1'h0)] wire23;
  wire [(2'h3):(1'h0)] wire22;
  wire signed [(4'h9):(1'h0)] wire21;
  wire [(2'h3):(1'h0)] wire20;
  assign y = {wire23, wire22, wire21, wire20, (1'h0)};
  assign wire20 = ((-$signed(wire18[(3'h5):(2'h2)])) || wire19[(4'h9):(4'h8)]);
  assign wire21 = ((wire19[(3'h5):(1'h0)] ?
                      wire17 : wire19[(2'h3):(1'h0)]) <<< (($signed(wire17) ^ $signed(wire19)) ?
                      wire19[(1'h0):(1'h0)] : (wire16 ?
                          {(8'h9e)} : (+wire16))));
  assign wire22 = ((8'ha6) >>> $unsigned(((wire16 ?
                      wire19 : wire21) >> (wire17 >>> wire18))));
  assign wire23 = ((($signed(wire18) ?
                          (8'h9c) : wire22[(2'h2):(1'h0)]) >= (((8'ha1) ?
                              wire22 : wire16) ?
                          (-wire18) : {wire21})) ?
                      wire20 : ({{(8'h9d)}} ?
                          (|$signed((8'hae))) : (!$unsigned(wire18))));
endmodule