(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h51):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire0;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire signed [(2'h3):(1'h0)] wire2;
  input wire [(4'ha):(1'h0)] wire3;
  wire [(3'h4):(1'h0)] wire59;
  wire signed [(4'hb):(1'h0)] wire58;
  wire signed [(3'h4):(1'h0)] wire57;
  wire [(4'h9):(1'h0)] wire4;
  wire [(3'h7):(1'h0)] wire5;
  wire [(4'h8):(1'h0)] wire6;
  wire [(3'h7):(1'h0)] wire10;
  wire [(3'h7):(1'h0)] wire11;
  wire [(3'h5):(1'h0)] wire12;
  wire [(2'h2):(1'h0)] wire55;
  reg signed [(3'h6):(1'h0)] reg7 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg9 = (1'h0);
  assign y = {wire59,
                 wire58,
                 wire57,
                 wire4,
                 wire5,
                 wire6,
                 wire10,
                 wire11,
                 wire12,
                 wire55,
                 reg7,
                 reg8,
                 reg9,
                 (1'h0)};
  assign wire4 = $unsigned(wire1[(3'h6):(2'h2)]);
  assign wire5 = wire3;
  assign wire6 = wire4[(1'h1):(1'h1)];
  always
    @(posedge clk) begin
      reg7 <= wire3[(2'h3):(2'h3)];
      reg8 <= (~|(8'h9c));
      reg9 <= (!wire2[(1'h1):(1'h1)]);
    end
  assign wire10 = ($unsigned((wire5[(2'h3):(1'h0)] >>> reg8)) ?
                      (wire6 ? ($signed(reg9) ^~ reg7) : (8'ha5)) : reg9);
  assign wire11 = $unsigned(reg7[(1'h0):(1'h0)]);
  assign wire12 = $signed((~&wire3[(1'h0):(1'h0)]));
  module13 #() modinst56 (wire55, clk, wire4, reg9, wire1, wire11);
  assign wire57 = $unsigned($unsigned((wire3[(1'h1):(1'h1)] ~^ (wire10 | wire12))));
  assign wire58 = wire10[(3'h6):(3'h6)];
  assign wire59 = $signed(wire0);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13
#(parameter param54 = (((|((8'ha3) ? (8'ha4) : (8'hb0))) ? (((8'ha9) ~^ (8'ha4)) ? ((8'ha9) > (8'ha3)) : (!(8'hae))) : (^~((8'ha1) <<< (8'ha6)))) ? ((((8'ha0) ? (8'h9f) : (8'ha9)) ? (^(8'ha8)) : ((8'hab) ? (8'ha0) : (8'ha5))) ? {((8'ha5) >= (8'ha9))} : ((~^(8'hae)) ? ((8'haa) || (8'haf)) : (~(8'h9f)))) : (-(^~((8'ha5) ? (8'hac) : (8'haf))))))
(y, clk, wire14, wire15, wire16, wire17);
  output wire [(32'h50):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire14;
  input wire [(3'h6):(1'h0)] wire15;
  input wire signed [(4'ha):(1'h0)] wire16;
  input wire signed [(3'h7):(1'h0)] wire17;
  wire [(3'h7):(1'h0)] wire53;
  wire signed [(4'ha):(1'h0)] wire52;
  wire [(4'ha):(1'h0)] wire31;
  wire signed [(3'h5):(1'h0)] wire34;
  wire signed [(4'h9):(1'h0)] wire35;
  wire signed [(3'h6):(1'h0)] wire36;
  wire signed [(3'h4):(1'h0)] wire37;
  wire [(4'ha):(1'h0)] wire38;
  wire signed [(3'h7):(1'h0)] wire50;
  reg signed [(4'hb):(1'h0)] reg33 = (1'h0);
  assign y = {wire53,
                 wire52,
                 wire31,
                 wire34,
                 wire35,
                 wire36,
                 wire37,
                 wire38,
                 wire50,
                 reg33,
                 (1'h0)};
  module18 #() modinst32 (.y(wire31), .wire20(wire16), .wire19(wire15), .wire21(wire17), .clk(clk), .wire22(wire14));
  always
    @(posedge clk) begin
      reg33 <= (($signed($signed((8'ha7))) || ((^wire17) ?
          wire17 : wire14)) << $unsigned((^wire17)));
    end
  assign wire34 = $signed(wire14);
  assign wire35 = (wire15[(3'h5):(3'h5)] ~^ (((wire31 ?
                          wire15 : wire17) >>> $unsigned(reg33)) ?
                      $signed({wire31}) : ((wire34 ?
                          wire16 : wire16) & reg33)));
  assign wire36 = {{((~wire31) ? {wire16} : {wire14})}};
  assign wire37 = (+({(&wire31)} > wire35));
  assign wire38 = $unsigned((-(8'had)));
  module39 #() modinst51 (wire50, clk, wire31, wire14, reg33, wire38);
  assign wire52 = (wire34 ^~ wire50[(3'h5):(2'h2)]);
  assign wire53 = wire34;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module39  (y, clk, wire43, wire42, wire41, wire40);
  output wire [(32'h2c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire43;
  input wire [(4'h9):(1'h0)] wire42;
  input wire [(2'h3):(1'h0)] wire41;
  input wire signed [(2'h3):(1'h0)] wire40;
  wire [(2'h2):(1'h0)] wire49;
  wire [(2'h2):(1'h0)] wire48;
  wire signed [(4'h9):(1'h0)] wire47;
  wire [(4'hb):(1'h0)] wire46;
  wire [(4'hb):(1'h0)] wire45;
  wire [(4'h8):(1'h0)] wire44;
  assign y = {wire49, wire48, wire47, wire46, wire45, wire44, (1'h0)};
  assign wire44 = {$signed(((wire42 > wire42) ?
                          $unsigned(wire40) : $unsigned((8'hae))))};
  assign wire45 = $unsigned($signed((+$signed(wire44))));
  assign wire46 = wire43[(1'h0):(1'h0)];
  assign wire47 = $unsigned({wire40});
  assign wire48 = (wire47[(3'h6):(3'h4)] ?
                      (^~(^(wire47 ? wire47 : (8'ha5)))) : (wire44 ?
                          $unsigned($unsigned(wire41)) : $unsigned(wire42)));
  assign wire49 = wire47;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18
#(parameter param30 = (8'ha3))
(y, clk, wire22, wire21, wire20, wire19);
  output wire [(32'h2b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire22;
  input wire [(3'h7):(1'h0)] wire21;
  input wire signed [(3'h5):(1'h0)] wire20;
  input wire [(2'h3):(1'h0)] wire19;
  wire [(2'h2):(1'h0)] wire28;
  wire [(3'h5):(1'h0)] wire27;
  wire signed [(3'h5):(1'h0)] wire26;
  wire [(3'h6):(1'h0)] wire25;
  wire signed [(4'ha):(1'h0)] wire24;
  wire [(4'hb):(1'h0)] wire23;
  reg [(2'h3):(1'h0)] reg29 = (1'h0);
  assign y = {wire28, wire27, wire26, wire25, wire24, wire23, reg29, (1'h0)};
  assign wire23 = ($signed(wire22) ?
                      wire19 : (($signed(wire22) ?
                          wire19 : wire22) >> $signed(wire19)));
  assign wire24 = ($signed($signed((wire20 ? wire19 : wire22))) == wire21);
  assign wire25 = $unsigned($signed((~&(8'h9f))));
  assign wire26 = wire22;
  assign wire27 = ($signed(wire20) ?
                      ($signed(((8'ha4) && wire22)) ?
                          (^~$unsigned(wire23)) : $unsigned(wire25[(3'h4):(2'h2)])) : {wire22[(2'h3):(1'h0)]});
  assign wire28 = (^$unsigned(wire23[(2'h3):(1'h1)]));
  always
    @(posedge clk) begin
      reg29 <= wire24[(4'ha):(3'h5)];
    end
endmodule