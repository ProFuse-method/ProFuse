(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param56 = (~^{(-(!{(8'had), (8'ha6)})), ({((8'h9e) ? (8'hb5) : (8'hb2))} >>> (((8'ha4) ? (7'h40) : (8'ha3)) && ((8'h9e) + (8'hbb))))}))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h24e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire3;
  input wire signed [(2'h2):(1'h0)] wire2;
  input wire signed [(4'hd):(1'h0)] wire1;
  input wire signed [(5'h14):(1'h0)] wire0;
  wire [(5'h11):(1'h0)] wire27;
  wire signed [(4'he):(1'h0)] wire26;
  wire [(4'hc):(1'h0)] wire25;
  reg [(4'h9):(1'h0)] reg51 = (1'h0);
  reg [(3'h5):(1'h0)] reg50 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg47 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg45 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg44 = (1'h0);
  reg [(5'h14):(1'h0)] reg41 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg40 = (1'h0);
  reg [(4'he):(1'h0)] reg38 = (1'h0);
  reg [(4'hf):(1'h0)] reg37 = (1'h0);
  reg [(4'hd):(1'h0)] reg36 = (1'h0);
  reg [(2'h3):(1'h0)] reg34 = (1'h0);
  reg [(4'hf):(1'h0)] reg32 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg30 = (1'h0);
  reg [(2'h2):(1'h0)] reg24 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg22 = (1'h0);
  reg [(3'h4):(1'h0)] reg20 = (1'h0);
  reg [(3'h5):(1'h0)] reg19 = (1'h0);
  reg [(5'h13):(1'h0)] reg16 = (1'h0);
  reg [(5'h10):(1'h0)] reg13 = (1'h0);
  reg [(4'ha):(1'h0)] reg9 = (1'h0);
  reg [(4'hf):(1'h0)] reg6 = (1'h0);
  reg [(3'h4):(1'h0)] reg55 = (1'h0);
  reg [(5'h11):(1'h0)] reg54 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar53 = (1'h0);
  reg [(5'h14):(1'h0)] reg52 = (1'h0);
  reg [(3'h4):(1'h0)] forvar49 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg48 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg46 = (1'h0);
  reg [(4'ha):(1'h0)] forvar40 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg39 = (1'h0);
  reg [(2'h3):(1'h0)] reg43 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg42 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar39 = (1'h0);
  reg [(4'hc):(1'h0)] reg35 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg33 = (1'h0);
  reg [(4'hd):(1'h0)] reg31 = (1'h0);
  reg [(5'h10):(1'h0)] forvar29 = (1'h0);
  reg [(3'h6):(1'h0)] forvar28 = (1'h0);
  reg [(4'ha):(1'h0)] reg21 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar18 = (1'h0);
  reg [(3'h4):(1'h0)] forvar17 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar15 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg14 = (1'h0);
  reg [(2'h2):(1'h0)] reg12 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg11 = (1'h0);
  reg [(4'hf):(1'h0)] forvar10 = (1'h0);
  reg [(4'he):(1'h0)] reg8 = (1'h0);
  reg [(2'h2):(1'h0)] forvar7 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar5 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar4 = (1'h0);
  assign y = {wire27,
                 wire26,
                 wire25,
                 reg51,
                 reg50,
                 reg47,
                 reg45,
                 reg44,
                 reg41,
                 reg40,
                 reg38,
                 reg37,
                 reg36,
                 reg34,
                 reg32,
                 reg30,
                 reg24,
                 reg23,
                 reg22,
                 reg20,
                 reg19,
                 reg16,
                 reg13,
                 reg9,
                 reg6,
                 reg55,
                 reg54,
                 forvar53,
                 reg52,
                 forvar49,
                 reg48,
                 reg46,
                 forvar40,
                 reg39,
                 reg43,
                 reg42,
                 forvar39,
                 reg35,
                 reg33,
                 reg31,
                 forvar29,
                 forvar28,
                 reg21,
                 forvar18,
                 forvar17,
                 forvar15,
                 reg14,
                 reg12,
                 reg11,
                 forvar10,
                 reg8,
                 forvar7,
                 forvar5,
                 forvar4,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar4 = (1'h0); (forvar4 < (2'h2)); forvar4 = (forvar4 + (1'h1)))
        begin
          for (forvar5 = (1'h0); (forvar5 < (1'h1)); forvar5 = (forvar5 + (1'h1)))
            begin
              reg6 <= {(&$unsigned($unsigned(wire2[(2'h2):(1'h1)]))),
                  $signed(wire2)};
            end
          for (forvar7 = (1'h0); (forvar7 < (1'h0)); forvar7 = (forvar7 + (1'h1)))
            begin
              reg8 = forvar5[(3'h4):(1'h1)];
              reg9 <= forvar4;
            end
          for (forvar10 = (1'h0); (forvar10 < (1'h1)); forvar10 = (forvar10 + (1'h1)))
            begin
              reg11 = $unsigned(wire0[(2'h2):(2'h2)]);
              reg12 = (8'ha9);
              reg13 <= $unsigned($unsigned((~&{$signed(wire1)})));
              reg14 = reg8;
            end
          for (forvar15 = (1'h0); (forvar15 < (2'h3)); forvar15 = (forvar15 + (1'h1)))
            begin
              reg16 <= (~^(~&reg12[(1'h0):(1'h0)]));
            end
        end
      for (forvar17 = (1'h0); (forvar17 < (2'h2)); forvar17 = (forvar17 + (1'h1)))
        begin
          for (forvar18 = (1'h0); (forvar18 < (3'h4)); forvar18 = (forvar18 + (1'h1)))
            begin
              reg19 <= $unsigned({(($signed((7'h43)) ? $signed(wire0) : reg6) ?
                      wire3 : ((wire3 ~^ wire0) ?
                          {forvar4, reg9} : (forvar17 ? reg14 : (8'h9d))))});
              reg20 <= (~|{$unsigned(forvar4)});
              reg21 = {(&(reg12[(1'h0):(1'h0)] > reg11)),
                  ((~^($signed(forvar7) != (!(8'hb7)))) || $signed((|reg16[(4'hb):(4'ha)])))};
              reg22 <= forvar5[(3'h4):(3'h4)];
              reg23 <= ((reg16[(5'h11):(3'h7)] && $signed(forvar5)) ?
                  reg16 : {wire3[(2'h2):(2'h2)], $unsigned(wire2)});
            end
          reg24 <= forvar7[(1'h1):(1'h0)];
        end
    end
  assign wire25 = $unsigned(reg19[(2'h2):(2'h2)]);
  assign wire26 = (wire2[(1'h0):(1'h0)] >> $signed($unsigned($signed(((8'hb6) * wire2)))));
  assign wire27 = ((((((8'ha8) ? reg16 : wire25) ?
                              (reg16 ?
                                  wire1 : (8'hbc)) : $unsigned((8'hb4))) >>> reg23[(4'h9):(1'h1)]) ?
                          reg16[(4'hc):(4'h9)] : $unsigned((^(8'ha4)))) ?
                      reg19 : (^(reg24[(1'h1):(1'h0)] ?
                          (~&wire1[(4'hc):(4'h9)]) : $unsigned((|reg9)))));
  always
    @(posedge clk) begin
      for (forvar28 = (1'h0); (forvar28 < (2'h2)); forvar28 = (forvar28 + (1'h1)))
        begin
          for (forvar29 = (1'h0); (forvar29 < (2'h2)); forvar29 = (forvar29 + (1'h1)))
            begin
              reg30 <= (!$unsigned($signed($signed($unsigned(wire0)))));
              reg31 = (^(~wire2));
              reg32 <= $signed(wire26[(3'h6):(2'h2)]);
              reg33 = (~({($unsigned(reg32) ?
                          (wire2 ? reg22 : reg24) : (reg13 + reg19))} ?
                  (reg22[(1'h0):(1'h0)] ?
                      $unsigned(reg16[(3'h4):(1'h0)]) : forvar29) : forvar28));
              reg34 <= $signed(reg30);
            end
          reg35 = reg19;
          reg36 <= ((reg30[(4'h8):(3'h4)] >= $unsigned($unsigned((~|wire25)))) | forvar28[(3'h4):(1'h0)]);
        end
      reg37 <= ($signed(((+reg19) ?
          (-$signed(reg13)) : {reg32})) >>> $unsigned(((wire0[(4'ha):(3'h7)] < wire0) > ((reg32 ?
              reg33 : reg36) ?
          (&reg9) : (wire2 ? wire0 : wire1)))));
      if ($signed(reg32[(4'ha):(4'h8)]))
        begin
          reg38 <= {forvar29};
          for (forvar39 = (1'h0); (forvar39 < (1'h0)); forvar39 = (forvar39 + (1'h1)))
            begin
              reg40 <= (8'ha4);
              reg41 <= (~&forvar39);
            end
          reg42 = (!(~wire2[(2'h2):(2'h2)]));
          reg43 = (reg6 <= (({(reg37 ? reg22 : reg33), reg41} ?
              (~&{reg30,
                  forvar39}) : $signed(((8'hb4) ^ wire26))) - $unsigned(((reg34 ?
                  reg20 : wire25) ?
              (+wire27) : reg16[(5'h12):(4'h9)]))));
        end
      else
        begin
          reg39 = $unsigned(reg6);
          for (forvar40 = (1'h0); (forvar40 < (1'h1)); forvar40 = (forvar40 + (1'h1)))
            begin
              reg41 <= (~^($unsigned(reg20) ?
                  $unsigned($signed((reg23 ?
                      (8'hb6) : (8'ha6)))) : reg33[(4'he):(3'h5)]));
              reg44 <= forvar39;
              reg45 <= (^~{$unsigned((wire2[(2'h2):(1'h1)] && reg39[(1'h0):(1'h0)])),
                  ($signed((reg44 <= forvar40)) ?
                      (reg39 ?
                          (wire27 >> (8'ha3)) : reg23) : ($unsigned(forvar39) ?
                          wire27[(2'h3):(2'h3)] : (reg22 ? reg38 : reg37)))});
              reg46 = $signed($signed(wire1));
              reg47 <= {(|(reg35[(3'h4):(1'h0)] ? reg23[(1'h0):(1'h0)] : reg6)),
                  forvar28};
            end
          reg48 = $signed($signed({reg33}));
          for (forvar49 = (1'h0); (forvar49 < (3'h4)); forvar49 = (forvar49 + (1'h1)))
            begin
              reg50 <= {wire3, (8'hb0)};
              reg51 <= ((~^{(|reg34[(2'h2):(2'h2)])}) ^~ ((+(^$signed((8'ha9)))) ^ reg19[(1'h0):(1'h0)]));
              reg52 = $signed(((8'hbf) ?
                  $signed($unsigned(reg6)) : $signed(reg47)));
            end
          for (forvar53 = (1'h0); (forvar53 < (1'h1)); forvar53 = (forvar53 + (1'h1)))
            begin
              reg54 = $signed((&($unsigned((reg42 ? reg16 : reg37)) ^ ({reg51,
                  wire2} >>> $signed(wire27)))));
              reg55 = reg35;
            end
        end
    end
endmodule