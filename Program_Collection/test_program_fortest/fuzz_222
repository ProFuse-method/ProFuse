(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param45 = (~&((((8'ha5) | (8'had)) == {(8'hac)}) + ({(8'h9f)} > {(8'haf)}))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h34):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire0;
  input wire [(3'h4):(1'h0)] wire1;
  input wire signed [(4'h8):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire3;
  wire [(3'h5):(1'h0)] wire44;
  wire signed [(4'ha):(1'h0)] wire4;
  wire signed [(4'h8):(1'h0)] wire5;
  wire signed [(2'h3):(1'h0)] wire9;
  wire [(2'h2):(1'h0)] wire10;
  wire signed [(2'h2):(1'h0)] wire42;
  reg signed [(4'hb):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg7 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg8 = (1'h0);
  assign y = {wire44,
                 wire4,
                 wire5,
                 wire9,
                 wire10,
                 wire42,
                 reg6,
                 reg7,
                 reg8,
                 (1'h0)};
  assign wire4 = wire0;
  assign wire5 = $signed(((wire1[(2'h2):(1'h1)] >> (wire2 == wire0)) ?
                     $signed((!wire2)) : (wire0 ? $signed(wire4) : wire0)));
  always
    @(posedge clk) begin
      reg6 <= (wire1[(2'h3):(2'h2)] ?
          ((!(wire2 ?
              wire0 : wire4)) == ({wire5} >> $unsigned(wire3))) : $unsigned($unsigned(((8'ha8) ?
              wire5 : wire5))));
      reg7 <= wire3[(3'h6):(1'h0)];
      reg8 <= wire5[(3'h6):(2'h3)];
    end
  assign wire9 = (8'haf);
  assign wire10 = $unsigned(wire2);
  module11 #() modinst43 (wire42, clk, reg6, wire4, wire0, wire1);
  assign wire44 = $signed($unsigned(reg6[(4'h8):(3'h7)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11
#(parameter param41 = ((|(((8'ha0) ? (8'h9c) : (8'hab)) ? ((8'ha6) >>> (8'ha9)) : {(8'hac)})) ? (~&(((8'h9c) ? (8'ha8) : (8'ha0)) ? (~|(8'h9f)) : ((8'h9d) ? (8'h9c) : (8'hae)))) : {(-((8'haf) << (8'ha0)))}))
(y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h49):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire15;
  input wire signed [(4'ha):(1'h0)] wire14;
  input wire [(4'h9):(1'h0)] wire13;
  input wire signed [(3'h4):(1'h0)] wire12;
  wire signed [(3'h4):(1'h0)] wire40;
  wire [(3'h7):(1'h0)] wire37;
  wire [(2'h3):(1'h0)] wire36;
  wire signed [(3'h7):(1'h0)] wire34;
  wire signed [(3'h7):(1'h0)] wire19;
  wire [(4'h9):(1'h0)] wire18;
  wire [(4'hb):(1'h0)] wire17;
  wire [(3'h7):(1'h0)] wire16;
  reg signed [(4'h9):(1'h0)] reg39 = (1'h0);
  reg [(4'h8):(1'h0)] reg38 = (1'h0);
  assign y = {wire40,
                 wire37,
                 wire36,
                 wire34,
                 wire19,
                 wire18,
                 wire17,
                 wire16,
                 reg39,
                 reg38,
                 (1'h0)};
  assign wire16 = wire14[(4'h8):(3'h7)];
  assign wire17 = wire16[(3'h5):(3'h5)];
  assign wire18 = $signed((^wire15));
  assign wire19 = $unsigned(wire17);
  module20 #() modinst35 (wire34, clk, wire15, wire18, wire17, wire14);
  assign wire36 = {(^~((wire13 ? wire14 : wire14) ? wire18 : (8'haa)))};
  assign wire37 = $unsigned((^~($signed(wire36) ~^ (&wire13))));
  always
    @(posedge clk) begin
      if (({(&(wire16 ^ wire16))} ?
          wire18[(1'h0):(1'h0)] : $signed(wire17[(2'h2):(1'h1)])))
        begin
          if (({(+$unsigned(wire17))} ?
              ($unsigned((wire34 ?
                  (8'ha1) : wire13)) != $unsigned({wire12})) : {$signed((&wire14))}))
            begin
              reg38 <= (8'hae);
              reg39 <= $signed((($signed(wire18) ?
                  {wire14} : (|wire13)) ~^ wire15));
            end
          else
            begin
              reg38 <= {$unsigned(wire17)};
            end
        end
      else
        begin
          reg38 <= ($signed($unsigned(wire15[(3'h6):(1'h0)])) << (($unsigned((8'had)) > (~wire14)) == {(reg39 >>> wire14)}));
        end
    end
  assign wire40 = ((~$signed(wire17)) << (^~$unsigned(reg39)));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module20  (y, clk, wire24, wire23, wire22, wire21);
  output wire [(32'h38):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire24;
  input wire signed [(3'h6):(1'h0)] wire23;
  input wire [(4'hb):(1'h0)] wire22;
  input wire [(4'h9):(1'h0)] wire21;
  wire signed [(2'h3):(1'h0)] wire33;
  wire [(3'h7):(1'h0)] wire29;
  wire [(3'h6):(1'h0)] wire28;
  wire signed [(4'ha):(1'h0)] wire25;
  reg [(2'h2):(1'h0)] reg32 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg31 = (1'h0);
  reg [(3'h4):(1'h0)] reg30 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg27 = (1'h0);
  reg [(4'h9):(1'h0)] reg26 = (1'h0);
  assign y = {wire33,
                 wire29,
                 wire28,
                 wire25,
                 reg32,
                 reg31,
                 reg30,
                 reg27,
                 reg26,
                 (1'h0)};
  assign wire25 = $signed(wire22);
  always
    @(posedge clk) begin
      reg26 <= ($unsigned(wire25) >>> {$unsigned((wire22 ? wire23 : (8'had)))});
      reg27 <= (wire21[(2'h3):(2'h3)] <<< reg26[(1'h1):(1'h1)]);
    end
  assign wire28 = wire23;
  assign wire29 = wire23[(2'h2):(1'h0)];
  always
    @(posedge clk) begin
      if (($unsigned(((^wire24) - wire22[(4'ha):(3'h6)])) ?
          wire25 : $signed(($unsigned(wire24) < ((8'h9e) ? wire21 : (8'ha2))))))
        begin
          reg30 <= reg27[(4'h9):(3'h7)];
          reg31 <= (wire23 <<< $signed((!$unsigned((8'ha7)))));
        end
      else
        begin
          reg30 <= $unsigned({(reg27 ? $signed(reg30) : (^~wire21))});
          reg31 <= wire22[(4'hb):(2'h2)];
        end
      reg32 <= wire22[(4'h8):(3'h4)];
    end
  assign wire33 = reg26;
endmodule