(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h5b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire signed [(4'h8):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire signed [(4'ha):(1'h0)] wire56;
  wire [(3'h7):(1'h0)] wire55;
  wire [(3'h6):(1'h0)] wire54;
  wire signed [(4'h9):(1'h0)] wire51;
  wire [(4'ha):(1'h0)] wire50;
  wire [(3'h4):(1'h0)] wire49;
  wire signed [(3'h6):(1'h0)] wire48;
  wire [(3'h5):(1'h0)] wire44;
  wire [(4'ha):(1'h0)] wire42;
  reg [(2'h3):(1'h0)] reg53 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg52 = (1'h0);
  reg [(4'hb):(1'h0)] reg47 = (1'h0);
  reg [(2'h2):(1'h0)] reg46 = (1'h0);
  reg [(3'h4):(1'h0)] reg45 = (1'h0);
  assign y = {wire56,
                 wire55,
                 wire54,
                 wire51,
                 wire50,
                 wire49,
                 wire48,
                 wire44,
                 wire42,
                 reg53,
                 reg52,
                 reg47,
                 reg46,
                 reg45,
                 (1'h0)};
  module4 #() modinst43 (.wire6(wire3), .wire7(wire1), .wire8(wire2), .clk(clk), .wire5(wire0), .y(wire42));
  assign wire44 = (~&$unsigned((~^wire2)));
  always
    @(posedge clk) begin
      reg45 <= $unsigned({$unsigned(wire1)});
      reg46 <= ({wire44} || $signed({wire2[(1'h0):(1'h0)]}));
      reg47 <= ($signed($signed($signed((8'haf)))) ?
          ($unsigned((+(8'ha7))) + ((wire0 ? (8'ha6) : wire0) ?
              $unsigned((8'ha0)) : (~^(8'hae)))) : (wire44[(2'h2):(1'h0)] ?
              (8'ha1) : reg45));
    end
  assign wire48 = (((-(reg47 ? wire42 : reg45)) ?
                      wire3[(3'h6):(2'h2)] : ((8'ha8) * wire0)) ^ wire3[(2'h3):(2'h3)]);
  assign wire49 = wire48;
  assign wire50 = reg45;
  assign wire51 = reg47[(1'h0):(1'h0)];
  always
    @(posedge clk) begin
      reg52 <= (wire3[(3'h6):(2'h2)] || wire2[(3'h5):(2'h2)]);
    end
  always
    @(posedge clk) begin
      reg53 <= ({{$signed((8'hac))}} ?
          wire2[(1'h1):(1'h1)] : $unsigned((reg46[(2'h2):(1'h0)] << (!(8'ha6)))));
    end
  assign wire54 = wire2;
  assign wire55 = wire51[(2'h3):(1'h1)];
  assign wire56 = $unsigned($signed((~|reg47)));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4
#(parameter param41 = (((((8'ha2) ? (8'h9c) : (8'h9d)) ? (^(8'had)) : {(8'ha6)}) ? (8'hb0) : ((8'hae) ~^ (!(8'haa)))) ? ((^(~(8'ha0))) >> ((-(8'hae)) >= ((8'h9f) ? (8'ha1) : (8'hab)))) : ((8'had) ? ((8'ha0) <= ((8'ha4) ? (8'h9c) : (8'haf))) : (((8'ha8) ? (8'haf) : (8'hb0)) ? {(8'ha6)} : ((8'hac) ? (8'ha6) : (8'ha6))))))
(y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h90):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire8;
  input wire [(4'ha):(1'h0)] wire7;
  input wire signed [(4'ha):(1'h0)] wire6;
  input wire [(4'ha):(1'h0)] wire5;
  wire signed [(4'h9):(1'h0)] wire40;
  wire signed [(3'h4):(1'h0)] wire39;
  wire signed [(4'h9):(1'h0)] wire24;
  reg [(3'h6):(1'h0)] reg38 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg37 = (1'h0);
  reg [(4'hb):(1'h0)] reg36 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg35 = (1'h0);
  reg [(2'h3):(1'h0)] reg34 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg33 = (1'h0);
  reg [(3'h7):(1'h0)] reg32 = (1'h0);
  reg [(4'ha):(1'h0)] reg31 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg30 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg29 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg28 = (1'h0);
  reg [(4'h8):(1'h0)] reg27 = (1'h0);
  reg [(4'hb):(1'h0)] reg26 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg11 = (1'h0);
  reg [(4'h8):(1'h0)] reg10 = (1'h0);
  reg [(4'h8):(1'h0)] reg9 = (1'h0);
  assign y = {wire40,
                 wire39,
                 wire24,
                 reg38,
                 reg37,
                 reg36,
                 reg35,
                 reg34,
                 reg33,
                 reg32,
                 reg31,
                 reg30,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg11,
                 reg10,
                 reg9,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (wire7[(1'h0):(1'h0)])
        begin
          reg9 <= wire8;
          reg10 <= {wire5[(1'h0):(1'h0)]};
          reg11 <= {$unsigned(wire5[(3'h4):(1'h1)])};
        end
      else
        begin
          reg9 <= $signed((+(+(reg9 * wire8))));
        end
    end
  module12 #() modinst25 (wire24, clk, wire6, wire7, reg10, reg9);
  always
    @(posedge clk) begin
      if (($signed(wire8) ?
          ($unsigned($unsigned((8'h9c))) ~^ {(reg10 ? wire5 : wire8)}) : reg9))
        begin
          if ({reg9[(3'h6):(2'h2)]})
            begin
              reg26 <= ((wire8[(4'h8):(3'h5)] ?
                      $signed($unsigned(reg9)) : (reg9[(2'h2):(1'h0)] ?
                          wire8[(3'h7):(2'h2)] : reg10[(4'h8):(2'h2)])) ?
                  ((~^(+wire24)) ?
                      (!(~|reg11)) : $signed($signed(reg10))) : $unsigned($signed((reg9 ?
                      reg9 : reg10))));
              reg27 <= (&$signed(($signed(wire5) >>> $unsigned(wire6))));
            end
          else
            begin
              reg26 <= (~&reg10[(3'h4):(3'h4)]);
            end
          if (reg26[(1'h0):(1'h0)])
            begin
              reg28 <= $signed(((8'hae) ^~ {$signed(reg27)}));
              reg29 <= (8'hae);
              reg30 <= (wire24[(1'h1):(1'h1)] ?
                  (!(reg29[(2'h2):(1'h1)] << (reg10 ?
                      (8'haf) : wire6))) : ((+(~wire5)) ~^ reg28));
            end
          else
            begin
              reg28 <= {$unsigned((8'h9d))};
              reg29 <= $signed($signed($unsigned((~&reg10))));
            end
          if ((~|(~^reg29[(3'h7):(1'h0)])))
            begin
              reg31 <= {$unsigned(({reg10} ?
                      (&reg27) : (wire8 ? wire5 : reg27)))};
            end
          else
            begin
              reg31 <= (~|(((wire6 ? wire5 : reg31) ?
                      $signed(reg30) : $signed(reg11)) ?
                  wire5 : reg28));
              reg32 <= (wire8 != $unsigned(reg26[(3'h4):(1'h0)]));
            end
        end
      else
        begin
          reg26 <= $signed(($signed((reg27 ? (8'hae) : (8'haa))) ?
              ($unsigned(reg10) ?
                  (-reg29) : $unsigned(wire7)) : reg26[(3'h7):(3'h4)]));
          reg27 <= $signed((|((~^reg30) ?
              (wire6 ^~ reg32) : $unsigned(wire8))));
          reg28 <= reg9;
        end
    end
  always
    @(posedge clk) begin
      if (({$signed((wire7 >= reg11))} ^~ wire7[(3'h4):(2'h3)]))
        begin
          reg33 <= (8'hac);
          reg34 <= reg26[(2'h3):(2'h3)];
          if (reg30)
            begin
              reg35 <= wire5;
              reg36 <= (+(!((reg9 > reg11) << (reg10 ? reg29 : reg35))));
            end
          else
            begin
              reg35 <= (|$signed(reg31[(4'ha):(1'h0)]));
            end
        end
      else
        begin
          reg33 <= wire7[(3'h6):(3'h4)];
        end
      reg37 <= (reg11 ? $signed((8'h9c)) : $unsigned(reg11[(1'h1):(1'h0)]));
      reg38 <= ({$signed($unsigned((8'hab)))} ?
          $unsigned(((~^reg32) ?
              $signed(reg32) : $unsigned(reg33))) : (^~{(8'had)}));
    end
  assign wire39 = ($signed(reg35) - (&wire5));
  assign wire40 = ((^($signed(reg10) ~^ (reg37 != (8'hb0)))) ?
                      reg37 : (-($unsigned((8'h9d)) ?
                          (reg31 ? reg9 : reg37) : (reg26 <= reg26))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module12
#(parameter param23 = (~|((!(|(8'ha4))) ^ (~^((8'ha1) ? (8'ha8) : (8'h9f))))))
(y, clk, wire16, wire15, wire14, wire13);
  output wire [(32'h30):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire16;
  input wire signed [(4'ha):(1'h0)] wire15;
  input wire signed [(4'h8):(1'h0)] wire14;
  input wire signed [(4'h8):(1'h0)] wire13;
  wire signed [(4'ha):(1'h0)] wire22;
  wire signed [(4'h9):(1'h0)] wire21;
  wire signed [(4'hb):(1'h0)] wire20;
  wire [(3'h4):(1'h0)] wire18;
  wire signed [(3'h6):(1'h0)] wire17;
  reg [(3'h7):(1'h0)] reg19 = (1'h0);
  assign y = {wire22, wire21, wire20, wire18, wire17, reg19, (1'h0)};
  assign wire17 = wire13[(2'h3):(1'h0)];
  assign wire18 = {$unsigned(wire15)};
  always
    @(posedge clk) begin
      reg19 <= wire14;
    end
  assign wire20 = wire15[(3'h6):(1'h1)];
  assign wire21 = $signed((wire20[(3'h7):(2'h3)] >>> $signed($unsigned(wire17))));
  assign wire22 = $signed($signed({wire13}));
endmodule