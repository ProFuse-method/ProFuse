(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param318 = {(((((8'ha7) ? (8'hb5) : (8'ha1)) - ((8'haa) ? (8'hba) : (8'ha6))) ? ((~^(8'hba)) ? {(8'had), (8'haa)} : (^~(8'ha3))) : (((8'ha5) ? (8'hbd) : (8'hb6)) ? ((8'hbc) ? (8'hbe) : (8'ha2)) : ((7'h40) || (7'h44)))) ? ((^(8'haf)) ? (|(~^(8'hbc))) : (~^((8'ha4) ? (7'h41) : (8'hb7)))) : ((-((8'hac) << (8'hae))) ? (~((8'hb4) ? (8'hb3) : (7'h41))) : (8'hb8))), {(-((+(8'hbb)) | ((8'h9e) == (8'ha1))))}})
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h4e3):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire4;
  input wire [(4'hf):(1'h0)] wire3;
  input wire [(4'he):(1'h0)] wire2;
  input wire signed [(5'h10):(1'h0)] wire1;
  input wire signed [(5'h14):(1'h0)] wire0;
  wire signed [(5'h13):(1'h0)] wire280;
  wire [(4'h9):(1'h0)] wire252;
  wire signed [(5'h14):(1'h0)] wire251;
  wire signed [(3'h6):(1'h0)] wire250;
  wire [(4'hf):(1'h0)] wire249;
  wire [(5'h15):(1'h0)] wire233;
  wire [(5'h11):(1'h0)] wire232;
  wire signed [(4'h8):(1'h0)] wire231;
  wire signed [(5'h10):(1'h0)] wire230;
  wire signed [(4'ha):(1'h0)] wire229;
  wire signed [(5'h11):(1'h0)] wire228;
  wire signed [(4'hf):(1'h0)] wire121;
  wire signed [(4'h8):(1'h0)] wire5;
  wire [(4'he):(1'h0)] wire161;
  wire signed [(5'h14):(1'h0)] wire163;
  wire [(3'h4):(1'h0)] wire226;
  wire signed [(5'h13):(1'h0)] wire235;
  wire signed [(5'h14):(1'h0)] wire246;
  wire [(3'h5):(1'h0)] wire247;
  reg signed [(4'h8):(1'h0)] reg317 = (1'h0);
  reg [(4'he):(1'h0)] reg315 = (1'h0);
  reg [(2'h3):(1'h0)] reg312 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg311 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg306 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg304 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg299 = (1'h0);
  reg [(2'h3):(1'h0)] reg298 = (1'h0);
  reg [(3'h5):(1'h0)] reg292 = (1'h0);
  reg [(3'h6):(1'h0)] reg288 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg287 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg286 = (1'h0);
  reg [(5'h14):(1'h0)] reg285 = (1'h0);
  reg [(4'hb):(1'h0)] reg284 = (1'h0);
  reg [(4'h8):(1'h0)] reg282 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg279 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg278 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg277 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg276 = (1'h0);
  reg [(4'h9):(1'h0)] reg275 = (1'h0);
  reg [(4'ha):(1'h0)] reg274 = (1'h0);
  reg [(3'h6):(1'h0)] reg273 = (1'h0);
  reg [(5'h14):(1'h0)] reg269 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg266 = (1'h0);
  reg [(4'hc):(1'h0)] reg265 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg263 = (1'h0);
  reg [(5'h14):(1'h0)] reg260 = (1'h0);
  reg signed [(4'he):(1'h0)] reg258 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg257 = (1'h0);
  reg [(5'h13):(1'h0)] reg256 = (1'h0);
  reg [(4'hc):(1'h0)] reg255 = (1'h0);
  reg [(4'hc):(1'h0)] reg245 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg244 = (1'h0);
  reg [(4'ha):(1'h0)] reg242 = (1'h0);
  reg [(5'h11):(1'h0)] reg237 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg236 = (1'h0);
  reg [(4'hf):(1'h0)] reg11 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg12 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg13 = (1'h0);
  reg [(4'hf):(1'h0)] reg15 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg18 = (1'h0);
  reg [(5'h13):(1'h0)] reg19 = (1'h0);
  reg [(2'h3):(1'h0)] reg316 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar314 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar313 = (1'h0);
  reg [(3'h5):(1'h0)] forvar310 = (1'h0);
  reg [(5'h11):(1'h0)] reg309 = (1'h0);
  reg [(4'he):(1'h0)] reg308 = (1'h0);
  reg [(3'h7):(1'h0)] forvar307 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg305 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar303 = (1'h0);
  reg [(5'h15):(1'h0)] reg302 = (1'h0);
  reg [(3'h6):(1'h0)] reg301 = (1'h0);
  reg [(4'hb):(1'h0)] reg300 = (1'h0);
  reg [(5'h15):(1'h0)] forvar297 = (1'h0);
  reg [(3'h4):(1'h0)] forvar296 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg295 = (1'h0);
  reg [(4'ha):(1'h0)] reg294 = (1'h0);
  reg [(5'h12):(1'h0)] forvar293 = (1'h0);
  reg [(5'h10):(1'h0)] reg291 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar290 = (1'h0);
  reg [(4'hf):(1'h0)] reg289 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar283 = (1'h0);
  reg [(3'h7):(1'h0)] forvar281 = (1'h0);
  reg [(3'h4):(1'h0)] forvar272 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar271 = (1'h0);
  reg [(5'h14):(1'h0)] reg270 = (1'h0);
  reg [(4'hf):(1'h0)] reg268 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg267 = (1'h0);
  reg [(3'h6):(1'h0)] reg264 = (1'h0);
  reg [(2'h2):(1'h0)] reg262 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg261 = (1'h0);
  reg [(4'hb):(1'h0)] forvar259 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar254 = (1'h0);
  reg [(2'h3):(1'h0)] forvar253 = (1'h0);
  reg [(4'hd):(1'h0)] reg243 = (1'h0);
  reg [(3'h4):(1'h0)] reg241 = (1'h0);
  reg [(3'h5):(1'h0)] reg240 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar239 = (1'h0);
  reg [(5'h12):(1'h0)] forvar238 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg21 = (1'h0);
  reg [(4'hc):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar17 = (1'h0);
  reg [(2'h2):(1'h0)] forvar16 = (1'h0);
  reg [(4'hd):(1'h0)] reg14 = (1'h0);
  reg [(5'h12):(1'h0)] forvar10 = (1'h0);
  reg [(4'hb):(1'h0)] reg9 = (1'h0);
  reg [(4'ha):(1'h0)] reg8 = (1'h0);
  reg [(5'h12):(1'h0)] forvar7 = (1'h0);
  reg [(4'hc):(1'h0)] forvar6 = (1'h0);
  assign y = {wire280,
                 wire252,
                 wire251,
                 wire250,
                 wire249,
                 wire233,
                 wire232,
                 wire231,
                 wire230,
                 wire229,
                 wire228,
                 wire121,
                 wire5,
                 wire161,
                 wire163,
                 wire226,
                 wire235,
                 wire246,
                 wire247,
                 reg317,
                 reg315,
                 reg312,
                 reg311,
                 reg306,
                 reg304,
                 reg299,
                 reg298,
                 reg292,
                 reg288,
                 reg287,
                 reg286,
                 reg285,
                 reg284,
                 reg282,
                 reg279,
                 reg278,
                 reg277,
                 reg276,
                 reg275,
                 reg274,
                 reg273,
                 reg269,
                 reg266,
                 reg265,
                 reg263,
                 reg260,
                 reg258,
                 reg257,
                 reg256,
                 reg255,
                 reg245,
                 reg244,
                 reg242,
                 reg237,
                 reg236,
                 reg11,
                 reg12,
                 reg13,
                 reg15,
                 reg18,
                 reg19,
                 reg316,
                 forvar314,
                 forvar313,
                 forvar310,
                 reg309,
                 reg308,
                 forvar307,
                 reg305,
                 forvar303,
                 reg302,
                 reg301,
                 reg300,
                 forvar297,
                 forvar296,
                 reg295,
                 reg294,
                 forvar293,
                 reg291,
                 forvar290,
                 reg289,
                 forvar283,
                 forvar281,
                 forvar272,
                 forvar271,
                 reg270,
                 reg268,
                 reg267,
                 reg264,
                 reg262,
                 reg261,
                 forvar259,
                 forvar254,
                 forvar253,
                 reg243,
                 reg241,
                 reg240,
                 forvar239,
                 forvar238,
                 reg21,
                 reg20,
                 forvar17,
                 forvar16,
                 reg14,
                 forvar10,
                 reg9,
                 reg8,
                 forvar7,
                 forvar6,
                 (1'h0)};
  assign wire5 = wire0;
  always
    @(posedge clk) begin
      for (forvar6 = (1'h0); (forvar6 < (3'h4)); forvar6 = (forvar6 + (1'h1)))
        begin
          for (forvar7 = (1'h0); (forvar7 < (2'h2)); forvar7 = (forvar7 + (1'h1)))
            begin
              reg8 = (~^$signed($unsigned(wire3)));
            end
          reg9 = forvar7;
          for (forvar10 = (1'h0); (forvar10 < (1'h0)); forvar10 = (forvar10 + (1'h1)))
            begin
              reg11 <= (^(wire3[(4'hf):(1'h1)] & (|($signed(wire5) > $unsigned(forvar7)))));
              reg12 <= {$unsigned($unsigned($signed(reg8)))};
              reg13 <= ($unsigned(reg8) <= $signed(wire3));
              reg14 = (+$unsigned(reg11[(4'h9):(4'h9)]));
              reg15 <= ($signed($unsigned(((^~forvar10) ?
                  reg12[(1'h1):(1'h0)] : $signed(forvar10)))) - ($signed((!((8'hb3) ?
                      forvar6 : reg14))) ?
                  forvar7[(5'h12):(4'hf)] : $unsigned(reg11)));
            end
        end
      for (forvar16 = (1'h0); (forvar16 < (1'h0)); forvar16 = (forvar16 + (1'h1)))
        begin
          for (forvar17 = (1'h0); (forvar17 < (1'h0)); forvar17 = (forvar17 + (1'h1)))
            begin
              reg18 <= {reg13,
                  ({((forvar7 ^ wire5) ?
                          (reg12 ^ forvar17) : forvar7[(4'he):(2'h2)])} <= (^$signed($signed(reg14))))};
              reg19 <= reg12[(1'h1):(1'h0)];
              reg20 = $unsigned($signed($unsigned($unsigned(((8'h9e) <<< wire0)))));
              reg21 = {$signed($signed(forvar17)),
                  (reg12 ?
                      (((^(7'h44)) * $unsigned(wire2)) ?
                          {wire3[(1'h1):(1'h0)]} : ($signed(reg8) ?
                              wire0 : wire0)) : forvar7[(3'h7):(1'h0)])};
            end
        end
    end
  module22 #() modinst122 (.wire26(wire3), .wire24(reg13), .clk(clk), .wire27(wire2), .y(wire121), .wire23(wire4), .wire25(reg11));
  module123 #() modinst162 (.clk(clk), .wire127(reg18), .wire128(wire5), .wire125(reg15), .wire126(wire4), .y(wire161), .wire124(reg13));
  assign wire163 = $signed(wire0);
  module164 #() modinst227 (.wire168(wire4), .wire165(wire161), .clk(clk), .wire166(reg19), .wire169(wire0), .y(wire226), .wire167(reg11));
  assign wire228 = wire3[(4'hf):(4'hd)];
  assign wire229 = (wire0 ?
                       $unsigned((($signed(reg13) ?
                           reg12[(3'h7):(2'h3)] : {wire3,
                               wire121}) <<< wire226[(2'h2):(2'h2)])) : ((^~(|reg18)) >= (wire4[(1'h0):(1'h0)] ?
                           $signed(wire0[(4'hf):(4'hb)]) : {(~|wire4),
                               (^wire4)})));
  assign wire230 = reg11[(4'hd):(4'hb)];
  assign wire231 = (wire229[(2'h2):(1'h1)] ?
                       (~&$signed((|(wire230 ?
                           wire226 : wire5)))) : ((&(|reg11)) & wire226[(1'h0):(1'h0)]));
  assign wire232 = (($unsigned(wire1[(1'h1):(1'h1)]) * ((-reg11) >= (~&reg15[(4'hf):(3'h6)]))) <= {wire228[(4'hf):(4'h8)],
                       wire4[(2'h3):(2'h2)]});
  module29 #() modinst234 (wire233, clk, wire226, wire163, wire230, wire229, wire2);
  assign wire235 = ($unsigned((-$signed($unsigned(wire233)))) ?
                       {$signed((^(wire3 << wire4))),
                           reg18} : $unsigned(wire233[(5'h12):(4'hb)]));
  always
    @(posedge clk) begin
      reg236 <= (~^wire235[(4'hb):(3'h5)]);
      reg237 <= (|$signed((wire0[(4'h8):(2'h3)] ?
          reg13[(2'h2):(1'h0)] : ({wire229, wire233} * (~^wire161)))));
      for (forvar238 = (1'h0); (forvar238 < (2'h3)); forvar238 = (forvar238 + (1'h1)))
        begin
          for (forvar239 = (1'h0); (forvar239 < (1'h0)); forvar239 = (forvar239 + (1'h1)))
            begin
              reg240 = (|{reg237});
              reg241 = wire161[(4'hd):(4'hc)];
              reg242 <= (({(!(reg19 ? wire231 : wire121))} ?
                  (wire229 || $signed($signed(wire229))) : wire229) >= ((($signed(wire233) * $unsigned((8'ha2))) & $signed($unsigned(reg13))) ?
                  ({reg18, (!(8'hbd))} << {$signed(wire161),
                      {forvar239}}) : (wire232 + ((~|wire235) ?
                      wire5[(3'h5):(1'h1)] : (reg18 ? wire231 : wire226)))));
              reg243 = ($signed(({$unsigned(reg13)} ?
                  (^$unsigned(wire1)) : $signed(reg237[(4'he):(4'h9)]))) ^~ wire0[(4'hf):(4'hb)]);
              reg244 <= forvar238[(2'h3):(1'h1)];
            end
        end
      reg245 <= reg12;
    end
  assign wire246 = (((~(+(wire121 > (8'ha3)))) ?
                       (reg11[(2'h3):(1'h0)] ?
                           $unsigned((~&reg237)) : $signed($signed(reg15))) : {wire1}) & (~^reg13[(3'h7):(3'h4)]));
  module164 #() modinst248 (.wire169(reg237), .wire165(wire0), .wire168(wire233), .clk(clk), .y(wire247), .wire167(wire121), .wire166(reg12));
  assign wire249 = (+wire228);
  assign wire250 = $unsigned((!(wire1[(3'h4):(2'h2)] ?
                       wire230 : $unsigned(reg13[(3'h7):(1'h1)]))));
  assign wire251 = ($unsigned({(|$unsigned(wire249)),
                       reg12}) ^~ (+$unsigned($signed($signed(reg236)))));
  assign wire252 = (~($signed(((wire4 ?
                       wire5 : wire231) | (wire163 ^ wire5))) != wire251));
  always
    @(posedge clk) begin
      for (forvar253 = (1'h0); (forvar253 < (2'h3)); forvar253 = (forvar253 + (1'h1)))
        begin
          for (forvar254 = (1'h0); (forvar254 < (1'h0)); forvar254 = (forvar254 + (1'h1)))
            begin
              reg255 <= (~^$signed(wire231[(1'h0):(1'h0)]));
              reg256 <= {((&(wire235[(3'h7):(3'h7)] ^ (forvar253 + (8'hb3)))) ?
                      (~&reg12[(3'h6):(3'h4)]) : $unsigned((reg12 > reg18[(4'hb):(1'h0)])))};
              reg257 <= forvar254[(4'hf):(3'h7)];
              reg258 <= $signed(wire235);
            end
          for (forvar259 = (1'h0); (forvar259 < (1'h0)); forvar259 = (forvar259 + (1'h1)))
            begin
              reg260 <= $unsigned((~$unsigned(reg11)));
              reg261 = reg236;
              reg262 = ((&($unsigned((wire235 ? wire247 : wire2)) ?
                  (^~$signed((8'haa))) : {(!reg261)})) <<< wire231[(1'h0):(1'h0)]);
              reg263 <= $signed({(($unsigned(reg255) ?
                          $unsigned(reg11) : wire121) ?
                      (&(reg15 * (8'ha5))) : (~|((8'hb9) <= (8'h9e)))),
                  reg256[(4'hd):(3'h7)]});
              reg264 = wire230[(2'h3):(1'h0)];
            end
          if ($signed((^wire246[(2'h3):(2'h3)])))
            begin
              reg265 <= $unsigned((({((8'hae) || wire230),
                      $unsigned((8'ha4))} | $signed(reg11)) ?
                  $unsigned(($signed(reg244) ~^ $signed(reg258))) : forvar259));
              reg266 <= ((^(($unsigned(wire0) >= $unsigned(wire163)) | reg263)) ^~ $signed($unsigned({$unsigned(reg258),
                  (~^reg256)})));
            end
          else
            begin
              reg265 <= $unsigned((($signed((-reg11)) ?
                  forvar253[(1'h0):(1'h0)] : (~|(reg13 ?
                      wire249 : (8'ha8)))) | $signed((reg255 <= forvar254[(4'h8):(2'h2)]))));
              reg267 = (~^(7'h42));
              reg268 = $signed(reg267);
              reg269 <= reg237[(4'hb):(3'h4)];
              reg270 = (&(((^~$unsigned(reg11)) ?
                      wire252[(2'h3):(2'h2)] : ((reg255 > wire249) ?
                          $unsigned(reg268) : wire226[(3'h4):(1'h1)])) ?
                  {(((8'ha2) >>> wire232) >= (reg266 ?
                          reg267 : reg12))} : {reg266, (~((8'ha3) ~^ wire5))}));
            end
        end
      for (forvar271 = (1'h0); (forvar271 < (1'h0)); forvar271 = (forvar271 + (1'h1)))
        begin
          for (forvar272 = (1'h0); (forvar272 < (2'h2)); forvar272 = (forvar272 + (1'h1)))
            begin
              reg273 <= (reg258[(4'hb):(1'h1)] ?
                  ($signed((+$signed(reg256))) ^ reg263) : (-$signed($signed(((8'ha7) >= wire250)))));
              reg274 <= $signed($signed(($signed($signed(wire235)) ?
                  wire161 : wire252[(4'h8):(2'h3)])));
              reg275 <= $signed((reg274[(2'h3):(1'h0)] | $signed({$unsigned(reg266)})));
              reg276 <= reg11[(4'hd):(4'hd)];
              reg277 <= forvar254;
            end
          reg278 <= (^((|(reg255[(4'hc):(4'h8)] << (~&forvar254))) ?
              {wire1[(4'he):(4'h9)]} : $unsigned($signed((-reg274)))));
          reg279 <= wire233[(1'h0):(1'h0)];
        end
    end
  assign wire280 = (wire229[(3'h7):(1'h0)] < reg242[(1'h0):(1'h0)]);
  always
    @(posedge clk) begin
      for (forvar281 = (1'h0); (forvar281 < (2'h2)); forvar281 = (forvar281 + (1'h1)))
        begin
          reg282 <= (wire280 ? $unsigned(forvar281) : wire0[(3'h7):(3'h5)]);
          for (forvar283 = (1'h0); (forvar283 < (2'h2)); forvar283 = (forvar283 + (1'h1)))
            begin
              reg284 <= $unsigned($signed((&((reg242 ? wire5 : wire0) ?
                  (-reg255) : $signed(forvar283)))));
              reg285 <= wire230[(2'h2):(1'h0)];
              reg286 <= $unsigned({$unsigned((~&wire3))});
              reg287 <= ((reg275[(4'h8):(3'h6)] > (((wire226 ? reg15 : reg273) ?
                      $signed(reg18) : $unsigned(forvar281)) - $unsigned(reg13[(4'h8):(3'h5)]))) ?
                  ($unsigned((-$signed(wire228))) ?
                      (~&{$unsigned(forvar283)}) : $signed(reg275)) : (^reg266));
              reg288 <= wire246[(4'h8):(3'h4)];
            end
          reg289 = (~reg275);
          for (forvar290 = (1'h0); (forvar290 < (1'h1)); forvar290 = (forvar290 + (1'h1)))
            begin
              reg291 = $signed($signed((reg236 ?
                  reg265 : ((wire161 ? (8'hbd) : wire3) ?
                      $signed(reg287) : $unsigned(reg256)))));
              reg292 <= (~^((!wire5) << $unsigned(((wire249 ?
                      wire233 : reg236) ?
                  {reg13, wire163} : $unsigned(wire249)))));
            end
          for (forvar293 = (1'h0); (forvar293 < (2'h2)); forvar293 = (forvar293 + (1'h1)))
            begin
              reg294 = (^(reg277 ?
                  (forvar281[(1'h1):(1'h1)] ?
                      (reg292[(2'h3):(1'h1)] ?
                          $signed(wire1) : reg269) : {{reg291, reg245},
                          (+wire161)}) : wire231));
              reg295 = $unsigned((!$signed(((|reg289) ?
                  (wire249 << reg245) : (~reg237)))));
            end
        end
      for (forvar296 = (1'h0); (forvar296 < (1'h1)); forvar296 = (forvar296 + (1'h1)))
        begin
          for (forvar297 = (1'h0); (forvar297 < (2'h3)); forvar297 = (forvar297 + (1'h1)))
            begin
              reg298 <= $signed((reg287 ?
                  reg244 : ({(^(8'ha9)), (-(8'ha7))} & reg244[(3'h4):(2'h2)])));
              reg299 <= $unsigned(reg279[(3'h4):(2'h2)]);
              reg300 = wire251[(4'hf):(4'hb)];
              reg301 = {(!(8'hb5)),
                  ((~^((reg288 >>> forvar283) ? wire250 : {forvar297})) ?
                      ((|(-(7'h41))) * $signed({wire5, reg278})) : {((reg257 ?
                                  reg291 : reg255) ?
                              $unsigned((8'hb0)) : {reg300, reg18}),
                          (reg11 >= $signed(reg285))})};
            end
          reg302 = ((reg245 ?
              $signed($signed((reg294 >>> wire163))) : (~reg242)) <<< $unsigned(reg11[(3'h5):(2'h3)]));
          for (forvar303 = (1'h0); (forvar303 < (1'h1)); forvar303 = (forvar303 + (1'h1)))
            begin
              reg304 <= (((~^(~^$signed(reg260))) | (^{{wire161}})) >= (~^reg269[(5'h12):(3'h5)]));
              reg305 = {((+$unsigned((reg266 * reg299))) && $signed($unsigned((^~reg236)))),
                  $signed($unsigned((^wire249)))};
              reg306 <= (reg294 <= ((~|(^reg291)) ?
                  ((~wire235) ?
                      $signed({reg291,
                          reg265}) : $signed($signed(reg277))) : $signed(wire1[(4'he):(3'h6)])));
            end
          for (forvar307 = (1'h0); (forvar307 < (3'h4)); forvar307 = (forvar307 + (1'h1)))
            begin
              reg308 = $unsigned(reg291[(4'hf):(3'h6)]);
              reg309 = {$unsigned(wire3),
                  $unsigned((forvar296 + wire232[(4'h8):(1'h1)]))};
            end
          for (forvar310 = (1'h0); (forvar310 < (2'h3)); forvar310 = (forvar310 + (1'h1)))
            begin
              reg311 <= reg13[(2'h3):(1'h1)];
              reg312 <= {$signed($signed((~^(reg242 ~^ reg18)))),
                  (((~&(wire235 * reg308)) ? reg19 : wire1) ?
                      (reg257[(1'h0):(1'h0)] == (8'hab)) : ((-(8'ha7)) ?
                          $signed($unsigned(reg244)) : ($unsigned(reg298) ?
                              wire230 : $signed(reg298))))};
            end
        end
      for (forvar313 = (1'h0); (forvar313 < (1'h1)); forvar313 = (forvar313 + (1'h1)))
        begin
          for (forvar314 = (1'h0); (forvar314 < (1'h0)); forvar314 = (forvar314 + (1'h1)))
            begin
              reg315 <= reg263[(4'hd):(2'h2)];
              reg316 = ($signed(reg275) ?
                  $unsigned((|$unsigned(reg274))) : reg289[(4'h8):(3'h6)]);
              reg317 <= $signed(((wire2[(4'hb):(3'h5)] ?
                  (reg245 <<< (reg316 ?
                      reg288 : reg289)) : reg311[(1'h0):(1'h0)]) <<< wire1));
            end
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module164  (y, clk, wire165, wire166, wire167, wire168, wire169);
  output wire [(32'h120):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'he):(1'h0)] wire165;
  input wire signed [(5'h13):(1'h0)] wire166;
  input wire [(4'hf):(1'h0)] wire167;
  input wire signed [(3'h4):(1'h0)] wire168;
  input wire [(4'hf):(1'h0)] wire169;
  wire [(5'h13):(1'h0)] wire225;
  wire signed [(3'h4):(1'h0)] wire224;
  wire [(4'h8):(1'h0)] wire223;
  wire signed [(5'h15):(1'h0)] wire221;
  reg signed [(4'h8):(1'h0)] reg174 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg175 = (1'h0);
  reg [(3'h6):(1'h0)] reg179 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg180 = (1'h0);
  reg [(4'ha):(1'h0)] reg182 = (1'h0);
  reg [(3'h5):(1'h0)] reg185 = (1'h0);
  reg [(5'h11):(1'h0)] reg186 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg188 = (1'h0);
  reg [(4'hb):(1'h0)] reg189 = (1'h0);
  reg [(4'hb):(1'h0)] reg191 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg192 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg194 = (1'h0);
  reg [(4'h9):(1'h0)] forvar193 = (1'h0);
  reg [(2'h3):(1'h0)] reg190 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar187 = (1'h0);
  reg [(4'h9):(1'h0)] reg184 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg183 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar181 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg178 = (1'h0);
  reg [(4'ha):(1'h0)] forvar177 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg176 = (1'h0);
  reg [(2'h2):(1'h0)] reg173 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg172 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar171 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar170 = (1'h0);
  assign y = {wire225,
                 wire224,
                 wire223,
                 wire221,
                 reg174,
                 reg175,
                 reg179,
                 reg180,
                 reg182,
                 reg185,
                 reg186,
                 reg188,
                 reg189,
                 reg191,
                 reg192,
                 reg194,
                 forvar193,
                 reg190,
                 forvar187,
                 reg184,
                 reg183,
                 forvar181,
                 reg178,
                 forvar177,
                 reg176,
                 reg173,
                 reg172,
                 forvar171,
                 forvar170,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar170 = (1'h0); (forvar170 < (1'h0)); forvar170 = (forvar170 + (1'h1)))
        begin
          for (forvar171 = (1'h0); (forvar171 < (2'h2)); forvar171 = (forvar171 + (1'h1)))
            begin
              reg172 = (((~|((-wire166) ? wire168 : $signed(wire169))) ?
                  $unsigned(forvar171) : $signed((forvar171[(1'h1):(1'h1)] > forvar171))) & (((~&(wire168 ?
                      wire168 : wire165)) ?
                  (((8'hb3) ? wire167 : wire166) ?
                      $signed(wire167) : wire166) : (^wire168[(1'h0):(1'h0)])) & $signed($unsigned((forvar170 | forvar170)))));
              reg173 = $unsigned((8'ha0));
              reg174 <= $signed((8'h9e));
              reg175 <= wire169;
              reg176 = ($unsigned(wire168) > reg173[(1'h1):(1'h0)]);
            end
          for (forvar177 = (1'h0); (forvar177 < (1'h1)); forvar177 = (forvar177 + (1'h1)))
            begin
              reg178 = forvar171[(2'h2):(2'h2)];
              reg179 <= (+{(reg176 && $unsigned($unsigned(wire168)))});
              reg180 <= reg179;
            end
          for (forvar181 = (1'h0); (forvar181 < (2'h3)); forvar181 = (forvar181 + (1'h1)))
            begin
              reg182 <= $signed((~&(reg180 >= ((forvar181 ?
                  (8'hb5) : reg173) * $signed(reg173)))));
              reg183 = ((forvar181 ?
                      ((~&$unsigned(reg174)) ?
                          ((!wire165) ?
                              (reg178 >>> reg182) : reg173) : wire167[(3'h7):(3'h5)]) : $signed(reg175[(1'h0):(1'h0)])) ?
                  (-($signed({forvar177, forvar171}) ?
                      ({reg172,
                          (8'ha4)} | wire169[(4'hc):(4'ha)]) : (reg176 >= (|wire168)))) : $signed($signed({(wire167 ?
                          (8'hb3) : wire166),
                      $unsigned(reg173)})));
              reg184 = $unsigned($unsigned(($signed((forvar177 ?
                  forvar177 : wire165)) >> ($unsigned(reg183) >>> $signed(reg173)))));
              reg185 <= ((wire165 & (~^$unsigned($unsigned(forvar170)))) <= (+reg175[(4'hb):(3'h6)]));
              reg186 <= (wire165[(3'h5):(2'h2)] ?
                  {(^~$unsigned((!(8'ha8))))} : ({reg185,
                      wire168[(1'h0):(1'h0)]} ^ $signed(reg178[(2'h3):(2'h3)])));
            end
          for (forvar187 = (1'h0); (forvar187 < (2'h2)); forvar187 = (forvar187 + (1'h1)))
            begin
              reg188 <= forvar171[(2'h3):(2'h2)];
              reg189 <= ((+wire168[(2'h2):(2'h2)]) ^~ reg179);
              reg190 = reg179[(3'h5):(2'h3)];
              reg191 <= (^reg190);
              reg192 <= $signed((forvar181 ?
                  (&reg180) : $unsigned((((8'h9d) ?
                      (8'hae) : reg178) <= {reg180}))));
            end
          for (forvar193 = (1'h0); (forvar193 < (2'h2)); forvar193 = (forvar193 + (1'h1)))
            begin
              reg194 = (~^$unsigned((((forvar171 ? forvar170 : (8'hb6)) ?
                  $unsigned(reg192) : (^~reg190)) ^~ $signed($signed(forvar177)))));
            end
        end
    end
  module195 #() modinst222 (.wire197(wire168), .clk(clk), .wire196(reg179), .y(wire221), .wire198(wire165), .wire199(wire166));
  assign wire223 = reg191;
  assign wire224 = (~|wire165);
  assign wire225 = $signed($signed({({wire167} >= $unsigned((7'h40))),
                       {$signed(reg175), (reg175 << wire169)}}));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module123  (y, clk, wire128, wire127, wire126, wire125, wire124);
  output wire [(32'h158):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire128;
  input wire signed [(5'h14):(1'h0)] wire127;
  input wire signed [(3'h6):(1'h0)] wire126;
  input wire [(3'h4):(1'h0)] wire125;
  input wire [(3'h4):(1'h0)] wire124;
  wire signed [(4'hd):(1'h0)] wire160;
  wire signed [(5'h13):(1'h0)] wire159;
  wire [(5'h11):(1'h0)] wire158;
  wire signed [(2'h3):(1'h0)] wire129;
  reg signed [(5'h15):(1'h0)] reg155 = (1'h0);
  reg [(4'hd):(1'h0)] reg154 = (1'h0);
  reg [(3'h5):(1'h0)] reg151 = (1'h0);
  reg [(4'hc):(1'h0)] reg150 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg146 = (1'h0);
  reg signed [(4'he):(1'h0)] reg144 = (1'h0);
  reg [(3'h4):(1'h0)] reg142 = (1'h0);
  reg [(5'h10):(1'h0)] reg140 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg138 = (1'h0);
  reg [(2'h3):(1'h0)] reg137 = (1'h0);
  reg [(5'h11):(1'h0)] reg136 = (1'h0);
  reg [(4'ha):(1'h0)] reg135 = (1'h0);
  reg [(2'h3):(1'h0)] reg157 = (1'h0);
  reg [(4'h8):(1'h0)] forvar156 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar153 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar152 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar149 = (1'h0);
  reg [(3'h6):(1'h0)] forvar148 = (1'h0);
  reg [(4'he):(1'h0)] reg147 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg145 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar143 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg141 = (1'h0);
  reg [(3'h6):(1'h0)] reg139 = (1'h0);
  reg [(4'ha):(1'h0)] reg134 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar133 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg132 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar131 = (1'h0);
  reg [(4'hd):(1'h0)] forvar130 = (1'h0);
  assign y = {wire160,
                 wire159,
                 wire158,
                 wire129,
                 reg155,
                 reg154,
                 reg151,
                 reg150,
                 reg146,
                 reg144,
                 reg142,
                 reg140,
                 reg138,
                 reg137,
                 reg136,
                 reg135,
                 reg157,
                 forvar156,
                 forvar153,
                 forvar152,
                 forvar149,
                 forvar148,
                 reg147,
                 reg145,
                 forvar143,
                 reg141,
                 reg139,
                 reg134,
                 forvar133,
                 reg132,
                 forvar131,
                 forvar130,
                 (1'h0)};
  assign wire129 = wire124[(3'h4):(2'h2)];
  always
    @(posedge clk) begin
      for (forvar130 = (1'h0); (forvar130 < (1'h1)); forvar130 = (forvar130 + (1'h1)))
        begin
          for (forvar131 = (1'h0); (forvar131 < (2'h2)); forvar131 = (forvar131 + (1'h1)))
            begin
              reg132 = {(!wire127),
                  ((+$unsigned($unsigned(forvar131))) ?
                      $unsigned($signed((wire124 & forvar130))) : (8'ha5))};
            end
          for (forvar133 = (1'h0); (forvar133 < (2'h2)); forvar133 = (forvar133 + (1'h1)))
            begin
              reg134 = (($unsigned(forvar133) & $signed((wire126 ?
                  $signed(wire129) : (^(8'ha0))))) || ($unsigned(forvar130) + (~|forvar131[(1'h0):(1'h0)])));
              reg135 <= {($signed(($signed(wire127) >>> $signed(wire125))) ?
                      (!forvar131[(3'h7):(3'h5)]) : ({$unsigned(reg134),
                          $unsigned(forvar131)} >= ($unsigned(forvar130) ?
                          reg134[(3'h5):(2'h3)] : $signed(forvar133)))),
                  forvar133};
              reg136 <= ($unsigned((((reg135 <= (8'hab)) + wire129[(1'h0):(1'h0)]) >>> (forvar133[(3'h6):(3'h5)] ?
                      (forvar133 >= wire127) : {wire126}))) ?
                  (-(+(-$unsigned(wire126)))) : (~$signed(((+(8'hb4)) ?
                      $signed((8'ha8)) : (+wire124)))));
              reg137 <= ($unsigned($unsigned(forvar130[(4'h9):(3'h6)])) << (~|$unsigned(forvar131)));
              reg138 <= (-(forvar130[(1'h0):(1'h0)] ?
                  ((+$signed(wire125)) & (wire129 <= $signed(reg135))) : wire129));
            end
          if (($unsigned(reg132) ?
              ((~^(&reg137)) ?
                  $signed($unsigned(wire124[(3'h4):(2'h3)])) : (~wire126[(1'h1):(1'h1)])) : forvar133))
            begin
              reg139 = {wire127, reg136};
              reg140 <= $signed(reg132);
              reg141 = wire124;
            end
          else
            begin
              reg140 <= forvar130[(3'h4):(2'h2)];
              reg142 <= $unsigned({reg136});
            end
          for (forvar143 = (1'h0); (forvar143 < (2'h3)); forvar143 = (forvar143 + (1'h1)))
            begin
              reg144 <= $signed((($unsigned({reg141, reg138}) ?
                  (forvar130 ~^ ((8'hb7) >> wire129)) : reg138[(4'hc):(3'h4)]) <<< $signed(reg132[(3'h6):(3'h6)])));
              reg145 = (~$unsigned((8'hac)));
              reg146 <= reg145;
              reg147 = reg138[(1'h1):(1'h1)];
            end
        end
      for (forvar148 = (1'h0); (forvar148 < (2'h3)); forvar148 = (forvar148 + (1'h1)))
        begin
          for (forvar149 = (1'h0); (forvar149 < (2'h3)); forvar149 = (forvar149 + (1'h1)))
            begin
              reg150 <= (|wire129[(2'h3):(2'h3)]);
              reg151 <= forvar131[(2'h2):(1'h1)];
            end
        end
      for (forvar152 = (1'h0); (forvar152 < (2'h3)); forvar152 = (forvar152 + (1'h1)))
        begin
          for (forvar153 = (1'h0); (forvar153 < (3'h4)); forvar153 = (forvar153 + (1'h1)))
            begin
              reg154 <= (~|reg134);
              reg155 <= $signed((reg150[(3'h4):(2'h3)] ?
                  (((8'ha3) ^~ reg147) ?
                      reg146[(4'hd):(4'hc)] : (~|(forvar148 ?
                          wire124 : wire127))) : (8'hba)));
            end
          for (forvar156 = (1'h0); (forvar156 < (2'h2)); forvar156 = (forvar156 + (1'h1)))
            begin
              reg157 = ((&$unsigned(($unsigned(forvar156) ?
                      (~&reg142) : (reg145 || reg150)))) ?
                  $signed((!{(^~reg145),
                      (7'h44)})) : ((~&{(forvar153 ^~ reg151),
                      (-reg134)}) & (forvar153[(4'hf):(4'h8)] <<< $unsigned({reg140,
                      (8'hbe)}))));
            end
        end
    end
  assign wire158 = reg136[(2'h2):(1'h0)];
  assign wire159 = {$signed(($signed(reg144) ?
                           $unsigned($signed((7'h40))) : (wire125 && {wire158,
                               wire124}))),
                       (^~(reg155[(5'h15):(5'h11)] ~^ (((8'ha5) ?
                           reg150 : reg136) & ((8'h9c) >>> reg135))))};
  assign wire160 = reg154[(3'h6):(2'h3)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module22  (y, clk, wire27, wire26, wire25, wire24, wire23);
  output wire [(32'h9d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire27;
  input wire [(4'hd):(1'h0)] wire26;
  input wire signed [(4'h8):(1'h0)] wire25;
  input wire signed [(5'h13):(1'h0)] wire24;
  input wire [(4'h9):(1'h0)] wire23;
  wire signed [(5'h15):(1'h0)] wire120;
  wire [(2'h2):(1'h0)] wire119;
  wire [(4'h9):(1'h0)] wire118;
  wire [(4'hd):(1'h0)] wire117;
  wire signed [(3'h6):(1'h0)] wire116;
  wire signed [(4'h8):(1'h0)] wire115;
  wire [(3'h6):(1'h0)] wire114;
  wire [(3'h4):(1'h0)] wire113;
  wire signed [(4'h9):(1'h0)] wire95;
  wire signed [(5'h15):(1'h0)] wire28;
  wire [(5'h15):(1'h0)] wire97;
  wire signed [(5'h15):(1'h0)] wire98;
  wire signed [(4'hf):(1'h0)] wire111;
  assign y = {wire120,
                 wire119,
                 wire118,
                 wire117,
                 wire116,
                 wire115,
                 wire114,
                 wire113,
                 wire95,
                 wire28,
                 wire97,
                 wire98,
                 wire111,
                 (1'h0)};
  assign wire28 = wire23[(1'h0):(1'h0)];
  module29 #() modinst96 (wire95, clk, wire27, wire24, wire28, wire26, wire23);
  assign wire97 = $signed(((~&$unsigned((wire24 && wire26))) ?
                      $unsigned($signed($unsigned(wire26))) : $signed($unsigned({wire27}))));
  assign wire98 = wire95;
  module99 #() modinst112 (wire111, clk, wire27, wire24, wire97, wire25, wire23);
  assign wire113 = {$unsigned($unsigned(wire25))};
  assign wire114 = (!$signed(($unsigned(wire113) ?
                       (~|$unsigned(wire27)) : (8'hae))));
  assign wire115 = wire26;
  assign wire116 = (^((~|wire25[(3'h5):(3'h4)]) ?
                       wire98[(4'hb):(3'h5)] : ((~&wire113) + $unsigned((wire28 ?
                           wire111 : wire97)))));
  assign wire117 = ({wire97} ? wire26 : $signed((8'hab)));
  assign wire118 = $unsigned(($signed((~|(wire97 ? wire116 : wire115))) ?
                       ($signed((wire24 ? wire113 : (8'ha8))) ?
                           (~^(wire117 && wire116)) : {(wire97 ^~ wire27),
                               (wire25 <<< (8'haa))}) : wire113));
  assign wire119 = (!$unsigned(((!(wire118 << wire23)) ?
                       (+{wire97}) : {(wire118 >>> wire23),
                           (wire114 ? wire117 : wire113)})));
  assign wire120 = (((^(~{wire114})) ?
                       wire27 : ((wire25[(3'h6):(3'h6)] > {wire115}) << wire95)) | $unsigned(wire118[(4'h8):(3'h6)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module99
#(parameter param109 = ((|(^(((8'h9d) && (8'hbd)) ? ((8'ha8) && (8'haf)) : (8'ha1)))) && (!{(((8'hbb) + (8'ha3)) ? ((8'ha4) ? (8'ha5) : (8'hb5)) : ((8'hb5) ? (8'h9d) : (8'hbc)))})), 
parameter param110 = param109)
(y, clk, wire104, wire103, wire102, wire101, wire100);
  output wire [(32'h2d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire104;
  input wire [(4'h8):(1'h0)] wire103;
  input wire signed [(5'h14):(1'h0)] wire102;
  input wire signed [(4'h8):(1'h0)] wire101;
  input wire [(4'h9):(1'h0)] wire100;
  wire [(4'hd):(1'h0)] wire108;
  wire signed [(3'h6):(1'h0)] wire107;
  wire signed [(4'h8):(1'h0)] wire106;
  wire signed [(5'h11):(1'h0)] wire105;
  assign y = {wire108, wire107, wire106, wire105, (1'h0)};
  assign wire105 = (($unsigned({$signed((8'haa))}) ?
                       $signed(($unsigned((8'hb3)) && (wire102 ~^ wire100))) : ($unsigned((wire104 ^ wire100)) ?
                           $signed($unsigned(wire100)) : $unsigned($signed(wire102)))) <<< wire103);
  assign wire106 = wire101;
  assign wire107 = (~|((({wire104} <= wire100) ?
                       (((8'hab) < wire103) ?
                           $signed(wire102) : (wire104 * wire105)) : $unsigned((wire100 ?
                           wire105 : wire101))) * $signed(wire105)));
  assign wire108 = ((~(wire107[(1'h0):(1'h0)] ?
                       $unsigned((|wire100)) : wire103)) <= (^~(((~|wire106) ?
                           $unsigned(wire103) : wire101[(2'h3):(2'h2)]) ?
                       $unsigned((wire104 ~^ wire107)) : ($unsigned(wire103) ?
                           wire106 : $unsigned(wire100)))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module29  (y, clk, wire34, wire33, wire32, wire31, wire30);
  output wire [(32'h2bb):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire34;
  input wire signed [(5'h13):(1'h0)] wire33;
  input wire signed [(5'h10):(1'h0)] wire32;
  input wire signed [(4'ha):(1'h0)] wire31;
  input wire [(4'h8):(1'h0)] wire30;
  wire [(4'hc):(1'h0)] wire50;
  wire [(4'ha):(1'h0)] wire49;
  wire [(5'h11):(1'h0)] wire48;
  wire signed [(4'hd):(1'h0)] wire47;
  wire [(3'h6):(1'h0)] wire38;
  wire [(4'hc):(1'h0)] wire37;
  wire [(5'h11):(1'h0)] wire36;
  wire [(5'h13):(1'h0)] wire35;
  reg signed [(5'h10):(1'h0)] reg94 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg93 = (1'h0);
  reg [(5'h11):(1'h0)] reg91 = (1'h0);
  reg [(5'h10):(1'h0)] reg89 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg88 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg87 = (1'h0);
  reg [(4'he):(1'h0)] reg85 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg84 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg82 = (1'h0);
  reg [(5'h13):(1'h0)] reg81 = (1'h0);
  reg [(3'h4):(1'h0)] reg76 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg74 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg73 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg70 = (1'h0);
  reg [(2'h2):(1'h0)] reg68 = (1'h0);
  reg [(3'h6):(1'h0)] reg67 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg66 = (1'h0);
  reg [(5'h13):(1'h0)] reg64 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg63 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg61 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg60 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg58 = (1'h0);
  reg [(4'ha):(1'h0)] reg56 = (1'h0);
  reg [(4'hd):(1'h0)] reg55 = (1'h0);
  reg [(5'h13):(1'h0)] reg53 = (1'h0);
  reg [(4'hb):(1'h0)] reg46 = (1'h0);
  reg [(4'hb):(1'h0)] reg43 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg39 = (1'h0);
  reg [(2'h3):(1'h0)] reg92 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar90 = (1'h0);
  reg [(4'he):(1'h0)] forvar86 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg83 = (1'h0);
  reg [(3'h4):(1'h0)] forvar80 = (1'h0);
  reg [(2'h2):(1'h0)] forvar79 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg78 = (1'h0);
  reg [(4'hc):(1'h0)] reg77 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg75 = (1'h0);
  reg [(2'h2):(1'h0)] reg72 = (1'h0);
  reg [(3'h6):(1'h0)] forvar71 = (1'h0);
  reg [(5'h15):(1'h0)] forvar69 = (1'h0);
  reg [(5'h13):(1'h0)] forvar65 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg62 = (1'h0);
  reg [(4'h8):(1'h0)] forvar59 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg57 = (1'h0);
  reg [(3'h5):(1'h0)] reg54 = (1'h0);
  reg [(4'h8):(1'h0)] forvar52 = (1'h0);
  reg [(3'h4):(1'h0)] forvar51 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg45 = (1'h0);
  reg [(4'he):(1'h0)] reg44 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg42 = (1'h0);
  reg [(4'hb):(1'h0)] forvar41 = (1'h0);
  reg [(4'hc):(1'h0)] forvar40 = (1'h0);
  assign y = {wire50,
                 wire49,
                 wire48,
                 wire47,
                 wire38,
                 wire37,
                 wire36,
                 wire35,
                 reg94,
                 reg93,
                 reg91,
                 reg89,
                 reg88,
                 reg87,
                 reg85,
                 reg84,
                 reg82,
                 reg81,
                 reg76,
                 reg74,
                 reg73,
                 reg70,
                 reg68,
                 reg67,
                 reg66,
                 reg64,
                 reg63,
                 reg61,
                 reg60,
                 reg58,
                 reg56,
                 reg55,
                 reg53,
                 reg46,
                 reg43,
                 reg39,
                 reg92,
                 forvar90,
                 forvar86,
                 reg83,
                 forvar80,
                 forvar79,
                 reg78,
                 reg77,
                 reg75,
                 reg72,
                 forvar71,
                 forvar69,
                 forvar65,
                 reg62,
                 forvar59,
                 reg57,
                 reg54,
                 forvar52,
                 forvar51,
                 reg45,
                 reg44,
                 reg42,
                 forvar41,
                 forvar40,
                 (1'h0)};
  assign wire35 = $unsigned(wire30[(3'h7):(3'h4)]);
  assign wire36 = $signed(wire34);
  assign wire37 = (wire31[(1'h1):(1'h1)] ?
                      $unsigned((!(&((8'haa) ^~ wire31)))) : wire30[(4'h8):(1'h1)]);
  assign wire38 = (8'haf);
  always
    @(posedge clk) begin
      reg39 <= ((~($signed(wire31[(2'h2):(1'h1)]) << (|{wire37}))) | ({$unsigned($unsigned(wire33))} && ((+{wire37}) ?
          ($unsigned(wire38) ^~ wire35) : {(wire30 - (8'hb4)),
              (wire37 - wire38)})));
      for (forvar40 = (1'h0); (forvar40 < (1'h0)); forvar40 = (forvar40 + (1'h1)))
        begin
          for (forvar41 = (1'h0); (forvar41 < (2'h2)); forvar41 = (forvar41 + (1'h1)))
            begin
              reg42 = $signed(reg39);
              reg43 <= wire34;
              reg44 = reg43;
              reg45 = (~($unsigned($signed((wire30 >>> reg43))) ?
                  ($signed((wire31 ? (8'hb0) : forvar40)) ?
                      {$unsigned(wire33)} : (-$signed(reg44))) : (~&$signed($unsigned(wire38)))));
            end
        end
      reg46 <= ({wire32} ~^ wire34);
    end
  assign wire47 = {$signed((!((reg43 ^ reg43) ?
                          $unsigned(wire33) : {wire34, (7'h43)}))),
                      $signed(wire36[(4'hc):(3'h4)])};
  assign wire48 = $signed(wire31[(4'ha):(2'h3)]);
  assign wire49 = (wire32[(5'h10):(4'hb)] ? wire48[(4'h8):(3'h5)] : reg43);
  assign wire50 = (~&wire47[(4'ha):(1'h0)]);
  always
    @(posedge clk) begin
      for (forvar51 = (1'h0); (forvar51 < (1'h1)); forvar51 = (forvar51 + (1'h1)))
        begin
          for (forvar52 = (1'h0); (forvar52 < (2'h3)); forvar52 = (forvar52 + (1'h1)))
            begin
              reg53 <= wire48;
              reg54 = $signed((~^$signed({$unsigned(wire50)})));
              reg55 <= wire48[(4'hf):(4'hc)];
              reg56 <= wire48[(1'h1):(1'h0)];
              reg57 = {(^(|$unsigned((!reg39)))), {wire35}};
            end
          reg58 <= {$signed((|(8'hb6))),
              $unsigned((~^{{wire37, reg54}, $signed(wire35)}))};
          for (forvar59 = (1'h0); (forvar59 < (1'h0)); forvar59 = (forvar59 + (1'h1)))
            begin
              reg60 <= reg55;
              reg61 <= wire30;
              reg62 = wire37;
              reg63 <= $signed({($signed((wire48 + wire49)) != reg43)});
              reg64 <= ({reg39[(4'ha):(3'h6)]} ?
                  $unsigned($unsigned((~^reg55[(4'ha):(3'h5)]))) : $signed($unsigned(wire38[(3'h4):(1'h0)])));
            end
          for (forvar65 = (1'h0); (forvar65 < (1'h0)); forvar65 = (forvar65 + (1'h1)))
            begin
              reg66 <= $unsigned($unsigned($signed(wire38[(1'h0):(1'h0)])));
              reg67 <= (|$unsigned($unsigned((+$signed((8'ha5))))));
              reg68 <= (-$signed($unsigned(($signed(wire37) ?
                  $signed(wire47) : $unsigned(reg57)))));
            end
        end
      for (forvar69 = (1'h0); (forvar69 < (3'h4)); forvar69 = (forvar69 + (1'h1)))
        begin
          reg70 <= ($unsigned(($unsigned((|reg66)) == ((reg68 ?
              reg66 : wire31) == ((8'ha4) | reg63)))) ^~ $signed({(-reg67)}));
          for (forvar71 = (1'h0); (forvar71 < (1'h1)); forvar71 = (forvar71 + (1'h1)))
            begin
              reg72 = $signed(forvar69[(4'hb):(3'h4)]);
              reg73 <= (~|$unsigned({($signed(reg54) << forvar52),
                  ((|reg60) ? {wire50, forvar52} : (reg39 ? wire49 : reg67))}));
              reg74 <= $signed(((~^wire38) >>> ({(reg39 ? (8'haa) : reg43)} ?
                  (wire50[(2'h2):(1'h1)] ?
                      (~&forvar51) : reg43[(4'hb):(2'h2)]) : (^(reg54 ?
                      wire50 : reg66)))));
              reg75 = forvar65[(4'hf):(4'ha)];
            end
          reg76 <= (reg62[(3'h6):(2'h2)] ^~ (+{reg61[(4'ha):(4'h9)]}));
          reg77 = (&wire30);
          reg78 = wire30;
        end
      for (forvar79 = (1'h0); (forvar79 < (1'h1)); forvar79 = (forvar79 + (1'h1)))
        begin
          for (forvar80 = (1'h0); (forvar80 < (3'h4)); forvar80 = (forvar80 + (1'h1)))
            begin
              reg81 <= {((&(7'h40)) ~^ $signed({$signed(reg77)}))};
              reg82 <= forvar69[(3'h5):(1'h0)];
              reg83 = (!wire47);
              reg84 <= reg43;
              reg85 <= ((((-forvar79[(1'h1):(1'h1)]) ?
                      (~|(wire33 << (8'hbc))) : wire48) ?
                  (($signed(wire35) ? $signed(reg57) : reg54[(1'h1):(1'h0)]) ?
                      wire32[(2'h3):(1'h0)] : ((~reg81) & (reg54 <= reg63))) : ({wire34,
                      wire33[(1'h1):(1'h0)]} ^ (!wire30[(1'h1):(1'h1)]))) * {({(reg39 | forvar71)} ?
                      ($unsigned(reg61) ? $unsigned(reg78) : wire30) : reg46)});
            end
          for (forvar86 = (1'h0); (forvar86 < (3'h4)); forvar86 = (forvar86 + (1'h1)))
            begin
              reg87 <= $unsigned(reg56);
              reg88 <= reg66;
            end
          reg89 <= reg72;
          for (forvar90 = (1'h0); (forvar90 < (3'h4)); forvar90 = (forvar90 + (1'h1)))
            begin
              reg91 <= $signed((reg72 ?
                  (+$signed($unsigned(reg70))) : {reg46}));
              reg92 = (^~$unsigned(({$unsigned(reg84), $unsigned(reg82)} ?
                  (-$signed(reg75)) : (forvar52[(4'h8):(2'h2)] * reg91[(3'h5):(1'h0)]))));
              reg93 <= (wire50 <<< ({wire34} ?
                  ((reg62[(3'h4):(2'h2)] - $unsigned((8'ha6))) ?
                      $signed($unsigned(reg92)) : ((reg56 ? reg56 : reg63) ?
                          $signed(reg85) : (~wire47))) : ($unsigned((forvar80 || wire48)) <= (reg83[(3'h7):(3'h4)] || $unsigned(reg64)))));
            end
          reg94 <= reg75;
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module195
#(parameter param219 = {(~(((^~(8'ha2)) | ((7'h40) - (8'hbb))) && (((8'ha3) <= (8'hb5)) < (~&(8'hb9))))), (((((7'h40) >> (8'hb1)) ? (&(8'hb3)) : ((8'ha6) ? (8'ha7) : (7'h44))) == (((8'hb4) | (7'h40)) == ((8'had) ? (8'had) : (8'hab)))) ? {(-(^(8'hb9))), (((8'ha6) > (8'hac)) >= ((8'hb7) + (8'hb3)))} : ((((7'h42) ? (8'hb7) : (8'hba)) ^~ {(8'hbf), (8'hb5)}) ? (+((7'h42) < (8'hbf))) : (((8'ha5) ? (8'ha8) : (8'hb5)) < (!(8'hb2)))))}, 
parameter param220 = ((~&{param219, (^~(~&param219))}) ? (^~(((param219 ? (8'ha0) : param219) == (param219 ? param219 : param219)) ^~ {param219, {param219}})) : param219))
(y, clk, wire199, wire198, wire197, wire196);
  output wire [(32'he3):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire199;
  input wire signed [(3'h5):(1'h0)] wire198;
  input wire signed [(3'h4):(1'h0)] wire197;
  input wire [(3'h6):(1'h0)] wire196;
  wire [(2'h3):(1'h0)] wire218;
  wire signed [(5'h14):(1'h0)] wire217;
  wire signed [(4'hd):(1'h0)] wire216;
  wire signed [(4'he):(1'h0)] wire215;
  wire [(3'h6):(1'h0)] wire214;
  wire signed [(5'h14):(1'h0)] wire213;
  wire [(5'h11):(1'h0)] wire204;
  wire signed [(5'h13):(1'h0)] wire203;
  wire [(4'ha):(1'h0)] wire202;
  wire signed [(2'h2):(1'h0)] wire201;
  wire signed [(5'h15):(1'h0)] wire200;
  reg [(3'h6):(1'h0)] reg212 = (1'h0);
  reg [(4'hd):(1'h0)] reg210 = (1'h0);
  reg [(2'h3):(1'h0)] reg209 = (1'h0);
  reg [(5'h14):(1'h0)] reg207 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg206 = (1'h0);
  reg [(3'h5):(1'h0)] reg211 = (1'h0);
  reg [(5'h13):(1'h0)] forvar208 = (1'h0);
  reg [(4'hc):(1'h0)] forvar205 = (1'h0);
  assign y = {wire218,
                 wire217,
                 wire216,
                 wire215,
                 wire214,
                 wire213,
                 wire204,
                 wire203,
                 wire202,
                 wire201,
                 wire200,
                 reg212,
                 reg210,
                 reg209,
                 reg207,
                 reg206,
                 reg211,
                 forvar208,
                 forvar205,
                 (1'h0)};
  assign wire200 = wire198[(1'h1):(1'h1)];
  assign wire201 = ($signed(wire196) <= wire196);
  assign wire202 = $signed($unsigned(wire198));
  assign wire203 = $signed(($unsigned($signed((wire201 >> wire196))) >> (8'h9e)));
  assign wire204 = $signed($unsigned(wire203));
  always
    @(posedge clk) begin
      for (forvar205 = (1'h0); (forvar205 < (2'h3)); forvar205 = (forvar205 + (1'h1)))
        begin
          reg206 <= wire197[(2'h3):(1'h0)];
          reg207 <= wire199[(4'ha):(4'h9)];
          for (forvar208 = (1'h0); (forvar208 < (1'h1)); forvar208 = (forvar208 + (1'h1)))
            begin
              reg209 <= $unsigned(forvar205);
              reg210 <= ((!forvar208) ? wire203[(4'ha):(3'h4)] : wire201);
              reg211 = {{($signed(wire202) ^ (wire201 <<< $unsigned(wire202)))}};
              reg212 <= $signed(wire196);
            end
        end
    end
  assign wire213 = wire202;
  assign wire214 = $signed($unsigned({reg210}));
  assign wire215 = reg212;
  assign wire216 = $signed(wire198);
  assign wire217 = wire199[(4'h8):(1'h1)];
  assign wire218 = wire213;
endmodule