(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param32 = (((~^(!(-(8'ha8)))) ? ({((8'hb8) ? (8'hb9) : (8'ha3))} >> {{(8'ha7), (8'hb6)}}) : ({((8'ha8) ? (8'hac) : (7'h43)), (&(8'hb2))} ? (~^(^(7'h40))) : {{(8'hb2), (8'hbc)}})) ? (((!(-(7'h42))) >>> ({(8'hb6), (8'ha8)} ^ ((7'h40) || (8'ha5)))) ? (~(~&((8'h9c) ? (7'h44) : (8'had)))) : ((-((8'ha3) - (8'ha6))) == (((8'ha4) ? (8'ha5) : (8'haf)) ? (~&(8'hbd)) : ((8'hb7) | (8'hb7))))) : ((((|(8'haa)) > (&(8'hb3))) ? (((7'h40) ? (7'h41) : (8'hb7)) ? ((8'ha6) ^~ (8'hbc)) : ((8'hab) > (8'h9e))) : {{(8'hbd)}, ((8'hbf) <<< (8'ha6))}) && (^~(~^((8'h9f) <= (8'hb5)))))), 
parameter param33 = (((~&param32) || param32) >>> ((!{((8'h9c) + param32), {param32, param32}}) ? param32 : (((param32 ? param32 : param32) ? (param32 && param32) : (^~param32)) != ((param32 | (8'hb4)) ? (param32 >>> param32) : (param32 ? param32 : param32))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h163):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h10):(1'h0)] wire3;
  input wire [(5'h15):(1'h0)] wire2;
  input wire signed [(2'h3):(1'h0)] wire1;
  input wire [(4'hd):(1'h0)] wire0;
  wire [(4'ha):(1'h0)] wire31;
  wire signed [(5'h10):(1'h0)] wire30;
  wire signed [(5'h10):(1'h0)] wire6;
  wire signed [(5'h14):(1'h0)] wire5;
  wire [(5'h15):(1'h0)] wire4;
  reg [(4'h9):(1'h0)] reg29 = (1'h0);
  reg [(2'h3):(1'h0)] reg27 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg26 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg25 = (1'h0);
  reg [(4'ha):(1'h0)] reg21 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg16 = (1'h0);
  reg [(4'h8):(1'h0)] reg14 = (1'h0);
  reg [(4'hd):(1'h0)] reg12 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar28 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar24 = (1'h0);
  reg [(4'he):(1'h0)] forvar23 = (1'h0);
  reg [(3'h7):(1'h0)] reg22 = (1'h0);
  reg [(4'hb):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg19 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar18 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar17 = (1'h0);
  reg [(4'he):(1'h0)] reg15 = (1'h0);
  reg [(3'h7):(1'h0)] reg13 = (1'h0);
  reg [(4'he):(1'h0)] reg11 = (1'h0);
  reg [(5'h14):(1'h0)] reg10 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg9 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar8 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar7 = (1'h0);
  assign y = {wire31,
                 wire30,
                 wire6,
                 wire5,
                 wire4,
                 reg29,
                 reg27,
                 reg26,
                 reg25,
                 reg21,
                 reg16,
                 reg14,
                 reg12,
                 forvar28,
                 forvar24,
                 forvar23,
                 reg22,
                 reg20,
                 reg19,
                 forvar18,
                 forvar17,
                 reg15,
                 reg13,
                 reg11,
                 reg10,
                 reg9,
                 forvar8,
                 forvar7,
                 (1'h0)};
  assign wire4 = (($unsigned($unsigned($unsigned(wire3))) ?
                     ((+wire3[(4'h9):(1'h1)]) ?
                         ($signed(wire3) ?
                             wire0[(3'h4):(1'h0)] : wire0[(4'ha):(1'h1)]) : $signed((wire1 ?
                             wire1 : wire1))) : {(-$signed((7'h42)))}) >> wire3[(4'h9):(3'h6)]);
  assign wire5 = (+(wire2[(2'h2):(2'h2)] >= $unsigned({wire2})));
  assign wire6 = ($signed($unsigned((~|(|wire5)))) > (~$unsigned(($unsigned(wire5) - {wire5}))));
  always
    @(posedge clk) begin
      for (forvar7 = (1'h0); (forvar7 < (2'h3)); forvar7 = (forvar7 + (1'h1)))
        begin
          for (forvar8 = (1'h0); (forvar8 < (2'h2)); forvar8 = (forvar8 + (1'h1)))
            begin
              reg9 = wire1[(2'h2):(2'h2)];
              reg10 = $unsigned(forvar7[(4'hb):(2'h3)]);
              reg11 = forvar8[(4'hf):(2'h3)];
            end
          reg12 <= $unsigned(wire1);
          if ((^$signed(($signed(forvar7) ?
              (((8'hba) ? wire6 : wire0) || $signed(wire5)) : $signed((wire5 ?
                  reg9 : wire1))))))
            begin
              reg13 = forvar7[(3'h7):(1'h0)];
              reg14 <= ((($signed(reg13[(1'h0):(1'h0)]) ?
                      (~reg10) : ((wire0 ? wire2 : (8'ha6)) ?
                          ((8'h9f) ? forvar8 : (8'hb7)) : ((8'hb0) + reg13))) ?
                  wire0 : ((+(wire3 ? forvar8 : wire6)) ?
                      {reg11} : {$unsigned(wire1), wire5})) >>> wire3);
            end
          else
            begin
              reg14 <= (~(forvar7 ?
                  ($unsigned(wire6[(4'h8):(4'h8)]) && $unsigned((forvar7 ?
                      wire4 : reg9))) : {reg14, $unsigned($unsigned(wire1))}));
              reg15 = {(reg14 ^~ wire0[(4'hd):(4'hb)]),
                  ($unsigned($unsigned({forvar8})) ?
                      ({wire3, reg13} >= (((8'hab) ~^ wire3) ?
                          ((8'hb0) ?
                              reg11 : wire1) : $signed(reg14))) : (8'hac))};
              reg16 <= ((~^$signed(((~(7'h41)) != reg9))) ^ ($signed((~^$signed((8'hbe)))) >>> (wire5[(4'hf):(3'h5)] ?
                  reg13[(3'h4):(3'h4)] : (forvar8 <<< $unsigned(reg15)))));
            end
        end
      for (forvar17 = (1'h0); (forvar17 < (3'h4)); forvar17 = (forvar17 + (1'h1)))
        begin
          for (forvar18 = (1'h0); (forvar18 < (1'h0)); forvar18 = (forvar18 + (1'h1)))
            begin
              reg19 = (8'hab);
              reg20 = {(|(({wire0} ? $signed(reg16) : $unsigned(reg11)) ?
                      ((8'ha2) ?
                          $signed(wire0) : wire5[(5'h13):(1'h0)]) : reg10[(3'h5):(2'h3)]))};
              reg21 <= ((forvar18 || $unsigned(forvar7[(3'h4):(1'h0)])) ?
                  (($unsigned($signed(wire6)) ?
                          $signed((8'ha0)) : $unsigned($unsigned(wire1))) ?
                      reg11[(2'h2):(1'h1)] : forvar17[(4'hb):(4'h9)]) : $signed(wire6));
              reg22 = (+$unsigned((8'haa)));
            end
        end
      for (forvar23 = (1'h0); (forvar23 < (2'h3)); forvar23 = (forvar23 + (1'h1)))
        begin
          for (forvar24 = (1'h0); (forvar24 < (1'h1)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 <= {(~|(((reg12 ? reg15 : reg22) >> (wire5 ?
                      forvar24 : wire2)) ^ $unsigned((&reg10)))),
                  ((~^wire1) | reg14[(2'h3):(1'h0)])};
              reg26 <= (wire6[(4'hf):(1'h1)] ?
                  {reg11[(1'h1):(1'h1)]} : reg10[(4'hd):(3'h4)]);
              reg27 <= (~|(~|(-(reg21[(3'h7):(2'h2)] ?
                  {(8'hb2), reg11} : (~|reg15)))));
            end
          for (forvar28 = (1'h0); (forvar28 < (1'h1)); forvar28 = (forvar28 + (1'h1)))
            begin
              reg29 <= $unsigned($signed($unsigned((((8'hb8) ?
                  wire5 : forvar17) != (reg10 >> (8'ha7))))));
            end
        end
    end
  assign wire30 = (8'haf);
  assign wire31 = (wire5[(4'h8):(2'h2)] & wire1);
endmodule