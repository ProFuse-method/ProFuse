(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param45 = (^~(-(^~(+(8'ha8))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'ha6):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire3;
  input wire signed [(2'h3):(1'h0)] wire2;
  input wire [(3'h7):(1'h0)] wire1;
  input wire [(2'h2):(1'h0)] wire0;
  wire [(2'h3):(1'h0)] wire44;
  wire signed [(2'h3):(1'h0)] wire42;
  wire [(2'h2):(1'h0)] wire41;
  wire signed [(4'hb):(1'h0)] wire32;
  wire signed [(4'ha):(1'h0)] wire30;
  wire [(4'hb):(1'h0)] wire11;
  reg signed [(2'h3):(1'h0)] reg43 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg40 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg39 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg38 = (1'h0);
  reg [(2'h2):(1'h0)] reg37 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg36 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg35 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg34 = (1'h0);
  reg [(2'h3):(1'h0)] reg33 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg14 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg13 = (1'h0);
  reg [(3'h7):(1'h0)] reg12 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg10 = (1'h0);
  reg [(4'hb):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg8 = (1'h0);
  reg [(3'h4):(1'h0)] reg7 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg6 = (1'h0);
  reg [(4'h8):(1'h0)] reg5 = (1'h0);
  reg [(4'ha):(1'h0)] reg4 = (1'h0);
  assign y = {wire44,
                 wire42,
                 wire41,
                 wire32,
                 wire30,
                 wire11,
                 reg43,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 reg36,
                 reg35,
                 reg34,
                 reg33,
                 reg14,
                 reg13,
                 reg12,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= $signed(($unsigned((&wire0)) > wire1[(2'h2):(2'h2)]));
      reg5 <= wire3[(2'h3):(1'h1)];
      if ({(~|$signed((reg4 >= wire0)))})
        begin
          reg6 <= {(|wire2[(1'h0):(1'h0)])};
        end
      else
        begin
          reg6 <= wire2[(2'h3):(1'h1)];
          reg7 <= {($signed((reg5 ? reg4 : reg5)) >= (reg6 ^ {(8'hac)}))};
          reg8 <= $unsigned((+(~^(^wire2))));
        end
    end
  always
    @(posedge clk) begin
      reg9 <= (wire3[(3'h7):(2'h3)] ? $unsigned(wire1[(3'h4):(1'h0)]) : reg6);
      reg10 <= ((^~$unsigned(wire1)) && (reg4 ?
          $signed($signed(reg6)) : $signed($signed(reg9))));
    end
  assign wire11 = wire2[(1'h1):(1'h1)];
  always
    @(posedge clk) begin
      reg12 <= reg4[(1'h1):(1'h0)];
      reg13 <= $signed($unsigned(((reg6 ? (8'hac) : reg9) ?
          (~^wire1) : reg9[(3'h6):(3'h6)])));
      reg14 <= reg4[(1'h1):(1'h0)];
    end
  module15 #() modinst31 (wire30, clk, reg14, reg9, reg6, reg13);
  assign wire32 = reg7;
  always
    @(posedge clk) begin
      reg33 <= (((^~$unsigned(wire3)) ~^ ($signed((8'ha6)) << (reg12 ?
              (8'ha2) : wire1))) ?
          (((wire11 <<< (8'ha7)) ?
              reg10 : ((8'h9f) == (8'hac))) ^ ($unsigned(wire30) ^~ (8'h9d))) : wire3);
      if (($signed((8'ha4)) << reg6[(4'hb):(2'h3)]))
        begin
          reg34 <= $signed(reg6);
          reg35 <= $unsigned((~|reg10));
        end
      else
        begin
          if ($signed((&(|$unsigned(wire2)))))
            begin
              reg34 <= (wire3 ^~ $signed($signed({reg7})));
              reg35 <= ((wire3 | $signed($signed(reg35))) ~^ (reg34 ?
                  $unsigned(reg35) : $signed((reg12 ? reg10 : reg12))));
            end
          else
            begin
              reg34 <= (-$signed($unsigned(((8'ha1) ? reg8 : reg10))));
              reg35 <= reg4[(3'h7):(3'h5)];
              reg36 <= ((!$unsigned($unsigned(wire0))) ?
                  {($signed(wire30) <= $signed(reg34))} : reg6[(2'h3):(1'h1)]);
            end
          reg37 <= (~$unsigned($signed(reg10)));
        end
      if ((8'had))
        begin
          if (($unsigned((^~((8'ha7) ? reg37 : wire3))) ?
              $unsigned($unsigned((reg10 ? reg12 : reg14))) : reg10))
            begin
              reg38 <= (8'hab);
              reg39 <= reg35;
            end
          else
            begin
              reg38 <= wire30;
              reg39 <= {(^~($unsigned(reg36) ?
                      wire32[(3'h4):(3'h4)] : $signed(wire11)))};
            end
        end
      else
        begin
          reg38 <= (((^~reg7[(2'h3):(2'h2)]) ~^ (reg4 & (reg34 ?
                  (8'h9c) : reg38))) ?
              $unsigned((~^(reg38 & (8'ha9)))) : ((8'ha8) ?
                  ($unsigned(reg38) ? wire30 : reg4[(3'h7):(2'h3)]) : {(reg14 ?
                          (8'h9d) : reg5)}));
          reg39 <= wire30[(1'h1):(1'h1)];
          reg40 <= (reg5 == $unsigned(reg38));
        end
    end
  assign wire41 = wire3[(4'hb):(3'h6)];
  assign wire42 = $signed(($unsigned($signed(reg38)) ^~ reg34[(2'h2):(1'h1)]));
  always
    @(posedge clk) begin
      reg43 <= reg10;
    end
  assign wire44 = (reg40[(2'h2):(2'h2)] ?
                      (($unsigned(reg10) < $unsigned(reg40)) ?
                          $signed(wire0[(1'h1):(1'h0)]) : reg4[(1'h0):(1'h0)]) : reg39[(3'h7):(2'h3)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15
#(parameter param29 = ((({(8'h9f)} <<< (~(8'ha9))) + {((8'ha3) ? (8'hab) : (8'ha3))}) ^~ (|(~^(8'hb0)))))
(y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h3c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire19;
  input wire signed [(4'hb):(1'h0)] wire18;
  input wire signed [(4'hb):(1'h0)] wire17;
  input wire signed [(3'h5):(1'h0)] wire16;
  wire signed [(4'ha):(1'h0)] wire23;
  wire signed [(2'h3):(1'h0)] wire22;
  wire signed [(3'h7):(1'h0)] wire21;
  wire signed [(3'h6):(1'h0)] wire20;
  reg [(4'h8):(1'h0)] reg28 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg27 = (1'h0);
  reg [(4'ha):(1'h0)] reg26 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg25 = (1'h0);
  reg [(4'h8):(1'h0)] reg24 = (1'h0);
  assign y = {wire23,
                 wire22,
                 wire21,
                 wire20,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 (1'h0)};
  assign wire20 = {((wire17[(1'h0):(1'h0)] ? wire19 : wire19[(3'h7):(3'h4)]) ?
                          wire17[(2'h2):(2'h2)] : {(wire18 >> (8'ha8))})};
  assign wire21 = (($signed(wire20) ?
                      {((8'h9c) ?
                              wire20 : wire17)} : wire20[(2'h3):(2'h2)]) >> $unsigned(((wire20 != wire19) ?
                      wire17[(3'h5):(3'h4)] : $unsigned(wire17))));
  assign wire22 = (wire17[(4'hb):(3'h4)] ?
                      wire16[(3'h5):(3'h5)] : $unsigned($signed((wire17 >> (8'haa)))));
  assign wire23 = ($unsigned(((wire20 && wire17) ?
                      wire21 : wire18[(4'h8):(3'h7)])) >> (^~(wire22 ~^ (8'hac))));
  always
    @(posedge clk) begin
      reg24 <= $unsigned(wire18[(2'h2):(1'h1)]);
      if (((wire19[(2'h2):(1'h0)] ~^ reg24[(2'h3):(1'h0)]) ?
          $unsigned({(wire21 ? wire23 : wire17)}) : $unsigned(wire17)))
        begin
          reg25 <= ({wire21[(3'h6):(3'h4)]} ? {wire22} : (!wire18));
          if ((8'ha9))
            begin
              reg26 <= wire22[(1'h1):(1'h1)];
              reg27 <= (-$signed(wire22));
              reg28 <= wire22;
            end
          else
            begin
              reg26 <= ($signed($unsigned((|wire20))) ?
                  (8'h9c) : ((^(reg25 >= wire23)) ?
                      wire22 : $signed(wire22[(2'h3):(1'h0)])));
              reg27 <= $unsigned({{(&wire16)}});
              reg28 <= $signed(wire23[(1'h1):(1'h1)]);
            end
        end
      else
        begin
          if (wire18[(4'h9):(3'h4)])
            begin
              reg25 <= ({$unsigned((reg28 ?
                      wire22 : reg24))} < ($unsigned((8'h9f)) ?
                  $signed($signed(wire23)) : ((reg27 ? wire23 : wire18) ?
                      ((8'hae) ? wire17 : wire16) : $signed(reg28))));
              reg26 <= $unsigned(((^wire22[(2'h2):(1'h0)]) > {wire19}));
              reg27 <= {(8'haf)};
            end
          else
            begin
              reg25 <= {$unsigned(wire21[(1'h0):(1'h0)])};
            end
          reg28 <= wire18[(4'h8):(1'h1)];
        end
    end
endmodule