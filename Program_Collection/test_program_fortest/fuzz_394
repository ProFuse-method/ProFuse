(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h6c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire3;
  input wire [(3'h6):(1'h0)] wire2;
  input wire [(3'h6):(1'h0)] wire1;
  input wire [(4'h8):(1'h0)] wire0;
  wire [(3'h7):(1'h0)] wire21;
  wire signed [(4'ha):(1'h0)] wire20;
  wire [(2'h3):(1'h0)] wire19;
  wire [(2'h2):(1'h0)] wire18;
  wire [(3'h5):(1'h0)] wire14;
  wire signed [(3'h5):(1'h0)] wire13;
  wire [(3'h4):(1'h0)] wire6;
  wire signed [(4'ha):(1'h0)] wire5;
  wire [(3'h7):(1'h0)] wire4;
  reg [(3'h7):(1'h0)] reg17 = (1'h0);
  reg [(4'ha):(1'h0)] reg16 = (1'h0);
  reg [(4'hb):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg12 = (1'h0);
  reg [(3'h4):(1'h0)] reg11 = (1'h0);
  reg [(2'h2):(1'h0)] reg10 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg9 = (1'h0);
  reg [(4'hb):(1'h0)] reg8 = (1'h0);
  reg [(2'h3):(1'h0)] reg7 = (1'h0);
  assign y = {wire21,
                 wire20,
                 wire19,
                 wire18,
                 wire14,
                 wire13,
                 wire6,
                 wire5,
                 wire4,
                 reg17,
                 reg16,
                 reg15,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 (1'h0)};
  assign wire4 = wire0[(2'h2):(1'h0)];
  assign wire5 = wire4[(3'h5):(3'h4)];
  assign wire6 = wire1;
  always
    @(posedge clk) begin
      if (((~$unsigned((wire5 ?
          wire0 : wire3))) ^ ($unsigned((-wire2)) ^ $unsigned((wire6 | wire4)))))
        begin
          if ((wire3[(4'h8):(4'h8)] ?
              (((+wire3) - (!wire1)) >>> ((~^wire1) ?
                  $signed(wire6) : wire1[(1'h0):(1'h0)])) : {wire4}))
            begin
              reg7 <= {(~&wire5[(4'h9):(1'h1)])};
              reg8 <= reg7;
            end
          else
            begin
              reg7 <= ((8'ha5) ?
                  ({((8'hac) || reg8)} ?
                      (wire2 ?
                          ((8'h9f) ?
                              reg7 : reg7) : reg7) : (^~(~^wire0))) : $signed({(-reg8)}));
            end
        end
      else
        begin
          reg7 <= wire4;
          reg8 <= {($unsigned((8'h9e)) * wire5)};
          reg9 <= wire4[(3'h6):(1'h1)];
        end
      reg10 <= reg8;
      reg11 <= reg8[(4'ha):(2'h3)];
    end
  always
    @(posedge clk) begin
      reg12 <= {reg8[(3'h7):(3'h7)]};
    end
  assign wire13 = ((^~$unsigned(wire4[(3'h4):(2'h3)])) ? (8'h9c) : wire1);
  assign wire14 = (~|(~((wire13 ? reg10 : wire5) ? (&reg7) : $unsigned(reg9))));
  always
    @(posedge clk) begin
      if ($signed($signed((((8'ha2) > reg7) ? reg8 : (reg10 ? wire1 : wire5)))))
        begin
          reg15 <= wire1;
        end
      else
        begin
          reg15 <= ($unsigned(wire6[(2'h2):(2'h2)]) ?
              $signed(((+(8'haa)) ~^ {wire4})) : (^~{$signed(reg9)}));
          reg16 <= $unsigned((!(&((8'hab) + wire6))));
        end
      reg17 <= $signed($signed((wire4[(3'h5):(2'h2)] ?
          $unsigned((8'h9e)) : $signed((8'hab)))));
    end
  assign wire18 = (wire2[(3'h6):(1'h1)] ?
                      $unsigned(((reg16 || wire1) >= (wire2 ?
                          (8'hac) : reg8))) : $signed((reg9[(1'h0):(1'h0)] - $signed((8'ha6)))));
  assign wire19 = wire3[(4'h9):(1'h0)];
  assign wire20 = reg16;
  assign wire21 = $signed(($signed($signed(wire18)) >> $unsigned(wire2[(3'h4):(1'h0)])));
endmodule