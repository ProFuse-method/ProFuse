(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param45 = (~^((((8'h9c) & (8'hab)) ? ((8'ha2) ? (8'haa) : (8'ha6)) : ((8'ha1) ? (8'ha1) : (8'haa))) >= (((8'ha9) * (8'ha9)) ? (&(8'haa)) : (~(8'had))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h83):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire3;
  input wire [(4'h9):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire [(4'h9):(1'h0)] wire39;
  wire signed [(4'ha):(1'h0)] wire26;
  wire [(3'h5):(1'h0)] wire23;
  wire [(4'h9):(1'h0)] wire22;
  wire signed [(3'h7):(1'h0)] wire21;
  wire signed [(4'h9):(1'h0)] wire20;
  wire [(3'h5):(1'h0)] wire13;
  wire [(3'h7):(1'h0)] wire41;
  wire signed [(3'h5):(1'h0)] wire42;
  wire signed [(4'h9):(1'h0)] wire43;
  reg signed [(4'h9):(1'h0)] reg25 = (1'h0);
  reg [(4'h9):(1'h0)] reg24 = (1'h0);
  reg [(3'h6):(1'h0)] reg19 = (1'h0);
  reg [(4'ha):(1'h0)] reg18 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg17 = (1'h0);
  reg [(4'h8):(1'h0)] reg16 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg15 = (1'h0);
  assign y = {wire39,
                 wire26,
                 wire23,
                 wire22,
                 wire21,
                 wire20,
                 wire13,
                 wire41,
                 wire42,
                 wire43,
                 reg25,
                 reg24,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 (1'h0)};
  module4 #() modinst14 (.y(wire13), .clk(clk), .wire8(wire2), .wire7(wire0), .wire5(wire3), .wire6(wire1));
  always
    @(posedge clk) begin
      reg15 <= {wire13[(1'h0):(1'h0)]};
      reg16 <= $unsigned(wire1);
      if ({($unsigned((-(8'ha8))) << $unsigned((wire2 ? reg16 : (8'had))))})
        begin
          reg17 <= $signed($signed($signed($signed(wire2))));
        end
      else
        begin
          reg17 <= $unsigned({{$unsigned(reg15)}});
          reg18 <= reg17[(2'h2):(1'h1)];
        end
    end
  always
    @(posedge clk) begin
      reg19 <= ((~(~^$unsigned(reg17))) ?
          {$signed($unsigned(wire3))} : (~^$unsigned((&wire0))));
    end
  assign wire20 = wire2;
  assign wire21 = ((+((&wire0) >> $unsigned(reg15))) >>> wire13);
  assign wire22 = wire1[(3'h7):(3'h4)];
  assign wire23 = (^~{$signed(reg15)});
  always
    @(posedge clk) begin
      reg24 <= $signed(((wire2[(4'h9):(3'h4)] ? $unsigned(wire2) : (8'ha4)) ?
          ((wire2 <= wire22) ?
              wire20[(2'h2):(1'h0)] : wire3) : (reg19 + (wire3 & reg16))));
      reg25 <= $signed(wire0);
    end
  assign wire26 = wire1[(2'h3):(2'h2)];
  module27 #() modinst40 (.clk(clk), .wire30(reg19), .y(wire39), .wire28(reg24), .wire31(reg16), .wire29(wire1));
  assign wire41 = wire22;
  assign wire42 = wire0;
  module4 #() modinst44 (wire43, clk, reg25, wire23, wire20, wire0);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module27  (y, clk, wire31, wire30, wire29, wire28);
  output wire [(32'h33):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h2):(1'h0)] wire31;
  input wire [(2'h2):(1'h0)] wire30;
  input wire signed [(4'h8):(1'h0)] wire29;
  input wire signed [(4'h9):(1'h0)] wire28;
  wire signed [(4'h9):(1'h0)] wire36;
  wire [(4'h8):(1'h0)] wire34;
  wire [(3'h7):(1'h0)] wire33;
  wire signed [(3'h7):(1'h0)] wire32;
  reg signed [(4'h8):(1'h0)] reg38 = (1'h0);
  reg [(3'h4):(1'h0)] reg37 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg35 = (1'h0);
  assign y = {wire36, wire34, wire33, wire32, reg38, reg37, reg35, (1'h0)};
  assign wire32 = (~(+((wire29 >>> (8'hac)) ?
                      wire30[(1'h1):(1'h1)] : $signed(wire30))));
  assign wire33 = $unsigned($signed(wire32[(3'h7):(3'h4)]));
  assign wire34 = {{($unsigned(wire31) ?
                              $unsigned(wire29) : ((8'ha8) | wire31))}};
  always
    @(posedge clk) begin
      reg35 <= ((8'ha1) ?
          $signed($unsigned((~|wire28))) : $signed((~$unsigned(wire29))));
    end
  assign wire36 = $unsigned((&$signed($signed(wire28))));
  always
    @(posedge clk) begin
      if ($signed(wire36))
        begin
          reg37 <= (~&$unsigned($unsigned($unsigned(wire32))));
        end
      else
        begin
          reg37 <= ((wire33[(3'h7):(1'h1)] ?
                  $unsigned($unsigned(wire31)) : wire34) ?
              (reg35[(3'h4):(1'h1)] <= ((|(8'h9c)) ?
                  wire33[(3'h5):(2'h2)] : (8'hac))) : {(wire30[(1'h0):(1'h0)] >>> $unsigned((8'h9e)))});
          reg38 <= $signed((((~wire29) ?
              (reg37 == (8'ha2)) : $unsigned(wire34)) == wire30));
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h18):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire8;
  input wire [(2'h2):(1'h0)] wire7;
  input wire signed [(4'h9):(1'h0)] wire6;
  input wire [(3'h4):(1'h0)] wire5;
  wire [(2'h2):(1'h0)] wire12;
  wire [(3'h5):(1'h0)] wire11;
  wire [(4'ha):(1'h0)] wire10;
  wire signed [(3'h6):(1'h0)] wire9;
  assign y = {wire12, wire11, wire10, wire9, (1'h0)};
  assign wire9 = {{$signed($signed((8'h9e)))}};
  assign wire10 = ($unsigned(wire9) ?
                      $signed({wire8}) : ((wire7[(1'h0):(1'h0)] ?
                          (wire8 >>> wire5) : $unsigned(wire8)) && (!(&wire8))));
  assign wire11 = $unsigned((((^~wire8) | ((8'ha2) * wire10)) & {wire9[(3'h6):(1'h0)]}));
  assign wire12 = wire11;
endmodule