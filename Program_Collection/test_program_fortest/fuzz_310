(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h87):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire3;
  input wire [(4'h8):(1'h0)] wire2;
  input wire signed [(3'h6):(1'h0)] wire1;
  input wire signed [(3'h6):(1'h0)] wire0;
  wire signed [(4'h8):(1'h0)] wire61;
  wire signed [(2'h2):(1'h0)] wire60;
  wire [(3'h4):(1'h0)] wire58;
  wire signed [(3'h6):(1'h0)] wire20;
  wire signed [(3'h5):(1'h0)] wire9;
  wire [(3'h7):(1'h0)] wire8;
  wire [(4'hb):(1'h0)] wire7;
  wire [(3'h7):(1'h0)] wire6;
  wire [(3'h6):(1'h0)] wire5;
  wire signed [(3'h4):(1'h0)] wire4;
  reg [(2'h3):(1'h0)] reg19 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg18 = (1'h0);
  reg [(4'hb):(1'h0)] reg17 = (1'h0);
  reg [(2'h3):(1'h0)] reg16 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg15 = (1'h0);
  reg [(3'h4):(1'h0)] reg14 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg13 = (1'h0);
  reg [(4'ha):(1'h0)] reg12 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg11 = (1'h0);
  reg [(4'h8):(1'h0)] reg10 = (1'h0);
  assign y = {wire61,
                 wire60,
                 wire58,
                 wire20,
                 wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 (1'h0)};
  assign wire4 = $signed($unsigned((&wire3[(3'h4):(2'h3)])));
  assign wire5 = {$unsigned($signed((wire4 == wire4)))};
  assign wire6 = ($signed(wire3[(3'h4):(1'h1)]) ?
                     $signed((wire0 ?
                         (^~(8'h9c)) : {wire1})) : wire3[(2'h3):(1'h0)]);
  assign wire7 = wire3;
  assign wire8 = $unsigned({$signed($signed(wire4))});
  assign wire9 = (wire3[(1'h1):(1'h0)] > (($unsigned(wire4) ?
                     wire4 : $signed(wire6)) & {(wire7 ? wire3 : wire1)}));
  always
    @(posedge clk) begin
      if ($signed((wire0[(3'h5):(3'h4)] ? wire5 : wire6)))
        begin
          if ((wire7[(4'hb):(3'h5)] && $signed(((|wire6) ?
              ((8'hac) ? wire7 : wire3) : (wire9 && (8'ha4))))))
            begin
              reg10 <= $unsigned($signed($signed(wire3[(2'h2):(1'h0)])));
            end
          else
            begin
              reg10 <= ($signed((8'haf)) | $signed(({(8'ha4)} ?
                  (wire8 ? wire3 : wire1) : (~|wire0))));
              reg11 <= $unsigned((~|(!((8'h9f) ? wire9 : wire0))));
              reg12 <= wire7;
            end
          if ($unsigned((reg10[(1'h0):(1'h0)] & (+(&(8'h9e))))))
            begin
              reg13 <= $unsigned(wire9[(3'h4):(2'h3)]);
            end
          else
            begin
              reg13 <= $unsigned(((~wire5) | wire6));
              reg14 <= wire5[(2'h2):(1'h0)];
              reg15 <= ((reg14 ^~ ((+wire3) >>> $signed(wire8))) ?
                  ((8'hab) ?
                      wire2[(4'h8):(2'h2)] : reg13) : $signed(($unsigned(wire3) ?
                      $unsigned(wire5) : (wire1 != wire8))));
            end
          if ((~wire0[(1'h1):(1'h1)]))
            begin
              reg16 <= $signed(({(8'ha9)} ? wire7 : wire4[(2'h2):(1'h0)]));
            end
          else
            begin
              reg16 <= $unsigned(($signed(reg14) >> (~^(-wire0))));
              reg17 <= reg10;
              reg18 <= ((reg13 < $signed(wire1[(3'h5):(2'h2)])) ?
                  (((reg10 ?
                      wire9 : (8'hb0)) == $unsigned(reg14)) ~^ wire7) : (~&(wire0[(1'h1):(1'h0)] >= (wire1 + wire3))));
            end
        end
      else
        begin
          reg10 <= (((~&(wire6 + reg18)) >>> ($unsigned(wire4) ?
              (8'ha5) : (wire4 >>> wire5))) - $unsigned((reg17[(4'hb):(2'h2)] ?
              $signed(reg16) : wire2[(3'h7):(3'h7)])));
          if (wire5[(1'h1):(1'h1)])
            begin
              reg11 <= ((reg15[(4'h9):(2'h3)] ?
                      (^~$unsigned(wire5)) : (&wire4[(2'h3):(1'h0)])) ?
                  (&$signed(wire0)) : (-{{wire0}}));
              reg12 <= $unsigned($unsigned(reg14));
              reg13 <= $signed((($unsigned(wire3) ~^ ((8'ha6) ?
                  reg11 : reg15)) * reg14));
            end
          else
            begin
              reg11 <= wire1;
              reg12 <= ({(~&{reg13})} ?
                  wire9 : $unsigned(((wire8 ? wire8 : reg12) ?
                      $unsigned((8'ha7)) : reg14[(3'h4):(2'h2)])));
              reg13 <= $unsigned(({(&reg17)} | $signed($signed((8'h9d)))));
            end
          reg14 <= ((~|$unsigned(reg17)) ?
              $signed(((8'ha0) ?
                  wire3[(1'h1):(1'h1)] : (reg14 <<< (8'had)))) : (+{(reg10 ^~ wire2)}));
        end
      reg19 <= ({($signed(reg17) | (-wire2))} ?
          ($unsigned($unsigned(wire2)) && $unsigned(wire0)) : ((-$signed((8'ha8))) ?
              $unsigned(((8'h9e) <<< reg17)) : $signed((reg12 ?
                  reg14 : wire5))));
    end
  assign wire20 = $signed(reg14[(3'h4):(2'h2)]);
  module21 #() modinst59 (.y(wire58), .wire23(wire8), .wire24(wire6), .wire22(reg17), .clk(clk), .wire25(reg10));
  assign wire60 = (~(~^{$signed(wire5)}));
  assign wire61 = (~|$unsigned(wire20));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module21  (y, clk, wire25, wire24, wire23, wire22);
  output wire [(32'h49):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire25;
  input wire signed [(3'h7):(1'h0)] wire24;
  input wire [(3'h5):(1'h0)] wire23;
  input wire signed [(4'ha):(1'h0)] wire22;
  wire [(3'h7):(1'h0)] wire57;
  wire [(2'h2):(1'h0)] wire52;
  wire [(3'h5):(1'h0)] wire32;
  wire signed [(3'h5):(1'h0)] wire31;
  wire signed [(4'h9):(1'h0)] wire27;
  wire signed [(2'h2):(1'h0)] wire26;
  reg signed [(3'h4):(1'h0)] reg56 = (1'h0);
  reg [(3'h6):(1'h0)] reg55 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg54 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg30 = (1'h0);
  reg [(4'h8):(1'h0)] reg29 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg28 = (1'h0);
  assign y = {wire57,
                 wire52,
                 wire32,
                 wire31,
                 wire27,
                 wire26,
                 reg56,
                 reg55,
                 reg54,
                 reg30,
                 reg29,
                 reg28,
                 (1'h0)};
  assign wire26 = (^$signed((wire24[(3'h6):(1'h0)] < wire25[(2'h3):(2'h2)])));
  assign wire27 = (wire25[(3'h4):(2'h2)] ^~ $unsigned({(wire24 ?
                          wire26 : wire26)}));
  always
    @(posedge clk) begin
      reg28 <= wire25[(2'h2):(2'h2)];
      reg29 <= (^$signed((^~$signed(wire26))));
      reg30 <= reg29[(2'h2):(1'h1)];
    end
  assign wire31 = {(8'ha9)};
  assign wire32 = {reg29};
  module33 #() modinst53 (.clk(clk), .wire34(wire23), .y(wire52), .wire37(wire24), .wire36(wire31), .wire35(wire25));
  always
    @(posedge clk) begin
      reg54 <= ($unsigned(((wire27 || wire22) ?
              $unsigned(wire23) : (wire52 <= wire22))) ?
          (|(^wire26[(2'h2):(1'h0)])) : wire31[(1'h0):(1'h0)]);
      reg55 <= (~^$unsigned(((^reg28) ? reg29[(2'h2):(1'h1)] : (|reg29))));
    end
  always
    @(posedge clk) begin
      reg56 <= ($signed((~&(wire23 ? reg55 : wire23))) == (~((wire27 ?
              (8'ha9) : wire25) ?
          $signed(reg29) : (wire32 ? wire32 : reg54))));
    end
  assign wire57 = (!($unsigned({reg29}) >>> (!(wire23 * wire32))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module33  (y, clk, wire37, wire36, wire35, wire34);
  output wire [(32'h54):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire37;
  input wire signed [(3'h5):(1'h0)] wire36;
  input wire [(4'h8):(1'h0)] wire35;
  input wire signed [(3'h5):(1'h0)] wire34;
  wire signed [(4'h9):(1'h0)] wire51;
  wire signed [(2'h3):(1'h0)] wire50;
  wire [(2'h3):(1'h0)] wire47;
  wire signed [(2'h3):(1'h0)] wire46;
  wire [(4'ha):(1'h0)] wire45;
  wire signed [(2'h3):(1'h0)] wire44;
  wire [(3'h7):(1'h0)] wire41;
  wire [(3'h5):(1'h0)] wire40;
  wire signed [(3'h6):(1'h0)] wire39;
  wire signed [(4'hb):(1'h0)] wire38;
  reg signed [(2'h2):(1'h0)] reg49 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg48 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg43 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg42 = (1'h0);
  assign y = {wire51,
                 wire50,
                 wire47,
                 wire46,
                 wire45,
                 wire44,
                 wire41,
                 wire40,
                 wire39,
                 wire38,
                 reg49,
                 reg48,
                 reg43,
                 reg42,
                 (1'h0)};
  assign wire38 = {(($signed(wire35) ?
                          wire37 : $unsigned(wire34)) > ({wire35} < wire34[(2'h2):(2'h2)]))};
  assign wire39 = {$unsigned((wire35[(1'h1):(1'h1)] ?
                          (wire38 ? (8'h9d) : wire35) : $signed(wire38)))};
  assign wire40 = (wire39[(2'h2):(2'h2)] ^~ $unsigned((wire37 || (^wire38))));
  assign wire41 = wire37;
  always
    @(posedge clk) begin
      reg42 <= $signed((((wire41 ? (8'ha6) : wire36) ?
              wire41 : $unsigned(wire36)) ?
          $signed((+wire37)) : $signed(wire41)));
      reg43 <= (8'h9e);
    end
  assign wire44 = reg43[(2'h2):(1'h1)];
  assign wire45 = (^~(~&wire41[(1'h1):(1'h0)]));
  assign wire46 = wire45;
  assign wire47 = $unsigned((8'haf));
  always
    @(posedge clk) begin
      reg48 <= ($signed((wire38 ? $unsigned(wire37) : (wire38 == wire39))) ?
          $unsigned(wire39) : ($signed(wire41[(2'h3):(2'h3)]) ?
              wire40 : (wire46 << {reg43})));
      reg49 <= {reg43};
    end
  assign wire50 = ($signed($signed(wire47[(2'h3):(1'h1)])) ?
                      {(8'ha3)} : ((wire39 ?
                          $signed(wire40) : wire34) << (((8'ha2) ?
                              (8'ha4) : wire40) ?
                          $signed(reg42) : $unsigned((8'hb0)))));
  assign wire51 = ((8'haf) ~^ ($unsigned(wire41[(3'h4):(3'h4)]) ?
                      $unsigned((wire50 << (8'hab))) : wire36[(3'h4):(1'h1)]));
endmodule