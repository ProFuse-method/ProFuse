(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param45 = ({{((8'hb0) ? (8'ha1) : (8'ha0))}} ? {{(-(8'ha9))}} : ({(~^(8'h9e))} ? (((8'haa) ? (8'ha8) : (8'hac)) ? ((8'haa) != (8'h9d)) : ((8'h9f) ? (8'hab) : (8'ha8))) : ({(8'hac)} ? (~(8'h9f)) : ((8'h9d) ? (8'hac) : (8'hac))))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h41):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire0;
  input wire signed [(3'h6):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire3;
  wire signed [(4'h9):(1'h0)] wire43;
  wire [(4'h8):(1'h0)] wire4;
  wire [(4'hb):(1'h0)] wire5;
  wire [(2'h2):(1'h0)] wire7;
  wire signed [(4'ha):(1'h0)] wire8;
  wire signed [(4'h8):(1'h0)] wire9;
  wire signed [(3'h6):(1'h0)] wire41;
  reg signed [(4'ha):(1'h0)] reg6 = (1'h0);
  assign y = {wire43, wire4, wire5, wire7, wire8, wire9, wire41, reg6, (1'h0)};
  assign wire4 = wire1[(3'h4):(3'h4)];
  assign wire5 = (wire0[(3'h5):(3'h4)] && wire4[(3'h7):(1'h1)]);
  always
    @(posedge clk) begin
      reg6 <= wire4;
    end
  assign wire7 = ((wire0 ? $unsigned(wire2) : wire2[(3'h6):(2'h2)]) | wire1);
  assign wire8 = (^{reg6[(1'h0):(1'h0)]});
  assign wire9 = wire3[(1'h0):(1'h0)];
  module10 #() modinst42 (.wire14(wire0), .wire13(wire2), .wire12(wire1), .wire11(reg6), .y(wire41), .clk(clk));
  module10 #() modinst44 (wire43, clk, wire9, wire8, wire2, wire4);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10
#(parameter param40 = (((~&(!(8'h9e))) >> {{(8'ha4)}}) ? ((8'h9d) << (~^(8'ha1))) : (-(((8'had) ? (8'h9f) : (8'h9e)) ? ((8'ha3) - (8'ha1)) : ((8'hae) & (8'hae))))))
(y, clk, wire11, wire12, wire13, wire14);
  output wire [(32'h44):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire11;
  input wire signed [(3'h6):(1'h0)] wire12;
  input wire signed [(4'hb):(1'h0)] wire13;
  input wire signed [(4'h8):(1'h0)] wire14;
  wire [(4'ha):(1'h0)] wire39;
  wire signed [(4'h9):(1'h0)] wire15;
  wire signed [(3'h4):(1'h0)] wire16;
  wire [(3'h6):(1'h0)] wire19;
  wire [(4'h9):(1'h0)] wire20;
  wire signed [(4'h8):(1'h0)] wire37;
  reg [(4'hb):(1'h0)] reg17 = (1'h0);
  reg [(4'ha):(1'h0)] reg18 = (1'h0);
  assign y = {wire39,
                 wire15,
                 wire16,
                 wire19,
                 wire20,
                 wire37,
                 reg17,
                 reg18,
                 (1'h0)};
  assign wire15 = (-(+wire11));
  assign wire16 = ((!(^~(wire12 ? wire12 : wire13))) >= wire15[(2'h2):(2'h2)]);
  always
    @(posedge clk) begin
      if ($unsigned($unsigned(wire14[(3'h4):(3'h4)])))
        begin
          reg17 <= wire15;
        end
      else
        begin
          reg17 <= (|$unsigned($unsigned((wire16 == wire11))));
          reg18 <= wire11[(2'h2):(2'h2)];
        end
    end
  assign wire19 = $unsigned(($unsigned((|reg18)) > {wire15}));
  assign wire20 = {wire16};
  module21 #() modinst38 (.wire23(wire15), .y(wire37), .wire22(wire13), .wire25(reg17), .wire24(wire19), .clk(clk));
  assign wire39 = (8'ha7);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module21  (y, clk, wire25, wire24, wire23, wire22);
  output wire [(32'h4a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire25;
  input wire signed [(3'h6):(1'h0)] wire24;
  input wire signed [(4'h8):(1'h0)] wire23;
  input wire [(3'h5):(1'h0)] wire22;
  wire [(3'h7):(1'h0)] wire35;
  wire [(3'h4):(1'h0)] wire34;
  wire [(3'h5):(1'h0)] wire33;
  wire signed [(4'h9):(1'h0)] wire32;
  wire [(2'h2):(1'h0)] wire30;
  wire signed [(3'h5):(1'h0)] wire29;
  wire [(3'h4):(1'h0)] wire28;
  reg [(4'h8):(1'h0)] reg36 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg31 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg27 = (1'h0);
  reg [(4'h8):(1'h0)] reg26 = (1'h0);
  assign y = {wire35,
                 wire34,
                 wire33,
                 wire32,
                 wire30,
                 wire29,
                 wire28,
                 reg36,
                 reg31,
                 reg27,
                 reg26,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg26 <= $signed(($signed((wire25 * wire25)) ?
          wire23 : (~^wire23[(1'h1):(1'h0)])));
      reg27 <= {(~({wire24} | $unsigned(wire25)))};
    end
  assign wire28 = $signed({{wire24}});
  assign wire29 = reg27[(4'h9):(1'h1)];
  assign wire30 = ($unsigned($signed((wire23 ? (8'h9d) : wire23))) ?
                      (~(|$unsigned(wire23))) : $signed(wire25));
  always
    @(posedge clk) begin
      reg31 <= wire29[(3'h4):(1'h1)];
    end
  assign wire32 = wire30[(1'h1):(1'h0)];
  assign wire33 = reg26[(3'h7):(3'h5)];
  assign wire34 = $unsigned($unsigned((wire32 > (wire28 & reg26))));
  assign wire35 = wire25;
  always
    @(posedge clk) begin
      reg36 <= ((reg31 ? wire24 : wire34[(1'h0):(1'h0)]) == (8'hab));
    end
endmodule