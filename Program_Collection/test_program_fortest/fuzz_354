(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h87):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire3;
  input wire signed [(4'hb):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire signed [(3'h6):(1'h0)] wire0;
  wire signed [(4'h8):(1'h0)] wire22;
  wire [(4'hb):(1'h0)] wire14;
  wire signed [(3'h5):(1'h0)] wire13;
  wire [(4'h8):(1'h0)] wire12;
  reg [(3'h4):(1'h0)] reg21 = (1'h0);
  reg [(3'h7):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg19 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg18 = (1'h0);
  reg [(3'h5):(1'h0)] reg17 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg16 = (1'h0);
  reg [(4'hb):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg11 = (1'h0);
  reg [(3'h6):(1'h0)] reg10 = (1'h0);
  reg [(2'h3):(1'h0)] reg9 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg8 = (1'h0);
  reg [(4'h9):(1'h0)] reg7 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg5 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg4 = (1'h0);
  assign y = {wire22,
                 wire14,
                 wire13,
                 wire12,
                 reg21,
                 reg20,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= $unsigned((|{(~&(8'ha5))}));
    end
  always
    @(posedge clk) begin
      reg5 <= {(($signed(wire3) ?
              wire1 : ((8'ha2) & reg4)) <<< $unsigned((8'ha3)))};
      reg6 <= $unsigned({(~{(8'ha1)})});
      if (reg4)
        begin
          reg7 <= $signed(reg5);
          reg8 <= $unsigned($unsigned($unsigned((|reg4))));
        end
      else
        begin
          if (wire1[(2'h3):(1'h1)])
            begin
              reg7 <= $unsigned(reg5[(1'h1):(1'h1)]);
              reg8 <= $signed(reg4[(3'h7):(3'h7)]);
              reg9 <= $unsigned($unsigned(($unsigned(reg8) ?
                  (reg4 - reg4) : (reg6 ^ reg4))));
            end
          else
            begin
              reg7 <= reg7;
            end
          reg10 <= $signed(wire1);
        end
    end
  always
    @(posedge clk) begin
      reg11 <= (wire2[(4'h8):(3'h5)] < {({wire3} >= {reg10})});
    end
  assign wire12 = $unsigned(reg6);
  assign wire13 = wire0;
  assign wire14 = $signed(wire3[(1'h0):(1'h0)]);
  always
    @(posedge clk) begin
      reg15 <= (^reg7);
      reg16 <= ((-wire0[(2'h3):(2'h3)]) << ((reg15 ?
          reg9[(1'h1):(1'h0)] : (wire14 << reg4)) * (reg10 ?
          (~|wire1) : (~|reg5))));
      if ((reg5[(2'h2):(2'h2)] ~^ $signed((~(~&(8'ha1))))))
        begin
          reg17 <= reg5;
          if ((reg17[(2'h3):(2'h3)] > $unsigned(wire14)))
            begin
              reg18 <= $unsigned((wire1 ^~ $unsigned(reg10)));
              reg19 <= wire13[(1'h1):(1'h1)];
              reg20 <= (reg9 ?
                  (~|(reg17 * (|reg15))) : (($signed(wire12) ?
                          {reg16} : wire13) ?
                      (8'hab) : $unsigned(reg7)));
            end
          else
            begin
              reg18 <= reg10;
              reg19 <= {({wire14[(4'h9):(4'h8)]} ?
                      reg11 : (reg10 ? wire13[(1'h1):(1'h0)] : reg9))};
            end
          reg21 <= $signed((reg11 == ({wire12} ?
              (!wire1) : (reg19 ? wire0 : reg6))));
        end
      else
        begin
          reg17 <= (^reg7[(3'h4):(1'h0)]);
          reg18 <= ((-wire3) & $unsigned(({reg17} + reg17[(1'h1):(1'h0)])));
          reg19 <= $signed($unsigned((wire13[(1'h0):(1'h0)] ?
              {(8'haa)} : wire2[(3'h4):(1'h1)])));
        end
    end
  assign wire22 = $unsigned(reg15[(2'h3):(1'h1)]);
endmodule