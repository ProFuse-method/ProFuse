(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param62 = (({((8'ha4) < (8'haf))} || (^~((8'haf) < (8'h9e)))) - ((((8'hb0) > (8'ha3)) ? {(8'hb0)} : {(8'ha1)}) < (((8'ha8) ? (8'had) : (8'ha4)) ? ((8'had) ? (8'haa) : (8'ha9)) : ((8'h9f) ? (8'haa) : (8'ha5))))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'hc5):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire0;
  input wire signed [(3'h5):(1'h0)] wire1;
  input wire [(3'h5):(1'h0)] wire2;
  input wire signed [(3'h4):(1'h0)] wire3;
  wire signed [(4'h9):(1'h0)] wire54;
  wire [(4'ha):(1'h0)] wire4;
  wire [(4'h9):(1'h0)] wire5;
  wire signed [(3'h4):(1'h0)] wire6;
  wire [(3'h5):(1'h0)] wire38;
  wire signed [(3'h5):(1'h0)] wire45;
  wire signed [(4'h8):(1'h0)] wire46;
  wire [(3'h4):(1'h0)] wire47;
  reg signed [(4'ha):(1'h0)] reg61 = (1'h0);
  reg [(4'h9):(1'h0)] reg60 = (1'h0);
  reg [(4'h8):(1'h0)] reg59 = (1'h0);
  reg [(4'h8):(1'h0)] reg58 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg57 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg56 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg55 = (1'h0);
  reg [(4'hb):(1'h0)] reg53 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg52 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg51 = (1'h0);
  reg [(4'hb):(1'h0)] reg50 = (1'h0);
  reg [(2'h3):(1'h0)] reg49 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg7 = (1'h0);
  reg [(3'h7):(1'h0)] reg40 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg41 = (1'h0);
  reg [(4'h9):(1'h0)] reg42 = (1'h0);
  reg [(3'h7):(1'h0)] reg43 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg44 = (1'h0);
  assign y = {wire54,
                 wire4,
                 wire5,
                 wire6,
                 wire38,
                 wire45,
                 wire46,
                 wire47,
                 reg61,
                 reg60,
                 reg59,
                 reg58,
                 reg57,
                 reg56,
                 reg55,
                 reg53,
                 reg52,
                 reg51,
                 reg50,
                 reg49,
                 reg7,
                 reg40,
                 reg41,
                 reg42,
                 reg43,
                 reg44,
                 (1'h0)};
  assign wire4 = wire2[(3'h4):(3'h4)];
  assign wire5 = $unsigned($unsigned(({wire2} & ((8'haa) + wire3))));
  assign wire6 = $signed((wire4[(3'h5):(3'h5)] ?
                     $unsigned((wire1 ?
                         wire1 : wire4)) : wire5[(1'h0):(1'h0)]));
  always
    @(posedge clk) begin
      reg7 <= $signed(wire0[(3'h7):(1'h1)]);
    end
  module8 #() modinst39 (wire38, clk, wire4, wire0, wire5, wire3);
  always
    @(posedge clk) begin
      reg40 <= (8'h9d);
      reg41 <= ((^~((&wire5) << (+wire4))) ?
          ($unsigned(wire4) ?
              $signed((8'ha6)) : $signed({wire2})) : ((-{wire0}) ?
              ((reg40 << reg7) == (wire1 < wire4)) : ((~^wire6) + $unsigned(wire1))));
    end
  always
    @(posedge clk) begin
      reg42 <= $unsigned((wire2[(2'h3):(1'h1)] ?
          (~^(~&wire3)) : reg40[(3'h6):(3'h5)]));
      reg43 <= (|wire38[(2'h2):(1'h1)]);
      reg44 <= ((~&(~^(reg7 && wire0))) ?
          {$unsigned($unsigned(wire38))} : (!$unsigned(wire1)));
    end
  assign wire45 = ($signed($signed($unsigned(wire3))) << ({$unsigned(reg42)} ?
                      wire0 : $unsigned(((8'ha5) ? wire0 : reg40))));
  assign wire46 = {wire3};
  module16 #() modinst48 (.clk(clk), .wire19(reg40), .y(wire47), .wire20(reg42), .wire17(reg7), .wire18(wire5));
  always
    @(posedge clk) begin
      reg49 <= ({(^~{(8'h9f)})} ?
          (($signed(wire4) < wire46) != (~(|wire4))) : wire6[(2'h3):(1'h1)]);
      if (reg43[(2'h2):(1'h1)])
        begin
          reg50 <= (~((~$signed(reg40)) >> ($unsigned(wire2) ?
              reg42 : $unsigned(reg7))));
          reg51 <= (~|$signed(($unsigned(wire4) || reg7[(4'h9):(3'h7)])));
          reg52 <= reg43;
        end
      else
        begin
          if (reg50)
            begin
              reg50 <= ($signed(wire46[(1'h1):(1'h1)]) >> (^(+wire47)));
              reg51 <= reg43;
            end
          else
            begin
              reg50 <= ((($unsigned(wire2) ?
                  reg41 : $unsigned((8'ha0))) <<< wire46[(3'h7):(1'h1)]) < $unsigned((^~$signed(wire5))));
            end
          reg52 <= wire38;
          reg53 <= reg41;
        end
    end
  assign wire54 = wire45;
  always
    @(posedge clk) begin
      if (wire45[(1'h1):(1'h1)])
        begin
          if ((((8'ha2) > $unsigned(reg43[(3'h4):(2'h3)])) ?
              reg41[(4'h9):(3'h4)] : $signed(reg52)))
            begin
              reg55 <= reg53[(1'h1):(1'h1)];
              reg56 <= wire47[(2'h3):(1'h1)];
              reg57 <= wire6[(2'h3):(2'h2)];
            end
          else
            begin
              reg55 <= {$signed(((wire45 == (8'ha1)) ~^ reg42))};
              reg56 <= {$signed((+wire45[(1'h0):(1'h0)]))};
            end
          if (({((reg52 ^ reg40) <= wire0[(3'h7):(2'h2)])} ? reg42 : reg40))
            begin
              reg58 <= reg57;
              reg59 <= $signed(wire47);
            end
          else
            begin
              reg58 <= $signed({reg53});
              reg59 <= {reg40[(3'h5):(3'h5)]};
            end
        end
      else
        begin
          reg55 <= (wire47[(2'h3):(2'h3)] ?
              $signed((~^(reg44 ?
                  reg55 : reg53))) : (wire1 || (-$unsigned(reg57))));
        end
      reg60 <= (($signed({reg57}) < wire5[(3'h6):(1'h1)]) ?
          wire38 : $unsigned(reg49));
      reg61 <= $signed(reg43);
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module8  (y, clk, wire9, wire10, wire11, wire12);
  output wire [(32'h2e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire9;
  input wire [(4'ha):(1'h0)] wire10;
  input wire signed [(4'h9):(1'h0)] wire11;
  input wire [(3'h4):(1'h0)] wire12;
  wire signed [(4'h9):(1'h0)] wire37;
  wire signed [(2'h3):(1'h0)] wire36;
  wire signed [(4'h8):(1'h0)] wire34;
  reg [(3'h7):(1'h0)] reg13 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg14 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg15 = (1'h0);
  assign y = {wire37, wire36, wire34, reg13, reg14, reg15, (1'h0)};
  always
    @(posedge clk) begin
      reg13 <= ((!(8'ha4)) ? $unsigned(wire11[(1'h1):(1'h1)]) : (8'ha6));
      reg14 <= {(wire9 ?
              $unsigned($signed(wire10)) : ($unsigned(reg13) ?
                  {wire11} : {reg13}))};
    end
  always
    @(posedge clk) begin
      reg15 <= {$unsigned({(wire10 > reg14)})};
    end
  module16 #() modinst35 (.wire18(reg14), .clk(clk), .wire20(wire11), .wire19(wire10), .wire17(wire9), .y(wire34));
  assign wire36 = (8'ha4);
  assign wire37 = wire34[(2'h3):(1'h1)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module16  (y, clk, wire20, wire19, wire18, wire17);
  output wire [(32'h4d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire20;
  input wire signed [(3'h4):(1'h0)] wire19;
  input wire signed [(4'h8):(1'h0)] wire18;
  input wire signed [(2'h2):(1'h0)] wire17;
  wire [(4'h8):(1'h0)] wire33;
  wire signed [(3'h7):(1'h0)] wire32;
  wire signed [(3'h6):(1'h0)] wire31;
  wire [(2'h2):(1'h0)] wire30;
  wire [(3'h6):(1'h0)] wire29;
  wire signed [(3'h4):(1'h0)] wire28;
  wire signed [(3'h7):(1'h0)] wire21;
  reg signed [(3'h6):(1'h0)] reg27 = (1'h0);
  reg [(3'h4):(1'h0)] reg26 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg25 = (1'h0);
  reg [(4'h8):(1'h0)] reg24 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg23 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg22 = (1'h0);
  assign y = {wire33,
                 wire32,
                 wire31,
                 wire30,
                 wire29,
                 wire28,
                 wire21,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 (1'h0)};
  assign wire21 = $unsigned({(wire17[(1'h1):(1'h1)] ?
                          (wire19 ? wire20 : wire19) : wire20[(4'h9):(4'h9)])});
  always
    @(posedge clk) begin
      if ($signed(($signed($unsigned(wire17)) ?
          wire19 : ($unsigned(wire20) ?
              (wire17 + wire21) : $unsigned(wire17)))))
        begin
          reg22 <= (~^wire20);
          if (wire18)
            begin
              reg23 <= (^~wire17[(2'h2):(1'h1)]);
              reg24 <= (8'had);
            end
          else
            begin
              reg23 <= reg23;
              reg24 <= $unsigned($signed(wire17));
              reg25 <= wire19[(3'h4):(2'h3)];
            end
          reg26 <= reg23[(1'h0):(1'h0)];
        end
      else
        begin
          reg22 <= (reg22 ? (reg24 & reg23) : (~&$unsigned(wire21)));
        end
      reg27 <= {reg22};
    end
  assign wire28 = wire19[(3'h4):(3'h4)];
  assign wire29 = $unsigned($unsigned(wire18[(3'h5):(2'h2)]));
  assign wire30 = (reg27 ? $signed({(+wire17)}) : reg24);
  assign wire31 = (^~(($signed(reg25) != $unsigned(reg25)) ?
                      {$signed((8'hb0))} : $unsigned($signed(wire28))));
  assign wire32 = $signed($signed((8'ha3)));
  assign wire33 = $unsigned((+((^~wire32) <= $unsigned(wire20))));
endmodule