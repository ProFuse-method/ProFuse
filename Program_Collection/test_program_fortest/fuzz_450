(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h32):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire0;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire [(3'h6):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire3;
  wire [(3'h4):(1'h0)] wire50;
  wire signed [(4'hb):(1'h0)] wire4;
  wire signed [(3'h4):(1'h0)] wire5;
  wire signed [(3'h7):(1'h0)] wire8;
  wire [(4'h8):(1'h0)] wire9;
  wire [(4'h8):(1'h0)] wire48;
  reg signed [(2'h2):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg7 = (1'h0);
  assign y = {wire50, wire4, wire5, wire8, wire9, wire48, reg6, reg7, (1'h0)};
  assign wire4 = wire2;
  assign wire5 = (~|(^~(wire3 < wire2)));
  always
    @(posedge clk) begin
      if ($signed(({wire4} >> wire5[(1'h1):(1'h1)])))
        begin
          reg6 <= wire2;
          reg7 <= (8'h9e);
        end
      else
        begin
          reg6 <= wire3;
        end
    end
  assign wire8 = reg6;
  assign wire9 = ($signed(((!wire3) ?
                     wire5[(3'h4):(1'h1)] : reg6[(2'h2):(1'h1)])) - (($signed(wire2) | (wire1 ?
                     wire2 : reg7)) ~^ wire1[(3'h5):(2'h3)]));
  module10 #() modinst49 (.wire14(wire0), .clk(clk), .wire12(wire1), .wire13(wire3), .wire11(reg7), .y(wire48));
  assign wire50 = wire9;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10
#(parameter param47 = {((|((8'h9e) >> (8'h9c))) | ((|(8'h9d)) >> ((8'haa) ? (8'ha8) : (8'ha6))))})
(y, clk, wire11, wire12, wire13, wire14);
  output wire [(32'h5f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire11;
  input wire [(4'h8):(1'h0)] wire12;
  input wire [(4'hb):(1'h0)] wire13;
  input wire [(4'h9):(1'h0)] wire14;
  wire signed [(4'hb):(1'h0)] wire46;
  wire signed [(2'h3):(1'h0)] wire45;
  wire [(3'h7):(1'h0)] wire44;
  wire [(3'h7):(1'h0)] wire43;
  wire [(4'h8):(1'h0)] wire22;
  wire signed [(4'hb):(1'h0)] wire41;
  reg signed [(4'h9):(1'h0)] reg15 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg16 = (1'h0);
  reg [(3'h5):(1'h0)] reg17 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg18 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg19 = (1'h0);
  reg [(3'h4):(1'h0)] reg20 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg21 = (1'h0);
  assign y = {wire46,
                 wire45,
                 wire44,
                 wire43,
                 wire22,
                 wire41,
                 reg15,
                 reg16,
                 reg17,
                 reg18,
                 reg19,
                 reg20,
                 reg21,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (wire12)
        begin
          if ((wire14 ?
              $unsigned($unsigned($signed(wire11))) : $signed(((~wire12) ?
                  $signed(wire12) : $unsigned(wire12)))))
            begin
              reg15 <= wire13;
              reg16 <= ((wire11[(2'h2):(1'h1)] ?
                  ($unsigned(wire12) > wire13[(4'hb):(4'h9)]) : {$unsigned(wire11)}) << (&((wire12 ?
                      (8'ha8) : (8'hab)) ?
                  (wire13 ? wire12 : (8'h9f)) : (8'h9e))));
              reg17 <= wire12[(1'h0):(1'h0)];
            end
          else
            begin
              reg15 <= (wire11[(1'h0):(1'h0)] ?
                  $unsigned($signed((^(8'ha6)))) : reg17[(3'h4):(3'h4)]);
            end
          reg18 <= $unsigned(wire13[(4'h9):(2'h3)]);
          reg19 <= reg15[(4'h9):(3'h7)];
        end
      else
        begin
          reg15 <= ((|$unsigned($signed(wire13))) ?
              wire11[(2'h3):(1'h1)] : (-(8'ha6)));
        end
      reg20 <= (reg15[(4'h8):(3'h4)] ?
          (wire13 ? wire13 : wire11) : reg15[(2'h2):(2'h2)]);
      reg21 <= $unsigned((+$signed(((8'h9c) & reg15))));
    end
  assign wire22 = wire11;
  module23 #() modinst42 (.wire27(reg18), .wire25(wire13), .wire24(reg17), .clk(clk), .y(wire41), .wire26(reg16));
  assign wire43 = (~&$signed(($unsigned(wire41) > (~&(8'haf)))));
  assign wire44 = (wire13[(4'h8):(3'h4)] && ($unsigned(reg15[(3'h4):(1'h1)]) < reg16));
  assign wire45 = (+reg18);
  assign wire46 = $unsigned((8'ha8));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module23
#(parameter param40 = (((&((8'h9f) - (8'hac))) ? {((8'hac) && (8'h9e))} : {((8'hab) + (8'ha4))}) ? (({(8'hb0)} ? (-(8'haf)) : ((8'ha2) ? (8'ha3) : (8'haf))) ? (8'ha5) : ((^(8'ha7)) ? ((8'hae) > (8'h9d)) : (~|(8'hac)))) : (^{(-(8'haa))})))
(y, clk, wire27, wire26, wire25, wire24);
  output wire [(32'h56):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire27;
  input wire signed [(3'h6):(1'h0)] wire26;
  input wire [(4'h8):(1'h0)] wire25;
  input wire [(3'h5):(1'h0)] wire24;
  wire signed [(4'h9):(1'h0)] wire39;
  wire [(3'h7):(1'h0)] wire36;
  wire signed [(4'ha):(1'h0)] wire35;
  wire [(2'h3):(1'h0)] wire34;
  wire [(3'h4):(1'h0)] wire33;
  wire [(3'h7):(1'h0)] wire32;
  wire [(2'h3):(1'h0)] wire31;
  wire signed [(4'hb):(1'h0)] wire30;
  wire signed [(4'ha):(1'h0)] wire29;
  reg [(2'h2):(1'h0)] reg38 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg37 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg28 = (1'h0);
  assign y = {wire39,
                 wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire30,
                 wire29,
                 reg38,
                 reg37,
                 reg28,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg28 <= wire24[(2'h2):(1'h1)];
    end
  assign wire29 = ((8'ha7) <= $signed(reg28));
  assign wire30 = wire27[(1'h1):(1'h0)];
  assign wire31 = wire25;
  assign wire32 = {$unsigned(({(8'ha6)} * wire31))};
  assign wire33 = wire27[(3'h5):(2'h2)];
  assign wire34 = wire31;
  assign wire35 = (~^wire25[(2'h3):(2'h3)]);
  assign wire36 = wire34;
  always
    @(posedge clk) begin
      reg37 <= {$unsigned($signed(wire24[(2'h3):(1'h1)]))};
      reg38 <= reg28[(1'h1):(1'h1)];
    end
  assign wire39 = ($unsigned((&$unsigned(wire32))) ?
                      $unsigned((!(+(8'ha4)))) : ($unsigned(reg37[(3'h6):(1'h1)]) == ((reg37 ?
                              reg38 : (8'ha5)) ?
                          wire35[(3'h6):(2'h2)] : wire34[(1'h0):(1'h0)])));
endmodule