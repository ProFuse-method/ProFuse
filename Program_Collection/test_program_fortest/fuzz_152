(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h2d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire signed [(3'h4):(1'h0)] wire2;
  input wire signed [(3'h7):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire [(4'h8):(1'h0)] wire11;
  wire [(3'h5):(1'h0)] wire10;
  wire [(4'ha):(1'h0)] wire4;
  reg [(2'h2):(1'h0)] reg9 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg8 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg7 = (1'h0);
  reg [(3'h4):(1'h0)] reg6 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg5 = (1'h0);
  assign y = {wire11, wire10, wire4, reg9, reg8, reg7, reg6, reg5, (1'h0)};
  assign wire4 = wire3[(2'h2):(1'h1)];
  always
    @(posedge clk) begin
      if ({wire4[(3'h7):(3'h7)]})
        begin
          reg5 <= (~&wire0[(3'h4):(2'h3)]);
        end
      else
        begin
          reg5 <= ((wire3 != (reg5[(3'h5):(3'h5)] ?
                  $unsigned(wire3) : $unsigned(wire1))) ?
              wire4 : (wire2[(3'h4):(3'h4)] ?
                  reg5 : $signed((wire4 ^~ (8'h9f)))));
          reg6 <= (^{$unsigned((~^wire2))});
        end
    end
  always
    @(posedge clk) begin
      reg7 <= wire0[(2'h2):(1'h1)];
      reg8 <= reg5;
      reg9 <= ((~|{$signed(wire4)}) ?
          $unsigned(((wire4 ?
              wire0 : reg6) ^~ {(8'ha1)})) : (({(8'ha4)} < reg6[(1'h0):(1'h0)]) == ((~reg8) ?
              wire0[(4'h8):(4'h8)] : $unsigned(wire0))));
    end
  assign wire10 = wire1[(3'h4):(3'h4)];
  assign wire11 = (~&wire10[(2'h2):(1'h0)]);
endmodule