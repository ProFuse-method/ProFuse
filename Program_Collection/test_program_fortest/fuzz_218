(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param58 = {((~^{(8'hab)}) || ((-(8'ha2)) != ((8'ha5) ? (8'hac) : (8'had))))})
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h7c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire3;
  input wire [(3'h7):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire0;
  wire [(3'h7):(1'h0)] wire57;
  wire signed [(3'h5):(1'h0)] wire54;
  wire [(4'hb):(1'h0)] wire50;
  wire [(2'h3):(1'h0)] wire49;
  wire signed [(3'h7):(1'h0)] wire48;
  wire [(4'ha):(1'h0)] wire41;
  wire [(4'hb):(1'h0)] wire39;
  wire [(3'h4):(1'h0)] wire52;
  reg signed [(3'h7):(1'h0)] reg56 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg55 = (1'h0);
  reg [(4'hb):(1'h0)] reg47 = (1'h0);
  reg [(4'ha):(1'h0)] reg46 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg45 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg44 = (1'h0);
  reg [(3'h4):(1'h0)] reg43 = (1'h0);
  reg [(4'h9):(1'h0)] reg42 = (1'h0);
  assign y = {wire57,
                 wire54,
                 wire50,
                 wire49,
                 wire48,
                 wire41,
                 wire39,
                 wire52,
                 reg56,
                 reg55,
                 reg47,
                 reg46,
                 reg45,
                 reg44,
                 reg43,
                 reg42,
                 (1'h0)};
  module4 #() modinst40 (wire39, clk, wire3, wire1, wire2, wire0);
  assign wire41 = $signed(wire3[(2'h2):(2'h2)]);
  always
    @(posedge clk) begin
      if ((&wire39[(3'h7):(3'h6)]))
        begin
          reg42 <= $unsigned($unsigned(((wire41 & wire41) ?
              (wire1 ? wire1 : wire1) : $unsigned(wire39))));
          if ($unsigned(wire1))
            begin
              reg43 <= (^~reg42[(1'h0):(1'h0)]);
              reg44 <= wire1;
              reg45 <= reg42[(1'h0):(1'h0)];
            end
          else
            begin
              reg43 <= (reg45[(1'h1):(1'h0)] != (({wire3} <= $signed(wire39)) ?
                  ((^wire41) ^ $unsigned(wire2)) : (((8'hae) ^ reg43) ?
                      wire2[(2'h3):(1'h1)] : (reg44 ? reg45 : wire1))));
              reg44 <= $unsigned(reg44[(1'h1):(1'h1)]);
              reg45 <= {(~reg42[(2'h3):(2'h2)])};
            end
        end
      else
        begin
          reg42 <= reg42;
          reg43 <= (~^$signed({(reg45 ? wire3 : wire2)}));
          reg44 <= ({((wire3 <<< (8'ha7)) ?
                      reg43[(1'h0):(1'h0)] : $signed(reg44))} ?
              {(^~(reg44 ? reg45 : wire3))} : (8'ha0));
        end
      reg46 <= (^((wire41 >> reg45) ?
          wire3[(4'h9):(2'h3)] : $unsigned((~&(8'ha5)))));
      reg47 <= (&(^((&reg42) ? reg46[(3'h7):(3'h4)] : reg42[(1'h1):(1'h1)])));
    end
  assign wire48 = (8'ha0);
  assign wire49 = (8'ha1);
  module4 #() modinst51 (wire50, clk, reg45, reg44, wire48, reg47);
  module11 #() modinst53 (wire52, clk, reg47, wire1, reg42, reg44);
  assign wire54 = (&wire52[(3'h4):(2'h2)]);
  always
    @(posedge clk) begin
      reg55 <= (wire49[(1'h0):(1'h0)] - {(wire39[(3'h5):(2'h3)] <<< $unsigned((8'ha7)))});
      reg56 <= $signed((!wire1));
    end
  assign wire57 = wire54[(1'h0):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4
#(parameter param38 = ((~&(|(~&(8'h9d)))) ? ({{(8'hac)}} ? (-((8'hac) ^~ (8'ha0))) : {((8'ha2) & (8'h9f))}) : (~&{((8'ha3) && (8'ha7))})))
(y, clk, wire5, wire6, wire7, wire8);
  output wire [(32'h3b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire5;
  input wire [(4'ha):(1'h0)] wire6;
  input wire [(3'h7):(1'h0)] wire7;
  input wire [(4'hb):(1'h0)] wire8;
  wire [(3'h6):(1'h0)] wire37;
  wire [(4'hb):(1'h0)] wire36;
  wire [(4'h8):(1'h0)] wire35;
  wire signed [(3'h6):(1'h0)] wire34;
  wire signed [(4'h9):(1'h0)] wire33;
  wire signed [(2'h3):(1'h0)] wire31;
  reg signed [(4'ha):(1'h0)] reg9 = (1'h0);
  reg [(3'h5):(1'h0)] reg10 = (1'h0);
  assign y = {wire37,
                 wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire31,
                 reg9,
                 reg10,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg9 <= (wire7[(3'h5):(1'h0)] > {(wire6[(4'h8):(3'h7)] | ((8'ha6) <= wire8))});
      reg10 <= ((~&(|(reg9 ? (8'hac) : (8'haa)))) ?
          wire6[(4'ha):(1'h1)] : (wire6 < (reg9[(4'h9):(4'h9)] ?
              wire5 : reg9[(2'h3):(2'h3)])));
    end
  module11 #() modinst32 (wire31, clk, wire5, wire7, reg9, wire6);
  assign wire33 = (wire8[(3'h4):(1'h1)] <<< (^~(reg10 > (wire5 ?
                      wire8 : (8'hae)))));
  assign wire34 = ({$signed({(8'ha1)})} | ((~^(wire7 >= wire5)) + ((reg10 >>> (8'ha5)) < wire7)));
  assign wire35 = (($signed($signed(wire33)) ?
                          $signed(wire34[(2'h3):(1'h0)]) : (wire7[(2'h3):(1'h0)] ?
                              $signed(reg10) : wire34)) ?
                      (wire34 - wire6[(3'h5):(3'h5)]) : $signed(wire6));
  assign wire36 = wire6[(2'h2):(1'h0)];
  assign wire37 = ($signed((reg9 ~^ wire35)) > $unsigned((^~wire36[(2'h2):(2'h2)])));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11  (y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h6b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire15;
  input wire signed [(3'h6):(1'h0)] wire14;
  input wire signed [(4'h9):(1'h0)] wire13;
  input wire signed [(3'h4):(1'h0)] wire12;
  wire signed [(3'h6):(1'h0)] wire30;
  wire signed [(3'h6):(1'h0)] wire29;
  wire signed [(4'ha):(1'h0)] wire18;
  wire signed [(4'ha):(1'h0)] wire17;
  wire signed [(4'h8):(1'h0)] wire16;
  reg [(3'h7):(1'h0)] reg28 = (1'h0);
  reg [(4'h8):(1'h0)] reg27 = (1'h0);
  reg [(4'h9):(1'h0)] reg26 = (1'h0);
  reg [(4'h8):(1'h0)] reg25 = (1'h0);
  reg [(3'h4):(1'h0)] reg24 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg23 = (1'h0);
  reg [(3'h4):(1'h0)] reg22 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg21 = (1'h0);
  reg [(4'h8):(1'h0)] reg20 = (1'h0);
  reg [(3'h7):(1'h0)] reg19 = (1'h0);
  assign y = {wire30,
                 wire29,
                 wire18,
                 wire17,
                 wire16,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 reg20,
                 reg19,
                 (1'h0)};
  assign wire16 = $signed((+(|(wire13 ? (8'ha8) : wire15))));
  assign wire17 = (8'ha1);
  assign wire18 = $unsigned((wire14 ?
                      ($unsigned((8'hab)) > {wire12}) : {(-(8'h9d))}));
  always
    @(posedge clk) begin
      if (wire13[(2'h2):(1'h1)])
        begin
          reg19 <= {((!$unsigned(wire12)) & $signed(wire15[(1'h0):(1'h0)]))};
          if ((-wire18))
            begin
              reg20 <= ($unsigned((!{wire17})) ?
                  $signed(wire14[(1'h1):(1'h0)]) : ($signed((wire16 ?
                          wire14 : wire17)) ?
                      (8'ha9) : wire17));
            end
          else
            begin
              reg20 <= $unsigned(($unsigned((8'ha5)) ?
                  ($signed(wire12) ?
                      (wire17 ? reg19 : (8'ha6)) : wire13) : ((|reg20) ?
                      wire13 : $unsigned(reg19))));
              reg21 <= (reg20[(3'h6):(1'h0)] ^ (({reg20} & $signed(wire16)) == $unsigned($signed(wire18))));
              reg22 <= ($unsigned(wire12) > (wire13 <= (~(wire16 ~^ wire12))));
            end
        end
      else
        begin
          if (((((wire15 || wire12) != $signed(wire12)) ?
                  ($unsigned(reg20) ?
                      reg20[(4'h8):(3'h5)] : wire12[(3'h4):(2'h3)]) : ((reg20 < reg21) ?
                      $unsigned((8'haa)) : ((8'hae) ? (8'ha0) : reg20))) ?
              $signed($unsigned(wire14)) : ((8'ha0) ?
                  {{wire13}} : ($unsigned(wire18) ?
                      wire16 : $unsigned(reg19)))))
            begin
              reg19 <= wire17;
              reg20 <= $unsigned($unsigned($signed($unsigned(wire15))));
              reg21 <= (8'ha3);
            end
          else
            begin
              reg19 <= $signed($unsigned(wire14));
              reg20 <= $unsigned($signed($signed(wire15[(2'h2):(1'h1)])));
            end
          if ((reg21 ?
              (~&$signed(reg22)) : $unsigned(((&(8'hb0)) ?
                  $signed(wire14) : wire15[(4'h8):(4'h8)]))))
            begin
              reg22 <= (({(!wire18)} == (reg22 && $unsigned(wire12))) ?
                  ($signed((reg21 <<< wire13)) ?
                      $unsigned(wire16[(2'h3):(2'h2)]) : wire12) : {($signed(wire18) ?
                          reg20[(3'h4):(1'h1)] : $unsigned(wire17))});
            end
          else
            begin
              reg22 <= reg19;
              reg23 <= (wire17[(4'ha):(2'h2)] ?
                  (!wire16) : reg20[(3'h4):(1'h1)]);
            end
          if ((((~|{(8'ha6)}) ?
              $signed(((8'h9c) - wire17)) : $unsigned($unsigned(reg21))) * ({reg19} ?
              ((reg20 ?
                  wire12 : reg22) <<< ((8'ha9) && reg21)) : wire14[(1'h1):(1'h0)])))
            begin
              reg24 <= (((^~$signed(reg20)) << $unsigned({wire18})) ?
                  wire13 : ({wire17} ?
                      ($unsigned(reg23) - (wire18 ^ (8'ha3))) : ((reg21 ?
                          wire17 : (8'ha2)) & (wire16 == reg20))));
              reg25 <= (+({(reg24 <<< reg19)} ?
                  ((wire13 ?
                      wire15 : reg19) != wire16[(1'h0):(1'h0)]) : $unsigned((~wire17))));
              reg26 <= reg24;
            end
          else
            begin
              reg24 <= reg26[(2'h3):(2'h2)];
            end
        end
      reg27 <= $unsigned(wire13[(3'h6):(3'h5)]);
      reg28 <= $signed((($signed((8'ha5)) ?
          {reg22} : $signed(wire17)) | $signed({(8'hae)})));
    end
  assign wire29 = ($signed(((wire14 ? reg20 : reg28) <<< ((8'haa) ?
                          wire14 : reg28))) ?
                      (|wire13) : $signed((8'ha6)));
  assign wire30 = wire14;
endmodule