(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param29 = ({(((8'ha0) ? (8'ha9) : (8'ha5)) ? ((8'hae) <<< (8'ha9)) : (8'hab))} ? (|((^~(8'had)) < ((8'hab) ? (8'hae) : (8'hac)))) : ((8'ha3) ? {((8'had) ? (8'hac) : (8'ha1))} : (((8'ha2) ? (8'hae) : (8'ha6)) != ((8'hac) ? (8'ha9) : (8'ha1))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'hb0):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire3;
  input wire signed [(2'h2):(1'h0)] wire2;
  input wire signed [(2'h2):(1'h0)] wire1;
  input wire [(4'h8):(1'h0)] wire0;
  wire [(2'h2):(1'h0)] wire28;
  wire [(3'h5):(1'h0)] wire20;
  wire signed [(4'h9):(1'h0)] wire19;
  wire [(4'h9):(1'h0)] wire14;
  wire [(2'h2):(1'h0)] wire13;
  wire signed [(4'h8):(1'h0)] wire12;
  wire signed [(3'h6):(1'h0)] wire6;
  wire [(2'h2):(1'h0)] wire5;
  wire signed [(4'hb):(1'h0)] wire4;
  reg signed [(3'h6):(1'h0)] reg27 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg26 = (1'h0);
  reg [(4'h8):(1'h0)] reg25 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg24 = (1'h0);
  reg [(3'h6):(1'h0)] reg23 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg22 = (1'h0);
  reg [(4'hb):(1'h0)] reg21 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg18 = (1'h0);
  reg [(3'h4):(1'h0)] reg17 = (1'h0);
  reg [(4'hb):(1'h0)] reg16 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg15 = (1'h0);
  reg [(4'ha):(1'h0)] reg11 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg10 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg7 = (1'h0);
  assign y = {wire28,
                 wire20,
                 wire19,
                 wire14,
                 wire13,
                 wire12,
                 wire6,
                 wire5,
                 wire4,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 (1'h0)};
  assign wire4 = wire1;
  assign wire5 = {(^($unsigned(wire3) | wire4[(1'h0):(1'h0)]))};
  assign wire6 = {wire3};
  always
    @(posedge clk) begin
      if (wire0)
        begin
          reg7 <= wire1;
          if (wire6)
            begin
              reg8 <= reg7[(1'h1):(1'h0)];
              reg9 <= $unsigned($signed(($signed(wire6) ?
                  $unsigned(wire0) : (wire4 ^ wire5))));
              reg10 <= $signed((&$unsigned((~^wire0))));
            end
          else
            begin
              reg8 <= wire3[(2'h3):(2'h3)];
              reg9 <= (&((8'hae) & ($signed(wire3) ?
                  wire3[(4'ha):(4'ha)] : (reg10 ? reg10 : wire0))));
            end
          reg11 <= wire6[(3'h6):(3'h4)];
        end
      else
        begin
          reg7 <= wire3;
        end
    end
  assign wire12 = $signed(wire1[(1'h0):(1'h0)]);
  assign wire13 = reg10[(1'h1):(1'h0)];
  assign wire14 = {$signed(($unsigned(wire2) ?
                          (reg11 ? wire2 : reg10) : {(8'ha1)}))};
  always
    @(posedge clk) begin
      reg15 <= $signed(($signed((&wire2)) ?
          wire14[(3'h7):(2'h2)] : (^~$unsigned(reg10))));
      reg16 <= (reg10 ?
          ({wire2[(1'h1):(1'h0)]} ^~ $signed($signed(reg9))) : $unsigned(wire1));
    end
  always
    @(posedge clk) begin
      reg17 <= $unsigned(wire12);
      reg18 <= {$unsigned((reg10[(1'h1):(1'h1)] != $unsigned((8'had))))};
    end
  assign wire19 = ($signed(reg17) ?
                      (wire14[(2'h3):(2'h3)] == ($unsigned(wire13) ^ {wire4})) : wire6[(2'h2):(1'h0)]);
  assign wire20 = (wire5[(2'h2):(1'h1)] ?
                      $signed(reg10) : ((wire12 | (wire6 ? wire12 : wire6)) ?
                          {((8'h9e) | reg11)} : wire19[(2'h3):(2'h2)]));
  always
    @(posedge clk) begin
      reg21 <= {(8'hae)};
      if (wire2)
        begin
          reg22 <= $unsigned($signed((((8'h9c) >>> reg17) ?
              reg7[(3'h4):(2'h2)] : (reg8 ^ reg15))));
          reg23 <= reg8[(3'h4):(2'h2)];
          reg24 <= $unsigned(wire0[(1'h0):(1'h0)]);
        end
      else
        begin
          if ($signed({(reg16 >= $unsigned(reg7))}))
            begin
              reg22 <= $unsigned(wire2[(1'h0):(1'h0)]);
            end
          else
            begin
              reg22 <= ($signed(reg10) >> reg21);
              reg23 <= $signed((((|(8'ha4)) ? {wire19} : (~&reg24)) ?
                  {{wire6}} : $signed($signed(reg8))));
              reg24 <= (($signed((reg15 ? wire14 : reg16)) ?
                  $signed((reg10 ? reg21 : (8'hae))) : $signed((reg15 ?
                      wire6 : wire12))) * $signed($unsigned((wire2 && wire4))));
            end
          if (($unsigned(($signed(reg10) ^ wire12[(3'h7):(3'h6)])) - $unsigned({(wire3 << reg15)})))
            begin
              reg25 <= {(reg10[(2'h2):(2'h2)] >>> wire19[(4'h9):(2'h2)])};
              reg26 <= reg10[(2'h3):(1'h0)];
              reg27 <= $signed(({(~&wire4)} <= ((reg16 ?
                  reg25 : reg9) ^ reg17)));
            end
          else
            begin
              reg25 <= {reg21[(4'hb):(4'ha)]};
            end
        end
    end
  assign wire28 = $unsigned($unsigned($signed((wire2 ? wire2 : (8'ha2)))));
endmodule