(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param35 = ((((-(8'ha5)) ? (~|(8'ha4)) : ((8'hab) >> (8'h9f))) ? ({(8'hab)} ? (~|(8'hac)) : {(8'ha1)}) : (+(^(8'ha2)))) ? (((^(8'hae)) > ((8'h9d) ? (8'hac) : (8'ha8))) ? (((8'ha2) - (8'had)) ? (~&(8'h9c)) : ((8'ha4) >>> (8'ha8))) : (&(8'ha9))) : {(8'ha6)}))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h58):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire3;
  input wire [(4'h9):(1'h0)] wire2;
  input wire signed [(4'h9):(1'h0)] wire1;
  input wire signed [(3'h7):(1'h0)] wire0;
  wire [(4'h8):(1'h0)] wire33;
  wire [(4'ha):(1'h0)] wire12;
  wire signed [(4'hb):(1'h0)] wire11;
  wire signed [(4'hb):(1'h0)] wire5;
  wire signed [(4'h8):(1'h0)] wire4;
  reg signed [(4'ha):(1'h0)] reg10 = (1'h0);
  reg [(3'h7):(1'h0)] reg9 = (1'h0);
  reg [(2'h3):(1'h0)] reg8 = (1'h0);
  reg [(4'h9):(1'h0)] reg7 = (1'h0);
  reg [(4'ha):(1'h0)] reg6 = (1'h0);
  assign y = {wire33,
                 wire12,
                 wire11,
                 wire5,
                 wire4,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 (1'h0)};
  assign wire4 = wire0;
  assign wire5 = {wire2[(4'h8):(3'h7)]};
  always
    @(posedge clk) begin
      if ((($unsigned((wire3 ?
          wire2 : wire2)) << wire0[(3'h7):(2'h2)]) == wire0[(3'h5):(1'h0)]))
        begin
          reg6 <= $signed(($signed(wire3) ? wire3 : wire3[(1'h1):(1'h1)]));
          if ($unsigned({(wire1 ~^ (reg6 == wire2))}))
            begin
              reg7 <= $signed(wire5[(2'h3):(2'h2)]);
              reg8 <= ({(~wire2)} | ((wire5 < $unsigned(wire5)) ?
                  wire4[(4'h8):(3'h7)] : $signed((wire5 ? wire1 : (8'ha3)))));
              reg9 <= (wire1 != $signed((8'haf)));
            end
          else
            begin
              reg7 <= ($signed($signed((wire3 ?
                  wire3 : wire2))) ^~ $signed((8'ha1)));
              reg8 <= $signed(((8'hb0) ~^ (~{(8'ha3)})));
            end
        end
      else
        begin
          reg6 <= (~|(wire5 == {{reg8}}));
          if (reg7)
            begin
              reg7 <= $signed(wire0);
              reg8 <= (reg8 ?
                  $signed((~(~(8'h9d)))) : ((|$unsigned(wire1)) ?
                      $signed($unsigned((8'h9d))) : $unsigned(wire1[(2'h3):(1'h1)])));
              reg9 <= (8'h9f);
            end
          else
            begin
              reg7 <= wire3[(1'h0):(1'h0)];
              reg8 <= reg8[(1'h0):(1'h0)];
              reg9 <= (wire5 ?
                  $signed({wire3[(2'h2):(1'h0)]}) : {($signed(wire4) ~^ $unsigned(reg9))});
            end
        end
      reg10 <= reg8[(2'h2):(2'h2)];
    end
  assign wire11 = (8'ha3);
  assign wire12 = (+(($unsigned(wire4) - reg10[(2'h3):(2'h2)]) >= $unsigned((reg8 * reg9))));
  module13 #() modinst34 (.clk(clk), .y(wire33), .wire17(reg10), .wire14(wire1), .wire15(wire2), .wire16(reg7));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13  (y, clk, wire17, wire16, wire15, wire14);
  output wire [(32'h68):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire17;
  input wire signed [(4'h9):(1'h0)] wire16;
  input wire signed [(3'h4):(1'h0)] wire15;
  input wire signed [(4'h9):(1'h0)] wire14;
  wire [(4'hb):(1'h0)] wire32;
  wire signed [(4'h8):(1'h0)] wire26;
  wire signed [(3'h7):(1'h0)] wire25;
  wire signed [(4'ha):(1'h0)] wire24;
  wire signed [(3'h6):(1'h0)] wire23;
  wire signed [(3'h7):(1'h0)] wire22;
  wire [(4'hb):(1'h0)] wire19;
  wire [(2'h2):(1'h0)] wire18;
  reg signed [(2'h2):(1'h0)] reg31 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg30 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg29 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg28 = (1'h0);
  reg [(4'h9):(1'h0)] reg27 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg21 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg20 = (1'h0);
  assign y = {wire32,
                 wire26,
                 wire25,
                 wire24,
                 wire23,
                 wire22,
                 wire19,
                 wire18,
                 reg31,
                 reg30,
                 reg29,
                 reg28,
                 reg27,
                 reg21,
                 reg20,
                 (1'h0)};
  assign wire18 = wire15[(1'h1):(1'h1)];
  assign wire19 = $signed($unsigned(({(8'ha3)} ? (wire16 ^~ wire14) : wire15)));
  always
    @(posedge clk) begin
      reg20 <= wire17[(4'ha):(4'h9)];
      reg21 <= (!({(^wire14)} ?
          ($unsigned(wire15) ?
              (wire18 - wire18) : {wire16}) : ($unsigned(wire19) ?
              {wire19} : $unsigned(wire16))));
    end
  assign wire22 = (wire18[(1'h0):(1'h0)] && $unsigned(wire16[(4'h9):(4'h8)]));
  assign wire23 = $unsigned($signed(reg21));
  assign wire24 = {(($signed(reg20) ? {reg20} : (wire16 + wire17)) ?
                          ($signed(wire15) ?
                              reg21[(2'h3):(2'h3)] : wire19[(2'h2):(1'h0)]) : wire18[(1'h1):(1'h0)])};
  assign wire25 = (^~$signed((wire16 != {wire14})));
  assign wire26 = $unsigned((({wire14} >> reg21) >> ($signed(reg21) - $unsigned(wire24))));
  always
    @(posedge clk) begin
      reg27 <= $signed($signed(((|wire19) >>> (^~wire17))));
      reg28 <= $signed($unsigned((~$unsigned((8'ha5)))));
      if (reg20[(1'h0):(1'h0)])
        begin
          reg29 <= $signed(reg28);
          reg30 <= $signed(({(&wire18)} && reg20));
          reg31 <= ((($unsigned(wire24) ? (~wire18) : $signed(wire19)) ?
              wire17[(2'h3):(1'h1)] : $signed((wire24 ?
                  (8'ha5) : (8'ha5)))) | (|$signed((wire23 <<< reg20))));
        end
      else
        begin
          reg29 <= $unsigned(reg28[(4'h9):(1'h1)]);
        end
    end
  assign wire32 = $signed(({reg30[(1'h0):(1'h0)]} ?
                      $unsigned(wire16[(3'h5):(1'h1)]) : ((wire24 ?
                              reg21 : (8'haa)) ?
                          wire26 : (wire19 >= reg30))));
endmodule