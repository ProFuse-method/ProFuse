(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param12 = (((((8'hac) ^~ (8'ha8)) - {(8'hac)}) <<< (+((8'h9e) ? (8'h9c) : (8'hac)))) ? (~&(~&(-(8'h9d)))) : ((8'haf) ? ((8'hab) > ((8'ha8) ? (8'hac) : (8'h9c))) : ((~^(8'had)) || ((8'h9e) ? (8'hab) : (8'ha8))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h2b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire3;
  input wire signed [(3'h4):(1'h0)] wire2;
  input wire [(3'h6):(1'h0)] wire1;
  input wire [(2'h3):(1'h0)] wire0;
  wire signed [(4'h9):(1'h0)] wire11;
  wire signed [(3'h6):(1'h0)] wire5;
  wire signed [(3'h6):(1'h0)] wire4;
  reg [(2'h2):(1'h0)] reg10 = (1'h0);
  reg [(2'h3):(1'h0)] reg9 = (1'h0);
  reg [(2'h3):(1'h0)] reg8 = (1'h0);
  reg [(2'h2):(1'h0)] reg7 = (1'h0);
  reg [(4'hb):(1'h0)] reg6 = (1'h0);
  assign y = {wire11, wire5, wire4, reg10, reg9, reg8, reg7, reg6, (1'h0)};
  assign wire4 = wire1;
  assign wire5 = ((wire2 ?
                         ((|wire4) ~^ (wire2 > wire0)) : {(wire2 >= (8'ha4))}) ?
                     (((wire1 >= wire3) ?
                         $signed(wire0) : wire3) ~^ $signed((~|wire0))) : (wire4[(3'h5):(3'h5)] ?
                         ((wire1 ^~ wire2) ^~ (wire1 ?
                             wire3 : wire1)) : wire2));
  always
    @(posedge clk) begin
      reg6 <= wire4;
      reg7 <= (($signed((reg6 | wire0)) ?
          wire2[(1'h1):(1'h0)] : $unsigned(reg6[(4'ha):(2'h3)])) & wire3[(2'h2):(2'h2)]);
    end
  always
    @(posedge clk) begin
      reg8 <= ((-$signed($unsigned(reg7))) || $unsigned(wire4[(2'h3):(1'h0)]));
      if ($unsigned($unsigned(((wire5 <<< (8'h9e)) ?
          $unsigned(wire5) : (wire5 ? wire5 : (8'hb0))))))
        begin
          reg9 <= reg7;
        end
      else
        begin
          if ((~^(|reg8[(2'h3):(1'h1)])))
            begin
              reg9 <= reg9;
            end
          else
            begin
              reg9 <= $unsigned($signed(wire1[(3'h5):(3'h4)]));
            end
          reg10 <= (&$signed((wire5 ?
              reg8[(1'h0):(1'h0)] : (reg7 ? wire5 : reg9))));
        end
    end
  assign wire11 = wire4[(2'h3):(1'h0)];
endmodule