(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param35 = (((+((8'ha3) & (8'h9f))) ? ((!(8'ha8)) ? ((8'ha4) ? (8'ha2) : (8'haa)) : ((8'ha3) ? (8'h9f) : (8'haf))) : ((^(8'h9d)) >> ((8'ha8) ? (8'haa) : (8'hae)))) ? {(8'ha2)} : (~^(!((8'ha5) | (8'ha9))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h3c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire [(4'hb):(1'h0)] wire2;
  input wire signed [(3'h4):(1'h0)] wire1;
  input wire signed [(3'h5):(1'h0)] wire0;
  wire signed [(4'hb):(1'h0)] wire34;
  wire signed [(2'h3):(1'h0)] wire32;
  wire [(4'hb):(1'h0)] wire9;
  wire [(3'h4):(1'h0)] wire8;
  wire signed [(4'ha):(1'h0)] wire7;
  reg [(4'h9):(1'h0)] reg6 = (1'h0);
  reg [(3'h4):(1'h0)] reg5 = (1'h0);
  reg [(3'h7):(1'h0)] reg4 = (1'h0);
  assign y = {wire34, wire32, wire9, wire8, wire7, reg6, reg5, reg4, (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire1[(2'h2):(1'h1)];
      reg5 <= wire0;
      reg6 <= ((|wire2) ?
          $unsigned(wire3[(3'h6):(3'h6)]) : wire2[(4'h9):(2'h3)]);
    end
  assign wire7 = reg5;
  assign wire8 = (($signed($unsigned(wire3)) ?
                         wire2[(4'ha):(3'h4)] : $signed($unsigned(wire2))) ?
                     (((8'h9f) ?
                         ((8'ha2) ?
                             wire7 : reg6) : (~&wire0)) != reg4[(2'h2):(1'h0)]) : ($unsigned(reg5) + $signed(reg4)));
  assign wire9 = $unsigned(reg5[(2'h2):(2'h2)]);
  module10 #() modinst33 (.wire13(wire7), .y(wire32), .wire11(wire9), .clk(clk), .wire12(reg6), .wire14(reg4));
  assign wire34 = $signed(({(|(8'ha4))} ? (|(^wire32)) : (~$signed(reg5))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10
#(parameter param31 = ((+((|(8'ha4)) - (|(8'ha5)))) * ((~^{(8'h9e)}) >= ((8'haf) ? (^~(8'ha6)) : {(8'ha6)}))))
(y, clk, wire11, wire12, wire13, wire14);
  output wire [(32'h27):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire11;
  input wire [(4'h9):(1'h0)] wire12;
  input wire signed [(4'h8):(1'h0)] wire13;
  input wire [(3'h6):(1'h0)] wire14;
  wire signed [(4'hb):(1'h0)] wire30;
  wire signed [(2'h3):(1'h0)] wire29;
  wire [(4'h8):(1'h0)] wire28;
  wire signed [(3'h7):(1'h0)] wire27;
  wire [(3'h6):(1'h0)] wire25;
  reg [(2'h3):(1'h0)] reg15 = (1'h0);
  assign y = {wire30, wire29, wire28, wire27, wire25, reg15, (1'h0)};
  always
    @(posedge clk) begin
      reg15 <= ((^~(wire11 ? (wire12 >= wire13) : $unsigned(wire14))) ?
          ((~wire14[(1'h0):(1'h0)]) ^~ wire14) : wire13);
    end
  module16 #() modinst26 (wire25, clk, wire11, reg15, wire14, wire12);
  assign wire27 = $unsigned((wire11 ? wire14 : (^(!(8'haa)))));
  assign wire28 = $signed({$unsigned($signed(wire25))});
  assign wire29 = (-(~^$signed($unsigned(reg15))));
  assign wire30 = (^((~^(~|wire12)) ?
                      $unsigned($unsigned(reg15)) : $unsigned($unsigned((8'ha0)))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module16  (y, clk, wire20, wire19, wire18, wire17);
  output wire [(32'h1e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire20;
  input wire signed [(2'h2):(1'h0)] wire19;
  input wire signed [(3'h6):(1'h0)] wire18;
  input wire [(4'h9):(1'h0)] wire17;
  wire [(3'h7):(1'h0)] wire24;
  wire signed [(4'h8):(1'h0)] wire23;
  wire [(4'h9):(1'h0)] wire22;
  wire [(3'h5):(1'h0)] wire21;
  assign y = {wire24, wire23, wire22, wire21, (1'h0)};
  assign wire21 = {$signed($unsigned(wire19[(1'h1):(1'h0)]))};
  assign wire22 = ((($signed((8'ha9)) * (wire18 ? wire17 : wire19)) ?
                      (~$signed(wire20)) : $signed(((8'haa) > wire20))) >= wire21);
  assign wire23 = {(((&wire22) ?
                          wire20 : (wire19 ?
                              wire19 : wire21)) ^ (~^(wire19 > wire18)))};
  assign wire24 = $signed((($signed(wire21) | {wire19}) ?
                      $signed($signed(wire18)) : ($signed((8'hb0)) ?
                          wire21[(3'h4):(2'h2)] : wire17[(3'h7):(2'h2)])));
endmodule