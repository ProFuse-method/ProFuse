(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h29):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire [(2'h2):(1'h0)] wire2;
  input wire signed [(2'h2):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire [(2'h2):(1'h0)] wire9;
  wire [(3'h7):(1'h0)] wire5;
  reg [(4'h8):(1'h0)] reg8 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg7 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg6 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg4 = (1'h0);
  assign y = {wire9, wire5, reg8, reg7, reg6, reg4, (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire0[(4'ha):(3'h4)];
    end
  assign wire5 = (((wire3 ? (wire2 | wire2) : (8'haa)) ^ wire2) ?
                     (((reg4 == wire0) >> ((8'hac) ^~ wire1)) & {{wire1}}) : wire1);
  always
    @(posedge clk) begin
      reg6 <= wire2[(2'h2):(1'h1)];
      reg7 <= {wire5[(3'h6):(1'h0)]};
      reg8 <= (reg7[(3'h7):(2'h2)] + (^~(((8'hae) ^~ reg6) ^~ ((8'ha6) * wire5))));
    end
  assign wire9 = (8'hae);
endmodule