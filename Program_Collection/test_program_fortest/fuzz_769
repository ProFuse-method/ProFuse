(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h5e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire [(4'h8):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire68;
  wire [(4'ha):(1'h0)] wire67;
  wire signed [(4'hb):(1'h0)] wire66;
  wire signed [(3'h5):(1'h0)] wire65;
  wire [(3'h5):(1'h0)] wire59;
  wire [(4'h8):(1'h0)] wire58;
  wire [(4'h8):(1'h0)] wire55;
  wire [(4'h8):(1'h0)] wire4;
  reg signed [(4'h9):(1'h0)] reg64 = (1'h0);
  reg [(4'h9):(1'h0)] reg63 = (1'h0);
  reg [(2'h2):(1'h0)] reg62 = (1'h0);
  reg [(4'ha):(1'h0)] reg61 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg57 = (1'h0);
  assign y = {wire68,
                 wire67,
                 wire66,
                 wire65,
                 wire59,
                 wire58,
                 wire55,
                 wire4,
                 reg64,
                 reg63,
                 reg62,
                 reg61,
                 reg57,
                 (1'h0)};
  assign wire4 = (8'had);
  module5 #() modinst56 (.y(wire55), .wire6(wire1), .wire8(wire4), .wire7(wire0), .wire9(wire3), .clk(clk));
  always
    @(posedge clk) begin
      reg57 <= {$signed($signed(wire3[(3'h4):(1'h1)]))};
    end
  assign wire58 = (~^(($unsigned(wire2) + wire2) | {wire2}));
  module33 #() modinst60 (wire59, clk, wire4, wire2, wire0, wire55);
  always
    @(posedge clk) begin
      reg61 <= $signed($signed({(reg57 * wire0)}));
      reg62 <= {(~{(&wire0)})};
    end
  always
    @(posedge clk) begin
      reg63 <= (~^{((~|wire2) ~^ (wire55 ? reg61 : wire2))});
      reg64 <= wire58;
    end
  assign wire65 = $signed($signed((^~$unsigned(reg62))));
  assign wire66 = $unsigned(wire1[(3'h4):(1'h1)]);
  assign wire67 = {reg62[(2'h2):(2'h2)]};
  assign wire68 = $unsigned($unsigned((|(!(8'h9e)))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module5  (y, clk, wire9, wire8, wire7, wire6);
  output wire [(32'h28):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire9;
  input wire [(4'h8):(1'h0)] wire8;
  input wire [(4'ha):(1'h0)] wire7;
  input wire [(4'h8):(1'h0)] wire6;
  wire [(3'h6):(1'h0)] wire54;
  wire [(2'h3):(1'h0)] wire52;
  wire [(3'h5):(1'h0)] wire51;
  wire signed [(2'h3):(1'h0)] wire50;
  wire [(2'h3):(1'h0)] wire48;
  wire signed [(4'h8):(1'h0)] wire31;
  wire [(3'h7):(1'h0)] wire11;
  wire signed [(3'h4):(1'h0)] wire10;
  assign y = {wire54,
                 wire52,
                 wire51,
                 wire50,
                 wire48,
                 wire31,
                 wire11,
                 wire10,
                 (1'h0)};
  assign wire10 = $signed((^~wire9[(4'h8):(3'h4)]));
  assign wire11 = ($unsigned(wire6) ?
                      (wire7 - (wire7[(1'h1):(1'h1)] >>> ((8'hae) ?
                          wire9 : (8'ha6)))) : (!$signed(wire10)));
  module12 #() modinst32 (wire31, clk, wire8, wire11, wire7, wire9);
  module33 #() modinst49 (.wire37(wire31), .wire34(wire6), .wire35(wire11), .clk(clk), .wire36(wire7), .y(wire48));
  assign wire50 = ((^~$unsigned(wire11)) ~^ ((+wire7[(3'h5):(2'h3)]) ?
                      $unsigned((-wire31)) : (^~$signed(wire48))));
  assign wire51 = wire11[(3'h6):(2'h3)];
  module12 #() modinst53 (wire52, clk, wire10, wire51, wire31, wire11);
  assign wire54 = $signed($signed($unsigned((wire51 ? (8'hab) : wire6))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module33  (y, clk, wire37, wire36, wire35, wire34);
  output wire [(32'h3e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire37;
  input wire signed [(4'ha):(1'h0)] wire36;
  input wire [(3'h7):(1'h0)] wire35;
  input wire [(4'h8):(1'h0)] wire34;
  wire [(4'h9):(1'h0)] wire47;
  wire signed [(3'h4):(1'h0)] wire46;
  wire signed [(4'ha):(1'h0)] wire45;
  wire signed [(4'ha):(1'h0)] wire43;
  wire [(2'h3):(1'h0)] wire42;
  wire [(4'h8):(1'h0)] wire41;
  wire [(2'h3):(1'h0)] wire40;
  wire signed [(2'h2):(1'h0)] wire39;
  wire signed [(4'ha):(1'h0)] wire38;
  reg signed [(2'h2):(1'h0)] reg44 = (1'h0);
  assign y = {wire47,
                 wire46,
                 wire45,
                 wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire39,
                 wire38,
                 reg44,
                 (1'h0)};
  assign wire38 = ({wire34[(4'h8):(2'h2)]} ?
                      wire35[(1'h0):(1'h0)] : $signed((8'hab)));
  assign wire39 = {(8'ha4)};
  assign wire40 = {wire36[(1'h1):(1'h0)]};
  assign wire41 = $unsigned($signed({$unsigned(wire36)}));
  assign wire42 = $signed((wire34[(3'h7):(3'h4)] ?
                      $signed((8'h9d)) : $unsigned((8'had))));
  assign wire43 = (wire40 >>> (|wire34));
  always
    @(posedge clk) begin
      reg44 <= (wire43[(2'h3):(2'h2)] - wire36);
    end
  assign wire45 = $signed($signed(((wire38 ? wire38 : (8'ha4)) ?
                      wire35 : $unsigned((8'h9d)))));
  assign wire46 = {($signed($signed(reg44)) ^ wire43)};
  assign wire47 = {wire41[(2'h3):(1'h0)]};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module12
#(parameter param30 = ({(((8'ha9) + (8'hae)) ? ((8'haf) == (8'ha0)) : ((8'h9e) ? (8'haa) : (8'ha5)))} > (~^{((8'ha0) ? (8'hb0) : (8'haf))})))
(y, clk, wire16, wire15, wire14, wire13);
  output wire [(32'h54):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire16;
  input wire signed [(3'h5):(1'h0)] wire15;
  input wire signed [(4'h8):(1'h0)] wire14;
  input wire [(3'h4):(1'h0)] wire13;
  wire signed [(4'ha):(1'h0)] wire22;
  wire signed [(4'h8):(1'h0)] wire21;
  wire signed [(4'ha):(1'h0)] wire20;
  wire [(3'h6):(1'h0)] wire19;
  wire [(3'h5):(1'h0)] wire18;
  wire [(2'h2):(1'h0)] wire17;
  reg signed [(3'h7):(1'h0)] reg29 = (1'h0);
  reg [(3'h7):(1'h0)] reg28 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg27 = (1'h0);
  reg [(4'h9):(1'h0)] reg26 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg25 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg24 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg23 = (1'h0);
  assign y = {wire22,
                 wire21,
                 wire20,
                 wire19,
                 wire18,
                 wire17,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 (1'h0)};
  assign wire17 = ({(wire14 * wire15[(2'h3):(2'h3)])} ?
                      ($signed((wire13 ? wire14 : wire14)) ?
                          (wire14[(4'h8):(4'h8)] ?
                              (~|wire13) : {wire13}) : wire15[(1'h1):(1'h1)]) : (~&$signed(wire15)));
  assign wire18 = ((&wire14) ? (8'ha8) : $unsigned({wire17[(2'h2):(1'h0)]}));
  assign wire19 = $signed(wire18[(3'h5):(2'h3)]);
  assign wire20 = wire13[(1'h1):(1'h1)];
  assign wire21 = wire15[(2'h3):(1'h1)];
  assign wire22 = ((!$unsigned((wire21 ? wire20 : wire20))) ?
                      {($unsigned(wire16) >> wire19[(1'h1):(1'h0)])} : wire17[(1'h1):(1'h0)]);
  always
    @(posedge clk) begin
      reg23 <= $unsigned(wire21[(4'h8):(2'h2)]);
      if ($signed((wire16 == (-{(8'ha9)}))))
        begin
          reg24 <= $unsigned((wire20[(4'h8):(3'h6)] - ((wire13 >> (8'ha6)) ?
              $signed((8'h9e)) : wire15[(2'h2):(1'h1)])));
          reg25 <= $signed($unsigned(wire17[(1'h0):(1'h0)]));
          reg26 <= (~^($signed({(8'h9f)}) ?
              $signed((reg25 ? wire21 : wire15)) : reg24[(3'h5):(2'h3)]));
        end
      else
        begin
          reg24 <= (-((^~$unsigned(wire14)) ?
              ($unsigned(reg26) ?
                  (reg25 < wire20) : (reg25 >>> wire20)) : wire21));
        end
      if (reg25[(2'h3):(1'h0)])
        begin
          if (wire21)
            begin
              reg27 <= wire16;
              reg28 <= $unsigned(wire13[(1'h0):(1'h0)]);
            end
          else
            begin
              reg27 <= {((wire13 >>> {reg23}) >>> (~reg25))};
              reg28 <= wire20;
              reg29 <= (($unsigned(wire20[(4'h9):(4'h8)]) ?
                  ((reg26 == wire18) ?
                      {wire14} : reg23) : $unsigned((-wire20))) | (wire20 * ((reg28 | wire13) << {(8'hab)})));
            end
        end
      else
        begin
          reg27 <= reg26[(1'h0):(1'h0)];
        end
    end
endmodule