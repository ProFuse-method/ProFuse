(* use_dsp48="no" *) (* use_dsp="no" *) module top #(parameter param44 = (8'ha9)) (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h53):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire3;
  input wire [(3'h5):(1'h0)] wire2;
  input wire signed [(2'h3):(1'h0)] wire1;
  input wire [(4'ha):(1'h0)] wire0;
  wire signed [(3'h5):(1'h0)] wire42;
  wire [(4'hb):(1'h0)] wire41;
  wire [(2'h2):(1'h0)] wire40;
  wire [(3'h7):(1'h0)] wire39;
  wire signed [(3'h6):(1'h0)] wire38;
  wire signed [(4'ha):(1'h0)] wire33;
  wire signed [(4'h9):(1'h0)] wire16;
  wire signed [(4'ha):(1'h0)] wire4;
  reg [(4'ha):(1'h0)] reg37 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg36 = (1'h0);
  reg [(2'h3):(1'h0)] reg35 = (1'h0);
  assign y = {wire42,
                 wire41,
                 wire40,
                 wire39,
                 wire38,
                 wire33,
                 wire16,
                 wire4,
                 reg37,
                 reg36,
                 reg35,
                 (1'h0)};
  assign wire4 = wire2[(1'h1):(1'h1)];
  module5 #() modinst17 (.wire9(wire0), .wire7(wire1), .wire8(wire2), .clk(clk), .y(wire16), .wire6(wire3));
  module18 #() modinst34 (.clk(clk), .y(wire33), .wire21(wire16), .wire19(wire2), .wire22(wire1), .wire20(wire4));
  always
    @(posedge clk) begin
      reg35 <= $unsigned((~|$unsigned(wire0)));
      reg36 <= wire33[(4'h9):(3'h6)];
      reg37 <= (|(!{wire4[(1'h1):(1'h1)]}));
    end
  assign wire38 = wire4;
  assign wire39 = $unsigned($unsigned({$signed(wire16)}));
  assign wire40 = ((~|($signed(wire1) ~^ (reg37 != reg36))) * reg35[(2'h3):(2'h2)]);
  assign wire41 = $signed($signed(wire0));
  module18 #() modinst43 (wire42, clk, wire4, reg36, wire0, reg35);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18
#(parameter param32 = {((((8'ha1) ^ (8'ha4)) ? ((8'hac) && (8'hac)) : {(8'hae)}) << {{(8'ha2)}})})
(y, clk, wire22, wire21, wire20, wire19);
  output wire [(32'h3e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h2):(1'h0)] wire22;
  input wire signed [(4'h9):(1'h0)] wire21;
  input wire signed [(4'ha):(1'h0)] wire20;
  input wire [(2'h3):(1'h0)] wire19;
  wire signed [(4'h8):(1'h0)] wire31;
  wire signed [(4'hb):(1'h0)] wire28;
  wire [(3'h5):(1'h0)] wire27;
  wire signed [(2'h2):(1'h0)] wire26;
  reg signed [(4'h8):(1'h0)] reg30 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg29 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg25 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg24 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg23 = (1'h0);
  assign y = {wire31,
                 wire28,
                 wire27,
                 wire26,
                 reg30,
                 reg29,
                 reg25,
                 reg24,
                 reg23,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ((((wire22[(1'h0):(1'h0)] ~^ (wire19 * wire22)) ?
          wire19[(2'h3):(1'h0)] : (^(wire22 <<< wire19))) < ((wire21 ?
          (wire21 << (8'had)) : {wire21}) << $unsigned({wire19}))))
        begin
          reg23 <= (wire20[(3'h6):(2'h3)] ?
              wire21[(3'h5):(1'h1)] : $unsigned(((wire22 ? (8'ha5) : wire21) ?
                  $signed(wire19) : (!wire20))));
          reg24 <= wire21;
        end
      else
        begin
          reg23 <= (~(((+reg24) + wire19) ~^ ($unsigned(reg24) != $signed((8'ha7)))));
          reg24 <= (^~(8'ha8));
        end
      reg25 <= (reg23[(2'h2):(2'h2)] ?
          (8'had) : ((wire22[(1'h1):(1'h1)] ?
              {wire20} : (wire22 ? wire19 : wire22)) & (8'ha9)));
    end
  assign wire26 = wire19[(2'h2):(1'h1)];
  assign wire27 = $signed((wire26[(1'h1):(1'h1)] ^ ({wire19} ?
                      (8'hae) : {wire26})));
  assign wire28 = (~$signed(wire26[(1'h1):(1'h0)]));
  always
    @(posedge clk) begin
      reg29 <= (~^{$unsigned({wire28})});
      reg30 <= reg25[(2'h3):(1'h0)];
    end
  assign wire31 = ((!$unsigned((wire19 ? (8'hae) : reg24))) * ((~wire20) ?
                      {reg29} : ($signed(wire21) ? reg24 : (&wire27))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module5  (y, clk, wire9, wire8, wire7, wire6);
  output wire [(32'h21):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire9;
  input wire [(2'h2):(1'h0)] wire8;
  input wire signed [(2'h3):(1'h0)] wire7;
  input wire signed [(3'h6):(1'h0)] wire6;
  wire signed [(4'ha):(1'h0)] wire15;
  wire [(2'h2):(1'h0)] wire14;
  wire signed [(2'h2):(1'h0)] wire13;
  wire signed [(3'h5):(1'h0)] wire12;
  wire [(4'hb):(1'h0)] wire11;
  wire signed [(2'h2):(1'h0)] wire10;
  assign y = {wire15, wire14, wire13, wire12, wire11, wire10, (1'h0)};
  assign wire10 = $signed(wire7);
  assign wire11 = ((~^($signed(wire10) <<< $signed(wire10))) ?
                      wire7[(1'h0):(1'h0)] : (-(+wire9)));
  assign wire12 = ((wire11[(1'h0):(1'h0)] ? (8'ha2) : wire6) ?
                      $unsigned(({wire11} ?
                          wire9[(2'h3):(2'h3)] : (wire8 + wire7))) : $signed({((8'ha0) <= wire8)}));
  assign wire13 = (-((8'ha3) ? wire12 : $signed(wire12)));
  assign wire14 = {$signed((^~$signed(wire9)))};
  assign wire15 = $unsigned($unsigned(($signed(wire7) | (!wire11))));
endmodule