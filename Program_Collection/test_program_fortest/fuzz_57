(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h88):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire3;
  input wire [(2'h2):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire signed [(3'h6):(1'h0)] wire0;
  wire signed [(4'h9):(1'h0)] wire88;
  wire signed [(2'h3):(1'h0)] wire87;
  wire [(4'ha):(1'h0)] wire74;
  wire [(4'hb):(1'h0)] wire11;
  wire [(3'h4):(1'h0)] wire10;
  wire [(4'h8):(1'h0)] wire9;
  wire signed [(4'ha):(1'h0)] wire4;
  wire signed [(4'h8):(1'h0)] wire76;
  wire signed [(4'h9):(1'h0)] wire77;
  wire [(3'h7):(1'h0)] wire85;
  reg signed [(3'h6):(1'h0)] reg8 = (1'h0);
  reg [(4'ha):(1'h0)] reg7 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg6 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg5 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg79 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg80 = (1'h0);
  reg [(4'ha):(1'h0)] reg81 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg82 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg83 = (1'h0);
  reg [(3'h4):(1'h0)] reg84 = (1'h0);
  assign y = {wire88,
                 wire87,
                 wire74,
                 wire11,
                 wire10,
                 wire9,
                 wire4,
                 wire76,
                 wire77,
                 wire85,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg79,
                 reg80,
                 reg81,
                 reg82,
                 reg83,
                 reg84,
                 (1'h0)};
  assign wire4 = $signed($unsigned($signed((wire1 | wire1))));
  always
    @(posedge clk) begin
      reg5 <= (~&wire4);
      if ((~wire0[(2'h2):(1'h0)]))
        begin
          reg6 <= ($signed(($unsigned(wire3) ~^ (8'ha1))) ?
              wire0[(1'h1):(1'h1)] : (wire4 ?
                  ($signed(wire1) <<< (^~reg5)) : ((wire4 ^~ wire2) ?
                      wire0 : wire2[(2'h2):(1'h0)])));
        end
      else
        begin
          if ((({$signed(reg5)} ^~ wire1[(2'h2):(1'h1)]) ?
              (~&{wire0[(2'h2):(1'h0)]}) : reg5))
            begin
              reg6 <= (~&((wire1 && (wire4 | wire4)) ?
                  reg5 : ((wire0 ? wire2 : wire2) ?
                      $signed(wire1) : $signed(wire3))));
            end
          else
            begin
              reg6 <= wire0[(1'h1):(1'h1)];
              reg7 <= ($signed((8'h9c)) ?
                  $unsigned($signed((wire0 ?
                      (8'ha8) : reg5))) : (({reg5} != $signed(reg6)) ?
                      (wire4 ? ((8'haf) + (8'haf)) : (-wire3)) : (~{reg6})));
              reg8 <= wire0[(2'h2):(2'h2)];
            end
        end
    end
  assign wire9 = ($signed({wire3[(2'h2):(1'h0)]}) | {(-wire1)});
  assign wire10 = wire2;
  assign wire11 = (~^wire9[(3'h6):(2'h2)]);
  module12 #() modinst75 (.y(wire74), .wire15(wire3), .wire14(reg7), .wire13(wire4), .wire16(wire10), .clk(clk));
  assign wire76 = ({$unsigned((reg8 & wire74))} || (~&$signed(wire9[(1'h1):(1'h1)])));
  module18 #() modinst78 (.wire19(reg5), .wire21(reg8), .wire22(wire3), .wire20(wire4), .y(wire77), .clk(clk));
  always
    @(posedge clk) begin
      reg79 <= (wire74 ?
          (~^((!wire76) >>> (reg8 << wire74))) : (wire77[(3'h5):(3'h5)] ^~ $unsigned($unsigned((8'haa)))));
      if ((wire1 ? reg5 : reg8[(1'h0):(1'h0)]))
        begin
          if ((reg6[(2'h3):(1'h0)] >> $signed(wire77)))
            begin
              reg80 <= ($unsigned($signed(wire3[(3'h4):(1'h0)])) ?
                  (|(-reg6)) : ((^~reg7) ? wire9[(2'h3):(2'h3)] : (8'ha5)));
              reg81 <= {({wire0} + ((~wire10) ? wire3 : (wire4 - reg79)))};
            end
          else
            begin
              reg80 <= $signed(wire76);
            end
        end
      else
        begin
          if ((8'ha6))
            begin
              reg80 <= wire1;
              reg81 <= wire10;
            end
          else
            begin
              reg80 <= $signed((^$signed({(8'ha9)})));
              reg81 <= wire76;
            end
          reg82 <= ((^~(wire11 ? $unsigned(wire11) : $unsigned((8'hb0)))) ?
              $unsigned(reg81) : (+$signed((reg81 ^~ (8'ha5)))));
          reg83 <= reg6[(2'h2):(2'h2)];
        end
      reg84 <= {reg6[(1'h1):(1'h0)]};
    end
  module35 #() modinst86 (.wire39(wire4), .wire36(wire0), .clk(clk), .wire38(wire1), .wire37(reg79), .y(wire85));
  assign wire87 = $unsigned((|wire74[(3'h6):(3'h5)]));
  module12 #() modinst89 (wire88, clk, wire4, reg8, reg79, wire76);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module12
#(parameter param73 = (~&(^~(((8'h9f) ? (8'had) : (8'hb0)) ? ((8'ha4) ~^ (8'hab)) : (8'haa)))))
(y, clk, wire16, wire15, wire14, wire13);
  output wire [(32'h57):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire16;
  input wire [(3'h6):(1'h0)] wire15;
  input wire signed [(4'ha):(1'h0)] wire14;
  input wire signed [(4'h8):(1'h0)] wire13;
  wire signed [(3'h7):(1'h0)] wire72;
  wire [(4'ha):(1'h0)] wire71;
  wire signed [(3'h7):(1'h0)] wire69;
  wire [(3'h6):(1'h0)] wire67;
  wire signed [(3'h7):(1'h0)] wire65;
  wire [(4'ha):(1'h0)] wire63;
  wire signed [(4'hb):(1'h0)] wire61;
  wire [(3'h7):(1'h0)] wire59;
  wire signed [(4'hb):(1'h0)] wire33;
  wire signed [(4'ha):(1'h0)] wire17;
  assign y = {wire72,
                 wire71,
                 wire69,
                 wire67,
                 wire65,
                 wire63,
                 wire61,
                 wire59,
                 wire33,
                 wire17,
                 (1'h0)};
  assign wire17 = {$unsigned((wire16 - (wire16 >= wire14)))};
  module18 #() modinst34 (.clk(clk), .wire21(wire17), .wire20(wire14), .y(wire33), .wire22(wire16), .wire19(wire13));
  module35 #() modinst60 (.wire38(wire33), .wire36(wire14), .wire39(wire17), .y(wire59), .wire37(wire16), .clk(clk));
  module18 #() modinst62 (wire61, clk, wire14, wire33, wire17, wire59);
  module18 #() modinst64 (.wire22(wire59), .wire21(wire15), .wire19(wire17), .clk(clk), .y(wire63), .wire20(wire61));
  module35 #() modinst66 (wire65, clk, wire61, wire13, wire63, wire33);
  module18 #() modinst68 (.clk(clk), .wire20(wire63), .y(wire67), .wire22(wire17), .wire21(wire59), .wire19(wire14));
  module35 #() modinst70 (.wire38(wire14), .clk(clk), .wire39(wire33), .wire36(wire67), .y(wire69), .wire37(wire16));
  assign wire71 = ({$unsigned($signed(wire33))} ?
                      wire15[(3'h6):(1'h1)] : ($signed(wire63[(2'h3):(2'h3)]) ?
                          $unsigned(wire16[(2'h3):(1'h0)]) : (^$unsigned(wire13))));
  assign wire72 = wire16;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module35
#(parameter param58 = (8'haf))
(y, clk, wire39, wire38, wire37, wire36);
  output wire [(32'h76):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire39;
  input wire signed [(4'h8):(1'h0)] wire38;
  input wire signed [(2'h2):(1'h0)] wire37;
  input wire [(3'h6):(1'h0)] wire36;
  wire [(4'h9):(1'h0)] wire57;
  wire signed [(3'h4):(1'h0)] wire54;
  wire signed [(3'h7):(1'h0)] wire48;
  wire [(3'h5):(1'h0)] wire47;
  wire signed [(4'ha):(1'h0)] wire46;
  wire signed [(2'h2):(1'h0)] wire42;
  wire [(4'ha):(1'h0)] wire41;
  wire [(3'h5):(1'h0)] wire40;
  reg [(2'h3):(1'h0)] reg56 = (1'h0);
  reg [(3'h4):(1'h0)] reg55 = (1'h0);
  reg [(3'h6):(1'h0)] reg53 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg52 = (1'h0);
  reg [(3'h7):(1'h0)] reg51 = (1'h0);
  reg [(4'hb):(1'h0)] reg50 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg49 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg45 = (1'h0);
  reg [(4'ha):(1'h0)] reg44 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg43 = (1'h0);
  assign y = {wire57,
                 wire54,
                 wire48,
                 wire47,
                 wire46,
                 wire42,
                 wire41,
                 wire40,
                 reg56,
                 reg55,
                 reg53,
                 reg52,
                 reg51,
                 reg50,
                 reg49,
                 reg45,
                 reg44,
                 reg43,
                 (1'h0)};
  assign wire40 = $unsigned($unsigned((wire38[(2'h3):(1'h1)] ?
                      $signed(wire39) : wire39)));
  assign wire41 = {$unsigned({(wire36 - wire36)})};
  assign wire42 = $unsigned($signed($signed({wire36})));
  always
    @(posedge clk) begin
      if (wire36[(3'h4):(1'h1)])
        begin
          reg43 <= $unsigned(($unsigned((wire37 ? wire39 : wire36)) & wire40));
        end
      else
        begin
          reg43 <= $signed($signed($signed($signed(wire41))));
        end
    end
  always
    @(posedge clk) begin
      reg44 <= (wire36 | $unsigned(($signed((8'h9f)) >>> wire38[(3'h4):(3'h4)])));
      reg45 <= (~|wire38[(1'h1):(1'h0)]);
    end
  assign wire46 = ((~reg43[(1'h1):(1'h1)]) ~^ wire41);
  assign wire47 = wire39[(3'h6):(3'h5)];
  assign wire48 = ({wire39[(3'h5):(3'h5)]} | $unsigned($signed((wire38 + reg43))));
  always
    @(posedge clk) begin
      reg49 <= ((~&(~|((8'ha8) ? wire41 : wire36))) ?
          (|(~$signed(wire42))) : $unsigned(((-reg45) > (~wire48))));
      reg50 <= $signed($signed(wire37));
      if (wire42)
        begin
          if (($unsigned(wire48[(2'h2):(1'h0)]) >>> (~^wire38[(2'h3):(1'h0)])))
            begin
              reg51 <= $signed(({(8'ha6)} >> $signed((^wire37))));
            end
          else
            begin
              reg51 <= reg50[(1'h1):(1'h1)];
            end
        end
      else
        begin
          reg51 <= {reg50};
          reg52 <= {wire39};
          reg53 <= (reg43[(1'h1):(1'h1)] ?
              reg50 : ({$unsigned(reg51)} >>> $signed(wire41)));
        end
    end
  assign wire54 = (8'hae);
  always
    @(posedge clk) begin
      reg55 <= (((~^(reg52 == reg52)) ?
              {(reg50 ? reg53 : reg51)} : wire48[(3'h5):(1'h0)]) ?
          $signed(($unsigned(wire37) + (reg51 ^ wire39))) : {((-wire54) ?
                  (8'h9d) : $unsigned(reg52))});
      reg56 <= wire54;
    end
  assign wire57 = $unsigned((wire41[(3'h5):(1'h0)] << reg51[(3'h7):(2'h3)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18  (y, clk, wire22, wire21, wire20, wire19);
  output wire [(32'h47):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire22;
  input wire [(3'h6):(1'h0)] wire21;
  input wire signed [(4'ha):(1'h0)] wire20;
  input wire signed [(2'h2):(1'h0)] wire19;
  wire [(2'h3):(1'h0)] wire32;
  wire signed [(3'h5):(1'h0)] wire31;
  wire signed [(4'h8):(1'h0)] wire27;
  wire [(4'ha):(1'h0)] wire26;
  wire [(3'h7):(1'h0)] wire25;
  wire [(4'h8):(1'h0)] wire24;
  wire [(3'h6):(1'h0)] wire23;
  reg signed [(4'hb):(1'h0)] reg30 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg29 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg28 = (1'h0);
  assign y = {wire32,
                 wire31,
                 wire27,
                 wire26,
                 wire25,
                 wire24,
                 wire23,
                 reg30,
                 reg29,
                 reg28,
                 (1'h0)};
  assign wire23 = $unsigned(wire20);
  assign wire24 = wire21;
  assign wire25 = {wire19};
  assign wire26 = $unsigned(wire23);
  assign wire27 = $signed(wire24[(3'h4):(2'h2)]);
  always
    @(posedge clk) begin
      reg28 <= $signed((8'hae));
      reg29 <= wire20;
      reg30 <= (wire21 * wire23);
    end
  assign wire31 = (reg30 ?
                      ($signed({wire21}) ?
                          wire24 : $unsigned($unsigned(wire19))) : reg29);
  assign wire32 = {reg29};
endmodule