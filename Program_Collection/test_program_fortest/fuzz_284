(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param12 = ((^~{(&(8'ha5))}) ? ((((8'hac) >= (8'ha0)) ? ((8'ha1) ? (8'h9d) : (8'h9f)) : ((8'hb0) ? (8'ha2) : (8'ha5))) >>> (((8'h9c) ? (8'haf) : (8'hac)) >= (8'ha4))) : {{((8'ha5) ? (8'ha6) : (8'had))}}))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h32):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire3;
  input wire signed [(2'h3):(1'h0)] wire2;
  input wire signed [(3'h4):(1'h0)] wire1;
  input wire signed [(3'h7):(1'h0)] wire0;
  wire signed [(2'h3):(1'h0)] wire11;
  wire signed [(3'h4):(1'h0)] wire10;
  wire [(3'h6):(1'h0)] wire9;
  wire signed [(3'h4):(1'h0)] wire8;
  wire [(3'h5):(1'h0)] wire5;
  wire signed [(4'ha):(1'h0)] wire4;
  reg signed [(3'h7):(1'h0)] reg7 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg6 = (1'h0);
  assign y = {wire11, wire10, wire9, wire8, wire5, wire4, reg7, reg6, (1'h0)};
  assign wire4 = (((8'ha8) ^ wire2) | wire3[(3'h7):(3'h4)]);
  assign wire5 = (wire4 <<< wire4);
  always
    @(posedge clk) begin
      reg6 <= wire4;
      reg7 <= $unsigned($unsigned(reg6[(3'h5):(2'h2)]));
    end
  assign wire8 = wire3;
  assign wire9 = wire2;
  assign wire10 = (($signed(wire8[(1'h0):(1'h0)]) ?
                      wire8 : wire1) != (|(8'ha7)));
  assign wire11 = {(wire8 && $unsigned(((8'ha6) && (8'hab))))};
endmodule