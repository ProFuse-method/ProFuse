(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param30 = ((((~(8'ha8)) ? ((8'ha6) ? (8'ha1) : (8'ha8)) : ((8'h9c) < (8'ha9))) ? ((&(8'ha2)) ? (&(8'ha2)) : ((8'h9d) ? (8'hae) : (8'h9c))) : {((8'h9c) + (8'ha4))}) ? (~(((8'ha7) + (8'haa)) ? ((8'h9c) ? (8'h9d) : (8'ha1)) : (^~(8'ha5)))) : (((~&(8'ha1)) >= ((8'haf) ? (8'hac) : (8'ha4))) <<< ({(8'had)} == {(8'ha5)}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h5a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire3;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire [(3'h4):(1'h0)] wire1;
  input wire [(4'ha):(1'h0)] wire0;
  wire [(4'ha):(1'h0)] wire20;
  wire [(3'h7):(1'h0)] wire6;
  wire signed [(4'ha):(1'h0)] wire5;
  wire [(3'h5):(1'h0)] wire4;
  reg signed [(4'ha):(1'h0)] reg29 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg28 = (1'h0);
  reg [(4'h9):(1'h0)] reg27 = (1'h0);
  reg [(3'h5):(1'h0)] reg26 = (1'h0);
  reg [(3'h7):(1'h0)] reg25 = (1'h0);
  reg [(4'h9):(1'h0)] reg24 = (1'h0);
  reg [(2'h2):(1'h0)] reg23 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg22 = (1'h0);
  assign y = {wire20,
                 wire6,
                 wire5,
                 wire4,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 (1'h0)};
  assign wire4 = (((^~wire1[(2'h2):(1'h1)]) ?
                         wire3[(3'h5):(3'h4)] : $unsigned(wire1)) ?
                     {(&wire2[(2'h3):(1'h1)])} : wire2[(1'h0):(1'h0)]);
  assign wire5 = wire1;
  assign wire6 = wire0[(4'ha):(4'ha)];
  module7 #() modinst21 (.wire10(wire4), .wire9(wire6), .y(wire20), .clk(clk), .wire8(wire0), .wire11(wire3));
  always
    @(posedge clk) begin
      reg22 <= (($unsigned($signed(wire6)) && (wire5[(2'h2):(1'h0)] ^~ (wire20 > wire20))) ?
          $unsigned({$signed(wire1)}) : wire3[(2'h2):(2'h2)]);
      reg23 <= {wire4[(3'h5):(3'h5)]};
    end
  always
    @(posedge clk) begin
      if ($unsigned(reg23))
        begin
          reg24 <= (&$signed((&wire20)));
          reg25 <= (wire1 - $signed((~|wire20[(2'h2):(2'h2)])));
        end
      else
        begin
          reg24 <= wire5[(3'h4):(1'h1)];
          if (wire0)
            begin
              reg25 <= $signed(reg24);
              reg26 <= $signed(({wire4[(3'h5):(1'h1)]} ?
                  reg24[(4'h9):(3'h7)] : wire4[(1'h1):(1'h1)]));
              reg27 <= $signed((wire6 ?
                  wire0[(4'h9):(2'h2)] : $unsigned($signed(wire20))));
            end
          else
            begin
              reg25 <= (8'had);
              reg26 <= $unsigned($unsigned((~$unsigned(reg22))));
            end
        end
      reg28 <= ((|(wire0[(1'h1):(1'h0)] ?
          wire1 : wire4[(2'h3):(2'h2)])) > wire1);
      reg29 <= $unsigned(($signed(wire0) | ($signed(reg28) ?
          (~&wire5) : (reg26 + reg24))));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7  (y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h32):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire11;
  input wire signed [(3'h4):(1'h0)] wire10;
  input wire signed [(2'h2):(1'h0)] wire9;
  input wire [(3'h4):(1'h0)] wire8;
  wire signed [(3'h7):(1'h0)] wire14;
  wire [(3'h5):(1'h0)] wire13;
  wire [(4'ha):(1'h0)] wire12;
  reg signed [(3'h5):(1'h0)] reg19 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg18 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg17 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg16 = (1'h0);
  reg [(4'h8):(1'h0)] reg15 = (1'h0);
  assign y = {wire14,
                 wire13,
                 wire12,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 (1'h0)};
  assign wire12 = $unsigned((!{wire10[(2'h3):(1'h0)]}));
  assign wire13 = (~|{wire12});
  assign wire14 = wire8[(1'h1):(1'h1)];
  always
    @(posedge clk) begin
      reg15 <= ((8'h9e) + wire14[(2'h2):(2'h2)]);
      reg16 <= {$unsigned((~&$unsigned(wire13)))};
      reg17 <= (8'ha3);
    end
  always
    @(posedge clk) begin
      reg18 <= (reg16 ~^ wire10[(1'h0):(1'h0)]);
      reg19 <= reg15;
    end
endmodule