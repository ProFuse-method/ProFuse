(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h2a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire signed [(4'h8):(1'h0)] wire42;
  wire signed [(4'h8):(1'h0)] wire40;
  wire [(4'hb):(1'h0)] wire5;
  wire [(4'ha):(1'h0)] wire4;
  reg signed [(3'h4):(1'h0)] reg44 = (1'h0);
  assign y = {wire42, wire40, wire5, wire4, reg44, (1'h0)};
  assign wire4 = $signed(wire2[(2'h2):(2'h2)]);
  assign wire5 = wire4;
  module6 #() modinst41 (.wire9(wire3), .y(wire40), .wire10(wire5), .wire7(wire4), .wire8(wire0), .clk(clk));
  module16 #() modinst43 (.y(wire42), .wire19(wire2), .clk(clk), .wire18(wire40), .wire20(wire5), .wire17(wire1));
  always
    @(posedge clk) begin
      reg44 <= $signed((+(~$signed(wire5))));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module6  (y, clk, wire10, wire9, wire8, wire7);
  output wire [(32'h75):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire10;
  input wire signed [(3'h4):(1'h0)] wire9;
  input wire [(4'ha):(1'h0)] wire8;
  input wire [(4'ha):(1'h0)] wire7;
  wire [(4'h8):(1'h0)] wire39;
  wire signed [(3'h6):(1'h0)] wire37;
  wire [(4'hb):(1'h0)] wire31;
  wire [(2'h3):(1'h0)] wire29;
  wire [(4'h9):(1'h0)] wire15;
  wire [(4'hb):(1'h0)] wire14;
  wire signed [(3'h7):(1'h0)] wire13;
  wire [(4'h8):(1'h0)] wire12;
  wire signed [(4'ha):(1'h0)] wire11;
  reg signed [(4'h8):(1'h0)] reg38 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg36 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg35 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg34 = (1'h0);
  reg [(3'h5):(1'h0)] reg33 = (1'h0);
  reg [(4'ha):(1'h0)] reg32 = (1'h0);
  assign y = {wire39,
                 wire37,
                 wire31,
                 wire29,
                 wire15,
                 wire14,
                 wire13,
                 wire12,
                 wire11,
                 reg38,
                 reg36,
                 reg35,
                 reg34,
                 reg33,
                 reg32,
                 (1'h0)};
  assign wire11 = (($unsigned(wire10[(2'h2):(1'h1)]) ?
                          $unsigned((wire8 ? wire9 : (8'ha8))) : wire9) ?
                      wire8 : {wire9});
  assign wire12 = wire10[(1'h1):(1'h0)];
  assign wire13 = $unsigned(((wire7 ?
                      wire9[(2'h3):(2'h2)] : (wire9 >>> wire11)) >= (wire9[(1'h1):(1'h1)] ?
                      $unsigned(wire7) : (!wire9))));
  assign wire14 = wire10[(3'h5):(2'h3)];
  assign wire15 = (!(wire12[(1'h0):(1'h0)] ?
                      ($unsigned(wire12) * $signed(wire8)) : (wire8[(2'h2):(2'h2)] >> (wire9 == (8'haf)))));
  module16 #() modinst30 (.wire20(wire10), .clk(clk), .wire17(wire8), .y(wire29), .wire18(wire12), .wire19(wire14));
  assign wire31 = (((wire29 <= $signed(wire10)) >> (^(+wire14))) ?
                      (((wire10 > (8'ha4)) != (^(8'ha2))) ?
                          $signed(wire15) : (wire14 < $unsigned(wire10))) : (^$signed((|wire9))));
  always
    @(posedge clk) begin
      reg32 <= ($unsigned((^~{wire11})) ?
          $signed(((~|wire10) ?
              (!wire7) : wire15)) : $unsigned((~^$unsigned(wire9))));
      reg33 <= {($unsigned($signed(wire31)) >>> wire8)};
      if (($signed(reg33) < (!((8'ha9) ?
          (wire10 ? wire31 : wire31) : (~&(8'ha2))))))
        begin
          reg34 <= (~wire11);
          reg35 <= reg32;
          reg36 <= (^((8'ha6) >> (wire10 ?
              $unsigned(wire8) : reg32[(1'h0):(1'h0)])));
        end
      else
        begin
          reg34 <= $unsigned(wire15);
        end
    end
  assign wire37 = wire14;
  always
    @(posedge clk) begin
      reg38 <= $unsigned(wire8[(2'h2):(1'h1)]);
    end
  assign wire39 = ((!((+(8'ha5)) ?
                          (wire14 ? wire11 : (8'had)) : $unsigned(wire37))) ?
                      wire31 : wire14[(4'ha):(3'h4)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module16
#(parameter param28 = (((((8'ha1) <<< (8'ha4)) == ((8'hab) ? (8'had) : (8'ha8))) >= (((8'haa) <= (8'had)) * (~&(8'ha5)))) | ((((8'h9e) ? (8'h9d) : (8'ha7)) ? ((8'ha4) ? (8'ha8) : (8'ha7)) : ((8'ha6) << (8'h9f))) + (((8'ha2) ? (8'ha8) : (8'h9d)) + (+(8'hb0))))))
(y, clk, wire20, wire19, wire18, wire17);
  output wire [(32'h44):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire20;
  input wire [(3'h7):(1'h0)] wire19;
  input wire [(4'h8):(1'h0)] wire18;
  input wire signed [(4'ha):(1'h0)] wire17;
  wire signed [(4'hb):(1'h0)] wire27;
  wire signed [(4'h8):(1'h0)] wire21;
  reg [(4'ha):(1'h0)] reg26 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg25 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg24 = (1'h0);
  reg [(3'h6):(1'h0)] reg23 = (1'h0);
  reg [(4'hb):(1'h0)] reg22 = (1'h0);
  assign y = {wire27, wire21, reg26, reg25, reg24, reg23, reg22, (1'h0)};
  assign wire21 = $unsigned(wire18);
  always
    @(posedge clk) begin
      reg22 <= wire18;
      reg23 <= wire19;
      reg24 <= (reg22[(3'h7):(2'h3)] ?
          reg22 : (wire17[(2'h3):(2'h3)] & $signed((reg23 ? reg23 : reg23))));
    end
  always
    @(posedge clk) begin
      reg25 <= wire20;
      reg26 <= wire18[(2'h2):(1'h1)];
    end
  assign wire27 = (reg23[(2'h2):(1'h0)] ? wire19 : wire21[(3'h6):(3'h5)]);
endmodule