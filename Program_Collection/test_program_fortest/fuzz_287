(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param48 = (((8'h9f) <<< ((|(8'h9e)) >>> ((8'ha7) ? (8'ha7) : (8'ha9)))) ? {(~|(!(8'h9c)))} : ({(~(8'ha1))} ? ({(8'h9d)} + ((8'ha2) ? (8'hab) : (8'h9f))) : (((8'haa) != (8'ha9)) ? (!(8'ha6)) : ((8'haf) < (8'ha0))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h62):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire3;
  input wire [(4'hb):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire0;
  wire [(4'h9):(1'h0)] wire47;
  wire signed [(4'h9):(1'h0)] wire46;
  wire [(4'h9):(1'h0)] wire45;
  wire signed [(4'hb):(1'h0)] wire42;
  wire signed [(4'h8):(1'h0)] wire41;
  wire [(4'ha):(1'h0)] wire39;
  wire [(4'ha):(1'h0)] wire6;
  wire signed [(3'h6):(1'h0)] wire5;
  wire [(4'hb):(1'h0)] wire4;
  reg signed [(3'h6):(1'h0)] reg44 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg43 = (1'h0);
  assign y = {wire47,
                 wire46,
                 wire45,
                 wire42,
                 wire41,
                 wire39,
                 wire6,
                 wire5,
                 wire4,
                 reg44,
                 reg43,
                 (1'h0)};
  assign wire4 = wire1;
  assign wire5 = {{((wire2 & wire3) > {(8'had)})}};
  assign wire6 = wire2[(3'h4):(3'h4)];
  module7 #() modinst40 (wire39, clk, wire4, wire2, wire3, wire0);
  assign wire41 = $signed({wire5[(1'h1):(1'h1)]});
  assign wire42 = (wire1 <= $signed({(wire41 << wire39)}));
  always
    @(posedge clk) begin
      reg43 <= {((wire0[(3'h7):(2'h2)] <<< (wire41 ? wire4 : wire39)) ?
              ($signed(wire0) != $signed(wire0)) : {$signed(wire4)})};
      reg44 <= (|wire6[(3'h5):(1'h1)]);
    end
  assign wire45 = $signed($unsigned((wire1 | (~&wire5))));
  assign wire46 = $signed($unsigned(((~|wire45) ?
                      wire6[(1'h0):(1'h0)] : $unsigned(wire0))));
  assign wire47 = wire42[(3'h6):(3'h5)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7
#(parameter param38 = ((({(8'h9c)} ? {(8'ha2)} : ((8'hb0) <<< (8'ha7))) >>> {(^~(8'ha7))}) ? ({((8'hb0) == (8'hae))} ^~ (&(8'haa))) : (({(8'had)} ? (8'hab) : ((8'had) >>> (8'hab))) ? ((!(8'ha6)) << ((8'hab) < (8'ha5))) : (~^((8'ha9) ? (8'ha1) : (8'ha6))))))
(y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h2b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire11;
  input wire [(4'h9):(1'h0)] wire10;
  input wire signed [(4'ha):(1'h0)] wire9;
  input wire signed [(3'h5):(1'h0)] wire8;
  wire [(3'h7):(1'h0)] wire37;
  wire [(2'h2):(1'h0)] wire36;
  wire signed [(4'hb):(1'h0)] wire34;
  wire [(4'h8):(1'h0)] wire13;
  wire [(4'h8):(1'h0)] wire12;
  reg signed [(3'h6):(1'h0)] reg14 = (1'h0);
  assign y = {wire37, wire36, wire34, wire13, wire12, reg14, (1'h0)};
  assign wire12 = (~&$signed(wire8[(1'h1):(1'h1)]));
  assign wire13 = $unsigned(wire10);
  always
    @(posedge clk) begin
      reg14 <= $signed($signed(wire12));
    end
  module15 #() modinst35 (.wire19(wire8), .y(wire34), .wire16(wire11), .wire18(wire13), .wire17(wire10), .clk(clk));
  assign wire36 = (~^(({wire8} ?
                      $unsigned(wire10) : wire12[(4'h8):(4'h8)]) + (~(wire11 ?
                      reg14 : wire9))));
  assign wire37 = $signed(wire9);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15
#(parameter param33 = ({(((8'h9f) ^ (8'ha9)) ? ((8'had) ~^ (8'ha2)) : ((8'ha5) ? (8'ha9) : (8'ha8)))} ? (^(^~((8'h9f) <<< (8'haf)))) : (({(8'ha9)} << (8'haf)) ? {((8'ha9) ? (8'ha7) : (8'h9e))} : (&((8'ha3) ? (8'ha4) : (8'ha9))))))
(y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h5f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire19;
  input wire signed [(4'h8):(1'h0)] wire18;
  input wire signed [(2'h2):(1'h0)] wire17;
  input wire [(3'h4):(1'h0)] wire16;
  wire [(4'hb):(1'h0)] wire32;
  wire [(2'h2):(1'h0)] wire31;
  wire [(3'h7):(1'h0)] wire30;
  wire [(4'h8):(1'h0)] wire29;
  wire signed [(4'ha):(1'h0)] wire28;
  wire [(4'h9):(1'h0)] wire27;
  wire signed [(2'h2):(1'h0)] wire26;
  wire signed [(3'h6):(1'h0)] wire25;
  wire [(4'ha):(1'h0)] wire24;
  wire signed [(4'h8):(1'h0)] wire23;
  wire [(4'ha):(1'h0)] wire22;
  reg signed [(3'h5):(1'h0)] reg21 = (1'h0);
  reg [(3'h6):(1'h0)] reg20 = (1'h0);
  assign y = {wire32,
                 wire31,
                 wire30,
                 wire29,
                 wire28,
                 wire27,
                 wire26,
                 wire25,
                 wire24,
                 wire23,
                 wire22,
                 reg21,
                 reg20,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg20 <= wire16[(3'h4):(3'h4)];
      reg21 <= wire17[(1'h1):(1'h0)];
    end
  assign wire22 = wire16[(3'h4):(1'h1)];
  assign wire23 = $signed(reg21);
  assign wire24 = $unsigned($signed($signed(reg20[(2'h3):(2'h2)])));
  assign wire25 = ((&(wire22 ^~ $unsigned(wire23))) <= (((wire16 ?
                              wire17 : reg21) ?
                          (wire22 ? wire24 : wire24) : {reg20}) ?
                      wire23 : (+(wire19 == wire23))));
  assign wire26 = wire22;
  assign wire27 = $signed(wire18[(1'h1):(1'h1)]);
  assign wire28 = (^~(($signed((8'ha4)) ?
                      (wire24 ?
                          wire22 : wire26) : $unsigned(wire23)) >= $unsigned(((8'ha1) <= wire24))));
  assign wire29 = wire23;
  assign wire30 = (8'had);
  assign wire31 = wire17[(1'h0):(1'h0)];
  assign wire32 = reg20;
endmodule