(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param96 = (^{(((8'haf) ? (8'ha5) : (8'ha7)) << ((8'h9d) ? (8'h9e) : (8'hb0)))}))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'hae):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire signed [(3'h5):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire0;
  wire signed [(3'h6):(1'h0)] wire95;
  wire signed [(3'h6):(1'h0)] wire94;
  wire [(3'h4):(1'h0)] wire90;
  wire [(3'h6):(1'h0)] wire89;
  wire [(4'hb):(1'h0)] wire75;
  wire [(4'hb):(1'h0)] wire77;
  wire [(3'h6):(1'h0)] wire78;
  reg [(3'h6):(1'h0)] reg93 = (1'h0);
  reg [(3'h7):(1'h0)] reg92 = (1'h0);
  reg [(3'h7):(1'h0)] reg91 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg88 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg87 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg86 = (1'h0);
  reg [(3'h4):(1'h0)] reg85 = (1'h0);
  reg [(2'h3):(1'h0)] reg84 = (1'h0);
  reg [(3'h5):(1'h0)] reg83 = (1'h0);
  reg [(2'h3):(1'h0)] reg82 = (1'h0);
  reg [(3'h6):(1'h0)] reg81 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg80 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg9 = (1'h0);
  reg [(4'hb):(1'h0)] reg8 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg6 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg5 = (1'h0);
  reg [(4'h8):(1'h0)] reg4 = (1'h0);
  assign y = {wire95,
                 wire94,
                 wire90,
                 wire89,
                 wire75,
                 wire77,
                 wire78,
                 reg93,
                 reg92,
                 reg91,
                 reg88,
                 reg87,
                 reg86,
                 reg85,
                 reg84,
                 reg83,
                 reg82,
                 reg81,
                 reg80,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= {((~^{wire2}) ?
              $signed($signed(wire2)) : (wire2[(1'h0):(1'h0)] | {wire3}))};
      if (wire3)
        begin
          if ($unsigned(({$unsigned((8'ha1))} ?
              wire2 : $unsigned(((8'ha0) >> wire3)))))
            begin
              reg5 <= (^~$unsigned(wire2));
              reg6 <= $signed(({reg5[(1'h0):(1'h0)]} ?
                  wire0[(2'h3):(1'h1)] : wire1));
              reg7 <= wire2[(2'h3):(2'h2)];
            end
          else
            begin
              reg5 <= (((~|$unsigned(wire3)) ?
                  ($signed((8'hab)) ? (+reg5) : wire0) : reg7) * (~&{reg7}));
            end
          reg8 <= reg6;
          reg9 <= reg6;
        end
      else
        begin
          reg5 <= (reg4[(1'h0):(1'h0)] || $signed($signed(wire0)));
        end
    end
  module10 #() modinst76 (wire75, clk, wire2, reg6, reg8, reg7);
  assign wire77 = reg5;
  module10 #() modinst79 (.wire12(reg8), .clk(clk), .wire11(wire0), .y(wire78), .wire14(reg9), .wire13(reg5));
  always
    @(posedge clk) begin
      if ($signed(wire3[(4'h8):(3'h7)]))
        begin
          reg80 <= $unsigned(wire3[(3'h6):(3'h5)]);
          reg81 <= reg6;
        end
      else
        begin
          reg80 <= $signed((|(+wire75[(1'h0):(1'h0)])));
          if ($signed(reg9))
            begin
              reg81 <= (|$signed($unsigned((wire2 < (8'ha8)))));
              reg82 <= {wire2};
              reg83 <= (^~wire0);
            end
          else
            begin
              reg81 <= $signed({reg83[(3'h4):(2'h2)]});
            end
          if (wire3[(4'h8):(1'h1)])
            begin
              reg84 <= {$unsigned($signed($unsigned(reg8)))};
              reg85 <= {reg82};
              reg86 <= reg6[(2'h2):(1'h0)];
            end
          else
            begin
              reg84 <= reg7[(4'ha):(3'h5)];
              reg85 <= (~&$unsigned(reg81[(3'h4):(2'h3)]));
            end
        end
      reg87 <= $signed((((reg82 <= wire75) ^ (reg81 ^~ reg8)) ~^ reg7[(3'h7):(1'h0)]));
      reg88 <= wire77;
    end
  assign wire89 = reg88[(2'h2):(1'h0)];
  assign wire90 = (&reg4[(3'h7):(3'h5)]);
  always
    @(posedge clk) begin
      if ({(((|wire75) & wire3[(3'h6):(1'h1)]) ? reg87 : $signed({wire0}))})
        begin
          reg91 <= {(^~reg4)};
          reg92 <= $signed((8'ha0));
        end
      else
        begin
          reg91 <= (|((!(&reg82)) != $signed($signed(wire78))));
        end
      reg93 <= $unsigned((!$unsigned($unsigned(wire3))));
    end
  assign wire94 = {(($unsigned(reg82) ^ (reg85 ? reg86 : wire77)) ?
                          {(reg93 ? wire77 : reg86)} : reg6[(3'h5):(1'h1)])};
  assign wire95 = reg6[(2'h3):(2'h2)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10  (y, clk, wire11, wire12, wire13, wire14);
  output wire [(32'hd9):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire11;
  input wire signed [(3'h5):(1'h0)] wire12;
  input wire signed [(4'hb):(1'h0)] wire13;
  input wire [(4'hb):(1'h0)] wire14;
  wire [(4'h9):(1'h0)] wire67;
  wire [(4'ha):(1'h0)] wire66;
  wire [(4'ha):(1'h0)] wire64;
  wire [(2'h2):(1'h0)] wire62;
  wire signed [(4'hb):(1'h0)] wire51;
  wire signed [(4'h9):(1'h0)] wire49;
  reg signed [(3'h7):(1'h0)] reg74 = (1'h0);
  reg [(3'h7):(1'h0)] reg73 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg72 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg71 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg70 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg69 = (1'h0);
  reg [(4'h8):(1'h0)] reg68 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg15 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg16 = (1'h0);
  reg [(4'h8):(1'h0)] reg17 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg18 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg19 = (1'h0);
  reg [(4'hb):(1'h0)] reg20 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg21 = (1'h0);
  reg [(2'h3):(1'h0)] reg22 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg23 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg24 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg25 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg26 = (1'h0);
  reg [(3'h7):(1'h0)] reg27 = (1'h0);
  reg [(3'h7):(1'h0)] reg28 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg29 = (1'h0);
  assign y = {wire67,
                 wire66,
                 wire64,
                 wire62,
                 wire51,
                 wire49,
                 reg74,
                 reg73,
                 reg72,
                 reg71,
                 reg70,
                 reg69,
                 reg68,
                 reg15,
                 reg16,
                 reg17,
                 reg18,
                 reg19,
                 reg20,
                 reg21,
                 reg22,
                 reg23,
                 reg24,
                 reg25,
                 reg26,
                 reg27,
                 reg28,
                 reg29,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg15 <= wire11[(2'h3):(2'h2)];
      reg16 <= ((^(wire14 >= {wire14})) ^~ reg15[(1'h0):(1'h0)]);
      if ($unsigned(($signed((wire13 & reg16)) ?
          {$unsigned(wire11)} : $signed((&wire11)))))
        begin
          reg17 <= $unsigned((~|$signed((|wire14))));
        end
      else
        begin
          if (wire13[(1'h1):(1'h0)])
            begin
              reg17 <= reg17[(3'h5):(2'h3)];
            end
          else
            begin
              reg17 <= wire11[(3'h5):(2'h3)];
              reg18 <= wire12;
              reg19 <= $unsigned(wire12);
            end
          if (wire11)
            begin
              reg20 <= reg19;
              reg21 <= wire14[(4'h8):(3'h6)];
              reg22 <= (&$signed(((|reg19) ^~ $unsigned((8'ha1)))));
            end
          else
            begin
              reg20 <= (wire13[(3'h7):(3'h7)] ? reg18 : reg21);
            end
          reg23 <= (+$unsigned({$unsigned(reg20)}));
        end
    end
  always
    @(posedge clk) begin
      reg24 <= (wire14[(3'h7):(3'h6)] <= (((reg20 ?
          wire14 : reg19) ^~ reg19[(1'h1):(1'h1)]) >>> (+(reg16 ?
          wire12 : reg22))));
      reg25 <= {$signed(($signed(reg16) >>> wire13))};
      if ((+{(8'hab)}))
        begin
          reg26 <= (((~reg21) ^ $unsigned(reg23)) ?
              ((8'ha7) ?
                  {$unsigned(reg23)} : ({reg19} ?
                      {(8'h9f)} : $signed(reg23))) : wire14);
          reg27 <= (!(((reg21 ? wire11 : wire14) ? reg23 : $signed(reg22)) ?
              $unsigned((reg22 ?
                  (8'ha7) : wire12)) : $unsigned($signed(reg25))));
        end
      else
        begin
          reg26 <= {reg15};
          if ((^$signed((((8'hae) ? reg20 : wire13) != reg25[(2'h3):(2'h3)]))))
            begin
              reg27 <= $signed((reg15[(1'h0):(1'h0)] ?
                  (reg24[(4'h8):(4'h8)] > (reg18 && wire14)) : $unsigned((reg18 ?
                      reg15 : reg27))));
              reg28 <= wire14[(3'h6):(3'h4)];
            end
          else
            begin
              reg27 <= $unsigned(({(~^(8'hac))} * ($signed(reg16) ?
                  (reg21 ? wire13 : reg20) : (-wire14))));
            end
          reg29 <= reg19[(3'h7):(3'h6)];
        end
    end
  module30 #() modinst50 (wire49, clk, wire14, reg28, reg15, reg19);
  assign wire51 = reg18;
  module52 #() modinst63 (wire62, clk, reg25, reg21, wire13, wire14);
  module52 #() modinst65 (wire64, clk, wire51, reg29, reg20, wire14);
  assign wire66 = $signed(wire11);
  assign wire67 = $unsigned(reg18[(2'h3):(2'h2)]);
  always
    @(posedge clk) begin
      reg68 <= (wire11 - reg29[(1'h1):(1'h0)]);
      reg69 <= $unsigned($signed(reg68));
      if ((-($unsigned(wire51) <<< (!(^wire66)))))
        begin
          reg70 <= $unsigned((|reg27));
          if (wire11)
            begin
              reg71 <= (8'ha4);
              reg72 <= reg19[(1'h1):(1'h1)];
            end
          else
            begin
              reg71 <= $signed(reg24[(4'h8):(2'h2)]);
              reg72 <= $signed($signed(wire14));
              reg73 <= $signed((+$unsigned($unsigned(reg70))));
            end
          reg74 <= (((wire64 ? reg18[(3'h4):(3'h4)] : $unsigned(reg19)) ?
              (wire13 < $unsigned((8'ha9))) : reg69[(2'h3):(1'h0)]) > reg69);
        end
      else
        begin
          reg70 <= ((8'ha1) <= $signed(wire62[(2'h2):(1'h1)]));
          reg71 <= ($unsigned({reg16[(3'h5):(2'h2)]}) ?
              (reg28 & reg25) : ((8'hb0) ?
                  wire49 : ($signed(reg20) << reg18[(3'h6):(1'h0)])));
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module52  (y, clk, wire56, wire55, wire54, wire53);
  output wire [(32'h29):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire56;
  input wire [(3'h6):(1'h0)] wire55;
  input wire signed [(4'hb):(1'h0)] wire54;
  input wire [(4'ha):(1'h0)] wire53;
  wire signed [(4'hb):(1'h0)] wire61;
  wire signed [(2'h2):(1'h0)] wire60;
  wire signed [(4'h8):(1'h0)] wire59;
  wire [(4'h8):(1'h0)] wire58;
  wire [(4'hb):(1'h0)] wire57;
  assign y = {wire61, wire60, wire59, wire58, wire57, (1'h0)};
  assign wire57 = wire56[(4'ha):(2'h2)];
  assign wire58 = (($unsigned($signed(wire54)) >> wire53) > $signed($unsigned($unsigned(wire57))));
  assign wire59 = (wire54 <<< wire56[(4'h8):(2'h2)]);
  assign wire60 = {wire56};
  assign wire61 = wire59;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module30
#(parameter param48 = (~(((~(8'haa)) ? (!(8'ha8)) : ((8'ha8) - (8'haa))) - {((8'had) ? (8'ha5) : (8'ha7))})))
(y, clk, wire34, wire33, wire32, wire31);
  output wire [(32'h59):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire34;
  input wire signed [(3'h7):(1'h0)] wire33;
  input wire signed [(4'h8):(1'h0)] wire32;
  input wire signed [(3'h5):(1'h0)] wire31;
  wire signed [(2'h3):(1'h0)] wire47;
  wire [(2'h3):(1'h0)] wire46;
  wire signed [(4'hb):(1'h0)] wire45;
  wire signed [(3'h5):(1'h0)] wire44;
  wire signed [(3'h7):(1'h0)] wire43;
  wire [(4'h9):(1'h0)] wire42;
  wire signed [(3'h4):(1'h0)] wire41;
  wire signed [(4'ha):(1'h0)] wire40;
  wire [(4'h8):(1'h0)] wire39;
  wire [(3'h6):(1'h0)] wire38;
  wire signed [(4'h9):(1'h0)] wire37;
  reg signed [(4'ha):(1'h0)] reg36 = (1'h0);
  reg [(2'h3):(1'h0)] reg35 = (1'h0);
  assign y = {wire47,
                 wire46,
                 wire45,
                 wire44,
                 wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire39,
                 wire38,
                 wire37,
                 reg36,
                 reg35,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg35 <= (+{(wire31[(3'h4):(1'h1)] >> $signed(wire34))});
      reg36 <= (wire34[(2'h2):(1'h1)] > ((wire32[(4'h8):(3'h7)] == ((8'haf) ^ wire34)) - (wire32[(3'h6):(1'h0)] ?
          wire31[(2'h3):(1'h0)] : (wire33 << wire34))));
    end
  assign wire37 = reg36[(3'h7):(3'h5)];
  assign wire38 = $signed(((~^wire37) ?
                      $signed((8'hae)) : (|$signed((8'hae)))));
  assign wire39 = $signed({(&wire33[(3'h6):(3'h6)])});
  assign wire40 = ((8'hae) && reg35);
  assign wire41 = ($unsigned({(wire39 ^ wire34)}) ?
                      {($unsigned(wire33) ?
                              $unsigned(wire33) : $signed(wire38))} : wire33);
  assign wire42 = wire41;
  assign wire43 = ((~wire42) ?
                      wire39[(3'h7):(3'h4)] : $signed($signed($unsigned(wire37))));
  assign wire44 = $unsigned(($unsigned((&wire37)) ^ $signed($unsigned(wire33))));
  assign wire45 = wire43;
  assign wire46 = (((wire43 >>> $signed(wire34)) ?
                          {$unsigned(wire40)} : ((wire44 ?
                              wire40 : (8'h9d)) & wire31[(3'h5):(1'h1)])) ?
                      $unsigned((~$signed(wire33))) : $unsigned(($signed(reg36) ?
                          $signed(wire39) : $unsigned(wire31))));
  assign wire47 = wire43[(1'h0):(1'h0)];
endmodule