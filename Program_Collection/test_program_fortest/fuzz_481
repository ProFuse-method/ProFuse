(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h17):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire0;
  input wire [(2'h3):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire [(4'h8):(1'h0)] wire3;
  wire [(2'h3):(1'h0)] wire30;
  wire signed [(3'h4):(1'h0)] wire6;
  wire [(3'h4):(1'h0)] wire28;
  reg signed [(3'h6):(1'h0)] reg4 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg5 = (1'h0);
  assign y = {wire30, wire6, wire28, reg4, reg5, (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire1;
      reg5 <= wire1;
    end
  assign wire6 = (wire1[(1'h0):(1'h0)] ?
                     (wire2[(1'h1):(1'h0)] ? $unsigned(wire1) : wire0) : wire1);
  module7 #() modinst29 (wire28, clk, reg5, wire6, wire3, wire2);
  assign wire30 = (~^reg5[(3'h4):(1'h1)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7  (y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h63):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire11;
  input wire signed [(3'h4):(1'h0)] wire10;
  input wire signed [(4'h8):(1'h0)] wire9;
  input wire signed [(4'ha):(1'h0)] wire8;
  wire [(3'h6):(1'h0)] wire27;
  wire [(2'h3):(1'h0)] wire26;
  wire [(3'h5):(1'h0)] wire25;
  wire [(2'h3):(1'h0)] wire24;
  wire [(4'h9):(1'h0)] wire21;
  wire [(4'ha):(1'h0)] wire20;
  wire signed [(3'h7):(1'h0)] wire19;
  reg [(3'h5):(1'h0)] reg23 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg22 = (1'h0);
  reg [(4'ha):(1'h0)] reg18 = (1'h0);
  reg [(3'h5):(1'h0)] reg17 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg16 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg15 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg14 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg13 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg12 = (1'h0);
  assign y = {wire27,
                 wire26,
                 wire25,
                 wire24,
                 wire21,
                 wire20,
                 wire19,
                 reg23,
                 reg22,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg12 <= (^wire11[(2'h3):(1'h0)]);
    end
  always
    @(posedge clk) begin
      reg13 <= $unsigned(reg12[(3'h5):(1'h0)]);
      if ($unsigned((|((~|reg12) ? $signed(reg12) : (~^wire8)))))
        begin
          reg14 <= ($unsigned(($signed(wire9) == wire11)) == (-$signed((^wire11))));
          if ((&($unsigned($signed(wire11)) + {(|wire11)})))
            begin
              reg15 <= (wire8 ?
                  $unsigned($unsigned(wire9)) : (((8'hae) | (wire8 ?
                          reg12 : wire9)) ?
                      (8'ha2) : (|{wire10})));
              reg16 <= (&wire11[(1'h1):(1'h0)]);
            end
          else
            begin
              reg15 <= (~|wire10);
              reg16 <= (reg14 * (~^wire10));
              reg17 <= (~(((reg15 ? reg16 : reg13) ? {reg15} : wire11) ?
                  $signed($signed(reg16)) : $unsigned((+reg15))));
            end
          reg18 <= (8'had);
        end
      else
        begin
          reg14 <= reg12[(4'hb):(3'h4)];
          reg15 <= $signed(($unsigned((wire8 * (8'ha8))) ?
              $unsigned((wire11 ? reg14 : reg12)) : reg17[(2'h3):(1'h1)]));
        end
    end
  assign wire19 = reg17;
  assign wire20 = (wire10[(2'h2):(1'h0)] ?
                      $signed(reg18[(4'h8):(3'h4)]) : reg18);
  assign wire21 = wire11[(2'h2):(1'h0)];
  always
    @(posedge clk) begin
      reg22 <= reg15;
      reg23 <= (&wire21[(3'h5):(2'h2)]);
    end
  assign wire24 = reg14[(1'h1):(1'h0)];
  assign wire25 = $unsigned((8'h9f));
  assign wire26 = wire8[(4'h9):(2'h2)];
  assign wire27 = {{$unsigned((wire26 ? wire10 : wire20))}};
endmodule