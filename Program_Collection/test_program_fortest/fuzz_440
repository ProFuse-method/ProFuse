(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param63 = (-((((8'h9f) ~^ (8'haa)) + (+(8'ha3))) ? (~|(^(8'ha7))) : ((&(8'ha9)) && (!(8'ha7))))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h4c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire0;
  input wire [(4'h8):(1'h0)] wire1;
  input wire signed [(3'h4):(1'h0)] wire2;
  input wire [(4'ha):(1'h0)] wire3;
  wire signed [(4'h8):(1'h0)] wire4;
  wire [(2'h2):(1'h0)] wire9;
  wire signed [(4'h9):(1'h0)] wire10;
  wire signed [(4'ha):(1'h0)] wire13;
  wire [(3'h7):(1'h0)] wire61;
  reg [(3'h6):(1'h0)] reg5 = (1'h0);
  reg [(4'h9):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg7 = (1'h0);
  reg [(3'h7):(1'h0)] reg8 = (1'h0);
  reg [(2'h2):(1'h0)] reg11 = (1'h0);
  reg [(4'h8):(1'h0)] reg12 = (1'h0);
  assign y = {wire4,
                 wire9,
                 wire10,
                 wire13,
                 wire61,
                 reg5,
                 reg6,
                 reg7,
                 reg8,
                 reg11,
                 reg12,
                 (1'h0)};
  assign wire4 = ((!wire3[(1'h0):(1'h0)]) - $unsigned((wire0 ^ (wire3 ?
                     wire0 : wire1))));
  always
    @(posedge clk) begin
      if (wire3)
        begin
          if ($unsigned($signed(((|wire2) ? $unsigned(wire0) : (~&wire3)))))
            begin
              reg5 <= {(&((-(8'ha0)) ~^ ((8'h9e) > wire2)))};
              reg6 <= reg5[(1'h0):(1'h0)];
            end
          else
            begin
              reg5 <= $unsigned($signed((~&reg6[(1'h1):(1'h0)])));
              reg6 <= $signed((($signed(wire3) >>> $unsigned((8'ha5))) || ((wire0 ?
                  wire3 : wire3) <= (reg5 * reg6))));
            end
          if ($signed($unsigned(((8'ha9) && (reg6 ? wire1 : wire0)))))
            begin
              reg7 <= $signed((~|((^reg6) ?
                  ((8'hae) ? wire2 : (8'h9e)) : $signed(wire1))));
            end
          else
            begin
              reg7 <= wire3;
              reg8 <= ((~|(~^(wire1 ? wire3 : reg6))) ?
                  $signed({$signed(reg6)}) : wire3[(1'h0):(1'h0)]);
            end
        end
      else
        begin
          if (wire2[(1'h1):(1'h1)])
            begin
              reg5 <= wire3[(1'h0):(1'h0)];
              reg6 <= (~&(|reg8));
              reg7 <= {$unsigned(reg6)};
            end
          else
            begin
              reg5 <= (+(!(reg8 ? $signed(reg5) : reg8)));
              reg6 <= {wire3[(1'h1):(1'h1)]};
              reg7 <= $unsigned($signed(($signed(reg7) ?
                  (|wire0) : reg7[(1'h1):(1'h1)])));
            end
          reg8 <= (((+$unsigned(reg7)) ?
                  ((wire3 ? reg5 : wire4) ?
                      (reg8 >= reg6) : wire1) : reg6[(2'h3):(1'h0)]) ?
              reg6[(3'h5):(3'h4)] : reg6[(2'h2):(1'h0)]);
        end
    end
  assign wire9 = {(|reg5)};
  assign wire10 = reg7;
  always
    @(posedge clk) begin
      reg11 <= $signed(wire3[(1'h0):(1'h0)]);
      reg12 <= (wire9 ?
          (reg11 != (((8'ha1) ? wire2 : wire4) ?
              (^(8'hb0)) : $signed(wire10))) : $signed(reg7));
    end
  assign wire13 = reg5[(2'h2):(1'h0)];
  module14 #() modinst62 (.wire17(wire3), .y(wire61), .wire18(wire13), .wire16(reg7), .clk(clk), .wire15(wire0));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module14
#(parameter param60 = ({{((8'haa) ? (8'ha0) : (8'hab))}} ? ((((8'h9d) ? (8'ha7) : (8'hab)) ? (8'ha1) : (^(8'h9d))) ? ((~|(8'h9d)) ? ((8'ha6) ? (8'ha6) : (8'had)) : (!(8'ha4))) : (~|(~&(8'had)))) : (&(~^{(8'ha3)}))))
(y, clk, wire18, wire17, wire16, wire15);
  output wire [(32'h6d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire18;
  input wire [(4'ha):(1'h0)] wire17;
  input wire [(3'h5):(1'h0)] wire16;
  input wire signed [(4'ha):(1'h0)] wire15;
  wire signed [(2'h2):(1'h0)] wire59;
  wire signed [(3'h6):(1'h0)] wire55;
  wire [(3'h4):(1'h0)] wire53;
  wire signed [(4'h8):(1'h0)] wire40;
  wire [(4'h8):(1'h0)] wire39;
  wire signed [(3'h7):(1'h0)] wire37;
  wire signed [(3'h5):(1'h0)] wire24;
  wire [(4'h8):(1'h0)] wire23;
  wire signed [(4'ha):(1'h0)] wire22;
  wire [(4'h9):(1'h0)] wire21;
  wire [(2'h2):(1'h0)] wire20;
  wire signed [(4'ha):(1'h0)] wire19;
  reg signed [(4'h8):(1'h0)] reg58 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg57 = (1'h0);
  reg [(4'ha):(1'h0)] reg56 = (1'h0);
  assign y = {wire59,
                 wire55,
                 wire53,
                 wire40,
                 wire39,
                 wire37,
                 wire24,
                 wire23,
                 wire22,
                 wire21,
                 wire20,
                 wire19,
                 reg58,
                 reg57,
                 reg56,
                 (1'h0)};
  assign wire19 = ($signed(wire17) ?
                      wire18[(2'h2):(1'h0)] : (({wire18} ?
                          (~|wire16) : $unsigned(wire18)) + wire16[(2'h3):(2'h3)]));
  assign wire20 = (|($signed(wire16) > $signed($signed((8'ha6)))));
  assign wire21 = $unsigned(wire19[(4'ha):(4'h9)]);
  assign wire22 = $signed((^wire20));
  assign wire23 = $signed(((^~(wire20 ? (8'ha4) : wire20)) ?
                      (((8'ha2) | wire15) * $unsigned((8'ha8))) : wire21[(2'h3):(1'h0)]));
  assign wire24 = $unsigned((~wire23[(1'h0):(1'h0)]));
  module25 #() modinst38 (wire37, clk, wire21, wire24, wire18, wire23);
  assign wire39 = $unsigned((&$unsigned(wire22)));
  assign wire40 = wire18[(2'h3):(1'h1)];
  module41 #() modinst54 (wire53, clk, wire19, wire21, wire39, wire15);
  assign wire55 = $unsigned(wire40);
  always
    @(posedge clk) begin
      reg56 <= wire53;
      reg57 <= (|{wire37});
      reg58 <= ($unsigned({{wire20}}) ?
          wire17[(1'h0):(1'h0)] : $signed((wire20 == (&wire37))));
    end
  assign wire59 = $unsigned($unsigned($unsigned($signed(wire24))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module41
#(parameter param52 = (8'ha4))
(y, clk, wire45, wire44, wire43, wire42);
  output wire [(32'h25):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire45;
  input wire [(3'h6):(1'h0)] wire44;
  input wire signed [(3'h4):(1'h0)] wire43;
  input wire [(4'h8):(1'h0)] wire42;
  wire signed [(2'h3):(1'h0)] wire48;
  wire signed [(2'h3):(1'h0)] wire47;
  wire signed [(4'ha):(1'h0)] wire46;
  reg signed [(3'h7):(1'h0)] reg51 = (1'h0);
  reg [(2'h2):(1'h0)] reg50 = (1'h0);
  reg [(4'hb):(1'h0)] reg49 = (1'h0);
  assign y = {wire48, wire47, wire46, reg51, reg50, reg49, (1'h0)};
  assign wire46 = ($unsigned(wire43[(3'h4):(2'h3)]) + {((wire43 ?
                              wire43 : wire45) ?
                          {(8'hb0)} : $signed(wire44))});
  assign wire47 = $signed(wire44);
  assign wire48 = $signed(($unsigned((wire45 ? wire43 : wire43)) ?
                      (wire47[(1'h1):(1'h0)] ?
                          wire43[(3'h4):(2'h2)] : (~&wire43)) : wire42[(2'h2):(2'h2)]));
  always
    @(posedge clk) begin
      reg49 <= wire45[(1'h0):(1'h0)];
      reg50 <= ($unsigned(wire45[(2'h2):(1'h1)]) <<< $signed({(~&reg49)}));
      reg51 <= $unsigned(($signed($signed(wire43)) || (8'h9c)));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module25  (y, clk, wire29, wire28, wire27, wire26);
  output wire [(32'h31):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire29;
  input wire [(2'h2):(1'h0)] wire28;
  input wire [(4'ha):(1'h0)] wire27;
  input wire [(4'h8):(1'h0)] wire26;
  wire [(2'h2):(1'h0)] wire32;
  wire signed [(3'h6):(1'h0)] wire31;
  wire signed [(4'h9):(1'h0)] wire30;
  reg signed [(4'ha):(1'h0)] reg36 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg35 = (1'h0);
  reg [(3'h7):(1'h0)] reg34 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg33 = (1'h0);
  assign y = {wire32, wire31, wire30, reg36, reg35, reg34, reg33, (1'h0)};
  assign wire30 = {(-(((8'h9f) ? wire26 : wire29) ?
                          wire28 : ((8'hb0) >= wire28)))};
  assign wire31 = $unsigned($signed(($signed((8'hb0)) <<< wire26[(4'h8):(3'h4)])));
  assign wire32 = ($signed(((wire27 - wire26) ?
                          {wire27} : (wire27 ? wire30 : wire30))) ?
                      $unsigned($unsigned($unsigned((8'ha4)))) : wire28[(1'h0):(1'h0)]);
  always
    @(posedge clk) begin
      reg33 <= wire32;
      reg34 <= reg33;
    end
  always
    @(posedge clk) begin
      reg35 <= (($signed(wire26[(1'h1):(1'h0)]) ?
          wire28[(1'h1):(1'h0)] : (!(wire26 <<< (8'ha6)))) == (+$signed($signed(wire31))));
      reg36 <= (reg33[(3'h5):(1'h1)] >> reg33);
    end
endmodule