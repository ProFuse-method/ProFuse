(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h63):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire3;
  input wire signed [(4'h8):(1'h0)] wire2;
  input wire [(4'ha):(1'h0)] wire1;
  input wire signed [(4'h8):(1'h0)] wire0;
  wire [(2'h3):(1'h0)] wire19;
  wire [(3'h7):(1'h0)] wire18;
  wire signed [(2'h3):(1'h0)] wire16;
  wire [(4'h9):(1'h0)] wire15;
  wire [(4'h8):(1'h0)] wire9;
  wire signed [(3'h5):(1'h0)] wire5;
  wire [(2'h2):(1'h0)] wire4;
  reg signed [(4'h9):(1'h0)] reg17 = (1'h0);
  reg [(4'h8):(1'h0)] reg14 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg13 = (1'h0);
  reg [(3'h4):(1'h0)] reg12 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg11 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg10 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg8 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg7 = (1'h0);
  reg [(2'h2):(1'h0)] reg6 = (1'h0);
  assign y = {wire19,
                 wire18,
                 wire16,
                 wire15,
                 wire9,
                 wire5,
                 wire4,
                 reg17,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg8,
                 reg7,
                 reg6,
                 (1'h0)};
  assign wire4 = ($unsigned($unsigned($unsigned(wire3))) ?
                     ($signed((wire1 != wire1)) ?
                         (^(^(8'h9d))) : (|$unsigned(wire3))) : (8'h9f));
  assign wire5 = wire2;
  always
    @(posedge clk) begin
      reg6 <= ($unsigned(wire3[(2'h3):(1'h1)]) >= ({wire4[(2'h2):(1'h1)]} ?
          wire2[(2'h3):(1'h0)] : wire0));
      reg7 <= $unsigned(reg6[(2'h2):(1'h0)]);
      reg8 <= $signed({$unsigned((wire3 ? wire5 : reg6))});
    end
  assign wire9 = wire0;
  always
    @(posedge clk) begin
      reg10 <= $signed($unsigned((wire1 | $unsigned((8'hab)))));
      if ((+(wire3 ? $signed(wire4) : (^~wire2[(3'h5):(3'h4)]))))
        begin
          if ((((~&(!wire0)) ?
                  ((reg10 ?
                      wire1 : wire3) + $signed(reg7)) : wire3[(4'h8):(2'h3)]) ?
              wire2[(4'h8):(3'h6)] : (reg7[(3'h6):(1'h1)] << ((8'ha4) ?
                  (!wire3) : (wire4 ? wire1 : (8'hb0))))))
            begin
              reg11 <= $signed(((((8'ha7) * wire4) - (wire1 ?
                  (8'ha2) : (8'ha1))) + (reg10 << (reg8 ^ reg6))));
              reg12 <= ($unsigned(reg8) ?
                  reg7[(1'h0):(1'h0)] : $signed($unsigned(reg7)));
            end
          else
            begin
              reg11 <= ((~&((wire5 ? wire3 : wire9) * ((8'ha4) >= wire5))) ?
                  reg6 : $signed(wire9[(3'h7):(1'h0)]));
            end
          reg13 <= {{(wire4 ? (reg11 ? (8'h9c) : wire4) : $unsigned(wire9))}};
        end
      else
        begin
          reg11 <= ($signed(((wire4 ? reg13 : reg7) ?
              $unsigned(wire0) : $signed((8'h9f)))) > wire0);
          reg12 <= reg11[(3'h7):(1'h0)];
        end
      reg14 <= (8'hab);
    end
  assign wire15 = {$signed(wire4)};
  assign wire16 = (reg11 ?
                      $unsigned(((~|reg7) | (reg7 & wire1))) : {({reg11} == (wire9 ?
                              wire0 : (8'ha7)))});
  always
    @(posedge clk) begin
      reg17 <= reg6;
    end
  assign wire18 = wire5[(2'h2):(1'h1)];
  assign wire19 = (8'ha6);
endmodule