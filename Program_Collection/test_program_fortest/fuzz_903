(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param89 = (({{{(8'hb1), (8'hb8)}}, (((8'ha7) ? (8'hac) : (8'had)) ? ((8'had) ? (8'hb4) : (8'ha3)) : (~|(8'hbc)))} ? ((((8'hbb) ? (8'hac) : (8'ha9)) | ((8'hbf) ~^ (8'hbd))) - {((8'haf) ? (8'ha4) : (7'h43))}) : ({((8'hbc) ? (8'hb0) : (8'ha8))} * (((8'h9f) ? (8'had) : (8'hbd)) ? {(7'h44)} : (&(8'haa))))) + ({((8'hb0) << (~^(8'ha5)))} >= ({((8'hbc) ? (8'ha1) : (8'ha8))} ? ({(8'ha5), (8'hbb)} || (|(8'haf))) : ((&(8'hae)) >>> ((7'h40) == (7'h40)))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h41e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h15):(1'h0)] wire3;
  input wire signed [(4'hd):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire [(4'hd):(1'h0)] wire0;
  wire [(5'h14):(1'h0)] wire88;
  wire signed [(4'hd):(1'h0)] wire39;
  wire [(4'hb):(1'h0)] wire38;
  reg signed [(5'h10):(1'h0)] reg87 = (1'h0);
  reg [(5'h10):(1'h0)] reg86 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg85 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg84 = (1'h0);
  reg [(2'h2):(1'h0)] reg80 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg77 = (1'h0);
  reg [(4'h8):(1'h0)] reg75 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg73 = (1'h0);
  reg [(4'h9):(1'h0)] reg71 = (1'h0);
  reg [(5'h12):(1'h0)] reg70 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg68 = (1'h0);
  reg [(4'ha):(1'h0)] reg65 = (1'h0);
  reg [(4'h9):(1'h0)] reg63 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg62 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg60 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg57 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg56 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg55 = (1'h0);
  reg [(4'hd):(1'h0)] reg54 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg52 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg51 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg50 = (1'h0);
  reg [(4'h9):(1'h0)] reg48 = (1'h0);
  reg [(5'h10):(1'h0)] reg47 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg45 = (1'h0);
  reg [(5'h11):(1'h0)] reg44 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg41 = (1'h0);
  reg [(5'h11):(1'h0)] reg40 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg32 = (1'h0);
  reg [(4'h8):(1'h0)] reg31 = (1'h0);
  reg [(4'hf):(1'h0)] reg26 = (1'h0);
  reg [(4'hc):(1'h0)] reg25 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg23 = (1'h0);
  reg signed [(4'he):(1'h0)] reg19 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg16 = (1'h0);
  reg [(5'h14):(1'h0)] reg14 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg13 = (1'h0);
  reg [(3'h5):(1'h0)] reg12 = (1'h0);
  reg [(4'hb):(1'h0)] reg11 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg10 = (1'h0);
  reg [(5'h12):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg83 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg82 = (1'h0);
  reg [(2'h2):(1'h0)] forvar81 = (1'h0);
  reg [(4'h8):(1'h0)] forvar79 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar78 = (1'h0);
  reg [(2'h2):(1'h0)] reg76 = (1'h0);
  reg [(5'h13):(1'h0)] reg74 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar72 = (1'h0);
  reg [(5'h11):(1'h0)] reg69 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar67 = (1'h0);
  reg [(5'h13):(1'h0)] forvar66 = (1'h0);
  reg [(5'h10):(1'h0)] reg64 = (1'h0);
  reg [(5'h10):(1'h0)] forvar61 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar59 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar58 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar53 = (1'h0);
  reg [(4'h8):(1'h0)] forvar49 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg46 = (1'h0);
  reg [(4'hf):(1'h0)] forvar43 = (1'h0);
  reg [(4'hf):(1'h0)] forvar42 = (1'h0);
  reg [(3'h4):(1'h0)] reg37 = (1'h0);
  reg [(3'h4):(1'h0)] forvar36 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg35 = (1'h0);
  reg [(5'h15):(1'h0)] forvar34 = (1'h0);
  reg [(4'hc):(1'h0)] reg33 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar30 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg29 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg28 = (1'h0);
  reg [(4'he):(1'h0)] forvar27 = (1'h0);
  reg [(2'h2):(1'h0)] forvar24 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar22 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg21 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar20 = (1'h0);
  reg [(5'h13):(1'h0)] forvar18 = (1'h0);
  reg [(4'h8):(1'h0)] forvar17 = (1'h0);
  reg signed [(4'he):(1'h0)] reg15 = (1'h0);
  reg [(4'hc):(1'h0)] reg8 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar7 = (1'h0);
  reg [(4'hd):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg5 = (1'h0);
  reg [(5'h14):(1'h0)] forvar4 = (1'h0);
  assign y = {wire88,
                 wire39,
                 wire38,
                 reg87,
                 reg86,
                 reg85,
                 reg84,
                 reg80,
                 reg77,
                 reg75,
                 reg73,
                 reg71,
                 reg70,
                 reg68,
                 reg65,
                 reg63,
                 reg62,
                 reg60,
                 reg57,
                 reg56,
                 reg55,
                 reg54,
                 reg52,
                 reg51,
                 reg50,
                 reg48,
                 reg47,
                 reg45,
                 reg44,
                 reg41,
                 reg40,
                 reg32,
                 reg31,
                 reg26,
                 reg25,
                 reg23,
                 reg19,
                 reg16,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg83,
                 reg82,
                 forvar81,
                 forvar79,
                 forvar78,
                 reg76,
                 reg74,
                 forvar72,
                 reg69,
                 forvar67,
                 forvar66,
                 reg64,
                 forvar61,
                 forvar59,
                 forvar58,
                 forvar53,
                 forvar49,
                 reg46,
                 forvar43,
                 forvar42,
                 reg37,
                 forvar36,
                 reg35,
                 forvar34,
                 reg33,
                 forvar30,
                 reg29,
                 reg28,
                 forvar27,
                 forvar24,
                 forvar22,
                 reg21,
                 forvar20,
                 forvar18,
                 forvar17,
                 reg15,
                 reg8,
                 forvar7,
                 reg6,
                 reg5,
                 forvar4,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar4 = (1'h0); (forvar4 < (1'h0)); forvar4 = (forvar4 + (1'h1)))
        begin
          reg5 = (8'ha4);
          reg6 = $signed((~|$unsigned(wire1)));
          for (forvar7 = (1'h0); (forvar7 < (1'h1)); forvar7 = (forvar7 + (1'h1)))
            begin
              reg8 = {$signed($signed($signed((forvar4 ? (8'ha1) : wire3)))),
                  ((forvar7 ?
                      $signed((~^reg5)) : ($signed(wire2) ?
                          (reg6 ? wire0 : forvar4) : wire1)) ^ (forvar4 ?
                      ($signed(wire2) ?
                          $signed(reg5) : $unsigned(wire2)) : ((wire3 * reg6) <<< $unsigned(forvar7))))};
              reg9 <= wire2;
            end
          if (reg8[(4'ha):(1'h0)])
            begin
              reg10 <= (~^$unsigned($unsigned({$signed((8'ha1))})));
              reg11 <= (~&(~wire2));
              reg12 <= ((~|(-(+$signed(forvar7)))) >= forvar4[(3'h6):(1'h1)]);
              reg13 <= (^(($signed((reg8 ? wire0 : reg5)) ?
                      reg5[(3'h6):(1'h0)] : ((wire3 + reg11) ?
                          wire0[(4'ha):(3'h6)] : (+reg6))) ?
                  {((7'h44) & $unsigned(reg6))} : (^({wire0, wire3} ?
                      (reg9 ? wire3 : (8'hbf)) : (forvar7 ?
                          forvar4 : reg11)))));
              reg14 <= {wire0[(1'h0):(1'h0)]};
            end
          else
            begin
              reg15 = reg9[(5'h11):(4'he)];
            end
        end
      reg16 <= (~(wire2 <= ((~^$signed(reg13)) == (|$unsigned(reg15)))));
      for (forvar17 = (1'h0); (forvar17 < (1'h0)); forvar17 = (forvar17 + (1'h1)))
        begin
          for (forvar18 = (1'h0); (forvar18 < (3'h4)); forvar18 = (forvar18 + (1'h1)))
            begin
              reg19 <= (~|(wire1[(4'h8):(3'h5)] ?
                  wire3[(4'h8):(3'h7)] : $unsigned({(wire1 < (8'ha0)),
                      $unsigned(wire1)})));
            end
          for (forvar20 = (1'h0); (forvar20 < (2'h2)); forvar20 = (forvar20 + (1'h1)))
            begin
              reg21 = (+reg5[(3'h6):(1'h1)]);
            end
          for (forvar22 = (1'h0); (forvar22 < (2'h3)); forvar22 = (forvar22 + (1'h1)))
            begin
              reg23 <= reg8[(3'h7):(2'h2)];
            end
          for (forvar24 = (1'h0); (forvar24 < (3'h4)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 <= wire2[(4'hc):(3'h4)];
              reg26 <= $signed((~|$unsigned((wire2 ?
                  $signed(reg13) : $signed(reg15)))));
            end
        end
      for (forvar27 = (1'h0); (forvar27 < (3'h4)); forvar27 = (forvar27 + (1'h1)))
        begin
          reg28 = {$unsigned(($unsigned($unsigned((8'hb8))) ~^ $signed($unsigned(forvar7)))),
              (~&(forvar20 ^ ((reg16 ^ forvar27) ?
                  forvar24[(2'h2):(2'h2)] : (^(8'ha5)))))};
          reg29 = (^$signed((8'h9e)));
          for (forvar30 = (1'h0); (forvar30 < (2'h3)); forvar30 = (forvar30 + (1'h1)))
            begin
              reg31 <= (~&(8'h9c));
              reg32 <= reg12[(3'h5):(3'h5)];
              reg33 = (8'hae);
            end
          for (forvar34 = (1'h0); (forvar34 < (2'h2)); forvar34 = (forvar34 + (1'h1)))
            begin
              reg35 = $signed(reg13);
            end
          for (forvar36 = (1'h0); (forvar36 < (2'h3)); forvar36 = (forvar36 + (1'h1)))
            begin
              reg37 = ($unsigned({($signed((8'hae)) ? reg6 : $signed(reg8))}) ?
                  $unsigned($unsigned((^~((8'hba) != reg32)))) : reg14);
            end
        end
    end
  assign wire38 = (({wire1[(4'h8):(3'h5)],
                      $signed({reg9})} == ((|{reg10}) >> $signed($signed(wire3)))) <<< reg10);
  assign wire39 = reg9[(4'h9):(2'h2)];
  always
    @(posedge clk) begin
      reg40 <= $signed((|reg23[(2'h3):(2'h3)]));
      reg41 <= $unsigned($unsigned($signed(((~^reg16) >>> $unsigned(wire38)))));
      for (forvar42 = (1'h0); (forvar42 < (1'h1)); forvar42 = (forvar42 + (1'h1)))
        begin
          for (forvar43 = (1'h0); (forvar43 < (1'h0)); forvar43 = (forvar43 + (1'h1)))
            begin
              reg44 <= $unsigned(wire2);
              reg45 <= wire3;
              reg46 = reg32[(1'h0):(1'h0)];
              reg47 <= $signed((($unsigned(reg46[(4'h8):(3'h6)]) | $unsigned((reg25 ?
                  reg25 : reg23))) >> (~|{(wire39 >> reg32)})));
              reg48 <= ($unsigned(($unsigned(reg19) <= $signed((-reg26)))) ?
                  (~&(~|$signed({reg12}))) : $signed(reg13));
            end
          for (forvar49 = (1'h0); (forvar49 < (1'h1)); forvar49 = (forvar49 + (1'h1)))
            begin
              reg50 <= {(!$unsigned($unsigned(forvar42))), reg16};
              reg51 <= {reg10[(3'h6):(1'h1)], wire38};
              reg52 <= ((7'h44) <= ({(~^$signed(forvar43)),
                      ((|reg11) < $signed(reg9))} ?
                  (reg40 | forvar43) : ({(reg14 & reg9), reg44[(4'hf):(4'hc)]} ?
                      (reg45[(4'h9):(1'h1)] ?
                          (!reg12) : ((8'ha4) ^~ wire1)) : ($signed(reg26) ?
                          (forvar43 == reg32) : ((8'hb7) >= reg44)))));
            end
          for (forvar53 = (1'h0); (forvar53 < (3'h4)); forvar53 = (forvar53 + (1'h1)))
            begin
              reg54 <= (|wire39);
              reg55 <= wire0;
              reg56 <= reg54[(3'h6):(3'h5)];
            end
        end
      reg57 <= $signed($unsigned(reg46[(3'h4):(2'h2)]));
    end
  always
    @(posedge clk) begin
      for (forvar58 = (1'h0); (forvar58 < (2'h2)); forvar58 = (forvar58 + (1'h1)))
        begin
          for (forvar59 = (1'h0); (forvar59 < (1'h0)); forvar59 = (forvar59 + (1'h1)))
            begin
              reg60 <= $unsigned({wire3[(3'h7):(3'h5)],
                  ((reg12 ? reg31[(4'h8):(1'h1)] : (~&wire3)) ?
                      (~(reg57 ? reg23 : reg52)) : (!$unsigned((8'ha9))))});
            end
        end
      for (forvar61 = (1'h0); (forvar61 < (2'h3)); forvar61 = (forvar61 + (1'h1)))
        begin
          if ($signed({$signed((8'hb5)), $unsigned(reg16[(4'hf):(3'h4)])}))
            begin
              reg62 <= $unsigned(reg40);
              reg63 <= (reg19[(4'h9):(3'h6)] ?
                  {$signed(((reg13 != reg52) || reg10))} : reg40);
              reg64 = {(($signed($signed(reg11)) ^~ wire3) * (~&(~$unsigned(reg56))))};
            end
          else
            begin
              reg64 = ((8'hb7) <= reg10[(2'h2):(1'h0)]);
              reg65 <= ($signed(reg23) ?
                  ((~&reg45[(1'h0):(1'h0)]) & forvar58[(4'ha):(1'h0)]) : (+reg62));
            end
        end
      for (forvar66 = (1'h0); (forvar66 < (2'h2)); forvar66 = (forvar66 + (1'h1)))
        begin
          for (forvar67 = (1'h0); (forvar67 < (3'h4)); forvar67 = (forvar67 + (1'h1)))
            begin
              reg68 <= (reg57[(4'h9):(4'h8)] == $unsigned((+({forvar66} * (reg32 ?
                  forvar67 : reg13)))));
              reg69 = reg57;
            end
          reg70 <= reg31;
          reg71 <= reg26;
          for (forvar72 = (1'h0); (forvar72 < (3'h4)); forvar72 = (forvar72 + (1'h1)))
            begin
              reg73 <= ((|(((~&reg26) || reg51[(4'hf):(3'h5)]) ?
                      ((reg65 ? reg32 : reg50) || reg44) : (&{reg32, reg64}))) ?
                  reg68[(4'h9):(4'h8)] : ($signed(((~^(8'ha0)) >= (-forvar61))) ?
                      $signed(reg51) : $unsigned($unsigned($signed(reg65)))));
              reg74 = (((|((reg54 ?
                      reg44 : forvar66) != $signed((8'ha9)))) - (+$signed(((8'h9e) | reg13)))) ?
                  reg41[(1'h0):(1'h0)] : ((({reg14} != reg70[(3'h5):(3'h5)]) ?
                          (|$signed((7'h44))) : reg19[(4'hb):(2'h2)]) ?
                      reg26 : ((reg11 ?
                          reg10[(1'h1):(1'h0)] : (|wire0)) > reg63[(4'h9):(4'h8)])));
              reg75 <= reg47[(2'h3):(1'h1)];
              reg76 = ($unsigned(($signed((reg69 << reg16)) & (^(wire38 ?
                      reg64 : reg52)))) ?
                  $signed((+((reg13 ? reg65 : (8'hbe)) ?
                      (reg32 ^ reg51) : (^~reg47)))) : reg14[(3'h6):(3'h4)]);
            end
          reg77 <= $unsigned(wire38);
        end
      for (forvar78 = (1'h0); (forvar78 < (1'h1)); forvar78 = (forvar78 + (1'h1)))
        begin
          for (forvar79 = (1'h0); (forvar79 < (2'h2)); forvar79 = (forvar79 + (1'h1)))
            begin
              reg80 <= reg47;
            end
          for (forvar81 = (1'h0); (forvar81 < (1'h1)); forvar81 = (forvar81 + (1'h1)))
            begin
              reg82 = wire38[(1'h1):(1'h0)];
              reg83 = (|$unsigned(reg74[(3'h7):(1'h0)]));
              reg84 <= (~&$unsigned(((~&(reg50 ? reg63 : reg14)) > (((7'h43) ?
                  reg44 : wire3) << reg63[(3'h6):(3'h6)]))));
              reg85 <= $signed(wire38);
              reg86 <= forvar58[(3'h7):(1'h1)];
            end
          reg87 <= (~^$unsigned(reg80));
        end
    end
  assign wire88 = reg9;
endmodule