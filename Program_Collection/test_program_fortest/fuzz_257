(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param35 = (((+(^~(8'h9e))) * ({(8'ha4)} ? ((8'haa) - (8'h9c)) : ((8'hae) ? (8'ha9) : (8'hb0)))) ? (&(|(~|(8'hae)))) : (^(((8'ha0) != (8'ha4)) >>> (|(8'ha7))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h28):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire3;
  input wire [(3'h7):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire [(3'h4):(1'h0)] wire0;
  wire signed [(3'h5):(1'h0)] wire34;
  wire [(3'h7):(1'h0)] wire32;
  wire signed [(4'hb):(1'h0)] wire6;
  wire signed [(3'h7):(1'h0)] wire5;
  wire signed [(4'h9):(1'h0)] wire4;
  assign y = {wire34, wire32, wire6, wire5, wire4, (1'h0)};
  assign wire4 = wire2;
  assign wire5 = ($signed((~^$unsigned(wire1))) || wire2);
  assign wire6 = wire4[(3'h7):(1'h0)];
  module7 #() modinst33 (.wire10(wire2), .wire9(wire5), .wire8(wire4), .y(wire32), .clk(clk), .wire11(wire3));
  assign wire34 = ($unsigned(({wire5} * $unsigned((8'haf)))) << {(!(^~(8'h9e)))});
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7  (y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h24):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire11;
  input wire signed [(3'h7):(1'h0)] wire10;
  input wire signed [(3'h7):(1'h0)] wire9;
  input wire signed [(4'h8):(1'h0)] wire8;
  wire signed [(2'h2):(1'h0)] wire31;
  wire [(3'h4):(1'h0)] wire27;
  wire signed [(3'h4):(1'h0)] wire25;
  reg [(4'h9):(1'h0)] reg30 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg29 = (1'h0);
  reg [(3'h6):(1'h0)] reg28 = (1'h0);
  assign y = {wire31, wire27, wire25, reg30, reg29, reg28, (1'h0)};
  module12 #() modinst26 (wire25, clk, wire8, wire10, wire9, wire11);
  assign wire27 = wire9;
  always
    @(posedge clk) begin
      if (wire25[(3'h4):(3'h4)])
        begin
          reg28 <= wire9[(1'h1):(1'h1)];
          reg29 <= $unsigned($unsigned((&$signed(wire8))));
        end
      else
        begin
          reg28 <= ({($signed(reg28) * wire9[(2'h2):(1'h1)])} >> reg29[(3'h6):(3'h5)]);
          reg29 <= (^wire27[(2'h3):(2'h2)]);
        end
      reg30 <= wire27;
    end
  assign wire31 = (~^(wire10 ? wire27 : {$signed(reg28)}));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module12  (y, clk, wire16, wire15, wire14, wire13);
  output wire [(32'h2f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire16;
  input wire signed [(3'h7):(1'h0)] wire15;
  input wire signed [(3'h6):(1'h0)] wire14;
  input wire signed [(4'h9):(1'h0)] wire13;
  wire signed [(3'h7):(1'h0)] wire24;
  wire [(4'h9):(1'h0)] wire23;
  wire [(3'h4):(1'h0)] wire22;
  wire [(3'h7):(1'h0)] wire21;
  wire [(4'h9):(1'h0)] wire20;
  wire signed [(2'h3):(1'h0)] wire19;
  wire [(3'h5):(1'h0)] wire18;
  wire [(2'h2):(1'h0)] wire17;
  assign y = {wire24,
                 wire23,
                 wire22,
                 wire21,
                 wire20,
                 wire19,
                 wire18,
                 wire17,
                 (1'h0)};
  assign wire17 = wire16[(2'h3):(2'h2)];
  assign wire18 = ((-wire17) && (~&((!wire17) & wire13[(3'h5):(3'h5)])));
  assign wire19 = ($signed(wire17) ?
                      $signed(wire13) : $signed($signed(wire18[(3'h5):(1'h0)])));
  assign wire20 = wire15;
  assign wire21 = (-({(~wire18)} ^ ((wire17 - wire14) ?
                      (wire16 ^ wire14) : (&wire14))));
  assign wire22 = {({wire15} != wire16[(1'h1):(1'h0)])};
  assign wire23 = (wire20[(3'h7):(3'h6)] ?
                      {((wire17 == wire15) ^~ {wire19})} : ($signed(((8'h9e) && wire13)) >> $signed($unsigned(wire14))));
  assign wire24 = $signed(wire19[(1'h1):(1'h0)]);
endmodule