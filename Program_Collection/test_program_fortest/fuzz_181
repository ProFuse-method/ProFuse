(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param28 = (^(|(8'h9e))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h40):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire3;
  input wire signed [(3'h5):(1'h0)] wire2;
  input wire signed [(3'h7):(1'h0)] wire1;
  input wire [(4'h9):(1'h0)] wire0;
  wire [(3'h4):(1'h0)] wire25;
  wire [(2'h2):(1'h0)] wire24;
  wire signed [(3'h7):(1'h0)] wire23;
  wire signed [(3'h4):(1'h0)] wire22;
  wire signed [(4'h9):(1'h0)] wire21;
  wire signed [(3'h6):(1'h0)] wire19;
  wire signed [(3'h4):(1'h0)] wire5;
  wire signed [(4'h9):(1'h0)] wire4;
  reg [(4'hb):(1'h0)] reg27 = (1'h0);
  reg [(3'h7):(1'h0)] reg26 = (1'h0);
  assign y = {wire25,
                 wire24,
                 wire23,
                 wire22,
                 wire21,
                 wire19,
                 wire5,
                 wire4,
                 reg27,
                 reg26,
                 (1'h0)};
  assign wire4 = wire0;
  assign wire5 = ((|wire3[(2'h3):(1'h1)]) ?
                     (((wire4 >= wire4) ?
                             (wire0 ? wire0 : wire0) : $unsigned(wire2)) ?
                         $unsigned(wire0) : $unsigned((wire0 ?
                             wire3 : wire4))) : $signed(wire0[(2'h2):(1'h0)]));
  module6 #() modinst20 (wire19, clk, wire3, wire0, wire4, wire1);
  assign wire21 = {wire0[(3'h7):(1'h0)]};
  assign wire22 = wire5;
  assign wire23 = ($unsigned((!(~^wire19))) < $signed(((wire19 ?
                          (8'haa) : wire4) ?
                      wire4 : (wire1 ? wire0 : wire0))));
  assign wire24 = (wire19[(3'h6):(1'h0)] ^ (&((wire19 ~^ wire1) >>> {wire22})));
  assign wire25 = $unsigned((+$unsigned({wire5})));
  always
    @(posedge clk) begin
      reg26 <= (|wire24[(1'h1):(1'h0)]);
      reg27 <= ($signed({$unsigned(wire25)}) ?
          ($unsigned((wire23 >= wire22)) <= $signed((^~(8'ha4)))) : wire24);
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module6
#(parameter param18 = ((8'had) <<< ((((8'ha3) ^~ (8'ha5)) ? (8'ha1) : (+(8'h9d))) ? (~(8'ha8)) : ((~^(8'h9e)) ~^ ((8'h9c) ? (8'ha3) : (8'hb0))))))
(y, clk, wire10, wire9, wire8, wire7);
  output wire [(32'h29):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire10;
  input wire signed [(3'h7):(1'h0)] wire9;
  input wire signed [(4'h8):(1'h0)] wire8;
  input wire signed [(2'h2):(1'h0)] wire7;
  wire signed [(4'h9):(1'h0)] wire17;
  wire [(2'h2):(1'h0)] wire13;
  wire signed [(3'h6):(1'h0)] wire12;
  wire signed [(4'h8):(1'h0)] wire11;
  reg [(3'h5):(1'h0)] reg16 = (1'h0);
  reg [(3'h7):(1'h0)] reg15 = (1'h0);
  reg [(2'h3):(1'h0)] reg14 = (1'h0);
  assign y = {wire17, wire13, wire12, wire11, reg16, reg15, reg14, (1'h0)};
  assign wire11 = wire10;
  assign wire12 = wire7;
  assign wire13 = ((~|(wire12 ? {wire12} : ((8'ha3) ? (8'haa) : wire7))) ?
                      $unsigned(((wire7 ? wire7 : wire8) ?
                          (&wire11) : (wire11 ?
                              wire7 : wire11))) : $signed($signed((~&wire10))));
  always
    @(posedge clk) begin
      if ({(wire9 ? wire10[(3'h5):(1'h0)] : wire7[(2'h2):(2'h2)])})
        begin
          reg14 <= $unsigned((~wire11));
        end
      else
        begin
          reg14 <= wire11;
          reg15 <= (wire9[(3'h7):(2'h3)] * {(((8'hac) ? (8'h9e) : wire7) ?
                  $unsigned(wire7) : $unsigned(reg14))});
        end
      reg16 <= wire11[(1'h1):(1'h1)];
    end
  assign wire17 = $signed(reg15);
endmodule