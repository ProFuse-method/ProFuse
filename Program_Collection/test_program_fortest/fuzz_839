(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param62 = ((8'h9e) ? ((~^(!(~|(8'hae)))) - ((((8'hab) ? (8'hba) : (7'h42)) ? (-(8'ha3)) : {(8'had)}) >> (((8'hb6) ? (8'hbe) : (8'ha5)) ? ((8'h9c) - (8'hbc)) : (!(8'hb1))))) : ((((^~(8'hbb)) > {(8'ha8)}) | (((8'hb6) <= (8'ha3)) <<< {(8'hab)})) ? (((^(8'hb1)) ? ((7'h42) > (8'hbb)) : {(8'ha5)}) <= ((~(7'h44)) ? ((8'ha2) ^~ (8'ha3)) : ((8'hbe) + (8'haa)))) : ((((7'h41) <<< (7'h40)) ? ((8'hbf) <= (8'ha5)) : ((8'h9d) ? (8'h9d) : (7'h43))) ^~ ((~&(8'h9f)) ~^ ((8'h9e) ? (8'hbf) : (8'h9f)))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h2cf):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire3;
  input wire signed [(4'he):(1'h0)] wire2;
  input wire signed [(5'h13):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire0;
  wire [(5'h12):(1'h0)] wire61;
  wire [(5'h13):(1'h0)] wire60;
  reg [(4'hc):(1'h0)] reg58 = (1'h0);
  reg [(5'h15):(1'h0)] reg56 = (1'h0);
  reg [(5'h14):(1'h0)] reg55 = (1'h0);
  reg [(4'hc):(1'h0)] reg54 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg53 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg51 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg50 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg48 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg47 = (1'h0);
  reg [(5'h10):(1'h0)] reg45 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg43 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg41 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg40 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg39 = (1'h0);
  reg [(4'h9):(1'h0)] reg33 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg30 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg29 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg24 = (1'h0);
  reg [(5'h12):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg15 = (1'h0);
  reg [(5'h13):(1'h0)] reg7 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg6 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg59 = (1'h0);
  reg [(5'h13):(1'h0)] forvar57 = (1'h0);
  reg [(4'hb):(1'h0)] forvar52 = (1'h0);
  reg [(4'hd):(1'h0)] reg49 = (1'h0);
  reg [(5'h14):(1'h0)] forvar46 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar44 = (1'h0);
  reg [(3'h4):(1'h0)] forvar42 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg38 = (1'h0);
  reg [(4'hc):(1'h0)] forvar37 = (1'h0);
  reg [(4'hd):(1'h0)] reg36 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg35 = (1'h0);
  reg [(3'h6):(1'h0)] reg34 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg32 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar31 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg28 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar27 = (1'h0);
  reg [(3'h6):(1'h0)] reg26 = (1'h0);
  reg [(4'hc):(1'h0)] reg25 = (1'h0);
  reg [(5'h14):(1'h0)] reg22 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar21 = (1'h0);
  reg [(2'h2):(1'h0)] forvar20 = (1'h0);
  reg [(4'h9):(1'h0)] reg19 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg18 = (1'h0);
  reg [(4'hb):(1'h0)] reg17 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg16 = (1'h0);
  reg [(5'h14):(1'h0)] forvar14 = (1'h0);
  reg [(3'h4):(1'h0)] reg13 = (1'h0);
  reg [(4'h8):(1'h0)] reg12 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg11 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg10 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg9 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg8 = (1'h0);
  reg [(3'h6):(1'h0)] forvar5 = (1'h0);
  reg [(3'h6):(1'h0)] forvar4 = (1'h0);
  assign y = {wire61,
                 wire60,
                 reg58,
                 reg56,
                 reg55,
                 reg54,
                 reg53,
                 reg51,
                 reg50,
                 reg48,
                 reg47,
                 reg45,
                 reg43,
                 reg41,
                 reg40,
                 reg39,
                 reg33,
                 reg30,
                 reg29,
                 reg24,
                 reg23,
                 reg15,
                 reg7,
                 reg6,
                 reg59,
                 forvar57,
                 forvar52,
                 reg49,
                 forvar46,
                 forvar44,
                 forvar42,
                 reg38,
                 forvar37,
                 reg36,
                 reg35,
                 reg34,
                 reg32,
                 forvar31,
                 reg28,
                 forvar27,
                 reg26,
                 reg25,
                 reg22,
                 forvar21,
                 forvar20,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 forvar14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 forvar5,
                 forvar4,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar4 = (1'h0); (forvar4 < (2'h2)); forvar4 = (forvar4 + (1'h1)))
        begin
          for (forvar5 = (1'h0); (forvar5 < (3'h4)); forvar5 = (forvar5 + (1'h1)))
            begin
              reg6 <= $unsigned((wire0[(4'h8):(3'h7)] ?
                  (8'h9d) : $unsigned((-wire1))));
              reg7 <= $unsigned(forvar5);
              reg8 = forvar5[(3'h4):(3'h4)];
              reg9 = wire3[(1'h1):(1'h1)];
              reg10 = {$unsigned((~&{reg7, {forvar5, (7'h43)}})),
                  (({(reg6 ? forvar4 : wire2)} ?
                          forvar4[(2'h3):(2'h2)] : ((wire0 ^ wire0) ?
                              $unsigned((8'hae)) : forvar4[(1'h0):(1'h0)])) ?
                      {reg8[(2'h3):(1'h0)]} : ((^~(wire3 ? forvar5 : wire0)) ?
                          {(wire1 >> reg7)} : (forvar4 ?
                              {(8'hb5), (8'hb9)} : $signed(reg9))))};
            end
          reg11 = ((8'hb4) && reg8);
          reg12 = reg6;
        end
      reg13 = (reg7 & wire2[(2'h2):(1'h0)]);
      for (forvar14 = (1'h0); (forvar14 < (2'h3)); forvar14 = (forvar14 + (1'h1)))
        begin
          if ((((($unsigned(reg8) ? (-reg13) : $signed(reg12)) ?
                  ({forvar14,
                      (8'hae)} ^~ (~^(8'hb9))) : $unsigned((8'hb9))) <= $unsigned({reg9[(5'h10):(4'hb)],
                  (reg9 ^~ reg12)})) ?
              reg8 : {(|(8'hb7))}))
            begin
              reg15 <= wire0[(2'h3):(2'h3)];
              reg16 = ($unsigned(($unsigned($unsigned(reg12)) ?
                      {(^~reg7)} : $signed(forvar5))) ?
                  $unsigned(reg10) : $signed($unsigned(($signed(reg6) ?
                      ((8'h9d) ? forvar14 : reg10) : forvar14))));
              reg17 = $unsigned({$unsigned($signed((+reg7))),
                  ({{reg8, wire3}} ? $unsigned($unsigned(reg8)) : reg9)});
              reg18 = $unsigned(((8'hb8) == {$signed($unsigned(reg7))}));
            end
          else
            begin
              reg16 = $signed(reg8[(2'h2):(2'h2)]);
              reg17 = {(+wire3)};
            end
          reg19 = (($signed(reg12[(3'h5):(2'h3)]) ~^ wire3) ?
              (^~($signed((reg15 ~^ reg12)) >>> ((~reg16) > $unsigned((8'ha0))))) : (-{(((8'hb3) || forvar5) ?
                      (reg9 >>> wire0) : (forvar5 ? reg18 : reg9))}));
        end
      for (forvar20 = (1'h0); (forvar20 < (2'h2)); forvar20 = (forvar20 + (1'h1)))
        begin
          for (forvar21 = (1'h0); (forvar21 < (1'h1)); forvar21 = (forvar21 + (1'h1)))
            begin
              reg22 = $signed(reg12[(3'h5):(2'h3)]);
              reg23 <= $signed((^{(~&(wire1 <= reg17)),
                  $unsigned((wire0 == reg19))}));
              reg24 <= (^~(8'haa));
              reg25 = $unsigned($signed(($unsigned((-reg19)) ?
                  reg11 : ($unsigned(reg9) ? forvar20 : (^reg22)))));
              reg26 = $signed((((&{(8'ha1)}) || (~(reg16 ?
                  (8'hb9) : forvar4))) >= forvar5[(2'h2):(1'h1)]));
            end
          for (forvar27 = (1'h0); (forvar27 < (2'h3)); forvar27 = (forvar27 + (1'h1)))
            begin
              reg28 = $signed(reg19);
              reg29 <= (((-((^reg18) ^~ (^(8'had)))) ?
                      (|(!((8'hb5) == reg28))) : {reg12,
                          ((8'ha4) ? (7'h44) : ((8'ha8) - reg13))}) ?
                  wire1 : ({{$unsigned(wire2)}} ?
                      (+((~|reg18) ?
                          $signed(reg22) : (reg24 ?
                              reg26 : reg9))) : (($signed(wire3) != $signed(reg11)) <= ($unsigned(wire0) == ((8'ha6) & (8'ha1))))));
            end
          reg30 <= $signed(((wire2[(1'h0):(1'h0)] ?
                  (forvar20[(1'h0):(1'h0)] - (~|forvar4)) : $signed((8'hbb))) ?
              {$signed({(8'hb8)}),
                  (((8'hb5) ^ reg9) ?
                      ((8'ha7) ?
                          reg22 : reg19) : (reg6 & (8'haa)))} : ({$signed(reg26),
                      forvar14[(4'h9):(3'h7)]} ?
                  (wire1 >>> (~^reg17)) : $signed(((8'hb8) ? wire3 : reg25)))));
          for (forvar31 = (1'h0); (forvar31 < (1'h0)); forvar31 = (forvar31 + (1'h1)))
            begin
              reg32 = $signed($signed(($unsigned((reg6 ? reg19 : (7'h42))) ?
                  $signed((reg26 <<< forvar31)) : $signed($signed((8'haf))))));
              reg33 <= (~(forvar27 >> $signed(((-(8'hbb)) ?
                  (^reg9) : $unsigned(reg29)))));
              reg34 = reg26[(3'h6):(1'h0)];
              reg35 = ({$unsigned($unsigned(reg24[(1'h1):(1'h0)])),
                  reg6} <= ((~((!(8'hbf)) ?
                  $unsigned(reg15) : $signed(forvar27))) * (-((forvar21 ?
                      reg33 : reg33) ?
                  (~&(8'haa)) : $signed(reg28)))));
              reg36 = $signed((~((|(forvar21 ?
                  forvar14 : reg23)) ^~ reg30[(3'h4):(1'h0)])));
            end
          for (forvar37 = (1'h0); (forvar37 < (3'h4)); forvar37 = (forvar37 + (1'h1)))
            begin
              reg38 = reg16;
              reg39 <= {{(&(((7'h42) && reg25) ? {wire2} : forvar21)), (8'hb4)},
                  reg18[(3'h7):(3'h6)]};
              reg40 <= $signed($unsigned($unsigned(forvar31[(2'h2):(1'h0)])));
              reg41 <= (8'hb9);
            end
        end
    end
  always
    @(posedge clk) begin
      for (forvar42 = (1'h0); (forvar42 < (1'h0)); forvar42 = (forvar42 + (1'h1)))
        begin
          reg43 <= reg29[(3'h7):(3'h7)];
          for (forvar44 = (1'h0); (forvar44 < (2'h3)); forvar44 = (forvar44 + (1'h1)))
            begin
              reg45 <= reg7[(4'h9):(1'h1)];
            end
          for (forvar46 = (1'h0); (forvar46 < (2'h2)); forvar46 = (forvar46 + (1'h1)))
            begin
              reg47 <= reg40;
              reg48 <= $signed($signed($signed(wire2[(1'h1):(1'h0)])));
              reg49 = {$unsigned((~|{(reg41 ? reg45 : reg48)}))};
              reg50 <= reg23;
              reg51 <= reg33[(4'h9):(2'h3)];
            end
          for (forvar52 = (1'h0); (forvar52 < (2'h3)); forvar52 = (forvar52 + (1'h1)))
            begin
              reg53 <= (reg6[(1'h0):(1'h0)] ?
                  ((|reg29) ?
                      $unsigned(((reg43 >>> reg48) - $unsigned(forvar44))) : ({((8'ha0) & (8'ha6)),
                          $unsigned(wire3)} != $signed(reg50))) : $signed($signed({reg24})));
              reg54 <= ($signed((reg39 <= (-$signed(reg40)))) - ((((+reg15) ?
                      reg30[(2'h3):(1'h1)] : reg6[(1'h0):(1'h0)]) ?
                  (((8'h9e) ?
                      wire2 : reg47) < (forvar52 - reg49)) : wire3) ^ $signed(reg48[(3'h5):(3'h4)])));
              reg55 <= reg24[(1'h0):(1'h0)];
              reg56 <= ($unsigned((~|(reg29[(3'h5):(3'h5)] ?
                      ((8'ha4) << wire0) : {reg48}))) ?
                  (($unsigned($unsigned((8'hb5))) ?
                      $unsigned($unsigned(wire0)) : $unsigned(wire3[(2'h2):(2'h2)])) ~^ (~^$signed((&reg41)))) : ($signed(reg55) && reg41[(1'h1):(1'h0)]));
            end
          for (forvar57 = (1'h0); (forvar57 < (1'h1)); forvar57 = (forvar57 + (1'h1)))
            begin
              reg58 <= (+reg7);
              reg59 = (8'hb5);
            end
        end
    end
  assign wire60 = ($signed((reg50 ^~ reg58)) ?
                      $unsigned((reg33 ?
                          ((^reg29) * $unsigned(reg24)) : $unsigned(wire0))) : ({$signed(wire2),
                          $unsigned({(8'ha5), wire3})} && reg30));
  assign wire61 = reg47;
endmodule