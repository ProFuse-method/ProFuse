(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param28 = {(^~((8'hab) >= ((8'ha4) ? (8'ha3) : (8'ha2))))})
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h40):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire0;
  input wire [(4'ha):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire2;
  input wire [(3'h6):(1'h0)] wire3;
  wire [(3'h7):(1'h0)] wire27;
  wire signed [(4'hb):(1'h0)] wire6;
  wire signed [(3'h4):(1'h0)] wire8;
  wire signed [(3'h7):(1'h0)] wire9;
  wire signed [(3'h6):(1'h0)] wire10;
  wire [(2'h2):(1'h0)] wire11;
  wire [(3'h7):(1'h0)] wire25;
  reg [(2'h2):(1'h0)] reg4 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg5 = (1'h0);
  reg [(3'h7):(1'h0)] reg7 = (1'h0);
  assign y = {wire27,
                 wire6,
                 wire8,
                 wire9,
                 wire10,
                 wire11,
                 wire25,
                 reg4,
                 reg5,
                 reg7,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ($signed((-wire3)))
        begin
          reg4 <= wire1[(4'ha):(2'h3)];
          reg5 <= ((reg4 ? wire0[(1'h1):(1'h0)] : $unsigned(wire0)) ?
              (wire0 ?
                  (wire1 - (wire3 ? reg4 : (8'ha4))) : ((wire3 ?
                          wire0 : (8'ha4)) ?
                      (^wire0) : ((8'haa) ?
                          wire3 : (8'hb0)))) : (~&(^~$signed(wire3))));
        end
      else
        begin
          reg4 <= reg5;
          reg5 <= wire1;
        end
    end
  assign wire6 = (reg4[(1'h0):(1'h0)] ?
                     reg4[(2'h2):(1'h0)] : $unsigned($unsigned((wire1 ?
                         wire0 : reg4))));
  always
    @(posedge clk) begin
      reg7 <= $signed((wire6 ?
          wire0[(3'h5):(3'h4)] : ((reg5 != wire1) ?
              wire6[(1'h1):(1'h0)] : wire6[(2'h2):(1'h0)])));
    end
  assign wire8 = (wire0[(1'h1):(1'h0)] ~^ $signed(wire6[(3'h6):(3'h4)]));
  assign wire9 = {{wire2[(4'hb):(4'hb)]}};
  assign wire10 = wire2[(1'h1):(1'h1)];
  assign wire11 = (+$unsigned((reg4[(1'h1):(1'h0)] > (wire10 ? wire9 : reg4))));
  module12 #() modinst26 (wire25, clk, wire6, reg7, wire1, wire10);
  assign wire27 = (($signed(wire0[(3'h6):(3'h5)]) ?
                      ($unsigned(reg7) ?
                          wire3 : $unsigned(reg4)) : wire8[(1'h0):(1'h0)]) * $unsigned(($signed(reg5) ^ (+wire3))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module12
#(parameter param24 = ((8'ha0) ? {((~^(8'haf)) != ((8'haa) ? (8'h9d) : (8'haa)))} : ((((8'hb0) ? (8'ha2) : (8'ha7)) + (8'hae)) ? (~((8'h9c) ? (8'h9f) : (8'ha8))) : (((8'ha8) | (8'ha0)) ? (&(8'hab)) : (|(8'h9f))))))
(y, clk, wire16, wire15, wire14, wire13);
  output wire [(32'h33):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire16;
  input wire signed [(3'h7):(1'h0)] wire15;
  input wire [(2'h3):(1'h0)] wire14;
  input wire [(3'h6):(1'h0)] wire13;
  wire [(3'h5):(1'h0)] wire20;
  wire signed [(2'h3):(1'h0)] wire19;
  wire [(4'h9):(1'h0)] wire18;
  wire signed [(4'h8):(1'h0)] wire17;
  reg signed [(4'hb):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg22 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg21 = (1'h0);
  assign y = {wire20, wire19, wire18, wire17, reg23, reg22, reg21, (1'h0)};
  assign wire17 = $unsigned((&$signed(wire15[(3'h5):(3'h4)])));
  assign wire18 = (($unsigned((|wire17)) * wire15[(3'h6):(1'h1)]) || $unsigned(wire17[(1'h1):(1'h1)]));
  assign wire19 = {((^~$unsigned(wire14)) ?
                          wire13[(3'h6):(2'h2)] : (!(wire16 ?
                              wire18 : wire14)))};
  assign wire20 = (~&(~wire13));
  always
    @(posedge clk) begin
      reg21 <= ($signed(wire19[(2'h2):(1'h1)]) <<< wire17[(2'h3):(2'h3)]);
      reg22 <= {reg21[(2'h2):(2'h2)]};
    end
  always
    @(posedge clk) begin
      reg23 <= (+{($signed(wire15) << (-(8'ha2)))});
    end
endmodule