(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h6c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire3;
  input wire [(2'h2):(1'h0)] wire2;
  input wire [(3'h7):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire0;
  wire [(3'h7):(1'h0)] wire19;
  wire signed [(3'h6):(1'h0)] wire14;
  wire signed [(4'hb):(1'h0)] wire13;
  wire [(2'h3):(1'h0)] wire12;
  wire signed [(4'h8):(1'h0)] wire11;
  wire signed [(3'h6):(1'h0)] wire5;
  wire signed [(2'h2):(1'h0)] wire4;
  reg [(4'h9):(1'h0)] reg20 = (1'h0);
  reg [(3'h6):(1'h0)] reg18 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg17 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg16 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg15 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg10 = (1'h0);
  reg [(3'h5):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg8 = (1'h0);
  reg [(4'h9):(1'h0)] reg7 = (1'h0);
  reg [(3'h4):(1'h0)] reg6 = (1'h0);
  assign y = {wire19,
                 wire14,
                 wire13,
                 wire12,
                 wire11,
                 wire5,
                 wire4,
                 reg20,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 (1'h0)};
  assign wire4 = ({((wire2 | wire0) ?
                         wire1[(3'h4):(3'h4)] : wire1)} != wire3[(3'h4):(1'h1)]);
  assign wire5 = wire3[(1'h1):(1'h1)];
  always
    @(posedge clk) begin
      if ($signed(($signed($signed((8'ha6))) >>> (8'ha7))))
        begin
          if ($signed({(((8'h9d) ? wire2 : wire1) ?
                  (wire5 > wire2) : (-(8'h9e)))}))
            begin
              reg6 <= wire4[(1'h1):(1'h0)];
            end
          else
            begin
              reg6 <= $signed((!((reg6 < wire3) ?
                  (wire5 ? wire2 : wire2) : (~|wire1))));
              reg7 <= wire0;
            end
          reg8 <= $signed($unsigned($signed((reg7 ? reg7 : reg7))));
        end
      else
        begin
          reg6 <= (~&$unsigned(((~^reg8) ? $unsigned(reg6) : (8'ha3))));
        end
      reg9 <= (-(~&($signed(wire5) == $unsigned((8'h9f)))));
      reg10 <= wire2;
    end
  assign wire11 = wire2[(1'h1):(1'h0)];
  assign wire12 = $unsigned((((reg7 ^~ wire5) ?
                          wire3[(1'h1):(1'h0)] : (|wire1)) ?
                      (wire5 * $unsigned(wire3)) : (-$unsigned(wire1))));
  assign wire13 = (|(+(!wire0)));
  assign wire14 = (^((|reg8[(3'h6):(2'h3)]) ^~ (~&$unsigned(wire13))));
  always
    @(posedge clk) begin
      if ($unsigned((!$unsigned((reg9 ^~ wire4)))))
        begin
          reg15 <= $unsigned($signed($unsigned(reg10[(1'h1):(1'h0)])));
          reg16 <= (|reg10[(1'h1):(1'h0)]);
        end
      else
        begin
          reg15 <= ((8'h9c) ? wire12[(1'h0):(1'h0)] : (!reg16[(1'h1):(1'h1)]));
          reg16 <= ($unsigned((wire2 ?
              $unsigned(reg6) : $unsigned(wire5))) - ((-$unsigned(reg8)) > $unsigned(wire14[(2'h3):(1'h0)])));
          reg17 <= $signed(wire5);
        end
      reg18 <= ($signed($signed((8'ha8))) ?
          $signed(($unsigned(reg9) ?
              $signed((8'ha7)) : $unsigned(reg10))) : reg10[(1'h1):(1'h0)]);
    end
  assign wire19 = {(8'hae)};
  always
    @(posedge clk) begin
      reg20 <= wire4[(1'h1):(1'h0)];
    end
endmodule