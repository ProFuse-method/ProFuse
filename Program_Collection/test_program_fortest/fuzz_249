(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h5c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire [(4'ha):(1'h0)] wire2;
  input wire signed [(3'h6):(1'h0)] wire1;
  input wire signed [(3'h5):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire55;
  wire [(4'h8):(1'h0)] wire54;
  wire [(4'hb):(1'h0)] wire53;
  wire [(4'ha):(1'h0)] wire52;
  wire [(4'hb):(1'h0)] wire50;
  wire signed [(4'ha):(1'h0)] wire44;
  wire signed [(3'h7):(1'h0)] wire4;
  reg signed [(4'h8):(1'h0)] reg51 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg49 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg48 = (1'h0);
  reg [(4'h9):(1'h0)] reg47 = (1'h0);
  reg [(2'h3):(1'h0)] reg46 = (1'h0);
  assign y = {wire55,
                 wire54,
                 wire53,
                 wire52,
                 wire50,
                 wire44,
                 wire4,
                 reg51,
                 reg49,
                 reg48,
                 reg47,
                 reg46,
                 (1'h0)};
  assign wire4 = (~|$signed(({wire3} == (8'h9d))));
  module5 #() modinst45 (.wire6(wire2), .y(wire44), .clk(clk), .wire8(wire1), .wire7(wire3), .wire9(wire4));
  always
    @(posedge clk) begin
      if ({$signed({$unsigned(wire1)})})
        begin
          reg46 <= ($signed(wire44) + (~^$unsigned({(8'hb0)})));
          if ({(|wire3[(2'h3):(2'h3)])})
            begin
              reg47 <= ($signed($signed({wire1})) >>> (~&wire2));
              reg48 <= $signed($signed(wire3));
            end
          else
            begin
              reg47 <= wire44[(4'h9):(1'h0)];
            end
          reg49 <= $signed(((8'h9e) ? {(wire44 || reg46)} : reg47));
        end
      else
        begin
          reg46 <= (~|$unsigned(($unsigned(reg47) ?
              $signed(wire3) : reg46[(2'h2):(2'h2)])));
          reg47 <= $unsigned({{(reg46 && (8'haa))}});
          reg48 <= (^~(($signed(reg48) ?
              (reg48 != reg48) : (wire0 ?
                  wire0 : reg49)) ^ (^(wire3 << wire3))));
        end
    end
  assign wire50 = {$signed($signed(wire3[(2'h3):(1'h0)]))};
  always
    @(posedge clk) begin
      reg51 <= $unsigned(reg48[(1'h0):(1'h0)]);
    end
  assign wire52 = $unsigned($signed($signed($unsigned((8'ha5)))));
  assign wire53 = ($unsigned(reg51[(3'h5):(1'h1)]) + (~^{$unsigned(reg49)}));
  assign wire54 = $signed($signed((~&{wire50})));
  assign wire55 = (~&((8'ha9) ? reg47[(2'h3):(2'h3)] : reg46[(2'h2):(2'h2)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module5  (y, clk, wire6, wire7, wire8, wire9);
  output wire [(32'h6b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire6;
  input wire [(4'h8):(1'h0)] wire7;
  input wire [(3'h6):(1'h0)] wire8;
  input wire signed [(3'h7):(1'h0)] wire9;
  wire signed [(3'h6):(1'h0)] wire43;
  wire [(2'h2):(1'h0)] wire42;
  wire signed [(3'h5):(1'h0)] wire41;
  wire signed [(3'h6):(1'h0)] wire40;
  wire signed [(4'h8):(1'h0)] wire10;
  wire [(4'h9):(1'h0)] wire17;
  wire signed [(2'h3):(1'h0)] wire18;
  wire signed [(4'hb):(1'h0)] wire19;
  wire [(4'hb):(1'h0)] wire38;
  reg [(3'h4):(1'h0)] reg11 = (1'h0);
  reg [(2'h2):(1'h0)] reg12 = (1'h0);
  reg [(4'hb):(1'h0)] reg13 = (1'h0);
  reg [(4'h9):(1'h0)] reg14 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg15 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg16 = (1'h0);
  assign y = {wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire10,
                 wire17,
                 wire18,
                 wire19,
                 wire38,
                 reg11,
                 reg12,
                 reg13,
                 reg14,
                 reg15,
                 reg16,
                 (1'h0)};
  assign wire10 = (8'ha6);
  always
    @(posedge clk) begin
      reg11 <= wire7;
      if (($signed(reg11[(1'h1):(1'h1)]) ?
          reg11[(1'h1):(1'h1)] : $signed({((8'ha7) ^~ wire8)})))
        begin
          reg12 <= wire9[(2'h3):(2'h2)];
          if ((((reg11[(3'h4):(3'h4)] ? $signed(reg11) : (8'hab)) ?
              {$unsigned(reg11)} : $unsigned((wire8 ?
                  wire6 : wire9))) + ($signed((wire7 ?
              reg12 : reg12)) && $signed($unsigned(wire8)))))
            begin
              reg13 <= {(~$unsigned({reg11}))};
              reg14 <= reg12[(1'h0):(1'h0)];
              reg15 <= (reg12 < (+reg14[(3'h5):(3'h5)]));
            end
          else
            begin
              reg13 <= (!$unsigned(reg13[(4'h8):(3'h5)]));
            end
          reg16 <= $unsigned((($signed(wire10) ~^ $signed(reg15)) ?
              $signed(reg15[(3'h5):(3'h5)]) : $unsigned($signed(wire9))));
        end
      else
        begin
          reg12 <= ((|($signed(reg12) >= ((8'ha5) << reg12))) ?
              $unsigned((^~(reg13 ? reg15 : reg12))) : $signed(({reg14} ?
                  ((8'ha4) ? reg16 : reg16) : (~reg12))));
          reg13 <= (reg15 ?
              (~&$signed($unsigned(reg16))) : ((8'h9c) ^~ ((reg11 ^ reg14) ?
                  (wire7 >>> (8'ha6)) : $unsigned(wire7))));
        end
    end
  assign wire17 = ($unsigned(reg15) <= ($signed({reg13}) != ((|reg14) ?
                      $unsigned(wire10) : (reg14 ~^ (8'ha6)))));
  assign wire18 = reg14;
  assign wire19 = $unsigned($signed(((wire18 ~^ reg16) ?
                      ((8'ha6) * reg15) : $unsigned(reg15))));
  module20 #() modinst39 (wire38, clk, wire7, wire19, wire17, reg16);
  assign wire40 = $unsigned($signed({(wire38 ? (8'ha9) : reg14)}));
  assign wire41 = reg16;
  assign wire42 = reg11;
  assign wire43 = {(~|(8'ha8))};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module20  (y, clk, wire24, wire23, wire22, wire21);
  output wire [(32'h41):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire24;
  input wire signed [(4'hb):(1'h0)] wire23;
  input wire signed [(3'h4):(1'h0)] wire22;
  input wire signed [(4'ha):(1'h0)] wire21;
  wire signed [(2'h2):(1'h0)] wire37;
  wire [(3'h5):(1'h0)] wire33;
  wire [(2'h2):(1'h0)] wire29;
  wire [(4'hb):(1'h0)] wire28;
  wire signed [(2'h2):(1'h0)] wire27;
  reg [(2'h2):(1'h0)] reg36 = (1'h0);
  reg [(4'h9):(1'h0)] reg35 = (1'h0);
  reg [(4'h9):(1'h0)] reg34 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg32 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg31 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg30 = (1'h0);
  reg [(2'h3):(1'h0)] reg26 = (1'h0);
  reg [(3'h5):(1'h0)] reg25 = (1'h0);
  assign y = {wire37,
                 wire33,
                 wire29,
                 wire28,
                 wire27,
                 reg36,
                 reg35,
                 reg34,
                 reg32,
                 reg31,
                 reg30,
                 reg26,
                 reg25,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ((wire23[(1'h0):(1'h0)] ? (!wire22) : wire22))
        begin
          reg25 <= (8'h9d);
        end
      else
        begin
          reg25 <= wire22;
          reg26 <= wire22[(2'h3):(1'h1)];
        end
    end
  assign wire27 = {(-(reg25[(1'h1):(1'h1)] ?
                          $signed(wire21) : $unsigned((8'hac))))};
  assign wire28 = $signed(wire27);
  assign wire29 = $unsigned($unsigned(wire21));
  always
    @(posedge clk) begin
      reg30 <= {($signed({reg26}) != $signed((~|wire28)))};
      reg31 <= (^~$signed((~|(~(8'ha0)))));
      reg32 <= (($signed($unsigned(wire24)) ?
          $unsigned((wire21 ?
              wire28 : wire28)) : $signed(wire22[(1'h0):(1'h0)])) <= reg25);
    end
  assign wire33 = reg30[(1'h1):(1'h1)];
  always
    @(posedge clk) begin
      reg34 <= {((-{reg30}) ? wire23[(3'h4):(3'h4)] : wire29[(1'h0):(1'h0)])};
      reg35 <= ({(+((8'h9f) | reg32))} ?
          $unsigned($signed(((8'h9c) ? reg26 : wire29))) : ($unsigned({reg30}) ?
              $unsigned((wire24 ? wire22 : reg30)) : reg34));
      reg36 <= $signed($unsigned(reg32[(2'h2):(2'h2)]));
    end
  assign wire37 = wire21[(3'h5):(1'h1)];
endmodule