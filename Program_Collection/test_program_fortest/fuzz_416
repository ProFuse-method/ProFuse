(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'hd6):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire signed [(3'h4):(1'h0)] wire0;
  wire [(4'hb):(1'h0)] wire89;
  wire [(3'h7):(1'h0)] wire88;
  wire [(4'hb):(1'h0)] wire87;
  wire signed [(4'h9):(1'h0)] wire85;
  wire [(4'h8):(1'h0)] wire24;
  wire signed [(2'h3):(1'h0)] wire23;
  wire signed [(4'h9):(1'h0)] wire13;
  wire signed [(4'h9):(1'h0)] wire12;
  reg [(2'h2):(1'h0)] reg95 = (1'h0);
  reg [(3'h4):(1'h0)] reg94 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg93 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg92 = (1'h0);
  reg [(3'h6):(1'h0)] reg91 = (1'h0);
  reg [(3'h6):(1'h0)] reg90 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg22 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg21 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg19 = (1'h0);
  reg [(4'h9):(1'h0)] reg18 = (1'h0);
  reg [(4'hb):(1'h0)] reg17 = (1'h0);
  reg [(4'h9):(1'h0)] reg16 = (1'h0);
  reg [(3'h6):(1'h0)] reg15 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg14 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg11 = (1'h0);
  reg [(4'h9):(1'h0)] reg10 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg9 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg8 = (1'h0);
  reg [(4'hb):(1'h0)] reg7 = (1'h0);
  reg [(3'h7):(1'h0)] reg6 = (1'h0);
  reg [(4'hb):(1'h0)] reg5 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg4 = (1'h0);
  assign y = {wire89,
                 wire88,
                 wire87,
                 wire85,
                 wire24,
                 wire23,
                 wire13,
                 wire12,
                 reg95,
                 reg94,
                 reg93,
                 reg92,
                 reg91,
                 reg90,
                 reg22,
                 reg21,
                 reg20,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= {wire0};
    end
  always
    @(posedge clk) begin
      if (wire3[(2'h2):(2'h2)])
        begin
          reg5 <= $unsigned(($signed(reg4[(3'h4):(2'h2)]) == $unsigned((wire3 ?
              wire0 : wire0))));
          reg6 <= wire1;
          if ($signed((8'hab)))
            begin
              reg7 <= (!reg6);
            end
          else
            begin
              reg7 <= wire0;
              reg8 <= $unsigned((8'h9d));
            end
        end
      else
        begin
          reg5 <= (~reg7[(1'h1):(1'h1)]);
          reg6 <= $signed(wire3);
          reg7 <= {(($signed(wire2) ^ reg7[(1'h1):(1'h1)]) > wire0)};
        end
      if ($unsigned((reg4[(1'h0):(1'h0)] == (~^reg8))))
        begin
          if ($signed(wire0[(2'h3):(2'h2)]))
            begin
              reg9 <= $unsigned(((8'ha6) ? reg4 : $unsigned(reg5)));
              reg10 <= reg5;
              reg11 <= reg7[(3'h5):(2'h2)];
            end
          else
            begin
              reg9 <= ($signed({$unsigned(reg4)}) ?
                  (-$unsigned(reg11)) : $unsigned($unsigned(((8'ha1) && reg5))));
              reg10 <= {reg8[(3'h7):(1'h0)]};
            end
        end
      else
        begin
          reg9 <= $signed($unsigned(reg11));
          reg10 <= {reg5[(2'h3):(2'h2)]};
        end
    end
  assign wire12 = $unsigned($unsigned(wire1[(3'h5):(1'h0)]));
  assign wire13 = {{$unsigned(reg9[(1'h0):(1'h0)])}};
  always
    @(posedge clk) begin
      if (((!(8'ha2)) & wire0[(2'h2):(1'h0)]))
        begin
          reg14 <= (~^$signed(($signed(reg10) && (~|wire3))));
          reg15 <= {((~^$unsigned(reg5)) ?
                  reg11[(2'h2):(1'h1)] : $unsigned(reg5))};
        end
      else
        begin
          if ($signed(reg4[(1'h1):(1'h0)]))
            begin
              reg14 <= reg8[(4'h8):(3'h4)];
              reg15 <= {(~^(8'ha5))};
            end
          else
            begin
              reg14 <= (wire3[(3'h6):(1'h1)] ?
                  reg10 : ((^(!(8'hab))) ?
                      {(8'ha3)} : ((^~(8'ha0)) && $signed(wire12))));
              reg15 <= $signed($signed(reg11[(2'h2):(1'h1)]));
              reg16 <= $signed(wire13);
            end
          reg17 <= $signed(reg6[(1'h1):(1'h0)]);
        end
      if (wire2[(3'h5):(3'h5)])
        begin
          reg18 <= reg8[(1'h0):(1'h0)];
        end
      else
        begin
          if (reg6)
            begin
              reg18 <= reg18;
              reg19 <= {(~&($signed((8'hae)) ^ $signed(wire12)))};
              reg20 <= (^~($signed((wire13 ? wire12 : wire2)) ?
                  (^~$signed(wire3)) : (reg5[(3'h6):(1'h1)] ?
                      {(8'had)} : (^~reg5))));
            end
          else
            begin
              reg18 <= ($unsigned((~(reg16 || (8'h9e)))) * ((|wire13[(3'h4):(1'h1)]) ?
                  $unsigned((wire13 ?
                      wire3 : wire0)) : (~&((8'ha3) >= (8'ha5)))));
              reg19 <= ((8'hac) ?
                  ((~^reg7) | ($unsigned(wire2) ?
                      ((8'ha9) != (8'ha7)) : (~|wire13))) : wire1[(2'h3):(2'h2)]);
              reg20 <= {(|(reg14 ? wire1 : $unsigned(reg8)))};
            end
          reg21 <= $unsigned(($unsigned({(8'haa)}) ?
              (8'h9d) : $unsigned(reg8[(3'h5):(1'h1)])));
        end
    end
  always
    @(posedge clk) begin
      reg22 <= wire3;
    end
  assign wire23 = {(reg5 && reg15[(3'h4):(3'h4)])};
  assign wire24 = (reg16[(3'h7):(3'h6)] ?
                      (($signed(wire12) ?
                          wire12[(1'h1):(1'h0)] : (wire13 ?
                              reg11 : wire0)) && $signed((reg21 ^~ reg22))) : reg18[(1'h0):(1'h0)]);
  module25 #() modinst86 (.wire28(wire12), .clk(clk), .y(wire85), .wire26(wire1), .wire27(reg8), .wire29(reg15));
  assign wire87 = ($unsigned($unsigned(((8'h9e) ?
                      reg20 : wire13))) >> ((8'h9c) ^ ((reg10 ?
                      (8'haa) : reg11) || $signed(wire0))));
  assign wire88 = reg9;
  assign wire89 = $signed((wire88[(1'h1):(1'h1)] ^ (reg14[(1'h1):(1'h1)] ?
                      wire2 : (8'ha2))));
  always
    @(posedge clk) begin
      if (reg15[(3'h4):(1'h1)])
        begin
          reg90 <= (((^~(+wire0)) ?
                  (reg14[(2'h2):(1'h0)] ?
                      (reg9 ?
                          wire88 : wire3) : reg8) : ($unsigned(reg16) == (^wire88))) ?
              ((~&((8'ha8) > reg14)) - wire23) : $unsigned({(reg18 + reg21)}));
          if (($signed(((reg9 || reg5) > (8'ha9))) ?
              (~&($unsigned(wire0) ?
                  (~^wire85) : reg18[(1'h1):(1'h0)])) : reg7))
            begin
              reg91 <= ($signed(({wire85} ?
                      reg21[(1'h0):(1'h0)] : wire0[(1'h0):(1'h0)])) ?
                  (-$signed(wire88[(2'h3):(2'h3)])) : (wire1[(3'h5):(1'h1)] ?
                      $signed(reg11) : $signed($unsigned(wire12))));
              reg92 <= $unsigned({$signed((reg20 ? wire0 : (8'h9f)))});
              reg93 <= $unsigned($signed((|$unsigned((8'ha5)))));
            end
          else
            begin
              reg91 <= $unsigned((8'h9f));
              reg92 <= (~^(8'haa));
              reg93 <= $unsigned($unsigned({(wire88 ? wire2 : reg18)}));
            end
          if (reg8[(2'h2):(2'h2)])
            begin
              reg94 <= wire89[(1'h1):(1'h1)];
              reg95 <= {wire89};
            end
          else
            begin
              reg94 <= reg6[(3'h4):(1'h0)];
              reg95 <= (!{$signed({(8'ha3)})});
            end
        end
      else
        begin
          if ((8'hae))
            begin
              reg90 <= ((wire3[(3'h5):(3'h5)] || reg11) ^ reg22);
              reg91 <= $signed((~&(|(reg6 > wire24))));
            end
          else
            begin
              reg90 <= wire88;
              reg91 <= reg10[(1'h1):(1'h0)];
              reg92 <= reg15;
            end
          reg93 <= {$signed(reg10)};
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module25  (y, clk, wire29, wire28, wire27, wire26);
  output wire [(32'h62):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire29;
  input wire [(4'h9):(1'h0)] wire28;
  input wire signed [(4'h8):(1'h0)] wire27;
  input wire [(3'h5):(1'h0)] wire26;
  wire [(4'ha):(1'h0)] wire84;
  wire signed [(2'h3):(1'h0)] wire80;
  wire signed [(4'hb):(1'h0)] wire79;
  wire signed [(4'h9):(1'h0)] wire78;
  wire [(3'h4):(1'h0)] wire77;
  wire signed [(3'h7):(1'h0)] wire74;
  wire signed [(3'h5):(1'h0)] wire73;
  wire signed [(3'h5):(1'h0)] wire71;
  wire [(4'ha):(1'h0)] wire52;
  reg [(2'h2):(1'h0)] reg83 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg82 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg81 = (1'h0);
  reg [(3'h4):(1'h0)] reg76 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg75 = (1'h0);
  assign y = {wire84,
                 wire80,
                 wire79,
                 wire78,
                 wire77,
                 wire74,
                 wire73,
                 wire71,
                 wire52,
                 reg83,
                 reg82,
                 reg81,
                 reg76,
                 reg75,
                 (1'h0)};
  module30 #() modinst53 (.wire31(wire26), .clk(clk), .wire32(wire27), .wire34(wire29), .y(wire52), .wire33(wire28));
  module54 #() modinst72 (.y(wire71), .clk(clk), .wire56(wire29), .wire57(wire52), .wire55(wire28), .wire58(wire26));
  assign wire73 = wire71[(2'h3):(2'h3)];
  assign wire74 = wire73;
  always
    @(posedge clk) begin
      reg75 <= (($unsigned({wire73}) ^~ $unsigned((wire26 * wire29))) ^~ wire71[(1'h0):(1'h0)]);
      reg76 <= (~|($unsigned((~wire28)) ? wire29 : wire26));
    end
  assign wire77 = wire73[(3'h4):(1'h0)];
  assign wire78 = wire29[(2'h2):(1'h1)];
  assign wire79 = reg76[(1'h0):(1'h0)];
  assign wire80 = ($unsigned({wire26[(3'h5):(2'h3)]}) ?
                      (($signed(wire27) ? wire27 : reg76[(2'h2):(1'h1)]) ?
                          ($unsigned(wire74) ?
                              (~^wire71) : {wire28}) : (~|(wire29 ?
                              (8'hb0) : (8'ha5)))) : $unsigned($unsigned((wire27 >> wire74))));
  always
    @(posedge clk) begin
      if (((wire73[(3'h4):(1'h1)] ?
              $unsigned((~^(8'hb0))) : ({wire74} & $unsigned(wire27))) ?
          wire27[(1'h1):(1'h1)] : wire28[(4'h9):(3'h6)]))
        begin
          reg81 <= (|wire77[(2'h2):(1'h1)]);
          reg82 <= ((({wire79} >>> wire73[(2'h2):(1'h1)]) >> (!(wire52 != reg81))) > $unsigned(((reg75 >>> wire28) || (wire27 ~^ wire26))));
          reg83 <= ((wire27[(2'h2):(2'h2)] ^ ((~(8'haf)) < reg75)) ~^ ((wire52[(1'h1):(1'h0)] < reg76[(1'h1):(1'h1)]) ?
              (^~(wire77 ? wire29 : wire77)) : (-{wire28})));
        end
      else
        begin
          reg81 <= reg83[(2'h2):(1'h1)];
          reg82 <= wire28[(3'h4):(2'h2)];
          reg83 <= (wire28[(3'h6):(3'h6)] && (|$unsigned({wire52})));
        end
    end
  assign wire84 = $signed({reg76[(1'h1):(1'h0)]});
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module54
#(parameter param70 = (((((8'hae) ? (8'hab) : (8'ha8)) ~^ ((8'ha8) ? (8'ha0) : (8'h9f))) >>> (((8'had) ? (8'ha5) : (8'hac)) ? (~&(8'ha4)) : (~^(8'ha5)))) ? ((~&((8'haa) ? (8'ha2) : (8'hac))) ? (((8'had) >>> (8'hac)) == ((8'h9d) ? (8'ha5) : (8'haf))) : (~^((8'h9e) ? (8'ha4) : (8'hab)))) : ({(!(8'hae))} ^~ (((8'ha0) ^ (8'haa)) <<< (-(8'h9d))))))
(y, clk, wire58, wire57, wire56, wire55);
  output wire [(32'h4d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire58;
  input wire [(4'h8):(1'h0)] wire57;
  input wire signed [(2'h2):(1'h0)] wire56;
  input wire signed [(4'h9):(1'h0)] wire55;
  wire [(3'h4):(1'h0)] wire69;
  wire signed [(2'h3):(1'h0)] wire68;
  wire [(4'hb):(1'h0)] wire61;
  wire [(3'h6):(1'h0)] wire59;
  reg [(4'hb):(1'h0)] reg67 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg66 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg65 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg64 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg63 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg62 = (1'h0);
  reg [(4'h9):(1'h0)] reg60 = (1'h0);
  assign y = {wire69,
                 wire68,
                 wire61,
                 wire59,
                 reg67,
                 reg66,
                 reg65,
                 reg64,
                 reg63,
                 reg62,
                 reg60,
                 (1'h0)};
  assign wire59 = $unsigned($unsigned(($signed(wire58) ?
                      (+wire56) : ((8'hac) ? wire57 : wire58))));
  always
    @(posedge clk) begin
      reg60 <= ((wire55 >= (~&(~|(8'had)))) <<< wire57);
    end
  assign wire61 = (~$unsigned($signed(wire59)));
  always
    @(posedge clk) begin
      reg62 <= reg60[(3'h6):(1'h1)];
      if ($signed((~&($unsigned(wire61) & wire55))))
        begin
          if (($unsigned((~|(^~(8'ha8)))) | (reg62 >> (~$unsigned(wire59)))))
            begin
              reg63 <= (wire61[(1'h1):(1'h1)] < $unsigned($unsigned(reg62)));
            end
          else
            begin
              reg63 <= wire57;
            end
          reg64 <= ((wire58[(1'h0):(1'h0)] ?
                  (^$signed(wire55)) : (wire57[(2'h3):(1'h1)] ?
                      (wire59 | reg63) : reg62)) ?
              (((wire59 == wire58) ^~ wire59) * wire58[(2'h3):(2'h2)]) : (+(8'ha1)));
          if (wire55)
            begin
              reg65 <= ($unsigned(((reg64 ?
                  wire57 : wire59) - (wire56 > wire57))) < ((~&$signed(reg64)) ^~ ($signed((8'h9d)) == {wire59})));
              reg66 <= (&(wire61 < $signed(wire59[(1'h1):(1'h0)])));
              reg67 <= (reg66 ?
                  $unsigned(wire61[(3'h4):(1'h1)]) : ($unsigned($signed(reg64)) ?
                      {reg64} : wire57));
            end
          else
            begin
              reg65 <= $signed(($unsigned((^~wire57)) ?
                  $unsigned((wire57 > wire58)) : $signed($signed((8'h9f)))));
            end
        end
      else
        begin
          reg63 <= $signed(($unsigned(reg65) ?
              ((reg64 >>> (8'ha1)) ? {reg62} : (+reg64)) : (~reg60)));
          reg64 <= (wire61 ? wire59[(3'h5):(2'h2)] : (+reg63));
        end
    end
  assign wire68 = wire59[(3'h4):(1'h0)];
  assign wire69 = $unsigned($unsigned((-reg62[(2'h2):(1'h0)])));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module30
#(parameter param51 = (({(~|(8'hab))} ? (!((8'h9e) && (8'ha5))) : (~&(|(8'h9e)))) ? ((~|((8'haf) == (8'haf))) == ((~^(8'ha9)) ? {(8'ha4)} : (~(8'ha7)))) : ((&{(8'ha9)}) ? {(^(8'ha7))} : (((8'ha6) != (8'ha0)) ? ((8'ha4) ^ (8'hae)) : ((8'ha0) ? (8'ha8) : (8'ha2))))))
(y, clk, wire34, wire33, wire32, wire31);
  output wire [(32'h77):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire34;
  input wire [(4'h9):(1'h0)] wire33;
  input wire [(4'h8):(1'h0)] wire32;
  input wire [(2'h3):(1'h0)] wire31;
  wire signed [(3'h6):(1'h0)] wire50;
  wire [(3'h5):(1'h0)] wire45;
  wire signed [(4'hb):(1'h0)] wire44;
  wire [(4'ha):(1'h0)] wire42;
  wire signed [(4'h9):(1'h0)] wire41;
  wire [(4'h8):(1'h0)] wire40;
  wire [(4'h8):(1'h0)] wire36;
  wire [(4'ha):(1'h0)] wire35;
  reg signed [(2'h3):(1'h0)] reg49 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg48 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg47 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg46 = (1'h0);
  reg [(3'h6):(1'h0)] reg43 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg39 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg38 = (1'h0);
  reg [(4'hb):(1'h0)] reg37 = (1'h0);
  assign y = {wire50,
                 wire45,
                 wire44,
                 wire42,
                 wire41,
                 wire40,
                 wire36,
                 wire35,
                 reg49,
                 reg48,
                 reg47,
                 reg46,
                 reg43,
                 reg39,
                 reg38,
                 reg37,
                 (1'h0)};
  assign wire35 = wire31[(2'h2):(2'h2)];
  assign wire36 = ($unsigned(((+(8'h9d)) * (wire33 <<< wire31))) ?
                      wire31[(2'h3):(2'h2)] : wire35);
  always
    @(posedge clk) begin
      reg37 <= (~wire32);
      reg38 <= {(($unsigned(wire31) ?
              wire35 : $unsigned(wire35)) + (~&wire36[(2'h3):(2'h3)]))};
      reg39 <= (wire34 * $unsigned((reg38[(2'h3):(2'h2)] ?
          (wire32 ? wire33 : wire35) : {wire31})));
    end
  assign wire40 = wire36;
  assign wire41 = (reg39[(1'h0):(1'h0)] ?
                      ((wire36 & (wire40 ?
                          (8'ha4) : wire35)) >>> ($unsigned(wire34) ?
                          reg39 : (wire35 ? wire31 : reg38))) : wire31);
  assign wire42 = reg37;
  always
    @(posedge clk) begin
      reg43 <= wire36[(2'h2):(1'h0)];
    end
  assign wire44 = reg38;
  assign wire45 = (~((-$unsigned(wire42)) ? reg37 : (8'hb0)));
  always
    @(posedge clk) begin
      if (wire36)
        begin
          reg46 <= $signed((|wire45));
          reg47 <= $signed(({$unsigned((8'ha5))} == $unsigned($unsigned(reg43))));
          reg48 <= (wire41[(3'h6):(3'h6)] > (8'ha4));
        end
      else
        begin
          if ((({$unsigned(wire36)} < {$unsigned(wire41)}) ?
              (&(~|(wire35 < (8'h9d)))) : {(reg43 >>> $signed(reg47))}))
            begin
              reg46 <= {reg37};
              reg47 <= (reg39[(1'h1):(1'h0)] * (^~((wire44 != reg46) ^~ reg37[(4'h8):(3'h4)])));
            end
          else
            begin
              reg46 <= $signed((reg37 ? reg43 : (8'hb0)));
              reg47 <= $unsigned(wire41);
              reg48 <= ((8'hab) | ($signed(reg39) << ((reg47 >> wire33) | (reg48 ?
                  wire41 : wire42))));
            end
        end
      reg49 <= (!{reg46});
    end
  assign wire50 = ((!{(+wire40)}) ?
                      ($signed({(8'ha4)}) <= ($unsigned((8'hab)) << (wire31 ^~ reg37))) : wire32);
endmodule