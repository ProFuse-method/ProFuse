(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h59):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire3;
  input wire [(3'h6):(1'h0)] wire2;
  input wire signed [(3'h6):(1'h0)] wire1;
  input wire signed [(3'h7):(1'h0)] wire0;
  wire signed [(4'h8):(1'h0)] wire38;
  wire [(4'ha):(1'h0)] wire37;
  wire signed [(3'h4):(1'h0)] wire36;
  wire [(3'h5):(1'h0)] wire35;
  wire signed [(3'h6):(1'h0)] wire34;
  wire [(3'h6):(1'h0)] wire33;
  wire signed [(3'h7):(1'h0)] wire31;
  wire signed [(3'h7):(1'h0)] wire4;
  reg [(3'h6):(1'h0)] reg10 = (1'h0);
  reg [(2'h2):(1'h0)] reg9 = (1'h0);
  reg [(4'h9):(1'h0)] reg8 = (1'h0);
  reg [(2'h2):(1'h0)] reg7 = (1'h0);
  reg [(3'h6):(1'h0)] reg6 = (1'h0);
  reg [(4'ha):(1'h0)] reg5 = (1'h0);
  assign y = {wire38,
                 wire37,
                 wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire31,
                 wire4,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 (1'h0)};
  assign wire4 = {(8'ha1)};
  always
    @(posedge clk) begin
      reg5 <= (~^wire3[(1'h0):(1'h0)]);
      reg6 <= $signed(wire2);
      if (reg6[(3'h4):(2'h3)])
        begin
          reg7 <= {(reg5 ? wire0 : $signed($unsigned(reg5)))};
        end
      else
        begin
          reg7 <= reg6[(3'h6):(3'h6)];
          reg8 <= (wire3[(3'h4):(1'h0)] ? wire1 : (^~{$unsigned(wire0)}));
        end
    end
  always
    @(posedge clk) begin
      reg9 <= ((&(((8'ha3) ~^ wire3) ^ (^~wire1))) ?
          (wire0[(2'h3):(1'h0)] ?
              $signed(((8'ha2) ? reg6 : reg8)) : ($signed((8'ha0)) != (reg7 ?
                  wire4 : reg8))) : $signed(reg5));
    end
  always
    @(posedge clk) begin
      reg10 <= (reg5[(1'h1):(1'h0)] ?
          $signed($signed($signed(reg5))) : (^~(((8'ha0) ?
              reg6 : (8'ha1)) ~^ (!wire2))));
    end
  module11 #() modinst32 (.wire15(reg5), .wire14(reg8), .clk(clk), .y(wire31), .wire13(wire3), .wire12(wire0));
  assign wire33 = reg8;
  assign wire34 = wire31[(3'h7):(2'h3)];
  assign wire35 = (($unsigned($unsigned(wire33)) < (~|(!wire2))) << reg6);
  assign wire36 = (((~^(reg5 ? reg7 : reg7)) ^~ reg8[(1'h0):(1'h0)]) ?
                      wire4 : (8'haa));
  assign wire37 = wire3[(4'h8):(1'h1)];
  assign wire38 = wire0[(2'h2):(1'h1)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11
#(parameter param30 = (8'ha6))
(y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h68):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire15;
  input wire signed [(4'h8):(1'h0)] wire14;
  input wire signed [(4'h8):(1'h0)] wire13;
  input wire [(3'h7):(1'h0)] wire12;
  wire [(4'ha):(1'h0)] wire28;
  wire [(4'ha):(1'h0)] wire27;
  wire signed [(3'h6):(1'h0)] wire26;
  wire signed [(4'h8):(1'h0)] wire25;
  wire [(2'h3):(1'h0)] wire24;
  wire signed [(4'h8):(1'h0)] wire23;
  wire [(3'h5):(1'h0)] wire22;
  wire signed [(4'hb):(1'h0)] wire21;
  wire [(4'ha):(1'h0)] wire20;
  wire [(3'h4):(1'h0)] wire17;
  wire [(2'h3):(1'h0)] wire16;
  reg signed [(4'hb):(1'h0)] reg29 = (1'h0);
  reg [(2'h3):(1'h0)] reg19 = (1'h0);
  reg [(4'hb):(1'h0)] reg18 = (1'h0);
  assign y = {wire28,
                 wire27,
                 wire26,
                 wire25,
                 wire24,
                 wire23,
                 wire22,
                 wire21,
                 wire20,
                 wire17,
                 wire16,
                 reg29,
                 reg19,
                 reg18,
                 (1'h0)};
  assign wire16 = $signed(($unsigned((wire12 ^~ wire14)) ?
                      $signed({wire15}) : ((wire13 != wire14) ?
                          (|wire15) : (wire12 >> wire12))));
  assign wire17 = wire13;
  always
    @(posedge clk) begin
      reg18 <= ({$unsigned($unsigned((8'ha5)))} ?
          wire16[(1'h1):(1'h1)] : (wire13 >= wire14));
      reg19 <= $signed(wire12[(3'h5):(2'h3)]);
    end
  assign wire20 = ($signed(((reg18 ? wire13 : reg18) ?
                      wire16 : (^wire12))) != $signed($unsigned($signed(wire15))));
  assign wire21 = ($unsigned($signed({wire15})) ?
                      $signed(((wire20 <= (8'ha8)) ?
                          (&wire15) : (reg19 ? wire20 : wire17))) : {(^(wire12 ?
                              wire20 : wire13))});
  assign wire22 = ($signed(wire16[(2'h2):(1'h0)]) ?
                      (((-wire20) ?
                              (reg19 ?
                                  (8'haa) : (8'haa)) : (wire15 == (8'ha0))) ?
                          (+$unsigned(wire17)) : wire16[(1'h1):(1'h1)]) : (~((wire14 ?
                              wire21 : wire15) ?
                          wire14[(2'h3):(1'h0)] : (reg18 != (8'h9d)))));
  assign wire23 = $unsigned((!({(8'ha2)} - (8'hae))));
  assign wire24 = ({wire20[(2'h3):(2'h2)]} ?
                      (wire22[(3'h4):(2'h3)] - (~&wire21[(2'h3):(2'h3)])) : ((wire21[(2'h2):(2'h2)] ?
                              {(8'h9d)} : wire12) ?
                          wire13 : $unsigned((wire21 ? (8'hae) : wire12))));
  assign wire25 = (wire15 <<< wire15[(1'h0):(1'h0)]);
  assign wire26 = wire24;
  assign wire27 = wire26;
  assign wire28 = ({wire23[(4'h8):(3'h5)]} >= (((wire16 >>> wire17) * $signed(reg19)) == (+(~reg19))));
  always
    @(posedge clk) begin
      reg29 <= $unsigned(wire12);
    end
endmodule