(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param61 = ((((((8'ha2) | (8'hac)) ? ((8'hb6) ? (8'hb2) : (7'h44)) : {(8'hb5)}) || (((8'hbe) ? (8'h9c) : (8'hba)) ? ((8'ha0) ^ (8'hab)) : {(8'ha4)})) << ({((7'h44) ? (8'hbc) : (8'hbe))} && ((8'h9c) - {(8'hb1)}))) ? ((^(^(^~(8'had)))) ? (({(8'h9e)} ? ((8'ha0) ? (8'ha6) : (8'hb7)) : ((8'hb4) >= (8'ha6))) ? (~((8'hbf) ? (8'ha2) : (8'hae))) : {((8'hab) ^ (8'hba)), ((8'hb6) ? (8'ha7) : (8'hb9))}) : {{(7'h40)}, (!((8'ha4) ? (8'ha6) : (8'h9c)))}) : (~|((&(~|(8'ha3))) & (((8'hbc) ? (8'hbb) : (8'ha2)) < ((8'hba) ? (8'h9f) : (8'hb3)))))), 
parameter param62 = (8'hae))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'hac):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire4;
  input wire signed [(5'h12):(1'h0)] wire3;
  input wire [(3'h6):(1'h0)] wire2;
  input wire signed [(5'h13):(1'h0)] wire1;
  input wire signed [(4'hd):(1'h0)] wire0;
  wire signed [(3'h5):(1'h0)] wire59;
  wire [(4'hd):(1'h0)] wire17;
  wire signed [(2'h3):(1'h0)] wire16;
  wire signed [(4'ha):(1'h0)] wire15;
  wire signed [(4'hc):(1'h0)] wire14;
  wire signed [(5'h11):(1'h0)] wire13;
  wire signed [(5'h14):(1'h0)] wire12;
  wire signed [(3'h6):(1'h0)] wire11;
  wire [(4'hc):(1'h0)] wire10;
  wire [(4'hc):(1'h0)] wire9;
  wire signed [(3'h4):(1'h0)] wire8;
  wire [(5'h10):(1'h0)] wire7;
  wire signed [(5'h14):(1'h0)] wire6;
  wire signed [(5'h15):(1'h0)] wire5;
  assign y = {wire59,
                 wire17,
                 wire16,
                 wire15,
                 wire14,
                 wire13,
                 wire12,
                 wire11,
                 wire10,
                 wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 (1'h0)};
  assign wire5 = wire0;
  assign wire6 = wire1;
  assign wire7 = (wire4 <= $unsigned((wire0[(3'h7):(1'h0)] - ($signed(wire0) ?
                     wire0 : wire3[(2'h2):(1'h1)]))));
  assign wire8 = (&(wire2[(2'h3):(1'h0)] >= $signed(((wire3 ?
                     wire0 : wire2) == wire2))));
  assign wire9 = $signed(($signed(($unsigned(wire3) ?
                     $signed((8'hac)) : $signed(wire8))) >> $unsigned((~^$unsigned(wire3)))));
  assign wire10 = $signed(wire0);
  assign wire11 = $unsigned($unsigned({$signed($signed(wire4))}));
  assign wire12 = $unsigned((8'hbc));
  assign wire13 = wire7[(4'hf):(4'hb)];
  assign wire14 = {wire9[(4'hb):(4'h8)]};
  assign wire15 = $signed((^~(~|(+(~^wire3)))));
  assign wire16 = (8'hba);
  assign wire17 = ((~$signed((wire15[(1'h0):(1'h0)] & wire8[(2'h3):(1'h1)]))) != (8'hb6));
  module18 #() modinst60 (wire59, clk, wire6, wire13, wire7, wire3);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18  (y, clk, wire22, wire21, wire20, wire19);
  output wire [(32'h1b8):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h14):(1'h0)] wire22;
  input wire signed [(5'h10):(1'h0)] wire21;
  input wire signed [(5'h10):(1'h0)] wire20;
  input wire [(5'h12):(1'h0)] wire19;
  wire [(5'h12):(1'h0)] wire58;
  wire signed [(3'h6):(1'h0)] wire57;
  wire signed [(3'h4):(1'h0)] wire56;
  wire [(5'h10):(1'h0)] wire55;
  reg signed [(2'h3):(1'h0)] reg53 = (1'h0);
  reg [(3'h6):(1'h0)] reg52 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg51 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg50 = (1'h0);
  reg [(3'h6):(1'h0)] reg47 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg44 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg42 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg41 = (1'h0);
  reg [(5'h15):(1'h0)] reg40 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg36 = (1'h0);
  reg [(5'h15):(1'h0)] reg35 = (1'h0);
  reg [(3'h6):(1'h0)] reg30 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg26 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg25 = (1'h0);
  reg [(5'h10):(1'h0)] reg54 = (1'h0);
  reg [(5'h14):(1'h0)] forvar49 = (1'h0);
  reg [(5'h12):(1'h0)] reg48 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg46 = (1'h0);
  reg [(3'h6):(1'h0)] forvar45 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar43 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg39 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar38 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg37 = (1'h0);
  reg [(2'h3):(1'h0)] forvar34 = (1'h0);
  reg [(5'h12):(1'h0)] reg33 = (1'h0);
  reg [(4'hb):(1'h0)] reg32 = (1'h0);
  reg [(4'hf):(1'h0)] forvar31 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg29 = (1'h0);
  reg [(5'h12):(1'h0)] reg28 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg27 = (1'h0);
  reg [(4'ha):(1'h0)] forvar24 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar23 = (1'h0);
  assign y = {wire58,
                 wire57,
                 wire56,
                 wire55,
                 reg53,
                 reg52,
                 reg51,
                 reg50,
                 reg47,
                 reg44,
                 reg42,
                 reg41,
                 reg40,
                 reg36,
                 reg35,
                 reg30,
                 reg26,
                 reg25,
                 reg54,
                 forvar49,
                 reg48,
                 reg46,
                 forvar45,
                 forvar43,
                 reg39,
                 forvar38,
                 reg37,
                 forvar34,
                 reg33,
                 reg32,
                 forvar31,
                 reg29,
                 reg28,
                 reg27,
                 forvar24,
                 forvar23,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar23 = (1'h0); (forvar23 < (1'h0)); forvar23 = (forvar23 + (1'h1)))
        begin
          for (forvar24 = (1'h0); (forvar24 < (2'h3)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 <= (({{(wire20 ?
                              wire20 : wire20)}} <<< $unsigned(wire20[(3'h7):(1'h1)])) ?
                  (8'hbe) : $unsigned(wire20));
              reg26 <= $unsigned($signed(forvar23[(3'h7):(2'h3)]));
              reg27 = ($signed((wire20 ^ $signed($signed(wire21)))) ?
                  (&(wire21[(4'hb):(3'h5)] ~^ forvar24)) : reg25);
              reg28 = $signed(wire20[(3'h5):(1'h1)]);
              reg29 = ($signed({((8'h9e) || forvar24[(4'h8):(2'h3)]), reg26}) ?
                  (~|(~&(((8'hb1) ?
                      (7'h40) : (8'hae)) != wire21))) : (reg27[(4'h8):(3'h6)] != $unsigned($signed($signed(reg26)))));
            end
          reg30 <= (($signed($unsigned((wire21 ?
              forvar24 : reg25))) < forvar24) >= (~^({(wire19 == (8'h9c)),
              $unsigned(wire20)} >> (~((8'ha6) <= (8'haf))))));
          for (forvar31 = (1'h0); (forvar31 < (1'h0)); forvar31 = (forvar31 + (1'h1)))
            begin
              reg32 = (^(forvar31[(3'h5):(3'h4)] >= reg25[(2'h3):(2'h3)]));
              reg33 = wire19;
            end
        end
      for (forvar34 = (1'h0); (forvar34 < (2'h2)); forvar34 = (forvar34 + (1'h1)))
        begin
          reg35 <= reg32[(4'hb):(2'h2)];
          reg36 <= reg33;
          reg37 = wire21;
          for (forvar38 = (1'h0); (forvar38 < (2'h2)); forvar38 = (forvar38 + (1'h1)))
            begin
              reg39 = $signed((wire22 ^~ (^~$unsigned(wire19[(5'h12):(5'h10)]))));
              reg40 <= (~|$unsigned(((reg30 || (!reg32)) ?
                  ((reg32 ^ reg29) ?
                      $unsigned(reg26) : $signed(reg36)) : forvar31[(4'he):(4'h9)])));
              reg41 <= ((^~reg35) ?
                  reg39[(4'hd):(4'hd)] : (~^$unsigned($unsigned($signed(forvar23)))));
              reg42 <= ($signed((-($unsigned(reg39) ?
                      {wire22} : reg30[(3'h6):(3'h6)]))) ?
                  forvar23 : $signed(reg39));
            end
        end
      for (forvar43 = (1'h0); (forvar43 < (2'h2)); forvar43 = (forvar43 + (1'h1)))
        begin
          reg44 <= ($unsigned((forvar34 != (^~(forvar43 <= wire21)))) ?
              $signed((&$unsigned($unsigned(forvar24)))) : reg28);
          for (forvar45 = (1'h0); (forvar45 < (2'h3)); forvar45 = (forvar45 + (1'h1)))
            begin
              reg46 = (($unsigned(reg29) * $unsigned(reg26)) ?
                  (($signed($unsigned(reg39)) ?
                      ($signed(forvar24) ?
                          forvar45 : {wire19}) : wire20) < $unsigned((~forvar45[(2'h3):(2'h2)]))) : $signed(forvar38));
              reg47 <= ((^~wire22) << ((forvar38 << (^~reg30[(3'h4):(2'h2)])) ?
                  $unsigned(((forvar45 == reg33) ?
                      {reg36, (8'hb3)} : $signed(forvar38))) : reg28));
            end
          reg48 = $signed($unsigned((forvar34 ~^ ((forvar43 ?
              wire20 : reg47) <= (8'hac)))));
          for (forvar49 = (1'h0); (forvar49 < (3'h4)); forvar49 = (forvar49 + (1'h1)))
            begin
              reg50 <= ($signed(reg27[(5'h14):(3'h6)]) ?
                  $signed({$unsigned((forvar43 ^~ reg36))}) : wire19[(4'h8):(3'h7)]);
              reg51 <= wire22[(4'hc):(4'hc)];
              reg52 <= (((((&reg48) ?
                  $signed(reg29) : $signed(wire21)) << $signed(reg35)) & (|(8'h9c))) == forvar45);
              reg53 <= (-(+($unsigned($signed(reg36)) ?
                  ($signed(reg28) == forvar49) : ((reg33 & reg44) ?
                      reg42[(4'hb):(4'hb)] : {forvar23, reg46}))));
            end
        end
      reg54 = (~$signed($unsigned({(reg41 ? forvar23 : reg52),
          (reg29 ? reg41 : reg42)})));
    end
  assign wire55 = $signed(((reg30[(1'h1):(1'h1)] != (!(reg50 <<< reg35))) ~^ (8'ha1)));
  assign wire56 = ((~reg51[(1'h0):(1'h0)]) ?
                      (((wire19[(3'h5):(3'h4)] <<< (reg35 ? reg50 : (7'h40))) ?
                              ($unsigned(reg36) ?
                                  {wire19, reg44} : ((8'ha9) ?
                                      (8'haa) : reg44)) : {reg47}) ?
                          reg36 : (~({reg51} ?
                              $signed(reg30) : $unsigned(reg25)))) : $signed(wire20[(3'h6):(3'h5)]));
  assign wire57 = reg47[(1'h1):(1'h1)];
  assign wire58 = ($signed(wire22) ?
                      reg47[(2'h3):(1'h1)] : $signed($unsigned(wire55)));
endmodule