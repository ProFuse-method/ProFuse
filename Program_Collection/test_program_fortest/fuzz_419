(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param69 = ((8'hac) <= ((((8'ha5) || (8'ha7)) || ((8'ha5) ? (8'haa) : (8'ha6))) ~^ (((8'ha5) >>> (8'ha0)) ~^ {(8'had)}))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h6d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire0;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire [(3'h7):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire3;
  wire signed [(3'h5):(1'h0)] wire66;
  wire signed [(3'h5):(1'h0)] wire65;
  wire signed [(4'h8):(1'h0)] wire64;
  wire [(3'h7):(1'h0)] wire4;
  wire [(4'hb):(1'h0)] wire5;
  wire signed [(4'ha):(1'h0)] wire6;
  wire [(4'h9):(1'h0)] wire10;
  wire [(4'h9):(1'h0)] wire60;
  reg signed [(3'h7):(1'h0)] reg68 = (1'h0);
  reg [(4'h9):(1'h0)] reg63 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg62 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg7 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg8 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg9 = (1'h0);
  assign y = {wire66,
                 wire65,
                 wire64,
                 wire4,
                 wire5,
                 wire6,
                 wire10,
                 wire60,
                 reg68,
                 reg63,
                 reg62,
                 reg7,
                 reg8,
                 reg9,
                 (1'h0)};
  assign wire4 = wire3[(4'h9):(3'h6)];
  assign wire5 = (~{(!(wire1 ? wire3 : wire4))});
  assign wire6 = (~|((|(wire3 ? (8'hae) : wire3)) > $unsigned($signed(wire1))));
  always
    @(posedge clk) begin
      reg7 <= $signed((wire4[(3'h5):(1'h1)] <<< $unsigned(wire4[(1'h0):(1'h0)])));
      reg8 <= wire4[(3'h4):(2'h3)];
      reg9 <= $signed(wire6);
    end
  assign wire10 = wire5[(4'hb):(3'h4)];
  module11 #() modinst61 (wire60, clk, wire10, wire3, reg8, wire4);
  always
    @(posedge clk) begin
      reg62 <= (($signed({(8'hae)}) - reg7) & (+$unsigned((!wire5))));
      reg63 <= ($unsigned(reg7) ~^ (wire0 ^~ ((wire0 >> wire1) ?
          (reg8 ^ wire1) : wire60[(2'h3):(2'h3)])));
    end
  assign wire64 = wire6[(3'h7):(2'h2)];
  assign wire65 = wire10[(3'h4):(2'h3)];
  module31 #() modinst67 (.wire32(reg63), .wire35(reg62), .y(wire66), .wire33(wire60), .wire34(wire2), .clk(clk));
  always
    @(posedge clk) begin
      reg68 <= reg63[(3'h7):(2'h3)];
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11  (y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h29):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire15;
  input wire signed [(4'hb):(1'h0)] wire14;
  input wire signed [(4'ha):(1'h0)] wire13;
  input wire signed [(3'h7):(1'h0)] wire12;
  wire [(4'hb):(1'h0)] wire58;
  wire signed [(2'h2):(1'h0)] wire57;
  wire [(2'h3):(1'h0)] wire55;
  wire [(2'h2):(1'h0)] wire30;
  wire [(3'h5):(1'h0)] wire28;
  wire signed [(2'h3):(1'h0)] wire17;
  wire [(3'h6):(1'h0)] wire16;
  reg signed [(4'h8):(1'h0)] reg59 = (1'h0);
  assign y = {wire58,
                 wire57,
                 wire55,
                 wire30,
                 wire28,
                 wire17,
                 wire16,
                 reg59,
                 (1'h0)};
  assign wire16 = (+$unsigned(((~^wire15) < wire12)));
  assign wire17 = ({wire12[(1'h1):(1'h0)]} ~^ {wire15[(1'h1):(1'h0)]});
  module18 #() modinst29 (wire28, clk, wire13, wire15, wire16, wire14);
  assign wire30 = wire13;
  module31 #() modinst56 (.wire34(wire12), .wire32(wire14), .y(wire55), .wire35(wire17), .wire33(wire15), .clk(clk));
  assign wire57 = wire17[(1'h1):(1'h1)];
  assign wire58 = wire57[(1'h1):(1'h0)];
  always
    @(posedge clk) begin
      reg59 <= $signed((wire15 ?
          wire28[(2'h2):(2'h2)] : (wire30 ? $unsigned(wire17) : wire15)));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module31
#(parameter param54 = ({((~|(8'ha9)) ? (~&(8'hae)) : ((8'ha3) >= (8'hb0)))} ^ (^({(8'ha6)} ? ((8'ha5) ? (8'ha0) : (8'ha5)) : ((8'ha5) ? (8'ha2) : (8'h9d))))))
(y, clk, wire35, wire34, wire33, wire32);
  output wire [(32'h69):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire35;
  input wire signed [(3'h7):(1'h0)] wire34;
  input wire [(4'h9):(1'h0)] wire33;
  input wire signed [(3'h4):(1'h0)] wire32;
  wire [(3'h7):(1'h0)] wire53;
  wire [(3'h5):(1'h0)] wire52;
  wire [(4'ha):(1'h0)] wire49;
  wire [(3'h7):(1'h0)] wire48;
  wire [(3'h7):(1'h0)] wire47;
  wire signed [(2'h3):(1'h0)] wire46;
  wire signed [(3'h5):(1'h0)] wire45;
  wire signed [(3'h5):(1'h0)] wire44;
  wire [(2'h2):(1'h0)] wire36;
  reg [(3'h7):(1'h0)] reg51 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg50 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg43 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg42 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg41 = (1'h0);
  reg [(4'ha):(1'h0)] reg40 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg39 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg38 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg37 = (1'h0);
  assign y = {wire53,
                 wire52,
                 wire49,
                 wire48,
                 wire47,
                 wire46,
                 wire45,
                 wire44,
                 wire36,
                 reg51,
                 reg50,
                 reg43,
                 reg42,
                 reg41,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 (1'h0)};
  assign wire36 = wire33[(3'h7):(3'h4)];
  always
    @(posedge clk) begin
      reg37 <= wire35;
      reg38 <= $unsigned(($unsigned($unsigned(wire32)) <<< {{wire35}}));
    end
  always
    @(posedge clk) begin
      if ((reg37 ?
          ($signed($signed((8'hb0))) | {(wire35 <<< wire34)}) : {$signed((^~reg37))}))
        begin
          reg39 <= ($unsigned(((~wire35) ?
                  (reg38 ? reg38 : (8'ha3)) : (wire33 ? (8'ha3) : (8'ha9)))) ?
              wire36[(1'h1):(1'h1)] : (((8'h9d) ?
                  {(8'hae)} : $unsigned(wire33)) && ($signed(reg38) | reg37)));
        end
      else
        begin
          reg39 <= ($signed(((wire32 ? wire34 : reg39) ?
                  (~wire32) : ((8'hab) ? wire32 : (8'hb0)))) ?
              reg38[(2'h3):(2'h3)] : $unsigned(wire33[(4'h9):(1'h0)]));
          reg40 <= $signed((~$signed((+wire34))));
          reg41 <= reg38;
        end
      reg42 <= (~^wire34[(3'h5):(3'h4)]);
      reg43 <= $unsigned(reg37);
    end
  assign wire44 = (reg39 ~^ $signed(($unsigned(reg38) ?
                      (wire36 - wire34) : (~&wire35))));
  assign wire45 = ((+(wire36[(2'h2):(1'h0)] | {reg43})) ?
                      (reg39 & wire34) : $unsigned((-$signed(wire32))));
  assign wire46 = (8'ha3);
  assign wire47 = $signed(wire36[(1'h1):(1'h1)]);
  assign wire48 = ({($signed((8'haa)) >> (8'ha8))} ?
                      $signed({$signed(wire32)}) : (~&$unsigned((wire45 ?
                          wire46 : reg41))));
  assign wire49 = (reg37[(2'h3):(1'h0)] == (~|$signed(reg38)));
  always
    @(posedge clk) begin
      reg50 <= wire44;
      reg51 <= $unsigned(wire48);
    end
  assign wire52 = {reg42};
  assign wire53 = (|(wire48[(3'h7):(2'h3)] * ({wire33} ?
                      $unsigned(wire44) : $unsigned(reg38))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18  (y, clk, wire22, wire21, wire20, wire19);
  output wire [(32'h1e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire22;
  input wire [(4'h8):(1'h0)] wire21;
  input wire signed [(3'h5):(1'h0)] wire20;
  input wire signed [(4'hb):(1'h0)] wire19;
  wire [(2'h2):(1'h0)] wire27;
  wire signed [(3'h4):(1'h0)] wire26;
  wire [(4'ha):(1'h0)] wire25;
  wire signed [(4'hb):(1'h0)] wire24;
  wire signed [(2'h2):(1'h0)] wire23;
  assign y = {wire27, wire26, wire25, wire24, wire23, (1'h0)};
  assign wire23 = $unsigned({(~wire21[(4'h8):(1'h1)])});
  assign wire24 = (~&(wire19 | ({wire22} ?
                      $signed(wire22) : $unsigned(wire23))));
  assign wire25 = (^~(8'hab));
  assign wire26 = (wire24[(1'h0):(1'h0)] ?
                      (8'hb0) : $signed((wire20[(2'h3):(1'h1)] ?
                          wire25[(2'h2):(1'h1)] : wire25[(3'h4):(3'h4)])));
  assign wire27 = $unsigned((+(wire20[(1'h1):(1'h1)] < (8'ha9))));
endmodule