(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h53):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire0;
  input wire [(2'h3):(1'h0)] wire1;
  input wire [(3'h7):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire3;
  wire [(3'h6):(1'h0)] wire28;
  wire [(3'h6):(1'h0)] wire27;
  wire [(3'h7):(1'h0)] wire4;
  wire [(4'hb):(1'h0)] wire5;
  wire [(3'h6):(1'h0)] wire6;
  wire signed [(4'ha):(1'h0)] wire7;
  wire signed [(3'h4):(1'h0)] wire25;
  reg signed [(4'h9):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg9 = (1'h0);
  reg [(3'h7):(1'h0)] reg10 = (1'h0);
  reg [(2'h2):(1'h0)] reg11 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg12 = (1'h0);
  reg [(2'h3):(1'h0)] reg13 = (1'h0);
  assign y = {wire28,
                 wire27,
                 wire4,
                 wire5,
                 wire6,
                 wire7,
                 wire25,
                 reg8,
                 reg9,
                 reg10,
                 reg11,
                 reg12,
                 reg13,
                 (1'h0)};
  assign wire4 = wire3[(3'h6):(2'h2)];
  assign wire5 = wire2;
  assign wire6 = (wire5 ^ $unsigned(wire3));
  assign wire7 = {wire1[(1'h1):(1'h1)]};
  always
    @(posedge clk) begin
      if (wire5)
        begin
          reg8 <= (^~wire3[(4'ha):(2'h2)]);
        end
      else
        begin
          reg8 <= wire3[(3'h5):(2'h3)];
        end
      reg9 <= $unsigned(wire6[(1'h0):(1'h0)]);
    end
  always
    @(posedge clk) begin
      if ($unsigned(((|(-wire5)) ?
          $signed($signed(wire3)) : (+(wire0 << wire2)))))
        begin
          if (wire4)
            begin
              reg10 <= (wire7[(2'h2):(2'h2)] ?
                  wire6[(1'h1):(1'h1)] : {(|wire7)});
              reg11 <= {(wire0 << {wire2})};
            end
          else
            begin
              reg10 <= {($signed((wire4 ?
                      (8'hac) : wire3)) ^ $unsigned((wire4 & wire5)))};
            end
        end
      else
        begin
          reg10 <= $signed(($signed((-wire2)) * ($signed((8'h9d)) ?
              {wire0} : (reg10 ? wire7 : (8'ha3)))));
          reg11 <= reg8;
        end
      if (wire6[(3'h6):(3'h6)])
        begin
          reg12 <= {(!(&((8'h9d) != wire1)))};
        end
      else
        begin
          reg12 <= ($signed((~|reg11)) && $unsigned((-(wire7 && wire3))));
        end
      reg13 <= $unsigned(($signed($signed(reg10)) ?
          $signed((wire3 - reg9)) : reg12));
    end
  module14 #() modinst26 (.clk(clk), .wire17(wire5), .wire18(wire2), .wire15(reg12), .y(wire25), .wire16(wire3));
  assign wire27 = (~(wire5 ?
                      $signed({reg9}) : ($unsigned(wire3) == (wire25 << wire2))));
  assign wire28 = wire25[(1'h1):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module14
#(parameter param24 = (-((((8'ha3) | (8'ha8)) ? ((8'haf) ? (8'ha4) : (8'hab)) : ((8'ha4) ? (8'h9c) : (8'hab))) || (&((8'hac) ^ (8'hac))))))
(y, clk, wire18, wire17, wire16, wire15);
  output wire [(32'h29):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire18;
  input wire signed [(4'hb):(1'h0)] wire17;
  input wire signed [(2'h2):(1'h0)] wire16;
  input wire [(3'h4):(1'h0)] wire15;
  wire signed [(4'h9):(1'h0)] wire23;
  wire signed [(2'h2):(1'h0)] wire22;
  wire signed [(3'h7):(1'h0)] wire21;
  wire signed [(4'hb):(1'h0)] wire20;
  wire [(4'hb):(1'h0)] wire19;
  assign y = {wire23, wire22, wire21, wire20, wire19, (1'h0)};
  assign wire19 = wire18[(2'h2):(2'h2)];
  assign wire20 = $signed($unsigned($signed($unsigned(wire18))));
  assign wire21 = $signed((wire20[(3'h6):(2'h2)] >>> $unsigned(((8'ha1) > wire16))));
  assign wire22 = ((({(8'hac)} ?
                      (-wire18) : $signed(wire16)) || (8'hab)) == wire15[(2'h3):(1'h1)]);
  assign wire23 = (wire18 ? (8'h9e) : ({$unsigned(wire19)} <<< {{(8'had)}}));
endmodule