(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h26):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire0;
  input wire signed [(3'h6):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire3;
  wire [(4'ha):(1'h0)] wire4;
  wire [(3'h5):(1'h0)] wire7;
  wire signed [(2'h3):(1'h0)] wire34;
  reg [(4'ha):(1'h0)] reg5 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg6 = (1'h0);
  assign y = {wire4, wire7, wire34, reg5, reg6, (1'h0)};
  assign wire4 = (!$signed(wire0[(1'h1):(1'h1)]));
  always
    @(posedge clk) begin
      reg5 <= (wire2[(2'h3):(2'h2)] ?
          (wire3[(1'h1):(1'h0)] ?
              $signed(((8'hac) ?
                  (8'haa) : wire1)) : $unsigned(wire1[(2'h2):(2'h2)])) : wire3);
      reg6 <= wire2;
    end
  assign wire7 = wire3[(2'h3):(1'h1)];
  module8 #() modinst35 (.clk(clk), .y(wire34), .wire11(wire1), .wire9(wire3), .wire12(wire7), .wire10(reg6));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module8
#(parameter param33 = (((8'ha7) ? ((~(8'haa)) <<< (~(8'ha3))) : (8'ha4)) - (-(~((8'haf) ~^ (8'hb0))))))
(y, clk, wire12, wire11, wire10, wire9);
  output wire [(32'h7a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire12;
  input wire [(3'h6):(1'h0)] wire11;
  input wire [(4'h9):(1'h0)] wire10;
  input wire [(4'ha):(1'h0)] wire9;
  wire [(3'h5):(1'h0)] wire32;
  wire signed [(4'ha):(1'h0)] wire31;
  wire [(3'h5):(1'h0)] wire30;
  wire [(4'h9):(1'h0)] wire29;
  wire [(4'h8):(1'h0)] wire28;
  wire [(2'h3):(1'h0)] wire27;
  wire signed [(3'h4):(1'h0)] wire26;
  wire [(4'hb):(1'h0)] wire22;
  wire [(3'h7):(1'h0)] wire21;
  wire signed [(4'hb):(1'h0)] wire13;
  reg [(3'h7):(1'h0)] reg25 = (1'h0);
  reg [(2'h3):(1'h0)] reg24 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg23 = (1'h0);
  reg [(3'h7):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg19 = (1'h0);
  reg [(3'h4):(1'h0)] reg18 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg17 = (1'h0);
  reg [(2'h3):(1'h0)] reg16 = (1'h0);
  reg [(2'h3):(1'h0)] reg15 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg14 = (1'h0);
  assign y = {wire32,
                 wire31,
                 wire30,
                 wire29,
                 wire28,
                 wire27,
                 wire26,
                 wire22,
                 wire21,
                 wire13,
                 reg25,
                 reg24,
                 reg23,
                 reg20,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 (1'h0)};
  assign wire13 = (~(($unsigned(wire11) ^ (!wire12)) <<< $signed({wire9})));
  always
    @(posedge clk) begin
      reg14 <= (wire13 > (wire13[(4'h8):(4'h8)] ?
          ((^wire11) == wire11[(2'h3):(2'h3)]) : wire10));
      reg15 <= wire10;
      if (($signed(reg14) ?
          ((|(~&(8'h9f))) == $signed((reg15 ^~ wire12))) : (8'ha0)))
        begin
          reg16 <= (reg15 ?
              $unsigned(((8'hac) && $signed(wire12))) : $unsigned((+wire12[(1'h0):(1'h0)])));
        end
      else
        begin
          if ((reg16[(1'h1):(1'h1)] - ($signed($signed(wire12)) ?
              $signed(wire11[(3'h4):(2'h3)]) : ((wire11 >>> wire10) ?
                  $signed(reg16) : reg16[(2'h3):(2'h3)]))))
            begin
              reg16 <= ($unsigned((&wire9[(2'h2):(2'h2)])) ?
                  wire13[(2'h3):(1'h1)] : $signed($unsigned($unsigned(wire9))));
              reg17 <= wire10;
              reg18 <= reg15[(1'h1):(1'h0)];
            end
          else
            begin
              reg16 <= {$unsigned($signed($signed(wire10)))};
              reg17 <= (~(~^reg16));
            end
          if ((reg14[(1'h1):(1'h1)] ?
              $unsigned((+(wire12 >>> wire9))) : wire11[(1'h0):(1'h0)]))
            begin
              reg19 <= $signed($unsigned(($signed(wire13) && (reg18 || wire13))));
            end
          else
            begin
              reg19 <= (~wire12);
              reg20 <= (8'ha3);
            end
        end
    end
  assign wire21 = $signed(reg20[(1'h0):(1'h0)]);
  assign wire22 = (reg19 ? ((~reg18) >>> reg17[(1'h1):(1'h0)]) : wire10);
  always
    @(posedge clk) begin
      reg23 <= (^~(reg18[(1'h0):(1'h0)] >>> $unsigned($signed(reg18))));
      reg24 <= (((~(reg16 - (8'ha7))) ?
          reg18[(1'h0):(1'h0)] : (|(reg14 ?
              reg16 : wire10))) >>> (reg20[(3'h6):(3'h4)] - $unsigned((wire10 ?
          wire13 : (8'ha8)))));
      reg25 <= reg19[(2'h3):(2'h3)];
    end
  assign wire26 = {((^(&wire12)) == ({reg16} >= $unsigned((8'ha6))))};
  assign wire27 = (~(^~{$unsigned(wire13)}));
  assign wire28 = (((8'hb0) <<< ($unsigned(wire11) < (-(8'hac)))) >> {$unsigned(wire12[(3'h4):(1'h0)])});
  assign wire29 = $unsigned($unsigned({((8'h9d) << reg19)}));
  assign wire30 = ((~((reg16 ? reg23 : reg18) ? wire26 : wire27)) ?
                      wire27[(2'h2):(2'h2)] : reg24[(2'h2):(2'h2)]);
  assign wire31 = (~&(~$unsigned(wire22[(4'ha):(3'h5)])));
  assign wire32 = {$unsigned(reg18)};
endmodule