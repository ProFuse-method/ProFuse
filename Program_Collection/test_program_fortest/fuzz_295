(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h6d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire3;
  input wire [(3'h6):(1'h0)] wire2;
  input wire signed [(3'h7):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire0;
  wire signed [(4'h8):(1'h0)] wire41;
  wire [(3'h7):(1'h0)] wire40;
  wire [(3'h6):(1'h0)] wire38;
  wire [(4'ha):(1'h0)] wire18;
  wire [(3'h6):(1'h0)] wire17;
  wire signed [(2'h2):(1'h0)] wire16;
  wire [(4'h8):(1'h0)] wire15;
  wire signed [(3'h4):(1'h0)] wire14;
  wire [(2'h2):(1'h0)] wire13;
  wire [(3'h6):(1'h0)] wire6;
  wire signed [(2'h3):(1'h0)] wire4;
  reg [(4'h8):(1'h0)] reg12 = (1'h0);
  reg [(4'h8):(1'h0)] reg11 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg10 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg9 = (1'h0);
  reg [(3'h6):(1'h0)] reg8 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg5 = (1'h0);
  assign y = {wire41,
                 wire40,
                 wire38,
                 wire18,
                 wire17,
                 wire16,
                 wire15,
                 wire14,
                 wire13,
                 wire6,
                 wire4,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg5,
                 (1'h0)};
  assign wire4 = wire1;
  always
    @(posedge clk) begin
      reg5 <= $unsigned((&wire3));
    end
  assign wire6 = (($signed($signed(wire2)) && ((wire1 ? wire4 : wire4) ?
                     $signed(wire1) : $unsigned(reg5))) ^~ (|{{(8'ha6)}}));
  always
    @(posedge clk) begin
      reg7 <= (($signed($signed(wire3)) - wire3) <<< $unsigned((!$signed(wire6))));
      reg8 <= (($unsigned(wire6[(2'h2):(1'h1)]) ^ $signed(wire3[(2'h2):(1'h0)])) ?
          wire2[(2'h3):(1'h1)] : (8'ha2));
      if ({$unsigned((reg8[(3'h4):(1'h0)] ? reg7 : (reg7 ? wire2 : (8'ha4))))})
        begin
          if ({(8'hb0)})
            begin
              reg9 <= ($unsigned(wire4) ^ (!(!(wire3 ~^ (8'hae)))));
              reg10 <= ($unsigned(((~reg8) ?
                  (wire4 ? wire1 : (8'hb0)) : (wire6 ?
                      reg5 : reg9))) && (reg8[(2'h2):(2'h2)] ?
                  $unsigned($unsigned(wire1)) : wire1[(3'h4):(1'h1)]));
              reg11 <= (&(8'haf));
            end
          else
            begin
              reg9 <= $signed((~&(~&$unsigned(reg8))));
              reg10 <= wire6;
              reg11 <= (reg7 ?
                  (reg8 ?
                      $unsigned((reg7 ?
                          (8'ha0) : reg8)) : ((wire1 - wire6) & $unsigned(reg5))) : $signed(wire0));
            end
          reg12 <= reg11;
        end
      else
        begin
          reg9 <= (+($signed(reg5) << ($signed(wire1) >>> {(8'ha5)})));
        end
    end
  assign wire13 = wire0;
  assign wire14 = $unsigned(((~&reg11) >= $signed($signed(wire3))));
  assign wire15 = (^~($unsigned(wire1) ?
                      wire3[(1'h1):(1'h1)] : $signed(reg8[(1'h0):(1'h0)])));
  assign wire16 = (~&{($signed(reg8) ~^ wire13[(1'h1):(1'h0)])});
  assign wire17 = reg5[(2'h3):(2'h2)];
  assign wire18 = wire3;
  module19 #() modinst39 (.wire22(reg8), .wire23(reg7), .y(wire38), .wire21(reg11), .wire20(reg10), .clk(clk));
  assign wire40 = (&$unsigned((&(wire6 ^~ wire15))));
  assign wire41 = ((~reg11) ?
                      wire16[(1'h0):(1'h0)] : (((!wire4) - ((8'ha7) ?
                              wire2 : reg10)) ?
                          {reg7} : reg9[(3'h4):(1'h0)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module19
#(parameter param37 = ((({(8'ha1)} > ((8'ha1) || (8'h9c))) != ((~&(8'hae)) < ((8'ha3) || (8'ha6)))) ? (~(((8'ha2) ? (8'ha0) : (8'hab)) ? {(8'h9d)} : {(8'hb0)})) : {(((8'ha3) ? (8'had) : (8'ha4)) ? ((8'hab) && (8'hac)) : ((8'ha5) ? (8'haf) : (8'hae)))}))
(y, clk, wire23, wire22, wire21, wire20);
  output wire [(32'h47):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h2):(1'h0)] wire23;
  input wire signed [(3'h6):(1'h0)] wire22;
  input wire signed [(3'h5):(1'h0)] wire21;
  input wire signed [(4'ha):(1'h0)] wire20;
  wire [(4'hb):(1'h0)] wire35;
  wire signed [(2'h2):(1'h0)] wire28;
  wire signed [(3'h5):(1'h0)] wire27;
  reg [(3'h4):(1'h0)] reg36 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg34 = (1'h0);
  reg [(2'h2):(1'h0)] reg33 = (1'h0);
  reg [(3'h7):(1'h0)] reg32 = (1'h0);
  reg [(2'h3):(1'h0)] reg31 = (1'h0);
  reg [(3'h7):(1'h0)] reg30 = (1'h0);
  reg [(3'h6):(1'h0)] reg29 = (1'h0);
  reg [(3'h6):(1'h0)] reg26 = (1'h0);
  reg [(2'h3):(1'h0)] reg25 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg24 = (1'h0);
  assign y = {wire35,
                 wire28,
                 wire27,
                 reg36,
                 reg34,
                 reg33,
                 reg32,
                 reg31,
                 reg30,
                 reg29,
                 reg26,
                 reg25,
                 reg24,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg24 <= (8'hb0);
      reg25 <= (+(^~(~|(reg24 ? wire21 : reg24))));
      reg26 <= (reg24[(1'h0):(1'h0)] ?
          wire20 : $signed((reg25 > wire23[(1'h1):(1'h1)])));
    end
  assign wire27 = reg26[(1'h1):(1'h1)];
  assign wire28 = wire21[(1'h1):(1'h0)];
  always
    @(posedge clk) begin
      reg29 <= wire27;
    end
  always
    @(posedge clk) begin
      if (reg25)
        begin
          reg30 <= reg25;
          reg31 <= $unsigned(wire21);
          reg32 <= (8'ha0);
        end
      else
        begin
          reg30 <= {{($unsigned(wire20) >> $unsigned(reg26))}};
          reg31 <= $signed((^reg30[(2'h3):(2'h3)]));
          if ((~^(wire21[(1'h0):(1'h0)] ?
              ((^~reg31) ?
                  {reg30} : $signed(reg25)) : $signed((reg29 || wire21)))))
            begin
              reg32 <= (wire22[(2'h3):(1'h0)] ^ (wire23 ?
                  $unsigned((~&wire20)) : (reg26 ?
                      (wire23 ? wire20 : reg32) : reg25[(1'h1):(1'h1)])));
            end
          else
            begin
              reg32 <= reg31;
            end
        end
      reg33 <= $unsigned($signed((^~$signed((8'ha3)))));
      reg34 <= ((^($unsigned(wire22) ? (~^wire22) : (~(8'hab)))) ?
          (-$signed(reg26)) : $unsigned($unsigned({reg29})));
    end
  assign wire35 = (reg34[(3'h7):(1'h0)] ?
                      $signed(reg29) : (wire21 != ($unsigned(wire28) == (reg24 ?
                          wire28 : wire28))));
  always
    @(posedge clk) begin
      reg36 <= reg33[(2'h2):(2'h2)];
    end
endmodule