(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h6a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire0;
  input wire [(4'ha):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire3;
  wire signed [(3'h6):(1'h0)] wire50;
  wire signed [(2'h3):(1'h0)] wire49;
  wire [(2'h2):(1'h0)] wire33;
  wire [(3'h6):(1'h0)] wire35;
  wire signed [(4'h9):(1'h0)] wire42;
  wire [(4'hb):(1'h0)] wire43;
  wire [(3'h6):(1'h0)] wire45;
  wire [(3'h7):(1'h0)] wire46;
  wire signed [(4'h8):(1'h0)] wire47;
  reg [(4'ha):(1'h0)] reg37 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg38 = (1'h0);
  reg [(4'hb):(1'h0)] reg39 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg40 = (1'h0);
  reg [(4'hb):(1'h0)] reg41 = (1'h0);
  assign y = {wire50,
                 wire49,
                 wire33,
                 wire35,
                 wire42,
                 wire43,
                 wire45,
                 wire46,
                 wire47,
                 reg37,
                 reg38,
                 reg39,
                 reg40,
                 reg41,
                 (1'h0)};
  module4 #() modinst34 (wire33, clk, wire1, wire0, wire2, wire3);
  module13 #() modinst36 (wire35, clk, wire0, wire2, wire3, wire1);
  always
    @(posedge clk) begin
      reg37 <= wire35[(3'h6):(2'h3)];
      if ($signed(wire2))
        begin
          if ((wire35 & (^~$signed((!(8'hae))))))
            begin
              reg38 <= $unsigned(wire33[(1'h0):(1'h0)]);
              reg39 <= (({(wire33 * wire33)} > (wire3 >= (wire35 ^~ (8'hae)))) ?
                  (8'ha3) : reg38);
            end
          else
            begin
              reg38 <= reg38[(2'h2):(1'h1)];
              reg39 <= (8'ha4);
            end
          reg40 <= reg37[(2'h3):(2'h3)];
          reg41 <= ((~reg40) ?
              $unsigned((-$unsigned(wire1))) : (({(8'h9d)} ?
                  reg40[(3'h6):(3'h5)] : (8'hac)) <= ($signed((8'h9c)) ?
                  (^wire3) : wire2[(1'h0):(1'h0)])));
        end
      else
        begin
          reg38 <= ((((8'hb0) ? (reg37 ? (8'haf) : wire0) : (reg40 ^ wire3)) ?
              ((wire35 && wire3) ? (~&wire2) : ((8'haf) >> reg41)) : ((reg41 ?
                      reg39 : wire35) ?
                  (reg40 ? wire1 : wire35) : {reg39})) <<< $signed(reg41));
          if (wire0[(2'h3):(2'h2)])
            begin
              reg39 <= (~|(|$unsigned((~&(8'ha9)))));
              reg40 <= $unsigned(wire0);
            end
          else
            begin
              reg39 <= wire35[(1'h0):(1'h0)];
            end
        end
    end
  assign wire42 = (wire3 >>> reg40);
  module13 #() modinst44 (.wire15(reg37), .y(wire43), .wire16(wire3), .wire14(reg39), .wire17(wire35), .clk(clk));
  assign wire45 = $signed((reg39[(4'hb):(3'h4)] ?
                      reg37[(2'h3):(2'h2)] : reg41[(2'h2):(1'h0)]));
  assign wire46 = $signed(wire42);
  module4 #() modinst48 (.clk(clk), .wire8(reg39), .y(wire47), .wire5(reg37), .wire7(wire35), .wire6(reg41));
  assign wire49 = reg41[(2'h2):(2'h2)];
  assign wire50 = reg39;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4
#(parameter param32 = ((-((8'had) ? ((8'haa) + (8'ha7)) : ((8'ha7) ? (8'ha7) : (8'ha5)))) && ((~|(~|(8'ha6))) == (((8'ha4) ? (8'ha3) : (8'h9d)) && (|(8'ha8))))))
(y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h5e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire8;
  input wire [(3'h5):(1'h0)] wire7;
  input wire signed [(4'hb):(1'h0)] wire6;
  input wire [(4'h9):(1'h0)] wire5;
  wire [(4'hb):(1'h0)] wire31;
  wire signed [(4'ha):(1'h0)] wire29;
  wire signed [(3'h4):(1'h0)] wire24;
  wire [(3'h4):(1'h0)] wire22;
  wire [(3'h4):(1'h0)] wire12;
  wire signed [(3'h5):(1'h0)] wire11;
  wire [(3'h6):(1'h0)] wire10;
  wire signed [(3'h6):(1'h0)] wire9;
  reg [(4'hb):(1'h0)] reg30 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg28 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg27 = (1'h0);
  reg [(3'h7):(1'h0)] reg26 = (1'h0);
  reg [(2'h3):(1'h0)] reg25 = (1'h0);
  assign y = {wire31,
                 wire29,
                 wire24,
                 wire22,
                 wire12,
                 wire11,
                 wire10,
                 wire9,
                 reg30,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 (1'h0)};
  assign wire9 = ({(~$signed(wire5))} << $signed(wire6));
  assign wire10 = (^wire5);
  assign wire11 = (~^wire7);
  assign wire12 = $unsigned((~wire10));
  module13 #() modinst23 (.wire17(wire10), .clk(clk), .y(wire22), .wire16(wire8), .wire15(wire6), .wire14(wire5));
  assign wire24 = ({($unsigned(wire5) ?
                          (~(8'ha1)) : (!wire6))} == wire10[(2'h3):(1'h1)]);
  always
    @(posedge clk) begin
      if (({{{wire7}}} ?
          (($unsigned(wire9) ^ wire7[(3'h4):(2'h2)]) | wire9[(1'h1):(1'h0)]) : wire8[(2'h3):(2'h3)]))
        begin
          reg25 <= ($signed(wire7[(3'h5):(1'h1)]) ?
              $signed(wire22) : wire7[(2'h2):(1'h0)]);
        end
      else
        begin
          reg25 <= wire24[(2'h3):(1'h0)];
        end
      if (wire5)
        begin
          reg26 <= ($unsigned(((wire10 ?
              wire11 : wire10) ^~ ((8'h9f) ^ (8'h9d)))) <= wire8[(3'h4):(2'h3)]);
          if ({wire24[(1'h0):(1'h0)]})
            begin
              reg27 <= (wire5 - wire6);
            end
          else
            begin
              reg27 <= wire10;
            end
        end
      else
        begin
          reg26 <= wire11;
        end
      reg28 <= (($unsigned(reg25[(2'h2):(1'h1)]) * wire10[(1'h1):(1'h1)]) ?
          reg25[(1'h0):(1'h0)] : $signed($signed(wire11)));
    end
  assign wire29 = ({(~|(reg28 ? wire8 : wire22))} ?
                      (((!reg28) != (~&wire5)) ?
                          (wire7[(3'h4):(1'h0)] ? {reg27} : wire22) : ((wire22 ?
                                  (8'h9c) : wire24) ?
                              (reg26 ?
                                  wire10 : wire5) : wire10)) : wire12[(3'h4):(3'h4)]);
  always
    @(posedge clk) begin
      reg30 <= wire7[(3'h4):(2'h2)];
    end
  assign wire31 = ((^wire6[(1'h0):(1'h0)]) << ((+$unsigned(wire8)) ?
                      $signed((8'ha7)) : $signed(((8'h9d) ? wire8 : wire12))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13  (y, clk, wire17, wire16, wire15, wire14);
  output wire [(32'h1f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire17;
  input wire [(3'h6):(1'h0)] wire16;
  input wire signed [(4'ha):(1'h0)] wire15;
  input wire [(4'h9):(1'h0)] wire14;
  wire [(4'hb):(1'h0)] wire21;
  wire [(4'hb):(1'h0)] wire20;
  wire signed [(2'h2):(1'h0)] wire19;
  wire signed [(3'h6):(1'h0)] wire18;
  assign y = {wire21, wire20, wire19, wire18, (1'h0)};
  assign wire18 = $signed((wire14[(1'h0):(1'h0)] ?
                      $signed($unsigned(wire14)) : ((wire16 > wire16) ?
                          (!(8'ha6)) : $unsigned(wire16))));
  assign wire19 = (8'hae);
  assign wire20 = ($unsigned((wire19 > wire15)) <<< $unsigned($unsigned($unsigned(wire14))));
  assign wire21 = ((~|(wire19[(1'h1):(1'h1)] >= wire15[(4'h9):(4'h9)])) + {$unsigned($unsigned(wire15))});
endmodule