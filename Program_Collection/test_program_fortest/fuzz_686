(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param19 = (~((&((8'ha5) ? (8'ha2) : (8'h9e))) == ((^(8'hb0)) - {(8'haa)}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h68):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire3;
  input wire [(4'ha):(1'h0)] wire2;
  input wire [(3'h5):(1'h0)] wire1;
  input wire signed [(3'h4):(1'h0)] wire0;
  wire signed [(4'h9):(1'h0)] wire9;
  wire [(4'h9):(1'h0)] wire8;
  wire [(3'h7):(1'h0)] wire7;
  wire signed [(3'h5):(1'h0)] wire6;
  wire [(3'h7):(1'h0)] wire5;
  wire signed [(3'h6):(1'h0)] wire4;
  reg [(2'h3):(1'h0)] reg18 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg17 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg16 = (1'h0);
  reg [(4'hb):(1'h0)] reg15 = (1'h0);
  reg [(4'hb):(1'h0)] reg14 = (1'h0);
  reg [(2'h3):(1'h0)] reg13 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg12 = (1'h0);
  reg [(4'h8):(1'h0)] reg11 = (1'h0);
  reg [(3'h5):(1'h0)] reg10 = (1'h0);
  assign y = {wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 (1'h0)};
  assign wire4 = wire2[(3'h4):(1'h0)];
  assign wire5 = wire1;
  assign wire6 = wire0[(2'h3):(2'h2)];
  assign wire7 = ((({wire4} ~^ (!(8'haa))) << ((wire0 << wire3) ?
                         $signed(wire6) : (wire0 ? wire1 : wire1))) ?
                     {(!(wire2 ? wire4 : wire3))} : (&wire6));
  assign wire8 = wire6[(1'h0):(1'h0)];
  assign wire9 = ((^~$signed((wire4 ? wire2 : wire4))) ?
                     (&$unsigned((wire6 ?
                         wire2 : wire8))) : wire5[(3'h7):(1'h0)]);
  always
    @(posedge clk) begin
      reg10 <= $signed((~&$unsigned($signed(wire2))));
      if (wire6)
        begin
          if ($unsigned(wire6[(1'h0):(1'h0)]))
            begin
              reg11 <= (((wire9 != wire6[(1'h1):(1'h1)]) >> ((wire7 * reg10) >>> {wire6})) > wire3[(2'h3):(1'h0)]);
              reg12 <= (reg11[(1'h0):(1'h0)] + wire2);
              reg13 <= $unsigned($unsigned($signed((wire4 <<< wire2))));
            end
          else
            begin
              reg11 <= (($unsigned($unsigned(wire2)) ?
                  reg12[(3'h5):(3'h4)] : wire5) >>> (8'h9d));
              reg12 <= reg13;
            end
          reg14 <= reg11;
        end
      else
        begin
          reg11 <= (8'had);
          if ((!wire5[(3'h7):(1'h1)]))
            begin
              reg12 <= (~^$signed(((wire1 ?
                  wire2 : wire7) <<< $unsigned(reg13))));
              reg13 <= ($unsigned((^~wire6[(2'h3):(2'h3)])) ?
                  wire1[(2'h2):(1'h1)] : $signed(wire7));
              reg14 <= wire2;
            end
          else
            begin
              reg12 <= $unsigned(wire6);
              reg13 <= $unsigned($unsigned(reg14[(3'h5):(2'h3)]));
            end
          if ({(~|((reg11 ? reg11 : wire8) ?
                  reg11[(2'h3):(1'h0)] : reg11[(3'h5):(3'h5)]))})
            begin
              reg15 <= wire2[(4'ha):(2'h2)];
              reg16 <= $unsigned(($signed((reg10 >>> reg12)) ?
                  ($unsigned(wire6) ? $signed(reg14) : {wire1}) : wire6));
            end
          else
            begin
              reg15 <= wire2;
            end
        end
      reg17 <= (~^(|{$unsigned(wire4)}));
    end
  always
    @(posedge clk) begin
      reg18 <= ((^wire3) && ($signed((reg14 ?
          wire9 : (8'had))) == $unsigned({(8'had)})));
    end
endmodule