(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param65 = (&(~(~(~^(8'hae))))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h37):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire0;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire2;
  input wire [(3'h5):(1'h0)] wire3;
  wire [(3'h7):(1'h0)] wire4;
  wire [(4'hb):(1'h0)] wire5;
  wire signed [(4'h9):(1'h0)] wire6;
  wire signed [(4'h9):(1'h0)] wire7;
  wire signed [(3'h5):(1'h0)] wire61;
  wire signed [(3'h4):(1'h0)] wire63;
  reg signed [(4'h9):(1'h0)] reg8 = (1'h0);
  assign y = {wire4, wire5, wire6, wire7, wire61, wire63, reg8, (1'h0)};
  assign wire4 = wire3;
  assign wire5 = ((~^$unsigned(wire3[(1'h0):(1'h0)])) ?
                     ($unsigned($unsigned(wire4)) != wire2[(3'h4):(2'h2)]) : (+wire0));
  assign wire6 = $unsigned($signed((wire0 == (wire4 ? wire4 : wire4))));
  assign wire7 = ((^~{{wire3}}) ?
                     $unsigned(($signed(wire2) ?
                         $unsigned((8'h9f)) : (wire0 != wire3))) : wire3);
  always
    @(posedge clk) begin
      reg8 <= $signed(($signed((~^wire5)) >> (wire2[(2'h3):(1'h0)] ?
          {wire3} : wire7[(1'h1):(1'h1)])));
    end
  module9 #() modinst62 (wire61, clk, wire0, wire5, wire7, wire6);
  module9 #() modinst64 (wire63, clk, wire4, wire1, wire6, reg8);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9  (y, clk, wire13, wire12, wire11, wire10);
  output wire [(32'h74):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire13;
  input wire [(4'h9):(1'h0)] wire12;
  input wire [(4'h9):(1'h0)] wire11;
  input wire signed [(4'h9):(1'h0)] wire10;
  wire [(3'h6):(1'h0)] wire60;
  wire signed [(3'h7):(1'h0)] wire54;
  wire [(3'h7):(1'h0)] wire53;
  wire [(4'ha):(1'h0)] wire52;
  wire [(4'ha):(1'h0)] wire51;
  wire [(3'h7):(1'h0)] wire50;
  wire [(4'ha):(1'h0)] wire48;
  wire signed [(4'ha):(1'h0)] wire27;
  wire signed [(3'h7):(1'h0)] wire15;
  wire [(4'h8):(1'h0)] wire14;
  reg [(3'h4):(1'h0)] reg59 = (1'h0);
  reg [(4'ha):(1'h0)] reg58 = (1'h0);
  reg [(3'h4):(1'h0)] reg57 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg56 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg55 = (1'h0);
  assign y = {wire60,
                 wire54,
                 wire53,
                 wire52,
                 wire51,
                 wire50,
                 wire48,
                 wire27,
                 wire15,
                 wire14,
                 reg59,
                 reg58,
                 reg57,
                 reg56,
                 reg55,
                 (1'h0)};
  assign wire14 = ((&wire11[(2'h3):(2'h3)]) >> ((wire12[(2'h2):(1'h1)] ?
                      (&wire13) : wire10[(2'h2):(1'h1)]) & wire11[(3'h7):(1'h0)]));
  assign wire15 = $signed(((|$unsigned(wire14)) ? wire14 : $unsigned(wire11)));
  module16 #() modinst28 (wire27, clk, wire10, wire15, wire14, wire12);
  module29 #() modinst49 (.wire30(wire15), .y(wire48), .clk(clk), .wire31(wire12), .wire32(wire10), .wire33(wire14));
  assign wire50 = $unsigned((wire14[(3'h4):(2'h3)] ?
                      $unsigned($signed(wire11)) : $signed((wire48 ?
                          wire10 : wire15))));
  assign wire51 = (^{wire15});
  assign wire52 = wire14[(1'h0):(1'h0)];
  assign wire53 = wire12[(3'h4):(2'h3)];
  assign wire54 = wire52[(4'h8):(1'h0)];
  always
    @(posedge clk) begin
      reg55 <= {(wire27[(4'h9):(4'h9)] <<< (^$unsigned((8'ha3))))};
      if ($unsigned($unsigned((&(+wire15)))))
        begin
          reg56 <= wire13;
        end
      else
        begin
          if (($signed(({wire51} == (~&(8'had)))) != wire27[(3'h6):(2'h3)]))
            begin
              reg56 <= (wire48[(4'h9):(3'h5)] & (8'h9e));
            end
          else
            begin
              reg56 <= $signed({wire27[(3'h4):(1'h1)]});
              reg57 <= $signed(($signed(wire15) ?
                  $signed(wire27[(2'h2):(1'h0)]) : ((-wire10) - (8'ha3))));
            end
          if (wire15)
            begin
              reg58 <= (8'hab);
              reg59 <= reg58;
            end
          else
            begin
              reg58 <= $unsigned(wire11);
            end
        end
    end
  assign wire60 = $signed(reg59[(1'h1):(1'h0)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module29  (y, clk, wire33, wire32, wire31, wire30);
  output wire [(32'h4d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire33;
  input wire [(4'h9):(1'h0)] wire32;
  input wire signed [(3'h4):(1'h0)] wire31;
  input wire signed [(3'h7):(1'h0)] wire30;
  wire signed [(3'h5):(1'h0)] wire47;
  wire signed [(2'h3):(1'h0)] wire46;
  wire [(3'h5):(1'h0)] wire45;
  wire [(4'h8):(1'h0)] wire44;
  wire [(4'h9):(1'h0)] wire40;
  wire signed [(2'h3):(1'h0)] wire39;
  wire signed [(3'h5):(1'h0)] wire38;
  wire signed [(2'h2):(1'h0)] wire34;
  reg signed [(3'h4):(1'h0)] reg43 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg42 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg41 = (1'h0);
  reg [(3'h4):(1'h0)] reg37 = (1'h0);
  reg [(3'h4):(1'h0)] reg36 = (1'h0);
  reg [(4'hb):(1'h0)] reg35 = (1'h0);
  assign y = {wire47,
                 wire46,
                 wire45,
                 wire44,
                 wire40,
                 wire39,
                 wire38,
                 wire34,
                 reg43,
                 reg42,
                 reg41,
                 reg37,
                 reg36,
                 reg35,
                 (1'h0)};
  assign wire34 = $signed($signed(({wire31} ?
                      (wire31 + wire31) : (wire33 * wire31))));
  always
    @(posedge clk) begin
      reg35 <= $unsigned(wire31);
      reg36 <= (((-$signed(wire30)) ~^ $unsigned((!wire32))) ?
          (-wire30) : wire32);
      reg37 <= (|wire31);
    end
  assign wire38 = $unsigned($unsigned((wire34[(2'h2):(1'h0)] ?
                      $signed(wire34) : (8'ha9))));
  assign wire39 = wire34;
  assign wire40 = ($unsigned(({reg36} << wire34)) > reg36);
  always
    @(posedge clk) begin
      reg41 <= reg36[(1'h0):(1'h0)];
      reg42 <= (^~$unsigned({((8'hac) >= reg36)}));
      reg43 <= ($unsigned({(-wire40)}) * $unsigned((reg37 + $unsigned((8'hab)))));
    end
  assign wire44 = (~|$signed(wire30[(3'h5):(1'h1)]));
  assign wire45 = $signed(wire39[(2'h3):(2'h2)]);
  assign wire46 = reg37;
  assign wire47 = reg41[(2'h3):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module16
#(parameter param26 = ((({(8'ha9)} ? (~|(8'h9c)) : (8'ha0)) != (-(~^(8'hae)))) >= {{{(8'haf)}}}))
(y, clk, wire20, wire19, wire18, wire17);
  output wire [(32'h26):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire20;
  input wire [(3'h7):(1'h0)] wire19;
  input wire [(2'h2):(1'h0)] wire18;
  input wire signed [(3'h6):(1'h0)] wire17;
  wire signed [(3'h6):(1'h0)] wire24;
  wire [(4'h8):(1'h0)] wire23;
  wire signed [(4'ha):(1'h0)] wire22;
  wire [(2'h2):(1'h0)] wire21;
  reg [(4'hb):(1'h0)] reg25 = (1'h0);
  assign y = {wire24, wire23, wire22, wire21, reg25, (1'h0)};
  assign wire21 = ($unsigned(($unsigned(wire19) > $unsigned(wire17))) ?
                      $unsigned(wire17[(2'h3):(2'h2)]) : (-wire18));
  assign wire22 = wire20;
  assign wire23 = wire22;
  assign wire24 = (wire20[(2'h2):(1'h0)] != ($unsigned(wire19) & (((8'haf) >> wire22) ?
                      $unsigned(wire22) : wire23)));
  always
    @(posedge clk) begin
      reg25 <= wire18[(1'h1):(1'h1)];
    end
endmodule