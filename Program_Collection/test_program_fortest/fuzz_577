(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h71):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire [(3'h7):(1'h0)] wire1;
  input wire signed [(4'h8):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire49;
  wire signed [(3'h6):(1'h0)] wire38;
  wire signed [(3'h7):(1'h0)] wire17;
  reg [(4'ha):(1'h0)] reg16 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg14 = (1'h0);
  reg [(4'hb):(1'h0)] reg13 = (1'h0);
  reg [(3'h4):(1'h0)] reg12 = (1'h0);
  reg [(3'h5):(1'h0)] reg11 = (1'h0);
  reg [(3'h6):(1'h0)] reg10 = (1'h0);
  reg [(2'h2):(1'h0)] reg9 = (1'h0);
  reg [(4'h8):(1'h0)] reg8 = (1'h0);
  reg [(4'ha):(1'h0)] reg7 = (1'h0);
  reg [(4'h9):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg5 = (1'h0);
  reg [(3'h5):(1'h0)] reg4 = (1'h0);
  assign y = {wire49,
                 wire38,
                 wire17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (wire3[(2'h3):(1'h0)])
        begin
          if ((~&($unsigned((&wire0)) >= ((wire0 + wire2) ^ (wire0 ?
              (8'h9f) : wire2)))))
            begin
              reg4 <= (wire0[(3'h7):(3'h6)] ? wire0[(1'h1):(1'h0)] : wire0);
              reg5 <= $unsigned(($signed(((8'hb0) ?
                  wire0 : wire0)) && (reg4[(1'h1):(1'h1)] <= $unsigned((8'hac)))));
              reg6 <= ($unsigned(wire1[(3'h6):(2'h3)]) ?
                  (~|$unsigned((wire3 ? reg4 : wire2))) : (8'ha2));
            end
          else
            begin
              reg4 <= (~reg4);
              reg5 <= {reg5};
              reg6 <= (~&$signed(wire2));
            end
          if ($unsigned({reg4[(2'h2):(1'h0)]}))
            begin
              reg7 <= reg6[(2'h3):(1'h1)];
              reg8 <= wire0;
              reg9 <= (((wire3[(1'h1):(1'h0)] * (-(8'hac))) ?
                      $unsigned($signed(reg6)) : reg8[(4'h8):(2'h3)]) ?
                  ((~^$unsigned(wire1)) >>> wire0[(3'h6):(3'h5)]) : $unsigned($unsigned(reg5[(1'h1):(1'h1)])));
            end
          else
            begin
              reg7 <= (&((8'ha7) ?
                  $unsigned(reg5[(1'h0):(1'h0)]) : ((wire2 ?
                      reg8 : reg8) >>> (8'hac))));
              reg8 <= ($unsigned(wire0[(1'h1):(1'h1)]) ?
                  (^$signed((reg4 ? reg6 : reg7))) : (reg4 + (8'ha9)));
            end
        end
      else
        begin
          if (((wire2 ? {(reg9 && wire0)} : reg9) ?
              $unsigned((+reg4)) : ($signed({reg9}) ? {(|wire1)} : (^reg7))))
            begin
              reg4 <= (((^~(wire1 ?
                  reg6 : (8'h9d))) & (8'ha5)) * (^(+(wire0 <<< reg7))));
            end
          else
            begin
              reg4 <= ((|wire3[(3'h5):(1'h1)]) ?
                  (&(wire3[(2'h2):(1'h0)] == (~^reg7))) : $unsigned((~&$signed(wire2))));
              reg5 <= $unsigned(reg4);
            end
          if (($signed(((wire2 ? (8'hae) : reg8) ?
              reg5 : $signed(reg5))) <<< reg8))
            begin
              reg6 <= reg7[(1'h0):(1'h0)];
              reg7 <= $signed($unsigned($signed((reg4 <= wire0))));
              reg8 <= {(|(~|(reg9 ~^ reg6)))};
            end
          else
            begin
              reg6 <= ((-(wire2[(1'h0):(1'h0)] ?
                      (wire3 >>> reg5) : (~(8'ha2)))) ?
                  (((reg4 > reg5) ? (reg6 == wire1) : reg8[(4'h8):(3'h7)]) ?
                      ((-wire1) + reg5) : $signed({reg8})) : reg4);
              reg7 <= $unsigned({$signed(((8'h9d) <<< reg4))});
            end
          reg9 <= $unsigned({((reg6 ? reg7 : wire0) ?
                  $signed((8'hac)) : $signed(reg7))});
        end
      if (wire1)
        begin
          if ((8'had))
            begin
              reg10 <= {reg9};
              reg11 <= reg9[(2'h2):(2'h2)];
              reg12 <= $unsigned($unsigned((wire3[(1'h1):(1'h0)] ?
                  $unsigned(reg8) : (&wire3))));
            end
          else
            begin
              reg10 <= reg7[(1'h0):(1'h0)];
            end
          reg13 <= ((~^((reg6 ?
              (8'h9d) : wire2) - (~&wire0))) >= $unsigned(($signed((8'ha9)) <= ((8'ha1) ?
              (8'ha5) : (8'hb0)))));
          if ((8'h9d))
            begin
              reg14 <= reg11;
              reg15 <= reg4[(2'h3):(1'h1)];
            end
          else
            begin
              reg14 <= {$unsigned(reg9[(1'h0):(1'h0)])};
              reg15 <= (($signed($signed(reg5)) ^ {(8'haa)}) >>> (-(8'h9f)));
              reg16 <= wire1;
            end
        end
      else
        begin
          reg10 <= ((reg13 ?
                  reg11[(2'h2):(2'h2)] : ((~^(8'ha9)) < $signed(reg13))) ?
              (({(8'ha0)} <<< (reg9 ?
                  (8'haa) : reg9)) ~^ (8'hac)) : reg6[(1'h0):(1'h0)]);
          reg11 <= reg11;
        end
    end
  assign wire17 = (|(8'had));
  module18 #() modinst39 (.wire20(reg13), .wire21(reg10), .clk(clk), .wire19(reg4), .wire22(reg6), .y(wire38));
  module40 #() modinst50 (wire49, clk, reg7, reg13, reg5, reg15);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module40  (y, clk, wire44, wire43, wire42, wire41);
  output wire [(32'h22):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire44;
  input wire signed [(4'hb):(1'h0)] wire43;
  input wire signed [(3'h7):(1'h0)] wire42;
  input wire [(4'h9):(1'h0)] wire41;
  wire [(4'h9):(1'h0)] wire48;
  wire signed [(4'hb):(1'h0)] wire47;
  wire signed [(3'h6):(1'h0)] wire46;
  wire [(3'h7):(1'h0)] wire45;
  assign y = {wire48, wire47, wire46, wire45, (1'h0)};
  assign wire45 = wire41;
  assign wire46 = wire41[(3'h7):(1'h0)];
  assign wire47 = ((8'haf) ? (^~(~^(~wire45))) : wire45);
  assign wire48 = wire45[(3'h5):(2'h2)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18  (y, clk, wire22, wire21, wire20, wire19);
  output wire [(32'h57):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire22;
  input wire [(3'h6):(1'h0)] wire21;
  input wire signed [(3'h4):(1'h0)] wire20;
  input wire [(3'h5):(1'h0)] wire19;
  wire [(3'h4):(1'h0)] wire34;
  wire signed [(4'h9):(1'h0)] wire33;
  wire [(2'h2):(1'h0)] wire30;
  wire [(3'h7):(1'h0)] wire29;
  wire [(3'h6):(1'h0)] wire28;
  wire [(3'h6):(1'h0)] wire27;
  wire signed [(4'ha):(1'h0)] wire25;
  wire [(3'h4):(1'h0)] wire24;
  wire signed [(4'h8):(1'h0)] wire23;
  reg signed [(4'h8):(1'h0)] reg37 = (1'h0);
  reg [(4'h8):(1'h0)] reg36 = (1'h0);
  reg [(3'h5):(1'h0)] reg35 = (1'h0);
  reg [(3'h4):(1'h0)] reg32 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg31 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg26 = (1'h0);
  assign y = {wire34,
                 wire33,
                 wire30,
                 wire29,
                 wire28,
                 wire27,
                 wire25,
                 wire24,
                 wire23,
                 reg37,
                 reg36,
                 reg35,
                 reg32,
                 reg31,
                 reg26,
                 (1'h0)};
  assign wire23 = (!($unsigned({(8'haf)}) ?
                      wire22[(4'h9):(4'h9)] : $unsigned((wire21 >> (8'ha9)))));
  assign wire24 = wire22;
  assign wire25 = $unsigned((^~{wire20}));
  always
    @(posedge clk) begin
      reg26 <= $signed($unsigned(wire25));
    end
  assign wire27 = (wire21 ?
                      $unsigned(reg26[(2'h2):(2'h2)]) : $unsigned({wire19}));
  assign wire28 = (8'ha7);
  assign wire29 = {(({wire23} | (reg26 ? wire24 : wire28)) ?
                          ((wire20 != wire21) ?
                              (wire28 ^~ wire23) : wire24) : $signed(wire27[(2'h2):(2'h2)]))};
  assign wire30 = (reg26[(2'h2):(1'h0)] || (($unsigned(wire24) || reg26) ?
                      (~&{wire24}) : $unsigned(wire25[(1'h0):(1'h0)])));
  always
    @(posedge clk) begin
      reg31 <= $signed((({wire25} ? $signed(wire28) : ((8'h9e) * wire19)) ?
          wire29 : wire23[(3'h5):(1'h0)]));
      reg32 <= (({reg26[(2'h2):(1'h1)]} <= {(8'ha8)}) != (8'ha6));
    end
  assign wire33 = (-($unsigned(((8'hae) <= (8'haa))) > ((wire19 != wire29) >>> wire29[(1'h0):(1'h0)])));
  assign wire34 = wire30;
  always
    @(posedge clk) begin
      reg35 <= (+reg31[(1'h0):(1'h0)]);
      reg36 <= ((8'h9d) ?
          {((wire23 ? reg26 : wire21) ?
                  (~&wire29) : (+wire30))} : $unsigned(wire23));
      reg37 <= $signed((~&((wire28 ? wire28 : wire34) ?
          $unsigned(wire25) : wire24)));
    end
endmodule