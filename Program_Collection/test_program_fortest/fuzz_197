(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h35):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire3;
  input wire [(4'h9):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire1;
  input wire signed [(3'h4):(1'h0)] wire0;
  wire signed [(4'hb):(1'h0)] wire43;
  wire [(4'h8):(1'h0)] wire6;
  wire [(2'h3):(1'h0)] wire5;
  wire [(4'hb):(1'h0)] wire4;
  reg [(4'h9):(1'h0)] reg46 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg45 = (1'h0);
  assign y = {wire43, wire6, wire5, wire4, reg46, reg45, (1'h0)};
  assign wire4 = wire3[(2'h2):(1'h0)];
  assign wire5 = wire2;
  assign wire6 = $unsigned(wire1);
  module7 #() modinst44 (.wire8(wire4), .wire10(wire6), .wire11(wire3), .y(wire43), .clk(clk), .wire9(wire1));
  always
    @(posedge clk) begin
      if ($signed($unsigned(((wire4 ? wire5 : wire4) ?
          {wire2} : wire4[(2'h3):(2'h3)]))))
        begin
          reg45 <= $signed((~&wire0[(2'h2):(2'h2)]));
        end
      else
        begin
          if ({wire0[(3'h4):(1'h0)]})
            begin
              reg45 <= (wire0[(3'h4):(2'h3)] ^ {((~reg45) != (wire2 <<< wire5))});
            end
          else
            begin
              reg45 <= $signed($unsigned((8'had)));
            end
          reg46 <= (!{wire1});
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7
#(parameter param42 = {(((-(8'ha1)) ^~ ((8'h9f) ? (8'had) : (8'ha0))) ? {((8'ha9) - (8'ha8))} : (((8'ha3) ? (8'h9d) : (8'ha9)) ? ((8'h9f) ~^ (8'ha2)) : {(8'had)}))})
(y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h3c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire11;
  input wire [(3'h7):(1'h0)] wire10;
  input wire [(4'hb):(1'h0)] wire9;
  input wire [(4'hb):(1'h0)] wire8;
  wire [(4'h8):(1'h0)] wire41;
  wire signed [(4'h9):(1'h0)] wire40;
  wire signed [(2'h2):(1'h0)] wire39;
  wire signed [(4'hb):(1'h0)] wire38;
  wire signed [(4'h8):(1'h0)] wire37;
  wire signed [(4'h8):(1'h0)] wire36;
  wire signed [(4'h8):(1'h0)] wire35;
  wire [(2'h3):(1'h0)] wire33;
  wire [(2'h2):(1'h0)] wire12;
  assign y = {wire41,
                 wire40,
                 wire39,
                 wire38,
                 wire37,
                 wire36,
                 wire35,
                 wire33,
                 wire12,
                 (1'h0)};
  assign wire12 = (^~($signed(wire8[(3'h4):(2'h3)]) ^ wire10));
  module13 #() modinst34 (.y(wire33), .wire15(wire11), .wire14(wire9), .clk(clk), .wire17(wire8), .wire16(wire10));
  assign wire35 = wire33;
  assign wire36 = wire10;
  assign wire37 = (^~{(+(wire10 ? wire9 : wire12))});
  assign wire38 = $unsigned($unsigned($signed((wire36 != (8'ha4)))));
  assign wire39 = wire37;
  assign wire40 = (wire33 != $signed(((wire33 - wire38) ?
                      wire35[(1'h1):(1'h1)] : (wire10 ? wire39 : (8'haa)))));
  assign wire41 = (($signed((wire39 ? wire9 : wire40)) ? {(8'hac)} : wire9) ?
                      wire8 : ({(wire33 ? wire12 : wire8)} < wire11));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13  (y, clk, wire17, wire16, wire15, wire14);
  output wire [(32'h61):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire17;
  input wire signed [(3'h7):(1'h0)] wire16;
  input wire [(4'h8):(1'h0)] wire15;
  input wire signed [(4'h8):(1'h0)] wire14;
  wire [(4'h8):(1'h0)] wire32;
  wire signed [(3'h4):(1'h0)] wire31;
  wire signed [(2'h2):(1'h0)] wire30;
  wire [(4'h8):(1'h0)] wire29;
  wire signed [(2'h2):(1'h0)] wire27;
  wire signed [(2'h3):(1'h0)] wire26;
  wire signed [(4'hb):(1'h0)] wire25;
  wire signed [(3'h5):(1'h0)] wire24;
  wire [(4'ha):(1'h0)] wire23;
  wire signed [(4'ha):(1'h0)] wire22;
  wire signed [(3'h4):(1'h0)] wire21;
  reg [(4'h9):(1'h0)] reg28 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg20 = (1'h0);
  reg [(4'ha):(1'h0)] reg19 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg18 = (1'h0);
  assign y = {wire32,
                 wire31,
                 wire30,
                 wire29,
                 wire27,
                 wire26,
                 wire25,
                 wire24,
                 wire23,
                 wire22,
                 wire21,
                 reg28,
                 reg20,
                 reg19,
                 reg18,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ($signed(wire15[(2'h2):(1'h0)]))
        begin
          reg18 <= ((~^$unsigned(((8'haf) * wire17))) ?
              ({(wire16 ? wire14 : (8'h9f))} ?
                  ((&wire15) >= $signed(wire17)) : ($unsigned(wire14) - $unsigned((8'h9d)))) : ($signed((&wire16)) ?
                  (~wire14) : ($signed(wire14) | (wire17 & wire14))));
          reg19 <= wire14;
        end
      else
        begin
          reg18 <= $signed($signed(((wire16 >>> reg19) > (~(8'ha9)))));
          reg19 <= wire14[(2'h2):(1'h1)];
        end
      reg20 <= ($unsigned({$signed(reg18)}) ? wire15 : wire15[(3'h6):(3'h6)]);
    end
  assign wire21 = (^$signed({reg20[(2'h3):(1'h0)]}));
  assign wire22 = {(~^((8'h9f) ? $signed(wire17) : (wire14 - reg18)))};
  assign wire23 = $unsigned({{((8'haf) ? (8'ha1) : reg18)}});
  assign wire24 = $unsigned(wire23);
  assign wire25 = wire16[(2'h3):(2'h2)];
  assign wire26 = $unsigned({(wire16[(3'h7):(3'h4)] & $unsigned(reg20))});
  assign wire27 = $unsigned(wire14);
  always
    @(posedge clk) begin
      reg28 <= (|(^~((wire27 == reg18) ? wire16[(1'h1):(1'h1)] : wire23)));
    end
  assign wire29 = {(((reg20 ? wire24 : reg18) ?
                              $signed((8'hac)) : $signed(reg18)) ?
                          (~reg19[(1'h0):(1'h0)]) : reg19)};
  assign wire30 = {$signed($unsigned((^(8'ha0))))};
  assign wire31 = (~$signed((~(wire30 ? wire26 : (8'ha1)))));
  assign wire32 = {(wire25 >> $unsigned(reg19))};
endmodule