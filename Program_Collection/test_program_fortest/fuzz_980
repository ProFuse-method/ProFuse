(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param332 = (((&(((8'h9c) ? (8'hae) : (8'hbf)) << ((8'hbd) ? (8'hb1) : (8'hbd)))) - ((^~((8'h9c) >= (8'hb3))) ? ({(8'hb8)} ? (^~(8'hb7)) : ((8'hb2) + (8'ha8))) : ((8'ha2) ? {(8'had), (8'ha3)} : {(8'had)}))) + ((((!(7'h44)) ? ((8'hbc) >> (8'h9d)) : (-(8'ha4))) ? (&(~(8'h9f))) : {(~^(8'hab))}) * (|({(8'hb7)} | {(8'hb4)})))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h252):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire0;
  input wire [(4'hc):(1'h0)] wire1;
  input wire [(5'h12):(1'h0)] wire2;
  input wire signed [(5'h14):(1'h0)] wire3;
  wire signed [(2'h2):(1'h0)] wire4;
  wire [(4'hb):(1'h0)] wire5;
  wire signed [(4'hf):(1'h0)] wire6;
  wire signed [(5'h14):(1'h0)] wire7;
  wire [(5'h12):(1'h0)] wire8;
  wire signed [(4'h9):(1'h0)] wire29;
  wire signed [(4'hf):(1'h0)] wire50;
  wire signed [(3'h6):(1'h0)] wire208;
  wire signed [(4'h9):(1'h0)] wire330;
  reg [(4'hf):(1'h0)] reg48 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg47 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg45 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg42 = (1'h0);
  reg [(4'ha):(1'h0)] reg40 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg38 = (1'h0);
  reg [(4'hd):(1'h0)] reg35 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg34 = (1'h0);
  reg [(4'hf):(1'h0)] reg33 = (1'h0);
  reg [(3'h6):(1'h0)] reg25 = (1'h0);
  reg [(4'h9):(1'h0)] reg22 = (1'h0);
  reg signed [(4'he):(1'h0)] reg19 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg18 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg13 = (1'h0);
  reg [(4'ha):(1'h0)] reg12 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg210 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg49 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg46 = (1'h0);
  reg [(5'h10):(1'h0)] reg44 = (1'h0);
  reg [(4'ha):(1'h0)] forvar43 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg41 = (1'h0);
  reg [(2'h3):(1'h0)] reg39 = (1'h0);
  reg [(4'hc):(1'h0)] reg37 = (1'h0);
  reg [(5'h10):(1'h0)] reg36 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar32 = (1'h0);
  reg [(4'h8):(1'h0)] reg31 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar30 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg28 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg27 = (1'h0);
  reg [(4'hb):(1'h0)] forvar26 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg24 = (1'h0);
  reg [(4'hb):(1'h0)] forvar23 = (1'h0);
  reg [(5'h14):(1'h0)] forvar21 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg17 = (1'h0);
  reg [(5'h13):(1'h0)] reg16 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar15 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg14 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar11 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg10 = (1'h0);
  reg [(3'h4):(1'h0)] forvar9 = (1'h0);
  assign y = {wire4,
                 wire5,
                 wire6,
                 wire7,
                 wire8,
                 wire29,
                 wire50,
                 wire208,
                 wire330,
                 reg48,
                 reg47,
                 reg45,
                 reg42,
                 reg40,
                 reg38,
                 reg35,
                 reg34,
                 reg33,
                 reg25,
                 reg22,
                 reg19,
                 reg18,
                 reg13,
                 reg12,
                 reg210,
                 reg49,
                 reg46,
                 reg44,
                 forvar43,
                 reg41,
                 reg39,
                 reg37,
                 reg36,
                 forvar32,
                 reg31,
                 forvar30,
                 reg28,
                 reg27,
                 forvar26,
                 reg24,
                 forvar23,
                 forvar21,
                 reg20,
                 reg17,
                 reg16,
                 forvar15,
                 reg14,
                 forvar11,
                 reg10,
                 forvar9,
                 (1'h0)};
  assign wire4 = (wire0 <<< $signed(wire3));
  assign wire5 = {{wire1[(1'h0):(1'h0)]}, (~|wire3[(4'he):(2'h2)])};
  assign wire6 = $unsigned((~^wire5[(3'h5):(3'h4)]));
  assign wire7 = (wire3[(4'hc):(3'h4)] ?
                     wire2[(2'h3):(2'h2)] : $signed(((-(wire1 ^ wire6)) ?
                         $unsigned((wire5 + wire2)) : ($unsigned(wire0) ?
                             (wire2 ? (8'hbb) : (8'h9d)) : (8'hb8)))));
  assign wire8 = $signed(wire5[(3'h7):(3'h4)]);
  always
    @(posedge clk) begin
      for (forvar9 = (1'h0); (forvar9 < (2'h3)); forvar9 = (forvar9 + (1'h1)))
        begin
          reg10 = (^~(($unsigned($unsigned(wire4)) == wire3) ?
              $signed((^wire2)) : (~$signed((~|wire7)))));
          for (forvar11 = (1'h0); (forvar11 < (1'h0)); forvar11 = (forvar11 + (1'h1)))
            begin
              reg12 <= ((-$unsigned($signed({forvar9, wire5}))) ?
                  reg10 : {(((wire3 ? wire8 : reg10) ?
                              {wire7, wire2} : (+wire1)) ?
                          forvar9 : (((7'h43) ? wire6 : wire3) ?
                              $unsigned(forvar9) : wire3))});
              reg13 <= (forvar11[(4'h9):(3'h4)] ?
                  $signed((($unsigned((8'h9c)) ?
                      {forvar9,
                          wire2} : wire5[(4'hb):(4'h9)]) >> $signed($signed((8'hb4))))) : $unsigned((~|$unsigned(wire1[(2'h2):(2'h2)]))));
              reg14 = (wire2 ?
                  ($unsigned($signed({forvar9, wire3})) ?
                      $unsigned($unsigned(forvar9)) : wire3[(1'h1):(1'h1)]) : $unsigned((wire4 ?
                      wire6 : wire4)));
            end
          for (forvar15 = (1'h0); (forvar15 < (2'h3)); forvar15 = (forvar15 + (1'h1)))
            begin
              reg16 = (~($unsigned(reg10) << $unsigned((reg10 != $signed(wire7)))));
              reg17 = (~|wire3);
              reg18 <= wire6;
              reg19 <= forvar9[(1'h0):(1'h0)];
              reg20 = reg19;
            end
          for (forvar21 = (1'h0); (forvar21 < (1'h0)); forvar21 = (forvar21 + (1'h1)))
            begin
              reg22 <= wire2;
            end
        end
      for (forvar23 = (1'h0); (forvar23 < (1'h0)); forvar23 = (forvar23 + (1'h1)))
        begin
          reg24 = wire3;
          reg25 <= (8'had);
          for (forvar26 = (1'h0); (forvar26 < (3'h4)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 = reg25[(1'h1):(1'h1)];
              reg28 = ({(forvar9 ?
                      ((forvar21 ? forvar11 : wire8) ?
                          $unsigned(reg20) : (forvar15 && reg18)) : $signed($signed(wire0))),
                  (|reg20)} >> reg18[(4'h9):(2'h3)]);
            end
        end
    end
  assign wire29 = $unsigned((~&(|reg22)));
  always
    @(posedge clk) begin
      for (forvar30 = (1'h0); (forvar30 < (2'h3)); forvar30 = (forvar30 + (1'h1)))
        begin
          reg31 = $signed({(+((wire4 ? wire5 : wire2) ?
                  (forvar30 ? reg22 : reg19) : (reg18 == reg13))),
              $unsigned((~$unsigned(wire3)))});
          for (forvar32 = (1'h0); (forvar32 < (1'h1)); forvar32 = (forvar32 + (1'h1)))
            begin
              reg33 <= (((8'hbc) ^~ (({(8'ha2)} ?
                      (reg25 ? reg18 : reg22) : $unsigned(wire0)) & reg25)) ?
                  {$unsigned($unsigned($unsigned(reg22))),
                      (^$signed(wire1[(1'h1):(1'h0)]))} : $unsigned(forvar32));
              reg34 <= (+{(((reg18 != (8'hb9)) ?
                          $unsigned(wire6) : $unsigned((8'hbb))) ?
                      $unsigned(reg33) : (reg25 <<< reg31[(3'h6):(1'h1)]))});
              reg35 <= ($signed({((~&forvar32) <<< $unsigned(reg25))}) <= wire29[(2'h2):(1'h1)]);
              reg36 = {($signed((8'ha8)) ?
                      $signed($unsigned((^(8'ha6)))) : (wire8 ?
                          wire1 : $unsigned($signed(wire4)))),
                  ((8'hae) ?
                      (($unsigned(wire4) ?
                          (~wire8) : $unsigned(wire4)) && wire1) : $unsigned(({reg18} ~^ (forvar30 >>> reg25))))};
            end
          reg37 = ((($signed($unsigned(wire8)) != wire2[(1'h1):(1'h1)]) + ((wire2[(3'h4):(1'h0)] && (|(8'hb3))) && (^~(wire0 ?
              wire4 : reg18)))) == (wire3 - {({(7'h43), wire4} ?
                  wire6[(4'h8):(2'h2)] : (~|reg12)),
              wire0[(1'h0):(1'h0)]}));
          if ($signed(wire4))
            begin
              reg38 <= ($unsigned($signed($unsigned($signed(reg33)))) ?
                  (!(~|reg12[(4'h8):(3'h5)])) : forvar32[(3'h5):(1'h0)]);
            end
          else
            begin
              reg39 = (7'h42);
              reg40 <= {$unsigned(reg22), reg34[(1'h1):(1'h1)]};
              reg41 = forvar30[(2'h2):(2'h2)];
              reg42 <= (($signed({forvar30[(4'hd):(2'h2)], $unsigned(reg33)}) ?
                  $signed({{reg40, wire5}, (+wire4)}) : ((wire6 ?
                      reg25 : wire8[(4'hb):(4'h9)]) - ((reg40 * reg25) ?
                      {(8'ha2)} : (8'hae)))) ^ ($unsigned((reg35 ?
                  $signed((8'hb0)) : (&wire7))) <<< $unsigned((+(reg41 ?
                  (8'h9d) : reg22)))));
            end
        end
      for (forvar43 = (1'h0); (forvar43 < (2'h3)); forvar43 = (forvar43 + (1'h1)))
        begin
          if ((~&($unsigned((~&wire5)) ?
              $unsigned((wire4[(1'h1):(1'h0)] <<< (wire2 > reg41))) : $unsigned(reg19[(3'h4):(2'h3)]))))
            begin
              reg44 = ({reg12[(2'h2):(2'h2)]} >= ((+wire6[(3'h6):(2'h2)]) ?
                  $unsigned({(+reg12)}) : (8'hbb)));
              reg45 <= (reg13 ?
                  (reg18[(3'h5):(3'h5)] ?
                      $unsigned((8'ha2)) : {{{reg35}},
                          $unsigned($signed(wire8))}) : ($unsigned(((reg25 >>> wire2) >>> reg38)) * reg19[(3'h7):(1'h0)]));
            end
          else
            begin
              reg45 <= reg19;
              reg46 = (^~({(reg25 ^~ (wire3 ? reg18 : (7'h44))),
                  ((reg34 ? reg18 : wire29) ?
                      {reg25} : (reg13 ?
                          (8'hb8) : reg22))} | (!reg19[(3'h6):(3'h4)])));
              reg47 <= ({forvar32[(3'h4):(1'h0)],
                      (($signed(reg34) ? (^~reg18) : $signed(wire5)) ?
                          ($signed(wire8) ?
                              (reg42 | (8'h9f)) : (wire29 == reg39)) : (&$unsigned(reg35)))} ?
                  ($unsigned((^~$unsigned(reg31))) ~^ $signed((&(reg31 ?
                      reg37 : wire6)))) : (reg34 >> ((~^$signed(wire5)) ?
                      forvar43[(2'h2):(1'h1)] : {(8'hae), wire29})));
              reg48 <= reg40;
              reg49 = {$signed((^reg19[(3'h6):(1'h0)])), $unsigned(reg25)};
            end
        end
    end
  assign wire50 = wire2;
  module51 #() modinst209 (wire208, clk, reg42, wire8, reg33, reg19, wire7);
  always
    @(posedge clk) begin
      reg210 = reg40[(1'h0):(1'h0)];
    end
  module211 #() modinst331 (wire330, clk, reg22, wire2, wire50, wire1);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module211
#(parameter param328 = (7'h43), 
parameter param329 = (((8'hbd) & (param328 ? (param328 <<< param328) : (8'ha6))) >>> (~|((~^(param328 ? param328 : param328)) ? param328 : param328))))
(y, clk, wire215, wire214, wire213, wire212);
  output wire [(32'h1bd):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire215;
  input wire signed [(5'h12):(1'h0)] wire214;
  input wire signed [(4'hf):(1'h0)] wire213;
  input wire [(4'hc):(1'h0)] wire212;
  wire signed [(3'h5):(1'h0)] wire327;
  wire signed [(4'hf):(1'h0)] wire326;
  wire signed [(4'h9):(1'h0)] wire325;
  wire signed [(4'hd):(1'h0)] wire324;
  wire [(5'h10):(1'h0)] wire323;
  wire signed [(4'he):(1'h0)] wire322;
  wire signed [(5'h13):(1'h0)] wire321;
  wire [(4'hf):(1'h0)] wire320;
  wire signed [(4'h9):(1'h0)] wire319;
  wire signed [(5'h13):(1'h0)] wire318;
  wire [(5'h14):(1'h0)] wire316;
  wire [(5'h10):(1'h0)] wire241;
  wire signed [(5'h15):(1'h0)] wire240;
  wire signed [(5'h11):(1'h0)] wire218;
  wire [(5'h13):(1'h0)] wire217;
  wire signed [(4'he):(1'h0)] wire216;
  reg signed [(4'h8):(1'h0)] reg237 = (1'h0);
  reg [(3'h5):(1'h0)] reg234 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg230 = (1'h0);
  reg [(5'h12):(1'h0)] reg239 = (1'h0);
  reg [(3'h4):(1'h0)] reg238 = (1'h0);
  reg [(4'ha):(1'h0)] reg236 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar235 = (1'h0);
  reg [(5'h15):(1'h0)] reg233 = (1'h0);
  reg [(4'h8):(1'h0)] reg232 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg231 = (1'h0);
  reg [(4'h8):(1'h0)] forvar229 = (1'h0);
  reg [(2'h3):(1'h0)] forvar228 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg227 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg226 = (1'h0);
  reg [(3'h4):(1'h0)] reg225 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar224 = (1'h0);
  reg [(5'h10):(1'h0)] forvar223 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg222 = (1'h0);
  reg [(4'hb):(1'h0)] forvar221 = (1'h0);
  reg [(2'h3):(1'h0)] forvar220 = (1'h0);
  reg [(4'hc):(1'h0)] reg219 = (1'h0);
  assign y = {wire327,
                 wire326,
                 wire325,
                 wire324,
                 wire323,
                 wire322,
                 wire321,
                 wire320,
                 wire319,
                 wire318,
                 wire316,
                 wire241,
                 wire240,
                 wire218,
                 wire217,
                 wire216,
                 reg237,
                 reg234,
                 reg230,
                 reg239,
                 reg238,
                 reg236,
                 forvar235,
                 reg233,
                 reg232,
                 reg231,
                 forvar229,
                 forvar228,
                 reg227,
                 reg226,
                 reg225,
                 forvar224,
                 forvar223,
                 reg222,
                 forvar221,
                 forvar220,
                 reg219,
                 (1'h0)};
  assign wire216 = wire212[(4'hc):(1'h0)];
  assign wire217 = $signed(wire212[(3'h6):(3'h5)]);
  assign wire218 = $unsigned(($unsigned((8'h9d)) ?
                       $signed(wire215[(1'h0):(1'h0)]) : ((8'h9e) ?
                           ($signed(wire215) ?
                               $signed(wire212) : wire214[(3'h4):(2'h2)]) : $signed($signed(wire212)))));
  always
    @(posedge clk) begin
      reg219 = (~&{{(8'hbd), wire214}, wire213});
    end
  always
    @(posedge clk) begin
      for (forvar220 = (1'h0); (forvar220 < (1'h1)); forvar220 = (forvar220 + (1'h1)))
        begin
          for (forvar221 = (1'h0); (forvar221 < (1'h1)); forvar221 = (forvar221 + (1'h1)))
            begin
              reg222 = ((wire216[(4'hc):(4'hc)] ?
                  ($unsigned((forvar221 ?
                      wire217 : wire212)) | (!$signed(wire214))) : {($unsigned(forvar220) ?
                          wire212[(4'ha):(1'h1)] : (wire218 | wire218)),
                      $signed((wire215 ?
                          wire215 : wire213))}) ^ (((-(wire215 && forvar221)) ^~ ((forvar220 ^ wire216) > (|(7'h40)))) ?
                  (wire213[(1'h0):(1'h0)] ?
                      ($unsigned(wire212) ^~ (wire216 ?
                          wire216 : forvar221)) : $unsigned(forvar220)) : wire212[(4'h8):(3'h4)]));
            end
        end
      for (forvar223 = (1'h0); (forvar223 < (1'h0)); forvar223 = (forvar223 + (1'h1)))
        begin
          for (forvar224 = (1'h0); (forvar224 < (3'h4)); forvar224 = (forvar224 + (1'h1)))
            begin
              reg225 = (wire217 ?
                  (8'ha8) : ($unsigned((~forvar223)) || ((wire212 && $unsigned(reg222)) ^~ wire217)));
              reg226 = (~&wire217[(4'ha):(3'h7)]);
            end
        end
      reg227 = wire216;
      for (forvar228 = (1'h0); (forvar228 < (3'h4)); forvar228 = (forvar228 + (1'h1)))
        begin
          for (forvar229 = (1'h0); (forvar229 < (2'h3)); forvar229 = (forvar229 + (1'h1)))
            begin
              reg230 <= (~&(((8'hb8) <<< reg227) ?
                  wire216[(1'h1):(1'h1)] : (~&{(wire212 ? (8'hae) : reg222)})));
              reg231 = (^reg230[(2'h2):(1'h1)]);
              reg232 = {forvar223,
                  {((&reg230) ?
                          (((8'ha0) ?
                              forvar229 : (7'h40)) && (wire213 >= reg230)) : {(~^(8'ha7))}),
                      ({forvar220[(2'h2):(1'h1)], (~|(8'h9f))} ?
                          {(reg225 ? (7'h44) : reg225),
                              forvar221[(4'hb):(3'h4)]} : ((~^wire218) ?
                              (!wire217) : $unsigned(reg226)))}};
              reg233 = forvar224[(3'h5):(2'h2)];
              reg234 <= ((forvar220[(2'h3):(2'h2)] ?
                  $signed(((reg233 & reg230) ~^ ((8'h9e) ~^ forvar221))) : (^(&$signed(wire217)))) & wire215[(2'h2):(1'h1)]);
            end
          for (forvar235 = (1'h0); (forvar235 < (2'h2)); forvar235 = (forvar235 + (1'h1)))
            begin
              reg236 = ((+reg227[(3'h4):(2'h3)]) ?
                  $signed((((reg233 ? wire212 : forvar224) | ((8'ha6) ?
                          wire212 : reg231)) ?
                      reg227[(1'h0):(1'h0)] : forvar223[(5'h10):(4'hc)])) : ($unsigned(((forvar221 ?
                          wire213 : (8'ha7)) ?
                      forvar224[(2'h3):(2'h3)] : reg231)) <<< $signed($unsigned(reg227))));
              reg237 <= $unsigned((({reg225[(1'h0):(1'h0)]} | $unsigned((reg236 < (8'hb1)))) & reg226));
              reg238 = (8'hbb);
            end
          reg239 = (+$unsigned(reg226[(1'h1):(1'h1)]));
        end
    end
  assign wire240 = {reg237[(3'h7):(2'h2)], {(|reg237[(2'h3):(2'h2)])}};
  assign wire241 = $signed(wire213);
  module242 #() modinst317 (wire316, clk, wire218, wire241, wire214, wire240);
  assign wire318 = (~&wire240);
  assign wire319 = (((8'ha8) && $signed($signed((8'ha8)))) ?
                       $unsigned((-$unsigned((wire212 ?
                           reg230 : wire240)))) : ($unsigned((~^(wire217 >> wire318))) * wire316));
  assign wire320 = $signed((+(($signed(wire215) == wire214[(4'h8):(1'h1)]) < ((wire213 ?
                           wire241 : wire218) ?
                       (wire316 ? wire217 : (8'hb2)) : $signed((8'hbb))))));
  assign wire321 = $signed($signed(({$signed(wire214)} ?
                       $signed((~&wire216)) : ($unsigned(reg230) ?
                           $unsigned(wire316) : wire217))));
  assign wire322 = (wire214 >= $signed($unsigned((~&$unsigned(reg230)))));
  assign wire323 = (8'hb0);
  assign wire324 = ($signed($unsigned(wire215)) ?
                       ((reg234 < $signed(wire217)) < wire241) : (^~$signed((~&reg230[(1'h0):(1'h0)]))));
  assign wire325 = $unsigned($unsigned((wire319[(1'h0):(1'h0)] ?
                       wire212[(2'h3):(1'h1)] : {$signed(wire214),
                           (+wire323)})));
  assign wire326 = wire214[(2'h3):(1'h0)];
  assign wire327 = ($unsigned($signed(wire212[(3'h4):(1'h0)])) != ((8'hab) == (-(^~$signed(wire217)))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module51
#(parameter param206 = {(({((7'h40) ? (8'hb8) : (8'haa)), ((8'had) & (8'ha6))} > (((8'hb2) - (7'h40)) ? ((8'hbc) ? (8'had) : (8'hb8)) : ((8'hb5) * (8'hb2)))) ? {{{(8'ha6), (8'ha8)}}} : ((~(+(8'ha4))) ~^ {((8'hab) || (8'hbf)), ((8'ha2) ? (7'h42) : (8'hbc))})), ((&{{(8'ha4), (8'ha8)}}) - (8'ha0))}, 
parameter param207 = param206)
(y, clk, wire56, wire55, wire54, wire53, wire52);
  output wire [(32'h4ef):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'he):(1'h0)] wire56;
  input wire [(5'h10):(1'h0)] wire55;
  input wire [(4'hf):(1'h0)] wire54;
  input wire [(4'he):(1'h0)] wire53;
  input wire signed [(4'ha):(1'h0)] wire52;
  wire signed [(2'h3):(1'h0)] wire204;
  wire [(2'h3):(1'h0)] wire160;
  wire [(4'he):(1'h0)] wire159;
  wire [(3'h7):(1'h0)] wire158;
  wire signed [(3'h6):(1'h0)] wire157;
  wire signed [(3'h7):(1'h0)] wire156;
  wire signed [(4'hb):(1'h0)] wire58;
  wire [(4'hf):(1'h0)] wire57;
  reg [(4'hf):(1'h0)] reg154 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg146 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg145 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg142 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg140 = (1'h0);
  reg [(4'hc):(1'h0)] reg138 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg136 = (1'h0);
  reg [(4'he):(1'h0)] reg135 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg134 = (1'h0);
  reg [(5'h15):(1'h0)] reg132 = (1'h0);
  reg [(3'h6):(1'h0)] reg128 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg126 = (1'h0);
  reg [(5'h15):(1'h0)] reg124 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg122 = (1'h0);
  reg [(4'hd):(1'h0)] reg117 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg115 = (1'h0);
  reg [(3'h4):(1'h0)] reg114 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg113 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg109 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg106 = (1'h0);
  reg [(4'he):(1'h0)] reg105 = (1'h0);
  reg [(4'hb):(1'h0)] reg104 = (1'h0);
  reg [(5'h14):(1'h0)] reg100 = (1'h0);
  reg [(5'h11):(1'h0)] reg99 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg95 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg93 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg90 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg89 = (1'h0);
  reg [(4'hf):(1'h0)] reg87 = (1'h0);
  reg [(2'h2):(1'h0)] reg85 = (1'h0);
  reg [(5'h11):(1'h0)] reg82 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg81 = (1'h0);
  reg [(3'h7):(1'h0)] reg78 = (1'h0);
  reg [(4'ha):(1'h0)] reg77 = (1'h0);
  reg [(4'hf):(1'h0)] reg76 = (1'h0);
  reg [(5'h13):(1'h0)] reg74 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg73 = (1'h0);
  reg [(3'h6):(1'h0)] reg70 = (1'h0);
  reg [(4'ha):(1'h0)] reg68 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg66 = (1'h0);
  reg [(2'h3):(1'h0)] reg65 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg63 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg62 = (1'h0);
  reg [(3'h5):(1'h0)] reg61 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg60 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg155 = (1'h0);
  reg [(2'h3):(1'h0)] forvar153 = (1'h0);
  reg [(5'h10):(1'h0)] reg152 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg151 = (1'h0);
  reg [(3'h4):(1'h0)] reg150 = (1'h0);
  reg [(3'h4):(1'h0)] forvar149 = (1'h0);
  reg [(3'h4):(1'h0)] reg148 = (1'h0);
  reg [(4'hd):(1'h0)] reg147 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar144 = (1'h0);
  reg [(4'hc):(1'h0)] reg143 = (1'h0);
  reg [(4'ha):(1'h0)] reg144 = (1'h0);
  reg [(2'h2):(1'h0)] forvar143 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg141 = (1'h0);
  reg [(4'h8):(1'h0)] reg139 = (1'h0);
  reg [(5'h15):(1'h0)] forvar137 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg133 = (1'h0);
  reg [(3'h6):(1'h0)] forvar131 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar130 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg129 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg127 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar125 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg123 = (1'h0);
  reg [(4'hd):(1'h0)] reg121 = (1'h0);
  reg [(3'h5):(1'h0)] reg120 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg119 = (1'h0);
  reg [(4'hd):(1'h0)] forvar118 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar116 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg112 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar111 = (1'h0);
  reg [(5'h11):(1'h0)] reg110 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg108 = (1'h0);
  reg [(5'h10):(1'h0)] forvar107 = (1'h0);
  reg [(4'hc):(1'h0)] reg103 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar102 = (1'h0);
  reg [(4'hd):(1'h0)] reg101 = (1'h0);
  reg [(5'h12):(1'h0)] forvar98 = (1'h0);
  reg [(3'h4):(1'h0)] reg97 = (1'h0);
  reg [(3'h7):(1'h0)] reg96 = (1'h0);
  reg [(3'h7):(1'h0)] forvar94 = (1'h0);
  reg [(4'hf):(1'h0)] forvar92 = (1'h0);
  reg [(5'h12):(1'h0)] forvar91 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar88 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg86 = (1'h0);
  reg [(4'ha):(1'h0)] reg84 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar83 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg80 = (1'h0);
  reg [(5'h14):(1'h0)] reg79 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar75 = (1'h0);
  reg [(4'hf):(1'h0)] forvar72 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg71 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg69 = (1'h0);
  reg [(4'ha):(1'h0)] forvar67 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar64 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar59 = (1'h0);
  assign y = {wire204,
                 wire160,
                 wire159,
                 wire158,
                 wire157,
                 wire156,
                 wire58,
                 wire57,
                 reg154,
                 reg146,
                 reg145,
                 reg142,
                 reg140,
                 reg138,
                 reg136,
                 reg135,
                 reg134,
                 reg132,
                 reg128,
                 reg126,
                 reg124,
                 reg122,
                 reg117,
                 reg115,
                 reg114,
                 reg113,
                 reg109,
                 reg106,
                 reg105,
                 reg104,
                 reg100,
                 reg99,
                 reg95,
                 reg93,
                 reg90,
                 reg89,
                 reg87,
                 reg85,
                 reg82,
                 reg81,
                 reg78,
                 reg77,
                 reg76,
                 reg74,
                 reg73,
                 reg70,
                 reg68,
                 reg66,
                 reg65,
                 reg63,
                 reg62,
                 reg61,
                 reg60,
                 reg155,
                 forvar153,
                 reg152,
                 reg151,
                 reg150,
                 forvar149,
                 reg148,
                 reg147,
                 forvar144,
                 reg143,
                 reg144,
                 forvar143,
                 reg141,
                 reg139,
                 forvar137,
                 reg133,
                 forvar131,
                 forvar130,
                 reg129,
                 reg127,
                 forvar125,
                 reg123,
                 reg121,
                 reg120,
                 reg119,
                 forvar118,
                 forvar116,
                 reg112,
                 forvar111,
                 reg110,
                 reg108,
                 forvar107,
                 reg103,
                 forvar102,
                 reg101,
                 forvar98,
                 reg97,
                 reg96,
                 forvar94,
                 forvar92,
                 forvar91,
                 forvar88,
                 reg86,
                 reg84,
                 forvar83,
                 reg80,
                 reg79,
                 forvar75,
                 forvar72,
                 reg71,
                 reg69,
                 forvar67,
                 forvar64,
                 forvar59,
                 (1'h0)};
  assign wire57 = (~|(wire54[(3'h7):(1'h0)] ?
                      $unsigned({((8'hb5) >= wire53)}) : (~|wire53)));
  assign wire58 = (~^$signed($signed(wire54)));
  always
    @(posedge clk) begin
      for (forvar59 = (1'h0); (forvar59 < (3'h4)); forvar59 = (forvar59 + (1'h1)))
        begin
          if ((wire52[(4'ha):(1'h1)] >>> wire58))
            begin
              reg60 <= forvar59;
            end
          else
            begin
              reg60 <= forvar59;
              reg61 <= $unsigned(wire57[(3'h5):(3'h4)]);
              reg62 <= (((reg61 ?
                  $signed(wire52[(2'h3):(1'h1)]) : {(^(8'h9e)),
                      wire55[(4'h8):(3'h4)]}) >= ($signed(forvar59) <<< (wire57 ?
                  (~^wire54) : $unsigned(reg60)))) >>> (wire52[(2'h2):(1'h0)] * ((~&(~|wire52)) ?
                  (reg61[(2'h2):(1'h1)] || $unsigned((8'hb0))) : (8'hb1))));
              reg63 <= reg61[(2'h2):(1'h1)];
            end
          for (forvar64 = (1'h0); (forvar64 < (2'h2)); forvar64 = (forvar64 + (1'h1)))
            begin
              reg65 <= wire58;
              reg66 <= (7'h41);
            end
          for (forvar67 = (1'h0); (forvar67 < (1'h0)); forvar67 = (forvar67 + (1'h1)))
            begin
              reg68 <= ((7'h42) ?
                  (~|(+{(wire56 < forvar67)})) : (forvar59[(2'h3):(1'h1)] < wire56));
              reg69 = $signed(forvar64[(1'h0):(1'h0)]);
              reg70 <= ((wire57 ?
                      $unsigned(((-wire54) << (wire57 < forvar64))) : reg60) ?
                  $unsigned($signed((forvar64[(3'h6):(1'h1)] + (^forvar64)))) : $unsigned(reg62[(3'h4):(2'h3)]));
            end
          reg71 = ($signed(($signed(wire52) * ((reg63 ?
                  reg68 : reg60) < $signed((8'hb0))))) ?
              (~reg69[(3'h7):(2'h3)]) : (^~{((wire53 ?
                      wire52 : reg66) ^ (wire52 ? (8'ha5) : reg66))}));
          for (forvar72 = (1'h0); (forvar72 < (2'h3)); forvar72 = (forvar72 + (1'h1)))
            begin
              reg73 <= ((((^$unsigned(forvar64)) ^~ $signed($unsigned(reg70))) ?
                      reg69 : $unsigned({$unsigned(forvar64),
                          $unsigned(wire52)})) ?
                  (forvar59[(2'h2):(1'h1)] + (({(8'hbe),
                      wire55} + forvar72[(4'hd):(3'h6)]) <= wire58)) : wire55[(4'hc):(4'h8)]);
              reg74 <= wire58;
            end
        end
      for (forvar75 = (1'h0); (forvar75 < (1'h0)); forvar75 = (forvar75 + (1'h1)))
        begin
          if (($unsigned(forvar59[(3'h7):(3'h6)]) ?
              reg65[(2'h3):(1'h0)] : forvar59[(3'h4):(3'h4)]))
            begin
              reg76 <= (~&$signed($signed(($signed(wire52) ?
                  (^(8'hae)) : wire55[(4'hc):(4'h8)]))));
              reg77 <= $unsigned((reg68 ?
                  wire54[(3'h6):(2'h3)] : $signed((!{reg76, reg69}))));
              reg78 <= {(^~(reg74[(3'h5):(1'h0)] < reg73))};
            end
          else
            begin
              reg79 = (~(+$signed((wire56 ?
                  {(7'h41), reg71} : reg70[(2'h2):(2'h2)]))));
              reg80 = $signed(((((^(8'hab)) << (+wire53)) & ((8'hae) ?
                  reg78[(2'h3):(2'h2)] : (~&reg69))) || ($signed(wire57) ?
                  ($signed((8'ha6)) >= $signed(reg78)) : wire56)));
              reg81 <= $unsigned($unsigned($signed($unsigned((8'hab)))));
              reg82 <= reg60[(1'h1):(1'h0)];
            end
          for (forvar83 = (1'h0); (forvar83 < (1'h0)); forvar83 = (forvar83 + (1'h1)))
            begin
              reg84 = (|{$unsigned($unsigned((8'ha9))),
                  ((wire53 ^~ (wire57 * (8'hbc))) > ((-reg60) > $signed(wire57)))});
              reg85 <= {(~((8'ha4) & reg69[(2'h3):(2'h2)]))};
              reg86 = (^(($unsigned(reg69[(3'h6):(3'h6)]) ?
                      (|wire53) : (^~$signed(wire55))) ?
                  $signed($signed(reg82)) : $signed(reg78[(1'h0):(1'h0)])));
              reg87 <= $unsigned((($unsigned((!reg61)) | ((~|reg62) ?
                  wire56 : ((7'h40) ? wire54 : reg69))) ^ ($unsigned({reg71,
                      wire53}) ?
                  (^((8'ha5) ? wire56 : wire57)) : (~&(reg70 ?
                      (8'ha5) : (8'hb8))))));
            end
          for (forvar88 = (1'h0); (forvar88 < (3'h4)); forvar88 = (forvar88 + (1'h1)))
            begin
              reg89 <= wire56;
              reg90 <= {{$signed(((reg73 ?
                          forvar83 : reg78) ^~ (reg74 ~^ forvar67)))},
                  (~{$signed(wire57[(3'h6):(3'h4)])})};
            end
        end
      for (forvar91 = (1'h0); (forvar91 < (2'h2)); forvar91 = (forvar91 + (1'h1)))
        begin
          for (forvar92 = (1'h0); (forvar92 < (3'h4)); forvar92 = (forvar92 + (1'h1)))
            begin
              reg93 <= ((8'h9e) ? reg90 : forvar67);
            end
          for (forvar94 = (1'h0); (forvar94 < (2'h2)); forvar94 = (forvar94 + (1'h1)))
            begin
              reg95 <= (((!(+(reg77 ? forvar94 : wire56))) ?
                  $signed(({reg79} ^~ $signed(reg62))) : $signed(reg76[(4'hc):(2'h3)])) <<< (($unsigned(wire57[(4'h9):(4'h9)]) ?
                      (!$signed(reg79)) : {(reg78 ? reg80 : reg81),
                          (reg62 ^~ wire56)}) ?
                  ((reg84[(4'h8):(4'h8)] < (|forvar59)) || forvar67[(3'h7):(1'h1)]) : $signed(((forvar94 ?
                          forvar94 : reg77) ?
                      $unsigned(reg85) : $signed(reg65)))));
              reg96 = $unsigned(forvar88);
              reg97 = $signed(wire56);
            end
          for (forvar98 = (1'h0); (forvar98 < (2'h3)); forvar98 = (forvar98 + (1'h1)))
            begin
              reg99 <= $unsigned($unsigned($unsigned(forvar59[(5'h14):(5'h14)])));
              reg100 <= {(wire54 ? reg87 : reg79[(3'h6):(3'h5)]),
                  $signed({forvar83, reg77})};
              reg101 = (+$signed(reg70));
            end
          for (forvar102 = (1'h0); (forvar102 < (2'h3)); forvar102 = (forvar102 + (1'h1)))
            begin
              reg103 = ($unsigned((wire57 & wire52[(3'h4):(1'h1)])) ^ $unsigned((+forvar102[(1'h1):(1'h1)])));
              reg104 <= {reg82[(4'h8):(3'h6)],
                  ({(reg87[(3'h6):(2'h2)] + (reg95 == wire55)),
                          (wire56[(3'h7):(3'h5)] ?
                              (|reg103) : $signed(reg66))} ?
                      (forvar59 | $signed((reg99 > reg96))) : $unsigned(($signed(reg60) >= (reg100 && forvar59))))};
              reg105 <= (((|(&$signed(reg85))) ?
                      (($signed(reg89) <<< $signed(reg60)) << ((~^wire58) ?
                          {(7'h44),
                              reg66} : $signed(forvar102))) : (^~$signed(((8'hb0) <= reg86)))) ?
                  {$unsigned({reg100,
                          (+reg100)})} : ((reg60[(2'h3):(2'h3)] >> (~^reg100)) ?
                      ($signed(wire58) ?
                          $signed((7'h40)) : {$signed(reg62)}) : reg84));
              reg106 <= {reg85[(1'h0):(1'h0)]};
            end
        end
      for (forvar107 = (1'h0); (forvar107 < (1'h0)); forvar107 = (forvar107 + (1'h1)))
        begin
          reg108 = (wire57 >> $unsigned($signed(forvar83)));
          reg109 <= reg61;
          reg110 = {{reg106}};
          for (forvar111 = (1'h0); (forvar111 < (1'h1)); forvar111 = (forvar111 + (1'h1)))
            begin
              reg112 = reg100[(5'h14):(4'h8)];
              reg113 <= reg86;
              reg114 <= reg108[(3'h6):(3'h4)];
              reg115 <= $unsigned($unsigned(reg71));
            end
        end
      for (forvar116 = (1'h0); (forvar116 < (1'h1)); forvar116 = (forvar116 + (1'h1)))
        begin
          reg117 <= {forvar94};
          for (forvar118 = (1'h0); (forvar118 < (2'h2)); forvar118 = (forvar118 + (1'h1)))
            begin
              reg119 = (~forvar91[(1'h0):(1'h0)]);
              reg120 = reg90;
              reg121 = forvar91;
              reg122 <= ((reg74[(2'h3):(1'h0)] <<< $signed(reg95[(2'h3):(1'h0)])) > reg68);
              reg123 = (~|(((8'hb9) >= $unsigned({(8'hb3),
                  forvar98})) || $signed($unsigned((reg68 ? reg85 : reg82)))));
            end
          reg124 <= $signed(reg86[(2'h2):(1'h0)]);
          for (forvar125 = (1'h0); (forvar125 < (1'h1)); forvar125 = (forvar125 + (1'h1)))
            begin
              reg126 <= ({{$unsigned($unsigned(wire55))}} != ($signed(reg85) ?
                  (&{forvar107}) : reg79));
              reg127 = $signed($unsigned($signed(reg106[(4'h8):(1'h0)])));
              reg128 <= ({$signed(reg100[(5'h14):(3'h4)])} >>> reg104[(3'h6):(1'h0)]);
            end
          reg129 = reg69[(3'h6):(1'h1)];
        end
    end
  always
    @(posedge clk) begin
      for (forvar130 = (1'h0); (forvar130 < (1'h0)); forvar130 = (forvar130 + (1'h1)))
        begin
          for (forvar131 = (1'h0); (forvar131 < (3'h4)); forvar131 = (forvar131 + (1'h1)))
            begin
              reg132 <= reg113[(4'h9):(1'h1)];
              reg133 = $signed($unsigned({(^~(-reg126))}));
              reg134 <= $unsigned(reg76);
              reg135 <= reg61;
              reg136 <= reg78[(3'h6):(3'h5)];
            end
        end
      if ((($signed({reg136}) > (~|reg85[(2'h2):(1'h0)])) << $signed((reg113 ?
          (reg76[(4'hb):(3'h6)] + $unsigned(reg76)) : (~^reg100[(2'h3):(2'h3)])))))
        begin
          for (forvar137 = (1'h0); (forvar137 < (1'h1)); forvar137 = (forvar137 + (1'h1)))
            begin
              reg138 <= (reg63[(3'h7):(3'h7)] | {$unsigned((reg77 + reg106[(2'h2):(2'h2)])),
                  (reg77[(2'h3):(2'h2)] ?
                      ($signed(reg126) >= wire55[(3'h7):(3'h7)]) : (~|(reg122 ?
                          reg61 : reg132)))});
              reg139 = reg106;
              reg140 <= (($signed($signed(((7'h44) ?
                  reg82 : wire58))) ^~ $unsigned($signed(wire56[(4'ha):(2'h3)]))) >>> reg73);
            end
          reg141 = $signed(reg106[(2'h2):(2'h2)]);
          reg142 <= $signed($unsigned((8'ha1)));
          for (forvar143 = (1'h0); (forvar143 < (1'h0)); forvar143 = (forvar143 + (1'h1)))
            begin
              reg144 = (|(reg133[(4'h8):(4'h8)] ?
                  reg85[(1'h1):(1'h1)] : reg113[(4'hf):(2'h3)]));
              reg145 <= {((wire53[(3'h6):(3'h5)] - $unsigned(reg70)) > reg81[(4'hf):(4'he)])};
              reg146 <= (&$signed((reg73[(4'h8):(3'h4)] ?
                  (-$unsigned(reg87)) : (!$unsigned(reg115)))));
            end
        end
      else
        begin
          for (forvar137 = (1'h0); (forvar137 < (3'h4)); forvar137 = (forvar137 + (1'h1)))
            begin
              reg139 = $unsigned((~&reg82[(3'h4):(1'h0)]));
              reg141 = $signed((~|reg135));
              reg143 = $unsigned(reg61[(3'h5):(2'h2)]);
            end
          for (forvar144 = (1'h0); (forvar144 < (2'h2)); forvar144 = (forvar144 + (1'h1)))
            begin
              reg147 = {$unsigned({$unsigned($signed(reg132))})};
            end
          reg148 = reg141;
          for (forvar149 = (1'h0); (forvar149 < (2'h2)); forvar149 = (forvar149 + (1'h1)))
            begin
              reg150 = (reg77[(1'h1):(1'h1)] >= reg61);
              reg151 = ((($unsigned((8'hae)) ?
                      ((8'hb6) ?
                          (forvar130 ?
                              (8'ha4) : reg73) : $unsigned(reg148)) : wire58[(2'h3):(2'h2)]) & ((~|{reg90,
                      reg89}) == (~$unsigned(reg100)))) ?
                  forvar144 : reg90);
              reg152 = $unsigned(reg104);
            end
          for (forvar153 = (1'h0); (forvar153 < (1'h1)); forvar153 = (forvar153 + (1'h1)))
            begin
              reg154 <= $signed(((reg143 || {(|reg61)}) ?
                  reg61[(3'h4):(1'h1)] : (^~reg146)));
              reg155 = {(reg136[(4'h8):(3'h5)] > (8'hb3)),
                  (^{reg106[(4'hb):(1'h1)]})};
            end
        end
    end
  assign wire156 = $unsigned(($unsigned(((wire57 & reg154) ?
                           $signed(reg99) : (8'ha8))) ?
                       (reg106 ?
                           $unsigned((+(8'haa))) : $unsigned(reg126)) : {(reg61[(1'h0):(1'h0)] <<< $unsigned(reg76))}));
  assign wire157 = $signed($unsigned({$unsigned(reg81)}));
  assign wire158 = ($signed(($signed($unsigned(reg99)) - ((reg136 ?
                               reg126 : reg89) ?
                           $unsigned(wire156) : $unsigned(reg124)))) ?
                       reg106[(5'h10):(4'hd)] : (8'hac));
  assign wire159 = $signed(wire53[(3'h7):(3'h6)]);
  assign wire160 = {wire57[(2'h3):(1'h0)],
                       {$unsigned(($signed(reg68) || ((8'hb1) ?
                               reg78 : reg74))),
                           (+{$signed(reg77)})}};
  module161 #() modinst205 (.wire163(reg113), .wire162(reg99), .clk(clk), .wire165(reg109), .y(wire204), .wire164(reg82));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module161
#(parameter param203 = {((((^~(7'h44)) ? ((8'hbf) + (8'ha8)) : ((8'ha0) ? (8'hb2) : (8'had))) ? {{(7'h44), (8'h9d)}} : ((8'hb6) ? ((8'hb2) ? (7'h42) : (8'hb4)) : ((7'h40) & (8'hb4)))) ? ((((8'ha5) * (8'h9c)) ? {(8'haa), (8'hb3)} : ((8'hb3) ? (8'hbc) : (8'ha5))) * {{(8'ha3)}}) : (!((~^(8'haf)) >> (~&(8'hba)))))})
(y, clk, wire165, wire164, wire163, wire162);
  output wire [(32'h1dc):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire165;
  input wire [(5'h11):(1'h0)] wire164;
  input wire [(4'hd):(1'h0)] wire163;
  input wire signed [(5'h11):(1'h0)] wire162;
  wire [(5'h11):(1'h0)] wire202;
  wire signed [(3'h5):(1'h0)] wire188;
  wire [(5'h12):(1'h0)] wire187;
  wire [(5'h11):(1'h0)] wire186;
  wire [(5'h13):(1'h0)] wire169;
  wire signed [(5'h12):(1'h0)] wire168;
  wire [(4'h9):(1'h0)] wire167;
  wire signed [(5'h11):(1'h0)] wire166;
  reg [(3'h7):(1'h0)] reg201 = (1'h0);
  reg [(4'h9):(1'h0)] reg200 = (1'h0);
  reg [(5'h10):(1'h0)] reg199 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg198 = (1'h0);
  reg [(5'h14):(1'h0)] reg193 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg191 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg185 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg184 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg181 = (1'h0);
  reg signed [(4'he):(1'h0)] reg178 = (1'h0);
  reg [(3'h5):(1'h0)] reg173 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg172 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg197 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg196 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar195 = (1'h0);
  reg [(3'h5):(1'h0)] reg194 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar192 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg190 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar189 = (1'h0);
  reg [(5'h14):(1'h0)] reg183 = (1'h0);
  reg signed [(4'he):(1'h0)] reg182 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar180 = (1'h0);
  reg [(5'h10):(1'h0)] forvar179 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg177 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg176 = (1'h0);
  reg [(4'h8):(1'h0)] forvar175 = (1'h0);
  reg [(5'h15):(1'h0)] reg174 = (1'h0);
  reg [(4'hf):(1'h0)] forvar171 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar170 = (1'h0);
  assign y = {wire202,
                 wire188,
                 wire187,
                 wire186,
                 wire169,
                 wire168,
                 wire167,
                 wire166,
                 reg201,
                 reg200,
                 reg199,
                 reg198,
                 reg193,
                 reg191,
                 reg185,
                 reg184,
                 reg181,
                 reg178,
                 reg173,
                 reg172,
                 reg197,
                 reg196,
                 forvar195,
                 reg194,
                 forvar192,
                 reg190,
                 forvar189,
                 reg183,
                 reg182,
                 forvar180,
                 forvar179,
                 reg177,
                 reg176,
                 forvar175,
                 reg174,
                 forvar171,
                 forvar170,
                 (1'h0)};
  assign wire166 = wire165;
  assign wire167 = $signed({wire164[(5'h11):(4'hf)],
                       ($signed(((8'ha1) ? wire164 : wire162)) ?
                           $unsigned((wire165 * wire166)) : (~^$signed(wire165)))});
  assign wire168 = ($unsigned(wire165) | (wire162[(4'hd):(3'h5)] + ({((8'hb2) ?
                               (8'hb0) : wire167),
                           $signed(wire165)} ?
                       ($signed((8'h9d)) > $signed((8'h9d))) : ((wire163 ?
                               wire166 : (8'hb6)) ?
                           (wire164 ^ wire166) : $unsigned((8'ha9))))));
  assign wire169 = (~$signed(wire165));
  always
    @(posedge clk) begin
      for (forvar170 = (1'h0); (forvar170 < (2'h2)); forvar170 = (forvar170 + (1'h1)))
        begin
          for (forvar171 = (1'h0); (forvar171 < (2'h3)); forvar171 = (forvar171 + (1'h1)))
            begin
              reg172 <= $signed((($signed(wire164[(4'he):(4'h9)]) == $unsigned(wire162)) ~^ $unsigned(wire166[(3'h5):(2'h3)])));
              reg173 <= $signed(forvar171[(3'h6):(1'h1)]);
              reg174 = forvar171[(1'h1):(1'h0)];
            end
          for (forvar175 = (1'h0); (forvar175 < (1'h0)); forvar175 = (forvar175 + (1'h1)))
            begin
              reg176 = $unsigned(forvar175[(3'h5):(1'h1)]);
              reg177 = (reg174[(3'h5):(2'h2)] >> wire166[(1'h0):(1'h0)]);
            end
          reg178 <= wire168[(5'h12):(3'h4)];
        end
      for (forvar179 = (1'h0); (forvar179 < (3'h4)); forvar179 = (forvar179 + (1'h1)))
        begin
          for (forvar180 = (1'h0); (forvar180 < (1'h1)); forvar180 = (forvar180 + (1'h1)))
            begin
              reg181 <= ((($signed(wire167) == $signed(((8'ha4) <<< reg176))) || (((^~forvar175) ?
                          {wire163} : (forvar170 | (8'had))) ?
                      (^((8'had) ?
                          wire168 : (8'ha7))) : $unsigned({(8'hbc)}))) ?
                  (~^$signed(reg172[(2'h2):(1'h1)])) : (wire164[(5'h10):(1'h0)] - $unsigned((&reg177))));
              reg182 = reg172[(2'h2):(1'h0)];
              reg183 = ($unsigned((8'ha3)) ?
                  reg177[(3'h5):(1'h0)] : (($unsigned($signed(reg181)) * $signed((~|reg182))) <= ($signed(wire169[(3'h5):(3'h5)]) ?
                      reg182 : ((reg181 ?
                          forvar171 : wire168) >= $signed(forvar171)))));
              reg184 <= (|((($unsigned(wire163) ?
                      $unsigned(reg173) : $unsigned(reg178)) && $signed({wire166,
                      reg181})) ?
                  (&{reg181[(2'h3):(2'h2)]}) : $signed(forvar170[(4'h8):(4'h8)])));
              reg185 <= $signed($unsigned((forvar171 ^~ (-{wire167,
                  (8'hba)}))));
            end
        end
    end
  assign wire186 = {reg181};
  assign wire187 = (($unsigned((7'h42)) ?
                           $unsigned($signed(wire169)) : (($unsigned(wire169) ?
                                   wire162[(2'h3):(2'h3)] : wire162) ?
                               $signed((!reg181)) : (reg181 | {wire167,
                                   wire162}))) ?
                       ($signed((wire165 * (8'hb3))) ?
                           wire165[(3'h6):(1'h0)] : wire167[(2'h2):(1'h0)]) : {reg172[(2'h2):(2'h2)],
                           $signed((wire167[(4'h8):(3'h4)] ?
                               wire167[(1'h1):(1'h0)] : $unsigned(wire186)))});
  assign wire188 = {(+$signed(wire162[(3'h4):(2'h3)]))};
  always
    @(posedge clk) begin
      for (forvar189 = (1'h0); (forvar189 < (2'h3)); forvar189 = (forvar189 + (1'h1)))
        begin
          reg190 = wire167[(3'h7):(3'h7)];
          reg191 <= reg184[(3'h4):(2'h2)];
          for (forvar192 = (1'h0); (forvar192 < (1'h1)); forvar192 = (forvar192 + (1'h1)))
            begin
              reg193 <= (wire162 && $signed(forvar192[(3'h4):(2'h2)]));
              reg194 = ($signed($unsigned(reg191[(1'h1):(1'h1)])) <<< reg193[(4'he):(4'ha)]);
            end
          for (forvar195 = (1'h0); (forvar195 < (1'h1)); forvar195 = (forvar195 + (1'h1)))
            begin
              reg196 = reg184[(3'h4):(3'h4)];
              reg197 = forvar192;
              reg198 <= wire169[(4'h8):(3'h6)];
              reg199 <= $signed(($unsigned(forvar192) ~^ wire166));
            end
          reg200 <= $signed($signed(wire186[(4'hb):(4'ha)]));
        end
      reg201 <= reg181;
    end
  assign wire202 = wire187;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module242
#(parameter param314 = (8'hac), 
parameter param315 = {{(-param314)}})
(y, clk, wire246, wire245, wire244, wire243);
  output wire [(32'h334):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire246;
  input wire signed [(5'h10):(1'h0)] wire245;
  input wire signed [(4'h8):(1'h0)] wire244;
  input wire signed [(4'hf):(1'h0)] wire243;
  wire [(4'hc):(1'h0)] wire299;
  wire signed [(5'h14):(1'h0)] wire298;
  wire [(5'h10):(1'h0)] wire297;
  wire signed [(3'h4):(1'h0)] wire296;
  wire signed [(4'hd):(1'h0)] wire295;
  wire [(5'h12):(1'h0)] wire294;
  wire signed [(5'h12):(1'h0)] wire293;
  wire signed [(5'h13):(1'h0)] wire252;
  wire signed [(4'hf):(1'h0)] wire251;
  wire [(4'h8):(1'h0)] wire249;
  wire [(3'h6):(1'h0)] wire248;
  wire signed [(3'h4):(1'h0)] wire247;
  reg [(4'h8):(1'h0)] reg313 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg312 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg311 = (1'h0);
  reg [(5'h15):(1'h0)] reg306 = (1'h0);
  reg [(5'h13):(1'h0)] reg305 = (1'h0);
  reg [(4'hc):(1'h0)] reg304 = (1'h0);
  reg [(4'hc):(1'h0)] reg302 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg301 = (1'h0);
  reg [(4'hd):(1'h0)] reg292 = (1'h0);
  reg [(4'ha):(1'h0)] reg290 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg289 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg288 = (1'h0);
  reg [(4'h8):(1'h0)] reg286 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg283 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg282 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg281 = (1'h0);
  reg signed [(4'he):(1'h0)] reg277 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg276 = (1'h0);
  reg [(4'hd):(1'h0)] reg275 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg269 = (1'h0);
  reg [(3'h7):(1'h0)] reg268 = (1'h0);
  reg [(2'h3):(1'h0)] reg267 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg266 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg262 = (1'h0);
  reg [(5'h10):(1'h0)] reg261 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg260 = (1'h0);
  reg [(3'h7):(1'h0)] reg256 = (1'h0);
  reg [(4'hb):(1'h0)] reg250 = (1'h0);
  reg [(4'hf):(1'h0)] reg310 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg309 = (1'h0);
  reg [(2'h3):(1'h0)] forvar308 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg307 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar303 = (1'h0);
  reg [(4'ha):(1'h0)] forvar300 = (1'h0);
  reg [(5'h15):(1'h0)] reg291 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar287 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg285 = (1'h0);
  reg [(4'hd):(1'h0)] forvar284 = (1'h0);
  reg [(4'hf):(1'h0)] reg280 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar279 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar278 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar274 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar273 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg272 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar271 = (1'h0);
  reg [(3'h7):(1'h0)] forvar270 = (1'h0);
  reg [(5'h12):(1'h0)] reg265 = (1'h0);
  reg [(4'hd):(1'h0)] forvar264 = (1'h0);
  reg [(4'hd):(1'h0)] forvar263 = (1'h0);
  reg [(5'h10):(1'h0)] reg259 = (1'h0);
  reg [(5'h14):(1'h0)] reg258 = (1'h0);
  reg [(4'h8):(1'h0)] reg257 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar255 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg254 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar253 = (1'h0);
  assign y = {wire299,
                 wire298,
                 wire297,
                 wire296,
                 wire295,
                 wire294,
                 wire293,
                 wire252,
                 wire251,
                 wire249,
                 wire248,
                 wire247,
                 reg313,
                 reg312,
                 reg311,
                 reg306,
                 reg305,
                 reg304,
                 reg302,
                 reg301,
                 reg292,
                 reg290,
                 reg289,
                 reg288,
                 reg286,
                 reg283,
                 reg282,
                 reg281,
                 reg277,
                 reg276,
                 reg275,
                 reg269,
                 reg268,
                 reg267,
                 reg266,
                 reg262,
                 reg261,
                 reg260,
                 reg256,
                 reg250,
                 reg310,
                 reg309,
                 forvar308,
                 reg307,
                 forvar303,
                 forvar300,
                 reg291,
                 forvar287,
                 reg285,
                 forvar284,
                 reg280,
                 forvar279,
                 forvar278,
                 forvar274,
                 forvar273,
                 reg272,
                 forvar271,
                 forvar270,
                 reg265,
                 forvar264,
                 forvar263,
                 reg259,
                 reg258,
                 reg257,
                 forvar255,
                 reg254,
                 forvar253,
                 (1'h0)};
  assign wire247 = $signed((wire244[(3'h6):(2'h2)] >= wire245));
  assign wire248 = (~|(((~^$signed((8'ha4))) | (wire243[(3'h5):(1'h1)] & $unsigned(wire246))) <= (^~($unsigned(wire243) >>> (wire243 << wire243)))));
  assign wire249 = wire248[(2'h2):(1'h1)];
  always
    @(posedge clk) begin
      reg250 <= $signed((+wire249[(1'h1):(1'h1)]));
    end
  assign wire251 = $unsigned(wire244);
  assign wire252 = {((((-(8'ha0)) | $unsigned(reg250)) - wire248) ?
                           (wire247[(1'h1):(1'h1)] ?
                               $unsigned(wire249[(3'h7):(1'h0)]) : $unsigned({wire248,
                                   wire246})) : (+wire249)),
                       ($unsigned((^~wire246[(1'h1):(1'h1)])) ?
                           $unsigned($unsigned((wire244 >= wire245))) : {(+(wire243 ?
                                   wire245 : reg250)),
                               $unsigned($signed(wire248))})};
  always
    @(posedge clk) begin
      for (forvar253 = (1'h0); (forvar253 < (2'h2)); forvar253 = (forvar253 + (1'h1)))
        begin
          reg254 = wire244;
          for (forvar255 = (1'h0); (forvar255 < (2'h3)); forvar255 = (forvar255 + (1'h1)))
            begin
              reg256 <= wire247[(3'h4):(2'h3)];
              reg257 = {$unsigned(wire247[(2'h3):(1'h0)]), wire251};
              reg258 = (wire252[(2'h2):(1'h0)] ?
                  wire251 : $signed((wire248 ? wire244 : {reg257})));
              reg259 = (~^$signed(((wire244 ?
                  $signed((8'hb1)) : $signed(reg256)) ^~ (forvar255 ?
                  {wire251} : wire248[(2'h3):(2'h2)]))));
              reg260 <= (-$signed((-{$unsigned(wire244)})));
            end
          reg261 <= {(|($signed(wire244) ?
                  $unsigned({forvar255, wire248}) : (!$unsigned((8'h9c)))))};
          reg262 <= ((wire252 == reg254[(3'h4):(1'h0)]) <<< {wire246[(1'h0):(1'h0)]});
        end
      for (forvar263 = (1'h0); (forvar263 < (2'h2)); forvar263 = (forvar263 + (1'h1)))
        begin
          for (forvar264 = (1'h0); (forvar264 < (2'h3)); forvar264 = (forvar264 + (1'h1)))
            begin
              reg265 = $unsigned((-{forvar253[(3'h5):(1'h0)],
                  (&(wire248 ? wire252 : wire247))}));
              reg266 <= (^reg262);
              reg267 <= (-((~forvar263) ^ $signed(reg262[(4'hd):(2'h2)])));
              reg268 <= $unsigned(($unsigned($unsigned(((7'h44) | wire247))) >>> wire249[(1'h0):(1'h0)]));
            end
          reg269 <= ({{((wire243 <= wire245) ?
                          $unsigned((8'hac)) : (+forvar253))},
                  ({$unsigned(wire244)} ?
                      $signed(reg257[(3'h6):(2'h3)]) : ((wire249 ?
                              wire251 : forvar264) ?
                          (!wire251) : forvar255))} ?
              $signed((^$signed((reg261 >> (8'ha8))))) : $unsigned(((^wire243) && reg254)));
        end
      for (forvar270 = (1'h0); (forvar270 < (3'h4)); forvar270 = (forvar270 + (1'h1)))
        begin
          for (forvar271 = (1'h0); (forvar271 < (3'h4)); forvar271 = (forvar271 + (1'h1)))
            begin
              reg272 = reg259;
            end
        end
      for (forvar273 = (1'h0); (forvar273 < (3'h4)); forvar273 = (forvar273 + (1'h1)))
        begin
          for (forvar274 = (1'h0); (forvar274 < (2'h3)); forvar274 = (forvar274 + (1'h1)))
            begin
              reg275 <= wire246;
              reg276 <= $unsigned((^(forvar264[(1'h1):(1'h1)] || ($signed(forvar263) ?
                  reg262 : $signed(reg262)))));
              reg277 <= (|(~&({reg276[(3'h4):(1'h1)], reg267} ?
                  (8'hb7) : ($signed(reg262) ?
                      (reg254 >= wire246) : ((7'h42) ? reg257 : wire247)))));
            end
        end
    end
  always
    @(posedge clk) begin
      for (forvar278 = (1'h0); (forvar278 < (3'h4)); forvar278 = (forvar278 + (1'h1)))
        begin
          for (forvar279 = (1'h0); (forvar279 < (1'h0)); forvar279 = (forvar279 + (1'h1)))
            begin
              reg280 = $signed(wire251);
              reg281 <= {reg280[(1'h1):(1'h0)]};
              reg282 <= ({wire244,
                  (&((~wire244) ?
                      ((8'hae) ? forvar278 : (8'hbe)) : {wire249,
                          reg281}))} >>> $signed($unsigned($unsigned((reg277 << reg260)))));
            end
          reg283 <= ($signed({forvar279}) ?
              {(8'ha3),
                  {(reg276 ? (^~wire243) : reg266),
                      $signed((wire246 ? reg269 : reg277))}} : forvar278);
          for (forvar284 = (1'h0); (forvar284 < (1'h0)); forvar284 = (forvar284 + (1'h1)))
            begin
              reg285 = ($signed((reg266[(2'h2):(1'h0)] != (wire249[(2'h3):(2'h3)] ~^ (wire247 ?
                  wire244 : wire246)))) << $signed((^reg261[(2'h3):(1'h0)])));
              reg286 <= (~|$unsigned(({$signed(reg262),
                  reg280[(3'h5):(2'h2)]} <= reg267)));
            end
          for (forvar287 = (1'h0); (forvar287 < (2'h3)); forvar287 = (forvar287 + (1'h1)))
            begin
              reg288 <= {forvar284, (8'hb8)};
              reg289 <= (^~(($signed((reg261 & wire245)) | (&reg268[(1'h1):(1'h1)])) ?
                  {$signed((~^wire252)),
                      reg261[(5'h10):(4'hc)]} : reg275[(3'h7):(1'h1)]));
              reg290 <= (~^reg256[(2'h3):(2'h2)]);
              reg291 = (!{(|{(~reg275)}), $signed(reg288)});
            end
        end
    end
  always
    @(posedge clk) begin
      reg292 <= (reg289 && $unsigned($signed(reg256[(1'h0):(1'h0)])));
    end
  assign wire293 = ((reg289 >>> reg250[(3'h6):(3'h4)]) >> {reg288[(1'h1):(1'h1)],
                       $unsigned((^~reg262[(3'h6):(1'h1)]))});
  assign wire294 = reg267[(1'h0):(1'h0)];
  assign wire295 = {$unsigned({reg288})};
  assign wire296 = ($signed((($signed(reg286) | $signed((8'ha9))) ?
                           ((reg275 ?
                               reg283 : (7'h42)) < $signed(reg256)) : (((8'haa) ?
                               wire243 : reg289) >> $signed(reg262)))) ?
                       reg290[(3'h7):(1'h0)] : ((|$signed($signed(reg276))) ?
                           $signed($signed($signed(wire294))) : {$unsigned((+reg276)),
                               ($signed(reg282) && reg288[(1'h0):(1'h0)])}));
  assign wire297 = $signed($signed((((reg286 ? reg262 : wire252) >= (-reg268)) ?
                       $signed({(8'hba)}) : ((wire295 ?
                           reg262 : wire249) | (wire247 ? reg256 : reg282)))));
  assign wire298 = reg262;
  assign wire299 = $signed((((^~{wire295, wire249}) ?
                           (wire298 & (reg269 << wire244)) : (+reg288)) ?
                       ($signed((reg292 ? reg288 : reg281)) ?
                           ((reg281 && reg260) ?
                               wire294 : ((8'h9c) || wire245)) : ((reg288 ?
                                   reg260 : reg261) ?
                               (~&reg260) : wire294)) : (&(&(wire296 ?
                           reg269 : reg290)))));
  always
    @(posedge clk) begin
      for (forvar300 = (1'h0); (forvar300 < (3'h4)); forvar300 = (forvar300 + (1'h1)))
        begin
          reg301 <= $unsigned({(~|((~reg266) + (&reg268)))});
          reg302 <= forvar300;
          for (forvar303 = (1'h0); (forvar303 < (2'h2)); forvar303 = (forvar303 + (1'h1)))
            begin
              reg304 <= reg302;
              reg305 <= (8'ha4);
              reg306 <= $signed($signed(({$signed(reg282)} ?
                  ((reg260 ? wire244 : wire252) ^~ (wire243 ?
                      wire246 : reg269)) : (8'hb2))));
            end
          reg307 = (~^(wire294 == ((8'hb5) + (7'h40))));
          for (forvar308 = (1'h0); (forvar308 < (1'h1)); forvar308 = (forvar308 + (1'h1)))
            begin
              reg309 = $signed(({$signed((wire248 * reg268))} || reg269[(4'he):(4'hb)]));
              reg310 = wire294;
              reg311 <= wire252[(3'h5):(2'h3)];
              reg312 <= reg266;
            end
        end
      reg313 <= {reg260, wire247};
    end
endmodule