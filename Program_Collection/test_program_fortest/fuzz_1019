(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h3fa):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hf):(1'h0)] wire3;
  input wire [(4'hb):(1'h0)] wire2;
  input wire signed [(5'h13):(1'h0)] wire1;
  input wire signed [(5'h13):(1'h0)] wire0;
  wire signed [(4'hd):(1'h0)] wire55;
  wire signed [(5'h10):(1'h0)] wire54;
  wire [(4'h8):(1'h0)] wire32;
  wire signed [(5'h13):(1'h0)] wire7;
  wire [(5'h11):(1'h0)] wire6;
  wire signed [(3'h5):(1'h0)] wire5;
  wire signed [(4'hb):(1'h0)] wire4;
  reg [(3'h6):(1'h0)] reg86 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg84 = (1'h0);
  reg [(3'h7):(1'h0)] reg82 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg81 = (1'h0);
  reg [(3'h7):(1'h0)] reg75 = (1'h0);
  reg [(4'h9):(1'h0)] reg77 = (1'h0);
  reg [(5'h13):(1'h0)] reg76 = (1'h0);
  reg [(2'h2):(1'h0)] reg74 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg71 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg68 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg67 = (1'h0);
  reg [(3'h7):(1'h0)] reg66 = (1'h0);
  reg [(2'h3):(1'h0)] reg64 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg61 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg59 = (1'h0);
  reg [(5'h12):(1'h0)] reg56 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg53 = (1'h0);
  reg [(5'h15):(1'h0)] reg51 = (1'h0);
  reg [(4'h9):(1'h0)] reg47 = (1'h0);
  reg [(5'h14):(1'h0)] reg44 = (1'h0);
  reg [(4'hc):(1'h0)] reg43 = (1'h0);
  reg [(4'hd):(1'h0)] reg40 = (1'h0);
  reg [(4'hb):(1'h0)] reg39 = (1'h0);
  reg [(4'hd):(1'h0)] reg38 = (1'h0);
  reg [(4'h8):(1'h0)] reg36 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg31 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg29 = (1'h0);
  reg [(4'h8):(1'h0)] reg27 = (1'h0);
  reg [(2'h3):(1'h0)] reg26 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg25 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg22 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg21 = (1'h0);
  reg [(5'h13):(1'h0)] reg16 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg14 = (1'h0);
  reg [(5'h11):(1'h0)] reg11 = (1'h0);
  reg [(2'h2):(1'h0)] reg8 = (1'h0);
  reg [(2'h2):(1'h0)] reg85 = (1'h0);
  reg [(5'h14):(1'h0)] forvar83 = (1'h0);
  reg [(5'h15):(1'h0)] reg80 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg79 = (1'h0);
  reg [(4'hf):(1'h0)] reg78 = (1'h0);
  reg [(4'h9):(1'h0)] forvar77 = (1'h0);
  reg [(5'h12):(1'h0)] forvar75 = (1'h0);
  reg [(5'h12):(1'h0)] reg73 = (1'h0);
  reg [(4'hd):(1'h0)] reg72 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg70 = (1'h0);
  reg [(4'hf):(1'h0)] forvar69 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg65 = (1'h0);
  reg [(3'h5):(1'h0)] forvar63 = (1'h0);
  reg [(5'h12):(1'h0)] reg62 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar60 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar58 = (1'h0);
  reg [(4'hd):(1'h0)] forvar57 = (1'h0);
  reg [(3'h4):(1'h0)] reg52 = (1'h0);
  reg [(4'hb):(1'h0)] reg50 = (1'h0);
  reg [(3'h6):(1'h0)] reg49 = (1'h0);
  reg [(5'h12):(1'h0)] forvar48 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg46 = (1'h0);
  reg signed [(4'he):(1'h0)] reg45 = (1'h0);
  reg [(2'h3):(1'h0)] forvar42 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg41 = (1'h0);
  reg [(4'h9):(1'h0)] reg37 = (1'h0);
  reg [(5'h13):(1'h0)] forvar35 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar34 = (1'h0);
  reg [(4'he):(1'h0)] reg33 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar30 = (1'h0);
  reg [(4'hd):(1'h0)] forvar28 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg24 = (1'h0);
  reg [(4'hf):(1'h0)] forvar23 = (1'h0);
  reg [(3'h7):(1'h0)] reg20 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar19 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar18 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg17 = (1'h0);
  reg [(5'h14):(1'h0)] forvar15 = (1'h0);
  reg [(2'h2):(1'h0)] reg13 = (1'h0);
  reg [(5'h10):(1'h0)] forvar12 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar10 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar9 = (1'h0);
  assign y = {wire55,
                 wire54,
                 wire32,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 reg86,
                 reg84,
                 reg82,
                 reg81,
                 reg75,
                 reg77,
                 reg76,
                 reg74,
                 reg71,
                 reg68,
                 reg67,
                 reg66,
                 reg64,
                 reg61,
                 reg59,
                 reg56,
                 reg53,
                 reg51,
                 reg47,
                 reg44,
                 reg43,
                 reg40,
                 reg39,
                 reg38,
                 reg36,
                 reg31,
                 reg29,
                 reg27,
                 reg26,
                 reg25,
                 reg22,
                 reg21,
                 reg16,
                 reg14,
                 reg11,
                 reg8,
                 reg85,
                 forvar83,
                 reg80,
                 reg79,
                 reg78,
                 forvar77,
                 forvar75,
                 reg73,
                 reg72,
                 reg70,
                 forvar69,
                 reg65,
                 forvar63,
                 reg62,
                 forvar60,
                 forvar58,
                 forvar57,
                 reg52,
                 reg50,
                 reg49,
                 forvar48,
                 reg46,
                 reg45,
                 forvar42,
                 reg41,
                 reg37,
                 forvar35,
                 forvar34,
                 reg33,
                 forvar30,
                 forvar28,
                 reg24,
                 forvar23,
                 reg20,
                 forvar19,
                 forvar18,
                 reg17,
                 forvar15,
                 reg13,
                 forvar12,
                 forvar10,
                 forvar9,
                 (1'h0)};
  assign wire4 = (~^$signed(wire3[(4'h9):(3'h6)]));
  assign wire5 = ((wire0 ^~ wire4) >> (($unsigned(((8'hae) ? wire1 : wire2)) ?
                         $unsigned(wire3) : ((~|wire0) == {wire0})) ?
                     wire1 : $signed($signed(wire1))));
  assign wire6 = (&wire1);
  assign wire7 = (^~wire6[(5'h11):(2'h3)]);
  always
    @(posedge clk) begin
      if (wire7)
        begin
          reg8 <= (&{($signed((wire5 <= wire2)) ?
                  {wire1} : $unsigned(wire6[(5'h10):(4'hd)])),
              (wire0[(3'h5):(3'h5)] ^ wire1[(4'h9):(3'h4)])});
        end
      else
        begin
          reg8 <= {(wire5[(2'h2):(1'h1)] ^ $signed((wire7 * $signed(wire5))))};
        end
      for (forvar9 = (1'h0); (forvar9 < (2'h2)); forvar9 = (forvar9 + (1'h1)))
        begin
          for (forvar10 = (1'h0); (forvar10 < (2'h2)); forvar10 = (forvar10 + (1'h1)))
            begin
              reg11 <= (&{(~^wire5)});
            end
          for (forvar12 = (1'h0); (forvar12 < (2'h3)); forvar12 = (forvar12 + (1'h1)))
            begin
              reg13 = forvar12[(4'he):(3'h7)];
              reg14 <= ({$unsigned((forvar10[(2'h2):(1'h0)] <<< (forvar12 ?
                      forvar9 : (8'had)))),
                  $unsigned(((~^reg13) ?
                      wire6[(5'h11):(4'hb)] : (reg11 ?
                          reg8 : forvar9)))} | $signed(wire7));
            end
          for (forvar15 = (1'h0); (forvar15 < (1'h0)); forvar15 = (forvar15 + (1'h1)))
            begin
              reg16 <= $unsigned(reg13[(2'h2):(1'h1)]);
            end
          reg17 = (wire7[(1'h0):(1'h0)] && (wire0[(4'ha):(4'h8)] ?
              ((~(wire6 ? wire1 : wire1)) ?
                  forvar15[(4'hf):(1'h0)] : reg14[(3'h7):(3'h4)]) : ({(forvar12 >>> (8'hb8))} ^~ ($unsigned(forvar9) ?
                  $unsigned(wire5) : {(8'haf), forvar15}))));
        end
      for (forvar18 = (1'h0); (forvar18 < (1'h1)); forvar18 = (forvar18 + (1'h1)))
        begin
          for (forvar19 = (1'h0); (forvar19 < (1'h0)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 = wire7;
              reg21 <= reg16;
              reg22 <= (reg13 <= wire1);
            end
          for (forvar23 = (1'h0); (forvar23 < (1'h1)); forvar23 = (forvar23 + (1'h1)))
            begin
              reg24 = forvar12;
              reg25 <= $signed(wire5[(3'h5):(2'h3)]);
              reg26 <= ($signed((($signed(reg13) || wire5[(3'h5):(2'h3)]) ?
                  (~^forvar23[(1'h1):(1'h1)]) : ($signed(forvar12) ?
                      $signed(reg22) : {wire3}))) && reg17[(2'h2):(1'h0)]);
              reg27 <= $unsigned($unsigned(forvar10[(2'h2):(2'h2)]));
            end
          for (forvar28 = (1'h0); (forvar28 < (1'h1)); forvar28 = (forvar28 + (1'h1)))
            begin
              reg29 <= (reg16[(4'h9):(3'h4)] >>> (+($signed($signed(forvar23)) ?
                  reg13[(2'h2):(1'h0)] : $unsigned(wire0))));
            end
          for (forvar30 = (1'h0); (forvar30 < (1'h0)); forvar30 = (forvar30 + (1'h1)))
            begin
              reg31 <= {forvar30,
                  (reg25[(4'h9):(4'h8)] | (!({reg20} ^~ reg27)))};
            end
        end
    end
  assign wire32 = ($unsigned((8'hbe)) > reg22[(1'h1):(1'h0)]);
  always
    @(posedge clk) begin
      reg33 = ($signed(reg11[(4'hb):(1'h1)]) < ((reg11 ?
          $unsigned((reg26 ? reg26 : wire32)) : (((8'ha1) ^ (7'h43)) ~^ {reg25,
              (8'hbe)})) < (((reg26 ? reg11 : (8'ha3)) >>> $unsigned(wire4)) ?
          $signed($unsigned(wire32)) : (+reg14))));
      for (forvar34 = (1'h0); (forvar34 < (1'h1)); forvar34 = (forvar34 + (1'h1)))
        begin
          for (forvar35 = (1'h0); (forvar35 < (1'h0)); forvar35 = (forvar35 + (1'h1)))
            begin
              reg36 <= wire4;
              reg37 = (^~wire6);
              reg38 <= $signed(wire32[(2'h2):(1'h0)]);
              reg39 <= forvar35[(1'h1):(1'h1)];
            end
          reg40 <= {(-$signed({$signed(reg14)}))};
          reg41 = {(+$unsigned((8'hbd)))};
          for (forvar42 = (1'h0); (forvar42 < (1'h0)); forvar42 = (forvar42 + (1'h1)))
            begin
              reg43 <= ($signed($signed(wire32)) ?
                  $signed($signed((wire5 ?
                      reg33[(1'h1):(1'h0)] : (!(8'hbf))))) : ($signed((~&(-(8'hb8)))) >> $unsigned(reg8)));
              reg44 <= ((({reg22, (^reg37)} ?
                          {reg38, $unsigned(reg38)} : ($signed(reg38) ?
                              reg21 : (8'hae))) ?
                      ((reg21 || forvar42[(2'h2):(2'h2)]) ?
                          (reg41[(3'h6):(2'h3)] && (reg40 || wire1)) : reg29[(3'h7):(1'h1)]) : reg26[(2'h3):(1'h0)]) ?
                  {wire3[(4'he):(3'h7)],
                      (forvar35[(4'hd):(4'hd)] ^~ (!(~^reg26)))} : (($signed(((8'hbe) && (8'ha6))) ?
                          forvar34[(3'h6):(3'h4)] : reg39) ?
                      (|wire6[(4'hc):(4'hb)]) : (((+reg16) ?
                          (^reg26) : $signed(reg39)) != (~^(8'hbc)))));
              reg45 = (forvar42 || $signed($unsigned($signed($signed(reg37)))));
              reg46 = forvar42[(1'h1):(1'h1)];
              reg47 <= ((($unsigned((|wire2)) == $signed($unsigned(reg31))) && $unsigned($signed((reg14 && reg39)))) ?
                  ($unsigned(wire2[(2'h2):(2'h2)]) && (&reg33[(2'h3):(2'h2)])) : {wire1[(5'h12):(4'hf)],
                      {$signed((wire4 ? wire2 : reg45))}});
            end
          for (forvar48 = (1'h0); (forvar48 < (1'h1)); forvar48 = (forvar48 + (1'h1)))
            begin
              reg49 = ((~|(reg16[(1'h0):(1'h0)] ^~ forvar35)) ~^ $signed($unsigned({(!wire3)})));
              reg50 = ({$signed(((^(8'haa)) < reg49[(3'h5):(2'h3)]))} ?
                  ((&reg44) || reg25[(3'h5):(3'h4)]) : ($signed(wire7[(4'he):(4'hb)]) ?
                      $signed(reg38) : $signed($unsigned($signed(reg47)))));
              reg51 <= reg36[(2'h3):(2'h2)];
              reg52 = $signed(reg36[(3'h7):(2'h3)]);
              reg53 <= $unsigned(((~|((wire32 + reg16) ?
                      (&wire2) : (!(8'hbc)))) ?
                  (-((reg45 ? (8'ha5) : wire1) ?
                      (^reg16) : wire1[(1'h1):(1'h1)])) : (reg27 ?
                      $signed(reg29) : (reg43 ?
                          $unsigned((8'ha4)) : reg11[(4'h8):(1'h0)]))));
            end
        end
    end
  assign wire54 = reg21;
  assign wire55 = ((~&wire6) ~^ $signed($unsigned({(!wire1), (7'h41)})));
  always
    @(posedge clk) begin
      reg56 <= (~$unsigned(reg14[(3'h5):(3'h4)]));
      for (forvar57 = (1'h0); (forvar57 < (1'h1)); forvar57 = (forvar57 + (1'h1)))
        begin
          for (forvar58 = (1'h0); (forvar58 < (2'h3)); forvar58 = (forvar58 + (1'h1)))
            begin
              reg59 <= (reg38[(4'hd):(4'h8)] >= wire32);
            end
          for (forvar60 = (1'h0); (forvar60 < (1'h1)); forvar60 = (forvar60 + (1'h1)))
            begin
              reg61 <= ((+$signed(reg8)) << reg51);
              reg62 = $unsigned(reg21);
            end
          for (forvar63 = (1'h0); (forvar63 < (1'h1)); forvar63 = (forvar63 + (1'h1)))
            begin
              reg64 <= (&$signed({((wire3 ? reg44 : (7'h44)) ?
                      $signed(reg31) : (wire2 ^ reg62))}));
              reg65 = $unsigned((~(+reg27[(4'h8):(3'h4)])));
              reg66 <= (reg8[(1'h0):(1'h0)] ?
                  (~&reg27) : $signed({$unsigned(wire5),
                      $signed($unsigned((8'ha7)))}));
              reg67 <= ({$signed(reg47[(4'h8):(3'h7)])} ?
                  wire55[(3'h6):(2'h3)] : wire55[(1'h1):(1'h1)]);
              reg68 <= (((8'hae) ?
                  {$signed($signed(reg40)), reg39[(4'ha):(4'h9)]} : (wire0 ?
                      reg16 : wire1)) & $unsigned($unsigned($unsigned((reg65 ?
                  (7'h40) : wire5)))));
            end
        end
      if (reg22[(4'hd):(4'ha)])
        begin
          for (forvar69 = (1'h0); (forvar69 < (2'h2)); forvar69 = (forvar69 + (1'h1)))
            begin
              reg70 = (reg56 ? (!$signed((~^{reg53}))) : wire1[(5'h13):(4'hf)]);
              reg71 <= forvar58[(3'h5):(2'h2)];
              reg72 = ((~&wire32[(3'h7):(3'h6)]) * wire2[(4'ha):(1'h0)]);
              reg73 = forvar58[(4'h8):(2'h3)];
              reg74 <= {$signed($signed($unsigned($unsigned((8'ha1)))))};
            end
          for (forvar75 = (1'h0); (forvar75 < (1'h0)); forvar75 = (forvar75 + (1'h1)))
            begin
              reg76 <= $signed((~^(^$unsigned((^~reg22)))));
            end
          reg77 <= $unsigned((&({$signed(wire7)} ~^ ((reg66 ? reg59 : (7'h43)) ?
              $signed((8'ha8)) : {reg36}))));
        end
      else
        begin
          for (forvar69 = (1'h0); (forvar69 < (1'h1)); forvar69 = (forvar69 + (1'h1)))
            begin
              reg71 <= $unsigned((($signed(reg56[(4'h8):(3'h4)]) ?
                  ((|reg51) ?
                      reg47[(4'h9):(3'h5)] : (~|(8'hae))) : reg8) | (((reg72 > (8'hbf)) | (forvar75 ?
                      reg73 : reg53)) ?
                  wire7 : (&$signed(reg38)))));
              reg74 <= {($signed((~&$signed(reg25))) < $signed($unsigned((~|wire5)))),
                  {({$signed(forvar63)} <= forvar57)}};
            end
          reg75 <= $unsigned($unsigned($unsigned((((8'hb9) ?
              reg31 : reg67) + reg73[(2'h3):(2'h2)]))));
          reg76 <= ((-(((~|reg59) >= $unsigned(reg36)) <= ((reg70 < wire54) ?
              (~^(7'h41)) : reg61))) ^ (8'hbb));
          for (forvar77 = (1'h0); (forvar77 < (3'h4)); forvar77 = (forvar77 + (1'h1)))
            begin
              reg78 = ((+$unsigned(wire6)) ? reg59 : (8'haf));
              reg79 = $unsigned($unsigned((~^wire5)));
              reg80 = reg70[(3'h6):(3'h5)];
              reg81 <= $signed($unsigned((({reg70} ?
                      reg66[(1'h1):(1'h0)] : $signed((8'haf))) ?
                  $signed(wire4[(3'h4):(2'h2)]) : (~|reg43))));
              reg82 <= wire6;
            end
          for (forvar83 = (1'h0); (forvar83 < (1'h1)); forvar83 = (forvar83 + (1'h1)))
            begin
              reg84 <= (wire55 ?
                  (~|$signed($unsigned(reg82[(2'h3):(1'h0)]))) : wire54[(1'h0):(1'h0)]);
              reg85 = ({reg75[(1'h0):(1'h0)], reg72[(4'h9):(3'h5)]} ?
                  wire32 : (reg36 ? {$signed(reg61)} : $unsigned(reg22)));
              reg86 <= ($unsigned({$signed(reg43[(2'h3):(1'h1)]),
                  {$unsigned(reg47)}}) <= $unsigned({$unsigned(reg84),
                  $signed($unsigned(reg8))}));
            end
        end
    end
endmodule