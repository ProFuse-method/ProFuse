(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h68):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire [(3'h5):(1'h0)] wire1;
  input wire signed [(2'h2):(1'h0)] wire0;
  wire [(4'hb):(1'h0)] wire19;
  wire signed [(4'h8):(1'h0)] wire9;
  wire signed [(3'h6):(1'h0)] wire8;
  reg [(2'h2):(1'h0)] reg18 = (1'h0);
  reg [(3'h4):(1'h0)] reg17 = (1'h0);
  reg [(2'h3):(1'h0)] reg16 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg15 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg14 = (1'h0);
  reg [(3'h7):(1'h0)] reg13 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg12 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg11 = (1'h0);
  reg [(3'h7):(1'h0)] reg10 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg6 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg5 = (1'h0);
  reg [(4'ha):(1'h0)] reg4 = (1'h0);
  assign y = {wire19,
                 wire9,
                 wire8,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (($unsigned((~{wire0})) <= wire3[(3'h6):(2'h2)]))
        begin
          reg4 <= (^~wire1[(3'h4):(2'h3)]);
        end
      else
        begin
          if ($unsigned(wire3))
            begin
              reg4 <= (~^{$signed((wire3 >> wire0))});
              reg5 <= $signed((((~^wire3) | (wire3 ^ (8'hb0))) ^~ (((8'ha0) & wire3) & $signed(wire1))));
            end
          else
            begin
              reg4 <= ((!($signed(wire0) < (reg5 ? wire0 : (8'h9e)))) ?
                  wire3 : reg4[(4'h9):(1'h0)]);
            end
          reg6 <= wire2;
          reg7 <= $signed((^{reg4[(1'h0):(1'h0)]}));
        end
    end
  assign wire8 = ((8'hac) == (|(^reg5)));
  assign wire9 = (reg5[(1'h0):(1'h0)] ?
                     $signed($signed((reg5 <= wire3))) : $unsigned(wire0[(2'h2):(1'h0)]));
  always
    @(posedge clk) begin
      reg10 <= ({(reg7[(3'h7):(2'h2)] ^~ $unsigned(reg4))} >= $signed(($unsigned(wire2) ^ reg7[(3'h7):(3'h6)])));
      reg11 <= {$signed(((reg10 > reg10) <= (~&(8'ha4))))};
      if ($unsigned(((wire1[(2'h2):(2'h2)] & $unsigned(reg10)) << {(wire2 ?
              wire8 : reg5)})))
        begin
          reg12 <= {(reg11[(1'h1):(1'h0)] ?
                  ((8'ha5) ? $signed(wire1) : (wire1 < wire2)) : {reg10})};
          reg13 <= (8'ha3);
          reg14 <= (8'haf);
        end
      else
        begin
          if (wire3[(3'h6):(1'h1)])
            begin
              reg12 <= (((reg10[(1'h1):(1'h0)] * $signed(reg10)) >>> (~^wire0[(1'h1):(1'h1)])) == reg4);
              reg13 <= (+reg13);
              reg14 <= $signed(reg6);
            end
          else
            begin
              reg12 <= (wire9 && wire1[(2'h3):(2'h3)]);
              reg13 <= reg6;
              reg14 <= (~($unsigned($signed(wire8)) == reg12));
            end
          reg15 <= (+wire2[(3'h4):(2'h3)]);
          if (((((~reg15) & (wire1 ? reg13 : reg10)) ?
                  {((8'ha3) ? wire2 : reg7)} : ($unsigned(reg13) ?
                      $unsigned(wire1) : $signed((8'ha8)))) ?
              reg4 : (((-reg10) ? reg5 : (wire8 - reg6)) && reg14)))
            begin
              reg16 <= $signed(wire0[(2'h2):(1'h0)]);
              reg17 <= reg7;
            end
          else
            begin
              reg16 <= ((^{(+reg11)}) - (~&(8'ha1)));
              reg17 <= (+$unsigned($unsigned($signed(reg17))));
              reg18 <= (wire9 && wire9);
            end
        end
    end
  assign wire19 = (!((^~(reg16 ^~ reg4)) ?
                      wire8[(2'h3):(1'h0)] : reg11[(3'h5):(2'h3)]));
endmodule