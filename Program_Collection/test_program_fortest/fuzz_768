(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h22):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire3;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire [(4'h9):(1'h0)] wire0;
  wire signed [(4'h8):(1'h0)] wire33;
  wire signed [(3'h4):(1'h0)] wire32;
  wire [(3'h6):(1'h0)] wire31;
  wire signed [(4'ha):(1'h0)] wire29;
  wire [(3'h5):(1'h0)] wire4;
  assign y = {wire33, wire32, wire31, wire29, wire4, (1'h0)};
  assign wire4 = wire2;
  module5 #() modinst30 (.wire6(wire0), .wire9(wire2), .wire8(wire3), .y(wire29), .wire7(wire1), .clk(clk));
  assign wire31 = ({(wire2[(1'h1):(1'h0)] > wire1)} ?
                      {wire0[(2'h2):(2'h2)]} : $signed(($unsigned(wire0) ?
                          $unsigned(wire3) : $signed(wire1))));
  assign wire32 = wire4;
  assign wire33 = wire2[(1'h1):(1'h1)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module5  (y, clk, wire9, wire8, wire7, wire6);
  output wire [(32'h1b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire9;
  input wire signed [(4'h8):(1'h0)] wire8;
  input wire [(4'hb):(1'h0)] wire7;
  input wire signed [(4'h9):(1'h0)] wire6;
  wire signed [(3'h7):(1'h0)] wire28;
  wire signed [(4'h9):(1'h0)] wire27;
  wire [(2'h3):(1'h0)] wire26;
  wire signed [(2'h3):(1'h0)] wire25;
  wire [(3'h4):(1'h0)] wire23;
  assign y = {wire28, wire27, wire26, wire25, wire23, (1'h0)};
  module10 #() modinst24 (wire23, clk, wire7, wire9, wire8, wire6);
  assign wire25 = (({(8'ha0)} ? (^~$signed((8'haf))) : (|(+wire23))) ?
                      wire6 : $signed(wire7));
  assign wire26 = (~(8'ha8));
  assign wire27 = (&$signed({(~&wire23)}));
  assign wire28 = $signed((~($unsigned((8'ha9)) <<< wire27)));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10  (y, clk, wire14, wire13, wire12, wire11);
  output wire [(32'h2c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire14;
  input wire [(3'h4):(1'h0)] wire13;
  input wire [(3'h4):(1'h0)] wire12;
  input wire [(4'h9):(1'h0)] wire11;
  wire signed [(2'h3):(1'h0)] wire22;
  wire [(2'h3):(1'h0)] wire21;
  wire signed [(2'h2):(1'h0)] wire20;
  wire [(4'h9):(1'h0)] wire16;
  wire signed [(2'h2):(1'h0)] wire15;
  reg signed [(3'h4):(1'h0)] reg19 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg18 = (1'h0);
  reg [(4'h9):(1'h0)] reg17 = (1'h0);
  assign y = {wire22,
                 wire21,
                 wire20,
                 wire16,
                 wire15,
                 reg19,
                 reg18,
                 reg17,
                 (1'h0)};
  assign wire15 = wire13;
  assign wire16 = (8'hb0);
  always
    @(posedge clk) begin
      reg17 <= wire11;
      if (((&(^~((8'ha6) & wire12))) ?
          (wire11 & $signed($signed(wire15))) : $unsigned((^~wire16[(3'h7):(3'h6)]))))
        begin
          reg18 <= ((wire11 << (^wire15)) ? (8'hb0) : wire12);
        end
      else
        begin
          reg18 <= (($signed(wire16) != wire14[(4'hb):(3'h4)]) ~^ wire14[(2'h3):(2'h2)]);
          reg19 <= (^{((~&wire14) ? $signed(reg18) : $signed(wire16))});
        end
    end
  assign wire20 = ($signed(reg19[(1'h1):(1'h0)]) ?
                      wire11[(1'h1):(1'h0)] : $signed(reg19[(2'h2):(2'h2)]));
  assign wire21 = ((|$unsigned($unsigned(reg19))) ?
                      $unsigned($unsigned((wire16 && wire16))) : (&{{(8'h9e)}}));
  assign wire22 = wire20[(2'h2):(1'h0)];
endmodule