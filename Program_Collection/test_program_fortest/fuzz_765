(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h56):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire3;
  input wire [(4'h8):(1'h0)] wire2;
  input wire [(4'h9):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire signed [(4'h8):(1'h0)] wire27;
  wire signed [(4'h8):(1'h0)] wire26;
  wire [(3'h4):(1'h0)] wire25;
  wire signed [(4'hb):(1'h0)] wire24;
  wire [(3'h6):(1'h0)] wire22;
  wire signed [(4'h9):(1'h0)] wire21;
  wire [(4'h9):(1'h0)] wire20;
  wire signed [(3'h5):(1'h0)] wire18;
  wire signed [(4'ha):(1'h0)] wire5;
  wire signed [(4'h8):(1'h0)] wire4;
  reg signed [(3'h7):(1'h0)] reg23 = (1'h0);
  assign y = {wire27,
                 wire26,
                 wire25,
                 wire24,
                 wire22,
                 wire21,
                 wire20,
                 wire18,
                 wire5,
                 wire4,
                 reg23,
                 (1'h0)};
  assign wire4 = $unsigned((|$signed($signed(wire2))));
  assign wire5 = wire3[(1'h1):(1'h0)];
  module6 #() modinst19 (wire18, clk, wire4, wire3, wire5, wire1);
  assign wire20 = (8'ha0);
  assign wire21 = wire1;
  assign wire22 = $signed({(-$unsigned(wire3))});
  always
    @(posedge clk) begin
      reg23 <= $signed(wire22[(1'h0):(1'h0)]);
    end
  assign wire24 = (reg23 ? $signed(wire20) : {{(wire4 >> wire3)}});
  assign wire25 = reg23[(1'h0):(1'h0)];
  assign wire26 = wire20[(2'h3):(1'h0)];
  assign wire27 = wire3[(1'h0):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module6
#(parameter param17 = ({(((8'ha9) | (8'ha8)) ? ((8'ha6) * (8'hae)) : {(8'ha2)})} & (~&(((8'haa) && (8'hab)) ? (|(8'hae)) : (^~(8'hae))))))
(y, clk, wire10, wire9, wire8, wire7);
  output wire [(32'h30):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire10;
  input wire signed [(4'ha):(1'h0)] wire9;
  input wire [(4'h8):(1'h0)] wire8;
  input wire [(4'h9):(1'h0)] wire7;
  wire [(4'hb):(1'h0)] wire16;
  wire signed [(4'h9):(1'h0)] wire11;
  reg signed [(3'h5):(1'h0)] reg15 = (1'h0);
  reg [(3'h5):(1'h0)] reg14 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg12 = (1'h0);
  assign y = {wire16, wire11, reg15, reg14, reg13, reg12, (1'h0)};
  assign wire11 = ((wire9[(2'h2):(2'h2)] >> $signed({wire7})) ?
                      (~^((wire7 ^~ wire9) ?
                          $signed((8'ha2)) : (wire9 ?
                              wire10 : wire9))) : $unsigned(wire10));
  always
    @(posedge clk) begin
      reg12 <= {(8'ha4)};
      reg13 <= (((~&$signed(wire9)) ?
          $signed((!(8'h9e))) : {{reg12}}) >>> wire9[(1'h1):(1'h0)]);
    end
  always
    @(posedge clk) begin
      reg14 <= (|{wire10[(1'h0):(1'h0)]});
      reg15 <= (reg13[(2'h2):(1'h0)] ?
          ($unsigned(wire8) ^~ reg14[(2'h3):(2'h2)]) : $unsigned($unsigned(reg13)));
    end
  assign wire16 = $signed(wire11[(2'h2):(1'h0)]);
endmodule