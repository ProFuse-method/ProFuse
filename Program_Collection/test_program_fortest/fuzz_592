(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h66):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire3;
  input wire [(3'h7):(1'h0)] wire2;
  input wire [(3'h7):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire signed [(3'h6):(1'h0)] wire66;
  wire signed [(2'h3):(1'h0)] wire65;
  wire [(3'h6):(1'h0)] wire64;
  wire [(4'hb):(1'h0)] wire63;
  wire [(3'h5):(1'h0)] wire62;
  wire signed [(4'ha):(1'h0)] wire57;
  wire [(4'hb):(1'h0)] wire56;
  wire [(3'h7):(1'h0)] wire55;
  wire [(3'h5):(1'h0)] wire54;
  wire signed [(4'hb):(1'h0)] wire52;
  reg [(3'h6):(1'h0)] reg61 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg60 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg59 = (1'h0);
  assign y = {wire66,
                 wire65,
                 wire64,
                 wire63,
                 wire62,
                 wire57,
                 wire56,
                 wire55,
                 wire54,
                 wire52,
                 reg61,
                 reg60,
                 reg59,
                 (1'h0)};
  module4 #() modinst53 (.wire7(wire0), .wire8(wire2), .y(wire52), .wire6(wire1), .clk(clk), .wire5(wire3));
  assign wire54 = {(~((wire2 * wire52) ?
                          (wire2 ? wire3 : wire1) : (wire3 > wire3)))};
  assign wire55 = (($unsigned($signed(wire54)) ?
                      (8'ha5) : {(8'h9c)}) && wire0[(3'h5):(1'h0)]);
  assign wire56 = wire3[(2'h3):(2'h3)];
  module9 #() modinst58 (.wire13(wire0), .wire12(wire54), .wire10(wire52), .wire11(wire56), .clk(clk), .y(wire57));
  always
    @(posedge clk) begin
      reg59 <= wire52[(4'hb):(2'h2)];
    end
  always
    @(posedge clk) begin
      reg60 <= (&(~&((wire3 || wire54) & (!wire1))));
      reg61 <= ((|{$signed(wire54)}) | $unsigned({wire57[(1'h1):(1'h0)]}));
    end
  assign wire62 = (wire57[(4'h8):(3'h4)] ?
                      (wire56 ?
                          ((^(8'haf)) ?
                              (wire52 ? wire54 : wire3) : (wire55 ?
                                  wire0 : reg61)) : wire2) : wire55);
  assign wire63 = (reg61[(3'h4):(3'h4)] ?
                      $signed({((8'haa) >>> wire55)}) : (8'ha4));
  assign wire64 = $signed((wire52 || $signed({(8'h9e)})));
  assign wire65 = ($signed(($unsigned(wire54) <<< (wire0 | wire63))) == (-$unsigned((wire64 <= wire62))));
  assign wire66 = $signed((((~wire1) ? $unsigned(wire62) : $signed(wire1)) ?
                      ($unsigned(wire1) ?
                          ((8'h9f) || wire55) : {wire64}) : ((wire2 ^ reg61) ?
                          {wire56} : reg59[(3'h6):(3'h5)])));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h50):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire8;
  input wire signed [(4'ha):(1'h0)] wire7;
  input wire [(3'h7):(1'h0)] wire6;
  input wire [(3'h5):(1'h0)] wire5;
  wire [(2'h3):(1'h0)] wire51;
  wire [(4'hb):(1'h0)] wire50;
  wire signed [(3'h5):(1'h0)] wire49;
  wire signed [(3'h5):(1'h0)] wire44;
  wire [(2'h3):(1'h0)] wire43;
  wire signed [(3'h4):(1'h0)] wire42;
  wire [(4'hb):(1'h0)] wire40;
  wire [(4'ha):(1'h0)] wire20;
  reg [(3'h5):(1'h0)] reg48 = (1'h0);
  reg [(3'h5):(1'h0)] reg47 = (1'h0);
  reg [(4'h8):(1'h0)] reg46 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg45 = (1'h0);
  assign y = {wire51,
                 wire50,
                 wire49,
                 wire44,
                 wire43,
                 wire42,
                 wire40,
                 wire20,
                 reg48,
                 reg47,
                 reg46,
                 reg45,
                 (1'h0)};
  module9 #() modinst21 (.wire10(wire7), .wire12(wire5), .y(wire20), .wire11(wire8), .clk(clk), .wire13(wire6));
  module22 #() modinst41 (wire40, clk, wire6, wire20, wire7, wire5);
  assign wire42 = wire6;
  assign wire43 = (wire7[(2'h2):(2'h2)] ?
                      $unsigned(((wire42 == wire6) + (wire8 && (8'hab)))) : $unsigned(((wire20 ?
                          wire6 : wire6) >>> wire40[(2'h3):(1'h1)])));
  assign wire44 = (($unsigned(((8'hab) ?
                      wire6 : wire6)) ~^ $unsigned(((8'ha1) >>> wire20))) >> wire5[(1'h0):(1'h0)]);
  always
    @(posedge clk) begin
      reg45 <= wire44;
      reg46 <= $signed($signed(wire5[(1'h1):(1'h1)]));
      if ((reg46[(2'h3):(1'h1)] ?
          ($unsigned($unsigned(wire44)) ?
              {(wire5 << wire43)} : $signed((wire6 ? reg46 : reg45))) : wire42))
        begin
          reg47 <= ($signed(wire7) >>> ($signed(wire40[(4'h8):(4'h8)]) >> ((wire5 ?
              reg46 : wire20) && $unsigned(wire7))));
        end
      else
        begin
          reg47 <= {(+$unsigned(wire20))};
          reg48 <= wire6;
        end
    end
  assign wire49 = $signed(wire44[(3'h4):(2'h2)]);
  assign wire50 = ($unsigned((~&(wire49 ?
                      wire8 : reg48))) << (^~($unsigned(wire44) ?
                      wire6 : $signed(wire44))));
  assign wire51 = wire42[(2'h3):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module22
#(parameter param39 = (({{(8'ha2)}} ? ((-(8'hab)) * {(8'ha1)}) : (((8'h9e) ^~ (8'h9c)) ? ((8'h9f) ~^ (8'ha4)) : (~^(8'haf)))) ? ((((8'ha8) >>> (8'h9f)) <<< (~|(8'ha3))) << (((8'h9f) ? (8'ha7) : (8'ha6)) ? ((8'hac) + (8'haa)) : ((8'h9d) ? (8'haf) : (8'h9e)))) : (-((^(8'ha3)) ? ((8'ha0) ? (8'ha8) : (8'ha3)) : ((8'ha9) < (8'ha8))))))
(y, clk, wire26, wire25, wire24, wire23);
  output wire [(32'h4f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire26;
  input wire signed [(3'h6):(1'h0)] wire25;
  input wire signed [(2'h3):(1'h0)] wire24;
  input wire [(2'h3):(1'h0)] wire23;
  wire signed [(3'h4):(1'h0)] wire38;
  wire [(4'h8):(1'h0)] wire37;
  wire signed [(4'h8):(1'h0)] wire36;
  wire signed [(3'h6):(1'h0)] wire35;
  wire [(4'hb):(1'h0)] wire34;
  wire [(3'h4):(1'h0)] wire33;
  wire signed [(2'h2):(1'h0)] wire29;
  wire [(2'h3):(1'h0)] wire28;
  wire signed [(4'h8):(1'h0)] wire27;
  reg [(3'h4):(1'h0)] reg32 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg31 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg30 = (1'h0);
  assign y = {wire38,
                 wire37,
                 wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire29,
                 wire28,
                 wire27,
                 reg32,
                 reg31,
                 reg30,
                 (1'h0)};
  assign wire27 = $signed($signed($unsigned(wire23[(1'h1):(1'h0)])));
  assign wire28 = {wire23[(2'h3):(2'h2)]};
  assign wire29 = $unsigned({$signed((wire26 < wire26))});
  always
    @(posedge clk) begin
      reg30 <= $signed((~&$signed(wire23[(1'h1):(1'h0)])));
      reg31 <= $unsigned((~&$unsigned((wire25 ? wire27 : wire23))));
      reg32 <= wire23[(1'h0):(1'h0)];
    end
  assign wire33 = (~(((reg32 ~^ wire29) ?
                      wire25[(2'h2):(2'h2)] : {reg32}) >>> (((8'ha5) >> reg31) || {wire25})));
  assign wire34 = wire25;
  assign wire35 = {($unsigned(wire34) - $unsigned(wire24))};
  assign wire36 = $unsigned(wire33[(2'h3):(2'h2)]);
  assign wire37 = (8'h9d);
  assign wire38 = $unsigned((reg31 || (~^(wire24 > wire29))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9
#(parameter param19 = (~&(|((~^(8'ha3)) ? (!(8'hae)) : {(8'ha8)}))))
(y, clk, wire13, wire12, wire11, wire10);
  output wire [(32'h1d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire13;
  input wire signed [(3'h5):(1'h0)] wire12;
  input wire signed [(3'h5):(1'h0)] wire11;
  input wire signed [(3'h7):(1'h0)] wire10;
  wire signed [(2'h2):(1'h0)] wire18;
  wire [(4'h9):(1'h0)] wire15;
  reg signed [(3'h7):(1'h0)] reg17 = (1'h0);
  reg [(3'h5):(1'h0)] reg16 = (1'h0);
  reg [(3'h5):(1'h0)] reg14 = (1'h0);
  assign y = {wire18, wire15, reg17, reg16, reg14, (1'h0)};
  always
    @(posedge clk) begin
      reg14 <= $signed(((!(wire11 ? wire11 : wire10)) == (8'haa)));
    end
  assign wire15 = $unsigned(wire12);
  always
    @(posedge clk) begin
      reg16 <= $unsigned($signed($signed({wire12})));
    end
  always
    @(posedge clk) begin
      reg17 <= (~|(($signed(reg16) - reg16) ? $unsigned(reg14) : (~|{wire13})));
    end
  assign wire18 = (^~{(wire10[(2'h2):(1'h0)] ^~ wire15)});
endmodule