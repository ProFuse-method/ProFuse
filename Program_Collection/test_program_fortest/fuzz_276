(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h75):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire3;
  input wire signed [(4'h8):(1'h0)] wire2;
  input wire [(2'h2):(1'h0)] wire1;
  input wire [(4'h9):(1'h0)] wire0;
  wire signed [(3'h7):(1'h0)] wire65;
  wire signed [(4'h8):(1'h0)] wire64;
  wire signed [(4'hb):(1'h0)] wire59;
  wire [(4'h8):(1'h0)] wire57;
  wire [(4'ha):(1'h0)] wire10;
  wire signed [(4'ha):(1'h0)] wire9;
  wire signed [(4'h8):(1'h0)] wire8;
  wire signed [(4'ha):(1'h0)] wire7;
  wire [(4'ha):(1'h0)] wire4;
  reg [(3'h7):(1'h0)] reg63 = (1'h0);
  reg [(2'h3):(1'h0)] reg62 = (1'h0);
  reg [(4'ha):(1'h0)] reg61 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg60 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg6 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg5 = (1'h0);
  assign y = {wire65,
                 wire64,
                 wire59,
                 wire57,
                 wire10,
                 wire9,
                 wire8,
                 wire7,
                 wire4,
                 reg63,
                 reg62,
                 reg61,
                 reg60,
                 reg6,
                 reg5,
                 (1'h0)};
  assign wire4 = ($signed($unsigned((wire3 ?
                     (8'hac) : (8'ha3)))) - (~$signed({wire1})));
  always
    @(posedge clk) begin
      reg5 <= $signed($unsigned((8'h9d)));
      reg6 <= $unsigned(wire0);
    end
  assign wire7 = $unsigned(wire0[(2'h2):(2'h2)]);
  assign wire8 = wire0;
  assign wire9 = (~|$unsigned(wire8[(1'h0):(1'h0)]));
  assign wire10 = $unsigned({wire0[(2'h2):(2'h2)]});
  module11 #() modinst58 (.wire14(wire3), .clk(clk), .y(wire57), .wire13(wire8), .wire15(wire2), .wire12(wire4));
  assign wire59 = ($signed(wire8[(2'h3):(1'h1)]) ?
                      wire57 : ($unsigned((wire1 >>> wire7)) ?
                          $signed((wire8 && wire3)) : (^~(8'had))));
  always
    @(posedge clk) begin
      reg60 <= {$signed({wire1[(1'h0):(1'h0)]})};
      reg61 <= ((^~$signed($signed((8'hb0)))) >> ((wire9[(1'h0):(1'h0)] || (~|(8'ha5))) >= wire3[(4'h8):(1'h0)]));
      if ($unsigned($signed(reg5)))
        begin
          reg62 <= wire57[(2'h2):(2'h2)];
        end
      else
        begin
          reg62 <= ($unsigned(reg60[(1'h1):(1'h0)]) == $signed((+(&(8'ha6)))));
          reg63 <= wire8;
        end
    end
  assign wire64 = ((~|((wire4 >>> wire2) ?
                      (~&reg63) : wire57)) ^ reg61[(3'h4):(1'h1)]);
  assign wire65 = (!$unsigned(wire2[(3'h7):(3'h7)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11
#(parameter param56 = (^~{(((8'haf) ? (8'ha5) : (8'ha9)) ? (^~(8'ha2)) : ((8'h9f) - (8'h9e)))}))
(y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h5f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire15;
  input wire [(4'hb):(1'h0)] wire14;
  input wire [(4'h8):(1'h0)] wire13;
  input wire signed [(3'h7):(1'h0)] wire12;
  wire signed [(4'hb):(1'h0)] wire55;
  wire [(4'hb):(1'h0)] wire54;
  wire signed [(3'h4):(1'h0)] wire40;
  wire signed [(4'ha):(1'h0)] wire23;
  wire [(3'h4):(1'h0)] wire22;
  wire signed [(4'h9):(1'h0)] wire19;
  wire signed [(4'hb):(1'h0)] wire18;
  wire signed [(2'h2):(1'h0)] wire17;
  wire [(3'h7):(1'h0)] wire16;
  wire [(3'h4):(1'h0)] wire52;
  reg [(4'ha):(1'h0)] reg21 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg20 = (1'h0);
  assign y = {wire55,
                 wire54,
                 wire40,
                 wire23,
                 wire22,
                 wire19,
                 wire18,
                 wire17,
                 wire16,
                 wire52,
                 reg21,
                 reg20,
                 (1'h0)};
  assign wire16 = $signed(wire14);
  assign wire17 = wire12[(1'h1):(1'h0)];
  assign wire18 = wire17;
  assign wire19 = {wire17[(1'h0):(1'h0)]};
  always
    @(posedge clk) begin
      reg20 <= wire19;
      reg21 <= $unsigned(($signed((8'ha6)) >> ((wire18 ? (8'hab) : wire15) ?
          $signed(wire19) : $unsigned(wire18))));
    end
  assign wire22 = {($signed((reg20 ? wire16 : wire17)) ?
                          wire12[(1'h1):(1'h0)] : $signed($signed(reg20)))};
  assign wire23 = (~^$signed((|$unsigned(reg21))));
  module24 #() modinst41 (wire40, clk, wire15, reg21, wire23, wire12);
  module42 #() modinst53 (wire52, clk, wire23, wire19, wire12, reg21);
  assign wire54 = $signed(((&wire40) >>> $unsigned(wire22)));
  assign wire55 = ((|((~(8'h9e)) ?
                      wire17[(2'h2):(2'h2)] : $signed(reg21))) >> {(wire15[(2'h3):(1'h0)] ?
                          $signed(reg20) : (^wire23))});
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module42  (y, clk, wire46, wire45, wire44, wire43);
  output wire [(32'h26):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire46;
  input wire [(2'h3):(1'h0)] wire45;
  input wire signed [(2'h3):(1'h0)] wire44;
  input wire signed [(4'ha):(1'h0)] wire43;
  wire [(4'h8):(1'h0)] wire51;
  wire signed [(3'h6):(1'h0)] wire50;
  wire [(4'ha):(1'h0)] wire49;
  wire [(2'h2):(1'h0)] wire48;
  wire [(4'hb):(1'h0)] wire47;
  assign y = {wire51, wire50, wire49, wire48, wire47, (1'h0)};
  assign wire47 = (wire43[(2'h2):(1'h1)] && (|(8'ha6)));
  assign wire48 = (-{wire44});
  assign wire49 = (+$unsigned(wire46));
  assign wire50 = $unsigned((((8'h9d) ?
                      (|wire45) : $unsigned((8'ha8))) ~^ (wire47 | (wire44 ?
                      wire46 : wire45))));
  assign wire51 = $unsigned((((~^wire45) ?
                      (wire48 ? wire43 : wire44) : $signed((8'had))) + wire50));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module24  (y, clk, wire28, wire27, wire26, wire25);
  output wire [(32'h57):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire28;
  input wire [(4'h8):(1'h0)] wire27;
  input wire signed [(3'h4):(1'h0)] wire26;
  input wire [(3'h7):(1'h0)] wire25;
  wire [(3'h6):(1'h0)] wire39;
  wire [(4'h8):(1'h0)] wire38;
  wire signed [(3'h7):(1'h0)] wire36;
  wire signed [(4'h9):(1'h0)] wire35;
  wire signed [(4'hb):(1'h0)] wire34;
  wire [(4'h8):(1'h0)] wire33;
  wire [(4'hb):(1'h0)] wire32;
  wire signed [(4'h9):(1'h0)] wire31;
  wire [(3'h6):(1'h0)] wire30;
  reg signed [(4'h8):(1'h0)] reg37 = (1'h0);
  reg [(2'h3):(1'h0)] reg29 = (1'h0);
  assign y = {wire39,
                 wire38,
                 wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire30,
                 reg37,
                 reg29,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg29 <= ((((wire28 ? (8'h9d) : wire27) ~^ {wire27}) ?
              $signed(wire26[(2'h3):(2'h2)]) : $signed((wire27 + (8'ha0)))) ?
          (|(wire28[(1'h1):(1'h0)] == $unsigned((8'ha9)))) : (+($unsigned(wire25) || (^~wire27))));
    end
  assign wire30 = ($signed({wire28[(1'h0):(1'h0)]}) & (~&(+(wire28 ?
                      wire26 : wire25))));
  assign wire31 = ((^~((^~wire30) ~^ $signed(wire27))) ?
                      $signed($unsigned(wire26)) : (reg29 >> wire30));
  assign wire32 = (+(((~wire30) ? (8'hae) : (reg29 ? (8'h9c) : wire25)) ?
                      {((8'ha6) ? wire26 : reg29)} : (~&(wire25 ?
                          wire27 : wire31))));
  assign wire33 = wire28;
  assign wire34 = (wire30[(3'h6):(2'h2)] ?
                      (wire32[(2'h3):(1'h0)] ?
                          wire33[(3'h6):(3'h5)] : wire27) : (wire32[(3'h7):(3'h7)] == $unsigned((wire27 ?
                          reg29 : (8'h9d)))));
  assign wire35 = $unsigned($signed((8'h9f)));
  assign wire36 = ({$signed($unsigned(wire30))} < (wire34 > $unsigned((-wire33))));
  always
    @(posedge clk) begin
      reg37 <= ({(+(wire28 ? wire27 : wire26))} ?
          wire31[(1'h0):(1'h0)] : (((wire31 ? wire30 : wire33) ?
              (wire33 ?
                  wire31 : wire27) : $unsigned(wire34)) > ($unsigned(wire35) ?
              wire30[(1'h0):(1'h0)] : wire33[(4'h8):(2'h2)])));
    end
  assign wire38 = wire35[(3'h6):(1'h1)];
  assign wire39 = reg37;
endmodule