(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h5d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire3;
  input wire [(4'ha):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire [(2'h3):(1'h0)] wire0;
  wire [(4'ha):(1'h0)] wire53;
  wire signed [(4'hb):(1'h0)] wire49;
  wire signed [(3'h6):(1'h0)] wire48;
  wire [(2'h3):(1'h0)] wire47;
  wire [(2'h2):(1'h0)] wire46;
  wire [(4'h9):(1'h0)] wire44;
  wire [(4'h8):(1'h0)] wire8;
  wire signed [(4'h8):(1'h0)] wire7;
  wire signed [(4'ha):(1'h0)] wire6;
  wire [(4'hb):(1'h0)] wire5;
  wire [(3'h5):(1'h0)] wire4;
  reg [(3'h6):(1'h0)] reg52 = (1'h0);
  reg [(2'h3):(1'h0)] reg51 = (1'h0);
  assign y = {wire53,
                 wire49,
                 wire48,
                 wire47,
                 wire46,
                 wire44,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 reg52,
                 reg51,
                 (1'h0)};
  assign wire4 = {$unsigned(wire0)};
  assign wire5 = $unsigned(($unsigned((wire4 < wire2)) == wire4));
  assign wire6 = wire3;
  assign wire7 = $unsigned($unsigned((((8'hab) && wire4) ?
                     wire3[(3'h7):(3'h7)] : {wire4})));
  assign wire8 = wire6;
  module9 #() modinst45 (wire44, clk, wire5, wire8, wire3, wire2);
  assign wire46 = (wire1 || wire8[(3'h4):(1'h1)]);
  assign wire47 = wire1[(3'h7):(2'h3)];
  assign wire48 = $signed(wire47);
  module23 #() modinst50 (.wire24(wire8), .wire27(wire4), .wire26(wire7), .wire25(wire5), .clk(clk), .y(wire49));
  always
    @(posedge clk) begin
      if (wire3)
        begin
          reg51 <= wire46[(2'h2):(2'h2)];
          reg52 <= (~|$unsigned(($signed(wire47) ? $signed(wire44) : {wire3})));
        end
      else
        begin
          reg51 <= ((^~$unsigned({reg52})) >> (~^(8'h9f)));
        end
    end
  assign wire53 = {{(~^wire47[(1'h1):(1'h0)])}};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9
#(parameter param43 = (((((8'h9c) ^ (8'ha4)) >>> {(8'h9c)}) > {((8'ha4) ? (8'ha3) : (8'ha3))}) ? (~^(~(~&(8'ha3)))) : (~|(^{(8'hb0)}))))
(y, clk, wire10, wire11, wire12, wire13);
  output wire [(32'h4b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire10;
  input wire signed [(4'h8):(1'h0)] wire11;
  input wire [(2'h2):(1'h0)] wire12;
  input wire [(4'h8):(1'h0)] wire13;
  wire signed [(2'h2):(1'h0)] wire42;
  wire signed [(4'h8):(1'h0)] wire41;
  wire [(4'h8):(1'h0)] wire22;
  wire [(3'h4):(1'h0)] wire39;
  reg signed [(3'h6):(1'h0)] reg14 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg16 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg17 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg18 = (1'h0);
  reg [(3'h6):(1'h0)] reg19 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg20 = (1'h0);
  reg [(3'h4):(1'h0)] reg21 = (1'h0);
  assign y = {wire42,
                 wire41,
                 wire22,
                 wire39,
                 reg14,
                 reg15,
                 reg16,
                 reg17,
                 reg18,
                 reg19,
                 reg20,
                 reg21,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ((wire13 ?
          {wire10[(2'h3):(1'h0)]} : (((^wire12) ?
              {wire10} : (wire12 & wire10)) << (&$unsigned(wire10)))))
        begin
          if (wire10[(2'h3):(1'h0)])
            begin
              reg14 <= ({wire10[(1'h0):(1'h0)]} | ($signed(wire13) ?
                  ($signed(wire10) ?
                      $signed(wire12) : (~|wire12)) : wire13[(3'h4):(3'h4)]));
              reg15 <= ($unsigned((^(wire11 ? wire10 : wire12))) ?
                  {(^~{wire13})} : (8'ha2));
            end
          else
            begin
              reg14 <= wire10;
            end
          if (wire13)
            begin
              reg16 <= (&$signed(wire13[(2'h2):(1'h0)]));
              reg17 <= $signed((wire12 ? reg14 : $signed($signed(wire12))));
            end
          else
            begin
              reg16 <= reg15[(2'h2):(2'h2)];
              reg17 <= reg17;
              reg18 <= $unsigned(((~|{reg15}) ?
                  ($signed(reg15) > (wire12 <<< reg14)) : reg14[(3'h5):(2'h3)]));
            end
          reg19 <= (8'had);
        end
      else
        begin
          reg14 <= wire13[(3'h5):(1'h0)];
        end
      if ((+wire13))
        begin
          if ($unsigned(wire10[(2'h3):(1'h0)]))
            begin
              reg20 <= (~&($unsigned((-reg16)) + reg15));
            end
          else
            begin
              reg20 <= $unsigned(((^~$unsigned(wire10)) * {$signed(reg18)}));
            end
        end
      else
        begin
          reg20 <= $unsigned($signed((reg14[(3'h6):(3'h5)] ?
              (8'ha3) : (reg19 == reg19))));
        end
    end
  always
    @(posedge clk) begin
      reg21 <= ($unsigned((-reg18)) - $unsigned(wire12));
    end
  assign wire22 = $unsigned($signed((^~reg19)));
  module23 #() modinst40 (wire39, clk, reg16, wire13, reg18, reg19);
  assign wire41 = (~&($signed(reg19[(1'h1):(1'h0)]) ?
                      (wire12[(1'h0):(1'h0)] > {wire39}) : $signed(reg20[(2'h2):(2'h2)])));
  assign wire42 = ((&{(^~wire13)}) ?
                      ({(wire39 && (8'ha4))} && (^(reg20 << (8'hae)))) : $signed(((-reg14) ?
                          (8'ha7) : $unsigned(reg19))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module23  (y, clk, wire27, wire26, wire25, wire24);
  output wire [(32'h43):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire27;
  input wire [(4'h8):(1'h0)] wire26;
  input wire signed [(3'h4):(1'h0)] wire25;
  input wire [(3'h4):(1'h0)] wire24;
  wire [(4'h9):(1'h0)] wire38;
  wire signed [(3'h4):(1'h0)] wire35;
  wire [(4'h8):(1'h0)] wire34;
  wire signed [(3'h5):(1'h0)] wire33;
  wire [(2'h3):(1'h0)] wire32;
  wire signed [(2'h3):(1'h0)] wire31;
  wire [(3'h4):(1'h0)] wire29;
  wire signed [(4'h8):(1'h0)] wire28;
  reg [(4'h9):(1'h0)] reg37 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg36 = (1'h0);
  reg [(4'ha):(1'h0)] reg30 = (1'h0);
  assign y = {wire38,
                 wire35,
                 wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire29,
                 wire28,
                 reg37,
                 reg36,
                 reg30,
                 (1'h0)};
  assign wire28 = $signed(($signed($unsigned(wire25)) ?
                      $unsigned((wire27 >> wire27)) : $signed(wire26)));
  assign wire29 = ((~wire25) >= $unsigned((~(~wire24))));
  always
    @(posedge clk) begin
      reg30 <= (~|(wire24[(1'h0):(1'h0)] == $signed($signed(wire26))));
    end
  assign wire31 = $signed(wire28);
  assign wire32 = $unsigned($unsigned(wire31[(2'h3):(2'h3)]));
  assign wire33 = wire26;
  assign wire34 = wire29;
  assign wire35 = $unsigned(($unsigned((wire28 || wire29)) ^~ wire24[(1'h0):(1'h0)]));
  always
    @(posedge clk) begin
      reg36 <= wire28;
      reg37 <= ($unsigned((wire25[(1'h0):(1'h0)] >> wire24[(3'h4):(1'h0)])) ?
          $unsigned($unsigned(wire31)) : (wire28 ?
              ($unsigned(wire34) || (wire34 ?
                  wire35 : wire25)) : ($signed(wire27) == (wire28 <<< wire28))));
    end
  assign wire38 = wire27[(1'h1):(1'h1)];
endmodule