(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param67 = ((8'hbb) * (8'hae)))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h2e1):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire4;
  input wire signed [(5'h14):(1'h0)] wire3;
  input wire [(3'h7):(1'h0)] wire2;
  input wire signed [(4'hc):(1'h0)] wire1;
  input wire [(5'h15):(1'h0)] wire0;
  wire [(2'h3):(1'h0)] wire66;
  wire [(3'h5):(1'h0)] wire65;
  wire [(5'h11):(1'h0)] wire64;
  wire signed [(5'h10):(1'h0)] wire63;
  wire [(3'h4):(1'h0)] wire62;
  wire signed [(3'h4):(1'h0)] wire61;
  wire [(5'h14):(1'h0)] wire60;
  wire signed [(4'hf):(1'h0)] wire59;
  wire signed [(4'hb):(1'h0)] wire58;
  wire [(4'he):(1'h0)] wire57;
  wire [(4'h8):(1'h0)] wire9;
  wire [(4'h8):(1'h0)] wire8;
  wire signed [(4'h9):(1'h0)] wire7;
  wire signed [(4'he):(1'h0)] wire6;
  wire [(3'h6):(1'h0)] wire5;
  reg [(4'ha):(1'h0)] reg56 = (1'h0);
  reg [(4'hb):(1'h0)] reg54 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg50 = (1'h0);
  reg [(5'h15):(1'h0)] reg49 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg46 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg45 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg44 = (1'h0);
  reg [(5'h12):(1'h0)] reg42 = (1'h0);
  reg [(5'h10):(1'h0)] reg41 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg39 = (1'h0);
  reg [(3'h6):(1'h0)] reg35 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg31 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg28 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg22 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg21 = (1'h0);
  reg [(4'h8):(1'h0)] reg20 = (1'h0);
  reg [(4'hd):(1'h0)] reg18 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg16 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg14 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg11 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg55 = (1'h0);
  reg [(2'h3):(1'h0)] reg53 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar52 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg51 = (1'h0);
  reg [(3'h6):(1'h0)] reg48 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar47 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar43 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg40 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar38 = (1'h0);
  reg [(3'h7):(1'h0)] forvar37 = (1'h0);
  reg [(4'h9):(1'h0)] reg36 = (1'h0);
  reg signed [(4'he):(1'h0)] reg34 = (1'h0);
  reg [(4'hc):(1'h0)] reg33 = (1'h0);
  reg [(5'h14):(1'h0)] reg32 = (1'h0);
  reg [(5'h10):(1'h0)] forvar30 = (1'h0);
  reg [(3'h5):(1'h0)] reg29 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg27 = (1'h0);
  reg [(3'h6):(1'h0)] forvar26 = (1'h0);
  reg [(5'h11):(1'h0)] reg25 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg24 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar23 = (1'h0);
  reg [(4'h9):(1'h0)] forvar19 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar17 = (1'h0);
  reg [(5'h12):(1'h0)] reg15 = (1'h0);
  reg [(5'h14):(1'h0)] reg13 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar12 = (1'h0);
  reg [(2'h3):(1'h0)] forvar10 = (1'h0);
  assign y = {wire66,
                 wire65,
                 wire64,
                 wire63,
                 wire62,
                 wire61,
                 wire60,
                 wire59,
                 wire58,
                 wire57,
                 wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 reg56,
                 reg54,
                 reg50,
                 reg49,
                 reg46,
                 reg45,
                 reg44,
                 reg42,
                 reg41,
                 reg39,
                 reg35,
                 reg31,
                 reg28,
                 reg22,
                 reg21,
                 reg20,
                 reg18,
                 reg16,
                 reg14,
                 reg11,
                 reg55,
                 reg53,
                 forvar52,
                 reg51,
                 reg48,
                 forvar47,
                 forvar43,
                 reg40,
                 forvar38,
                 forvar37,
                 reg36,
                 reg34,
                 reg33,
                 reg32,
                 forvar30,
                 reg29,
                 reg27,
                 forvar26,
                 reg25,
                 reg24,
                 forvar23,
                 forvar19,
                 forvar17,
                 reg15,
                 reg13,
                 forvar12,
                 forvar10,
                 (1'h0)};
  assign wire5 = wire4;
  assign wire6 = wire1[(3'h5):(3'h5)];
  assign wire7 = wire3;
  assign wire8 = wire7;
  assign wire9 = $unsigned($signed($unsigned(wire6)));
  always
    @(posedge clk) begin
      for (forvar10 = (1'h0); (forvar10 < (1'h0)); forvar10 = (forvar10 + (1'h1)))
        begin
          reg11 <= ((wire5[(2'h2):(1'h1)] * (~&$unsigned((wire8 ?
                  (8'hb5) : wire5)))) ?
              (7'h41) : ($signed(wire5) ?
                  {(~|wire0[(3'h7):(3'h4)]),
                      $signed(((8'hb1) ^ wire0))} : wire2[(3'h5):(2'h2)]));
          for (forvar12 = (1'h0); (forvar12 < (2'h3)); forvar12 = (forvar12 + (1'h1)))
            begin
              reg13 = ({$signed(((reg11 ? reg11 : reg11) < (|wire6))),
                      (wire0[(2'h3):(2'h2)] << forvar12[(4'h9):(3'h5)])} ?
                  ((^~((+wire0) ?
                      wire8[(2'h3):(2'h3)] : $unsigned(wire4))) >> $signed(reg11[(3'h7):(3'h4)])) : (|({{wire1}} == wire3[(5'h10):(4'hc)])));
              reg14 <= $signed($unsigned($unsigned((~(wire3 == forvar12)))));
              reg15 = forvar12[(3'h5):(2'h2)];
              reg16 <= (&($signed((~|$signed(wire6))) >= {(8'ha1)}));
            end
        end
      for (forvar17 = (1'h0); (forvar17 < (1'h1)); forvar17 = (forvar17 + (1'h1)))
        begin
          reg18 <= wire5;
          for (forvar19 = (1'h0); (forvar19 < (1'h1)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 <= ((~(8'hbd)) ?
                  ((~|(|(reg16 ? wire7 : reg18))) ?
                      {($unsigned(wire1) <<< $signed(forvar19)),
                          forvar12} : (|((8'ha7) >> (reg14 ?
                          wire7 : reg11)))) : ((forvar19[(4'h8):(3'h6)] ?
                      ((~wire3) ^~ (reg18 ? wire2 : wire2)) : ((~|wire7) ?
                          $signed(wire2) : reg18[(3'h4):(1'h1)])) >>> ($unsigned((!reg13)) + ((8'h9e) | $signed(wire0)))));
              reg21 <= reg11;
            end
          reg22 <= $signed((!({$signed(forvar10),
              wire1} * ((~&reg18) + $signed(reg14)))));
          for (forvar23 = (1'h0); (forvar23 < (1'h1)); forvar23 = (forvar23 + (1'h1)))
            begin
              reg24 = $signed(wire2);
            end
        end
      reg25 = forvar19;
      for (forvar26 = (1'h0); (forvar26 < (2'h2)); forvar26 = (forvar26 + (1'h1)))
        begin
          if ((8'ha7))
            begin
              reg27 = ($unsigned({(~&reg13[(5'h13):(5'h13)]),
                  (!(-wire4))}) ^~ reg16[(2'h3):(2'h2)]);
              reg28 <= $unsigned(forvar17[(4'h8):(3'h7)]);
            end
          else
            begin
              reg28 <= $unsigned(wire9[(4'h8):(3'h4)]);
              reg29 = (reg28[(1'h0):(1'h0)] ?
                  (!(~|$unsigned(wire8[(3'h7):(3'h5)]))) : {{{{(8'hb8)},
                              {reg20, reg21}}},
                      $signed(wire8[(4'h8):(2'h2)])});
            end
          for (forvar30 = (1'h0); (forvar30 < (3'h4)); forvar30 = (forvar30 + (1'h1)))
            begin
              reg31 <= reg22;
              reg32 = ((((reg27[(2'h3):(1'h0)] <= (~|reg28)) || wire8[(3'h6):(3'h4)]) ?
                      (((~reg14) < (wire5 ?
                          forvar10 : forvar30)) <= ((^~wire2) ?
                          (reg22 >>> wire4) : $signed(forvar30))) : reg28) ?
                  wire9[(1'h0):(1'h0)] : ((~&(wire3 ?
                          wire2[(2'h3):(1'h1)] : reg13)) ?
                      (reg28[(3'h4):(3'h4)] || reg14) : reg31[(4'hd):(3'h4)]));
              reg33 = $signed((reg22 ?
                  $signed($signed((~&wire8))) : $signed((+reg21))));
              reg34 = wire4[(3'h7):(3'h5)];
            end
          reg35 <= reg27;
          reg36 = $unsigned((reg15[(3'h6):(1'h0)] ^~ (!forvar12[(1'h0):(1'h0)])));
        end
      for (forvar37 = (1'h0); (forvar37 < (2'h3)); forvar37 = (forvar37 + (1'h1)))
        begin
          for (forvar38 = (1'h0); (forvar38 < (2'h3)); forvar38 = (forvar38 + (1'h1)))
            begin
              reg39 <= $signed((8'had));
              reg40 = $unsigned(reg14);
              reg41 <= (+(~|(&wire7[(4'h9):(3'h6)])));
              reg42 <= ((reg28[(2'h3):(2'h3)] ?
                      reg40[(1'h1):(1'h1)] : forvar17[(3'h5):(1'h1)]) ?
                  (~&wire0) : {$unsigned($signed(forvar10[(2'h3):(1'h1)])),
                      $unsigned(forvar10)});
            end
          for (forvar43 = (1'h0); (forvar43 < (2'h2)); forvar43 = (forvar43 + (1'h1)))
            begin
              reg44 <= wire1[(4'h8):(3'h4)];
              reg45 <= wire5[(1'h1):(1'h0)];
              reg46 <= (forvar37 ?
                  (!$unsigned({reg29[(1'h1):(1'h0)],
                      $unsigned(reg21)})) : (~^($unsigned((reg41 ^ reg44)) ?
                      (((8'ha4) ? forvar30 : reg35) ?
                          ((8'hab) ?
                              reg29 : (8'hb0)) : $unsigned(wire8)) : $signed({reg42}))));
            end
          for (forvar47 = (1'h0); (forvar47 < (1'h0)); forvar47 = (forvar47 + (1'h1)))
            begin
              reg48 = ({reg29} ?
                  (~|(+(8'ha5))) : ($unsigned(($unsigned((8'had)) ~^ reg32)) <<< $signed({((8'ha0) > wire7)})));
              reg49 <= $signed($signed(wire3));
              reg50 <= $signed(reg16);
              reg51 = ((reg36[(3'h4):(2'h3)] ^ $signed(reg49[(3'h5):(1'h1)])) ?
                  ($signed((-forvar26)) >> $unsigned($unsigned((!forvar12)))) : (reg13[(4'hb):(4'ha)] >>> forvar38[(5'h12):(4'hc)]));
            end
          for (forvar52 = (1'h0); (forvar52 < (1'h0)); forvar52 = (forvar52 + (1'h1)))
            begin
              reg53 = $signed(reg21[(2'h3):(1'h1)]);
              reg54 <= {(8'h9f)};
              reg55 = reg48[(3'h4):(1'h0)];
              reg56 <= ((~^forvar10) ?
                  (^~$signed((~&(~|(8'ha0))))) : (({(~^reg15),
                          reg54[(1'h0):(1'h0)]} ?
                      $signed((reg13 < wire2)) : reg16[(5'h14):(4'hb)]) * ($signed($signed((7'h42))) ?
                      ({wire5, reg44} ?
                          ((8'hab) ? reg42 : reg41) : (~&(8'hac))) : reg33)));
            end
        end
    end
  assign wire57 = $signed(reg22[(2'h3):(1'h0)]);
  assign wire58 = (~$signed(($signed((wire5 ?
                      wire1 : reg41)) | (+$unsigned(reg56)))));
  assign wire59 = reg42[(4'h9):(2'h3)];
  assign wire60 = ((~^($unsigned(wire1) <= ((wire8 <= reg11) >= reg42[(2'h3):(1'h0)]))) == ({reg45[(2'h3):(2'h3)],
                          (~^(reg35 ? reg18 : wire8))} ?
                      (wire5[(1'h1):(1'h1)] <= {(wire1 <= reg14)}) : $unsigned($signed($signed(reg54)))));
  assign wire61 = reg42;
  assign wire62 = (~{$signed($signed(wire2)), wire9});
  assign wire63 = (~^($unsigned($signed((^wire7))) ?
                      ((((8'h9f) ? reg42 : wire3) ?
                          ((8'hbb) ? wire1 : reg21) : {reg11,
                              reg44}) & (~|$signed(wire0))) : ($unsigned((^wire60)) - wire8[(4'h8):(3'h4)])));
  assign wire64 = $signed((&({(reg18 << reg20)} == ((reg49 ?
                      wire59 : reg31) >= ((8'hbd) ? wire61 : wire8)))));
  assign wire65 = $unsigned((^(~^$unsigned((reg31 << wire3)))));
  assign wire66 = $signed((~wire3));
endmodule