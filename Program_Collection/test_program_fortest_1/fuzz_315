(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param12 = ({((~^(8'had)) ^ ((8'haf) ? (8'ha0) : (8'hb0)))} && ((((8'hb0) ? (8'h9e) : (8'had)) * ((8'ha2) >> (8'ha6))) || (-{(8'ha7)}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h45):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire3;
  input wire signed [(3'h5):(1'h0)] wire2;
  input wire [(3'h6):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire [(4'hb):(1'h0)] wire11;
  wire [(4'ha):(1'h0)] wire10;
  wire signed [(3'h7):(1'h0)] wire7;
  wire signed [(4'ha):(1'h0)] wire6;
  wire signed [(3'h5):(1'h0)] wire5;
  wire [(4'h9):(1'h0)] wire4;
  reg signed [(3'h6):(1'h0)] reg9 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg8 = (1'h0);
  assign y = {wire11, wire10, wire7, wire6, wire5, wire4, reg9, reg8, (1'h0)};
  assign wire4 = $unsigned((wire0[(2'h2):(1'h0)] ? {$unsigned(wire0)} : wire0));
  assign wire5 = wire3[(4'h8):(4'h8)];
  assign wire6 = wire2;
  assign wire7 = (-(^~((8'ha5) * (wire4 ? wire2 : wire6))));
  always
    @(posedge clk) begin
      reg8 <= wire7[(2'h3):(1'h1)];
    end
  always
    @(posedge clk) begin
      reg9 <= (wire0 ?
          (wire5[(2'h2):(2'h2)] >= $signed($unsigned((8'haa)))) : ({wire6} | {$signed(wire1)}));
    end
  assign wire10 = wire7[(2'h2):(1'h1)];
  assign wire11 = (^~wire1);
endmodule