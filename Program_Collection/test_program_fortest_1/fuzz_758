(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param47 = ((({(8'ha9)} ^ (~&(8'hae))) ? (((8'h9e) ? (8'ha9) : (8'h9e)) ? (~^(8'haa)) : (~^(8'ha6))) : (((8'h9f) >= (8'haf)) | (|(8'hab)))) <<< (~{(!(8'ha6))})))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h81):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire0;
  input wire [(4'ha):(1'h0)] wire1;
  input wire [(3'h6):(1'h0)] wire2;
  input wire [(2'h2):(1'h0)] wire3;
  wire [(3'h7):(1'h0)] wire40;
  wire [(4'ha):(1'h0)] wire4;
  wire signed [(4'ha):(1'h0)] wire9;
  wire [(4'hb):(1'h0)] wire10;
  wire [(4'h8):(1'h0)] wire12;
  wire [(4'hb):(1'h0)] wire13;
  wire [(4'hb):(1'h0)] wire38;
  wire [(4'h9):(1'h0)] wire42;
  reg [(3'h7):(1'h0)] reg46 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg45 = (1'h0);
  reg [(3'h4):(1'h0)] reg44 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg5 = (1'h0);
  reg [(3'h7):(1'h0)] reg6 = (1'h0);
  reg [(2'h2):(1'h0)] reg7 = (1'h0);
  reg [(4'hb):(1'h0)] reg8 = (1'h0);
  reg [(2'h3):(1'h0)] reg11 = (1'h0);
  assign y = {wire40,
                 wire4,
                 wire9,
                 wire10,
                 wire12,
                 wire13,
                 wire38,
                 wire42,
                 reg46,
                 reg45,
                 reg44,
                 reg5,
                 reg6,
                 reg7,
                 reg8,
                 reg11,
                 (1'h0)};
  assign wire4 = (((&{wire0}) || (8'h9f)) ?
                     $signed(wire0) : (wire1 ?
                         ((wire2 <= (8'ha3)) >> (wire0 ?
                             (8'hac) : wire0)) : $unsigned((wire3 - wire0))));
  always
    @(posedge clk) begin
      reg5 <= wire4[(1'h0):(1'h0)];
    end
  always
    @(posedge clk) begin
      reg6 <= (($unsigned((wire1 ^ wire0)) ?
          reg5 : $unsigned($unsigned((8'hac)))) + (((wire3 ^ wire1) ?
          {wire3} : ((8'haa) | wire0)) < ($signed(wire1) == reg5)));
      reg7 <= (-$unsigned(((wire0 ? reg6 : reg6) ?
          (8'ha4) : (reg5 ? reg6 : (8'ha6)))));
      reg8 <= ($unsigned($signed($signed(wire0))) ?
          wire2 : (|(reg5[(1'h1):(1'h0)] || $unsigned(reg6))));
    end
  assign wire9 = (&wire3);
  assign wire10 = wire3[(1'h0):(1'h0)];
  always
    @(posedge clk) begin
      reg11 <= wire2[(3'h6):(3'h4)];
    end
  assign wire12 = $signed($unsigned(wire4));
  assign wire13 = $signed($unsigned(({(8'ha2)} & (|(8'hae)))));
  module14 #() modinst39 (wire38, clk, wire4, wire10, reg11, wire9);
  module14 #() modinst41 (.wire17(reg8), .y(wire40), .wire18(wire1), .clk(clk), .wire16(wire38), .wire15(wire13));
  module14 #() modinst43 (wire42, clk, reg8, wire13, reg7, reg6);
  always
    @(posedge clk) begin
      if (wire3)
        begin
          if ($signed($unsigned(reg6[(3'h5):(2'h2)])))
            begin
              reg44 <= $signed(($unsigned((+wire38)) ?
                  ($signed(wire1) ?
                      {wire10} : (&reg5)) : (wire0 && (wire38 && (8'ha6)))));
              reg45 <= $unsigned(($unsigned($signed(wire12)) - $signed((reg5 | (8'haf)))));
              reg46 <= (~(($signed(wire3) | (wire2 ? wire3 : reg5)) ?
                  $unsigned((~|reg5)) : ($unsigned(wire12) ?
                      (~^reg45) : wire2[(1'h1):(1'h0)])));
            end
          else
            begin
              reg44 <= (8'had);
              reg45 <= {reg46[(3'h4):(1'h1)]};
            end
        end
      else
        begin
          reg44 <= $unsigned((&($signed(wire13) ?
              (wire1 ? wire12 : reg45) : (~|(8'ha4)))));
          reg45 <= {wire3};
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module14  (y, clk, wire18, wire17, wire16, wire15);
  output wire [(32'h42):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire18;
  input wire signed [(4'hb):(1'h0)] wire17;
  input wire [(2'h2):(1'h0)] wire16;
  input wire [(3'h4):(1'h0)] wire15;
  wire [(3'h6):(1'h0)] wire36;
  wire [(4'h8):(1'h0)] wire35;
  wire signed [(4'h8):(1'h0)] wire34;
  wire [(3'h5):(1'h0)] wire33;
  wire signed [(4'hb):(1'h0)] wire31;
  wire signed [(3'h5):(1'h0)] wire21;
  wire signed [(2'h3):(1'h0)] wire20;
  reg [(4'hb):(1'h0)] reg37 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg19 = (1'h0);
  assign y = {wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire31,
                 wire21,
                 wire20,
                 reg37,
                 reg19,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg19 <= ($unsigned((^$unsigned((8'ha3)))) ?
          (wire15[(2'h2):(1'h0)] >> (wire17[(4'ha):(4'h9)] ?
              $unsigned(wire16) : $unsigned(wire15))) : ($unsigned($signed(wire18)) ?
              ($unsigned(wire18) == wire18[(2'h3):(2'h2)]) : (&wire18)));
    end
  assign wire20 = wire15;
  assign wire21 = {$signed(reg19)};
  module22 #() modinst32 (.wire26(wire17), .y(wire31), .wire24(wire21), .wire23(wire18), .clk(clk), .wire25(wire15));
  assign wire33 = ((&((8'ha3) ?
                      (|wire21) : wire20[(2'h2):(1'h1)])) * ({{wire18}} ?
                      $unsigned($unsigned((8'ha8))) : wire15[(2'h3):(2'h3)]));
  assign wire34 = wire31[(4'ha):(3'h4)];
  assign wire35 = (wire34 ?
                      (^$unsigned((8'ha5))) : {(wire16[(1'h0):(1'h0)] | $unsigned(wire21))});
  assign wire36 = wire17[(3'h7):(3'h6)];
  always
    @(posedge clk) begin
      reg37 <= $signed(((-$signed(reg19)) - ($signed((8'hab)) ?
          (wire20 ? wire20 : wire31) : $unsigned((8'haf)))));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module22  (y, clk, wire26, wire25, wire24, wire23);
  output wire [(32'hf):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire26;
  input wire signed [(2'h2):(1'h0)] wire25;
  input wire signed [(3'h5):(1'h0)] wire24;
  input wire signed [(4'ha):(1'h0)] wire23;
  wire [(2'h3):(1'h0)] wire30;
  wire signed [(2'h2):(1'h0)] wire29;
  wire signed [(3'h7):(1'h0)] wire28;
  wire signed [(2'h2):(1'h0)] wire27;
  assign y = {wire30, wire29, wire28, wire27, (1'h0)};
  assign wire27 = ((-(wire23[(3'h4):(2'h2)] ~^ (8'h9d))) ^~ ($unsigned({(8'h9d)}) ?
                      (8'hae) : (~&(wire24 ? wire26 : wire24))));
  assign wire28 = ({(+(~&wire26))} >>> (wire25[(1'h1):(1'h0)] >= (wire27 > (&wire26))));
  assign wire29 = $unsigned((-(8'ha9)));
  assign wire30 = wire23;
endmodule