(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param11 = ({(~((8'ha8) ? (8'hab) : (8'haf)))} ? (((8'ha2) ? ((8'had) * (8'haf)) : (~|(8'h9d))) >> {(~(8'h9d))}) : {(((8'ha3) ? (8'ha8) : (8'ha6)) ? ((8'hb0) ? (8'hae) : (8'h9f)) : ((8'ha1) ? (8'ha5) : (8'ha6)))}))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h38):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire [(3'h6):(1'h0)] wire2;
  input wire [(4'h8):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire0;
  wire signed [(2'h3):(1'h0)] wire7;
  wire [(4'h8):(1'h0)] wire6;
  wire [(4'hb):(1'h0)] wire5;
  wire signed [(4'ha):(1'h0)] wire4;
  reg [(4'h8):(1'h0)] reg10 = (1'h0);
  reg [(3'h7):(1'h0)] reg9 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg8 = (1'h0);
  assign y = {wire7, wire6, wire5, wire4, reg10, reg9, reg8, (1'h0)};
  assign wire4 = $unsigned(wire3);
  assign wire5 = $unsigned($signed(wire3[(4'h8):(1'h1)]));
  assign wire6 = {(8'haa)};
  assign wire7 = $signed($signed(wire4[(3'h5):(1'h0)]));
  always
    @(posedge clk) begin
      if ((($unsigned((wire3 ? wire1 : wire0)) || (~(wire3 || (8'h9d)))) ?
          wire5[(4'h8):(2'h3)] : wire7))
        begin
          reg8 <= (|(((wire4 && wire3) ?
              wire7[(1'h1):(1'h0)] : wire7[(1'h0):(1'h0)]) > $signed((^~wire4))));
        end
      else
        begin
          reg8 <= wire3[(4'ha):(3'h5)];
          reg9 <= (-$signed(reg8[(3'h4):(2'h3)]));
          reg10 <= {(-($unsigned(wire0) ? {wire6} : wire7))};
        end
    end
endmodule