(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param36 = {(({((7'h42) && (8'haf))} == (+(-(8'hb8)))) << (8'ha0)), (^~({(~(8'hac)), (|(7'h43))} ? (((8'hb0) ? (8'hb4) : (8'ha1)) || ((8'ha4) | (8'had))) : (-((8'hb0) > (8'h9c)))))}, 
parameter param37 = param36)
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h13e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hd):(1'h0)] wire4;
  input wire [(3'h5):(1'h0)] wire3;
  input wire [(3'h4):(1'h0)] wire2;
  input wire signed [(4'he):(1'h0)] wire1;
  input wire [(3'h4):(1'h0)] wire0;
  wire signed [(5'h13):(1'h0)] wire35;
  wire signed [(3'h7):(1'h0)] wire34;
  wire [(2'h3):(1'h0)] wire10;
  wire signed [(4'h9):(1'h0)] wire9;
  wire [(5'h13):(1'h0)] wire8;
  wire [(3'h6):(1'h0)] wire7;
  wire [(3'h6):(1'h0)] wire6;
  wire [(3'h7):(1'h0)] wire5;
  reg signed [(5'h12):(1'h0)] reg33 = (1'h0);
  reg [(3'h6):(1'h0)] reg31 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg28 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg22 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg17 = (1'h0);
  reg [(4'h8):(1'h0)] reg15 = (1'h0);
  reg [(4'hc):(1'h0)] reg14 = (1'h0);
  reg signed [(4'he):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar32 = (1'h0);
  reg [(3'h4):(1'h0)] forvar30 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg29 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg27 = (1'h0);
  reg [(5'h11):(1'h0)] forvar26 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg25 = (1'h0);
  reg [(4'h9):(1'h0)] forvar24 = (1'h0);
  reg [(2'h2):(1'h0)] forvar23 = (1'h0);
  reg [(3'h4):(1'h0)] forvar21 = (1'h0);
  reg [(5'h15):(1'h0)] reg20 = (1'h0);
  reg [(4'h8):(1'h0)] reg19 = (1'h0);
  reg [(5'h11):(1'h0)] forvar18 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg16 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar12 = (1'h0);
  reg [(3'h6):(1'h0)] forvar11 = (1'h0);
  assign y = {wire35,
                 wire34,
                 wire10,
                 wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 reg33,
                 reg31,
                 reg28,
                 reg22,
                 reg17,
                 reg15,
                 reg14,
                 reg13,
                 forvar32,
                 forvar30,
                 reg29,
                 reg27,
                 forvar26,
                 reg25,
                 forvar24,
                 forvar23,
                 forvar21,
                 reg20,
                 reg19,
                 forvar18,
                 reg16,
                 forvar12,
                 forvar11,
                 (1'h0)};
  assign wire5 = ((8'h9d) ?
                     $unsigned(wire0) : ((~&wire4) ?
                         wire2 : (^~(^(wire1 < (8'h9f))))));
  assign wire6 = $signed((8'ha5));
  assign wire7 = {$signed((|wire5))};
  assign wire8 = wire3;
  assign wire9 = {($signed(wire4) ?
                         wire1 : (^~(wire7[(3'h4):(1'h1)] ?
                             (wire1 ? wire1 : wire6) : $signed(wire7))))};
  assign wire10 = (~&(($unsigned((wire0 ?
                          wire8 : wire3)) ^ (wire8 & (wire5 <<< wire4))) ?
                      wire4 : {$signed((wire2 ? wire8 : wire5)),
                          (wire2 < wire1)}));
  always
    @(posedge clk) begin
      for (forvar11 = (1'h0); (forvar11 < (2'h2)); forvar11 = (forvar11 + (1'h1)))
        begin
          for (forvar12 = (1'h0); (forvar12 < (2'h2)); forvar12 = (forvar12 + (1'h1)))
            begin
              reg13 <= $signed($unsigned(((8'ha1) ? (~^(~wire2)) : wire8)));
              reg14 <= (~(8'h9f));
              reg15 <= wire6;
              reg16 = forvar12[(2'h3):(1'h0)];
              reg17 <= $signed(($signed($unsigned(reg13)) ^~ (^($unsigned(reg15) >>> {reg14}))));
            end
          for (forvar18 = (1'h0); (forvar18 < (1'h0)); forvar18 = (forvar18 + (1'h1)))
            begin
              reg19 = ($unsigned({{reg15}, wire9}) ?
                  $signed($unsigned($signed(wire1))) : {(($signed(wire0) || forvar12) < (^(!(7'h41)))),
                      forvar18[(4'hd):(3'h6)]});
              reg20 = ((((~|$unsigned(forvar11)) - (reg13 ~^ (reg14 != wire7))) ^ (^~forvar18)) ?
                  wire2 : (($signed($signed(forvar12)) && ({forvar18} ?
                      (!(8'hbf)) : (~wire4))) * ((^~$signed((8'ha1))) + $signed(reg13[(3'h4):(2'h2)]))));
            end
          for (forvar21 = (1'h0); (forvar21 < (1'h1)); forvar21 = (forvar21 + (1'h1)))
            begin
              reg22 <= reg13[(3'h4):(3'h4)];
            end
        end
      for (forvar23 = (1'h0); (forvar23 < (2'h3)); forvar23 = (forvar23 + (1'h1)))
        begin
          for (forvar24 = (1'h0); (forvar24 < (1'h0)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 = $signed($unsigned((!(~&(wire8 ? reg13 : (8'hac))))));
            end
          for (forvar26 = (1'h0); (forvar26 < (2'h2)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 = wire10;
              reg28 <= ({$signed(($unsigned(wire1) < (~wire8))),
                      ($signed($unsigned(reg19)) ?
                          $unsigned((~^wire8)) : ((reg16 ^ reg14) ?
                              (reg27 ~^ forvar23) : $unsigned(forvar21)))} ?
                  wire10 : $unsigned(reg15[(1'h0):(1'h0)]));
              reg29 = reg16;
            end
          for (forvar30 = (1'h0); (forvar30 < (3'h4)); forvar30 = (forvar30 + (1'h1)))
            begin
              reg31 <= $unsigned(reg20);
            end
          for (forvar32 = (1'h0); (forvar32 < (1'h0)); forvar32 = (forvar32 + (1'h1)))
            begin
              reg33 <= (|wire7[(1'h1):(1'h0)]);
            end
        end
    end
  assign wire34 = reg15[(2'h2):(2'h2)];
  assign wire35 = $unsigned((-$unsigned((reg17[(3'h5):(1'h1)] ?
                      $unsigned(wire3) : (reg22 >>> wire4)))));
endmodule