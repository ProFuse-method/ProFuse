(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param181 = {((~^(|((8'hab) && (8'hb1)))) | ((^((8'ha7) >>> (7'h44))) || (((8'h9e) != (7'h42)) ~^ (8'hb8))))})
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h1d7):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire0;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire [(4'hf):(1'h0)] wire2;
  input wire [(3'h7):(1'h0)] wire3;
  wire [(5'h13):(1'h0)] wire180;
  wire signed [(2'h3):(1'h0)] wire4;
  wire signed [(3'h6):(1'h0)] wire6;
  wire [(5'h15):(1'h0)] wire19;
  wire signed [(4'hb):(1'h0)] wire20;
  wire [(3'h6):(1'h0)] wire32;
  wire [(5'h10):(1'h0)] wire33;
  wire [(5'h11):(1'h0)] wire34;
  wire [(5'h15):(1'h0)] wire35;
  wire signed [(5'h14):(1'h0)] wire178;
  reg [(3'h6):(1'h0)] reg31 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg30 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg27 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg24 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg18 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg16 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg15 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg14 = (1'h0);
  reg [(3'h7):(1'h0)] reg13 = (1'h0);
  reg [(4'hd):(1'h0)] reg12 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg10 = (1'h0);
  reg [(5'h15):(1'h0)] reg9 = (1'h0);
  reg [(5'h14):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg5 = (1'h0);
  reg signed [(4'he):(1'h0)] reg29 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg28 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar26 = (1'h0);
  reg [(5'h15):(1'h0)] forvar25 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg23 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar22 = (1'h0);
  reg [(4'hc):(1'h0)] forvar21 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg17 = (1'h0);
  reg [(4'hf):(1'h0)] forvar11 = (1'h0);
  reg [(5'h13):(1'h0)] forvar7 = (1'h0);
  assign y = {wire180,
                 wire4,
                 wire6,
                 wire19,
                 wire20,
                 wire32,
                 wire33,
                 wire34,
                 wire35,
                 wire178,
                 reg31,
                 reg30,
                 reg27,
                 reg24,
                 reg18,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg10,
                 reg9,
                 reg8,
                 reg5,
                 reg29,
                 reg28,
                 forvar26,
                 forvar25,
                 reg23,
                 forvar22,
                 forvar21,
                 reg17,
                 forvar11,
                 forvar7,
                 (1'h0)};
  assign wire4 = wire0[(1'h1):(1'h1)];
  always
    @(posedge clk) begin
      reg5 <= ((wire2[(2'h2):(1'h1)] >>> wire1) ?
          $signed((-({(8'hb9)} <= $signed(wire1)))) : ($unsigned(wire3[(3'h6):(1'h0)]) || wire2[(2'h2):(2'h2)]));
    end
  assign wire6 = wire2[(3'h4):(2'h3)];
  always
    @(posedge clk) begin
      for (forvar7 = (1'h0); (forvar7 < (1'h0)); forvar7 = (forvar7 + (1'h1)))
        begin
          reg8 <= forvar7[(5'h12):(4'h8)];
          reg9 <= reg8[(3'h4):(2'h2)];
          reg10 <= (-$signed($unsigned(({(8'had), wire6} ?
              (wire0 ^ wire1) : (-forvar7)))));
          for (forvar11 = (1'h0); (forvar11 < (2'h3)); forvar11 = (forvar11 + (1'h1)))
            begin
              reg12 <= ((^(-(^~(reg9 ?
                  wire1 : wire2)))) + ((reg5[(1'h1):(1'h1)] ?
                      $unsigned($unsigned(reg10)) : (^forvar7)) ?
                  forvar11[(3'h6):(3'h4)] : ($unsigned(wire0[(1'h1):(1'h0)]) ?
                      ((wire3 ? (8'hae) : (8'hac)) | (forvar11 ?
                          wire4 : reg9)) : $unsigned((+reg8)))));
              reg13 <= $signed(forvar7);
              reg14 <= (^((~|wire1) ? $signed(wire3) : reg13));
              reg15 <= $signed(({{$signed(reg5), (8'h9d)}} | forvar11));
              reg16 <= (reg10 + (|(((^wire2) ~^ (reg13 <= (8'ha9))) + reg15)));
            end
          reg17 = $unsigned((wire1 ? (|(!reg9)) : (-forvar7)));
        end
      reg18 <= reg13;
    end
  assign wire19 = (wire2 ?
                      wire1[(2'h2):(1'h1)] : $signed((((wire4 ?
                                  (8'h9c) : wire2) ?
                              reg10[(2'h2):(2'h2)] : (reg10 ? wire6 : wire2)) ?
                          $signed((!reg8)) : (~^$unsigned(wire0)))));
  assign wire20 = wire3[(3'h4):(1'h0)];
  always
    @(posedge clk) begin
      for (forvar21 = (1'h0); (forvar21 < (2'h2)); forvar21 = (forvar21 + (1'h1)))
        begin
          for (forvar22 = (1'h0); (forvar22 < (2'h3)); forvar22 = (forvar22 + (1'h1)))
            begin
              reg23 = $signed((-(8'hbc)));
            end
          reg24 <= (|wire19[(5'h11):(4'ha)]);
        end
      for (forvar25 = (1'h0); (forvar25 < (2'h2)); forvar25 = (forvar25 + (1'h1)))
        begin
          for (forvar26 = (1'h0); (forvar26 < (1'h1)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 <= (wire2[(1'h0):(1'h0)] && ({((forvar22 ?
                      forvar21 : reg9) ^ ((8'hb5) <<< reg12))} | $signed(((~^reg10) || (!reg14)))));
              reg28 = forvar25[(1'h1):(1'h0)];
            end
          reg29 = (!reg23[(1'h0):(1'h0)]);
          reg30 <= reg16[(2'h2):(2'h2)];
        end
      reg31 <= reg9;
    end
  assign wire32 = (~&(^~$unsigned(reg27[(3'h4):(1'h1)])));
  assign wire33 = {(^~$signed(wire0))};
  assign wire34 = (reg5[(2'h2):(1'h1)] ?
                      {wire4[(2'h2):(2'h2)]} : ((&wire20[(2'h2):(2'h2)]) ?
                          (~|wire20) : (wire1[(1'h1):(1'h0)] << $unsigned({reg14}))));
  assign wire35 = ({((!$unsigned((8'haf))) ?
                          reg30[(2'h3):(1'h0)] : $signed(wire4)),
                      ((wire1 ? (~^wire4) : (-(7'h42))) ?
                          (~wire20[(3'h4):(1'h1)]) : wire33[(2'h2):(2'h2)])} - ((|((~^wire2) ~^ $unsigned(reg12))) | $signed((~&(wire19 != (8'hab))))));
  module36 #() modinst179 (wire178, clk, reg8, reg9, reg5, wire2, reg16);
  assign wire180 = wire0;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module36
#(parameter param176 = (-(((8'hb5) << (~{(8'haa)})) ? (^(-((8'ha8) ? (7'h43) : (7'h44)))) : (7'h44))), 
parameter param177 = param176)
(y, clk, wire37, wire38, wire39, wire40, wire41);
  output wire [(32'h328):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h14):(1'h0)] wire37;
  input wire [(5'h15):(1'h0)] wire38;
  input wire signed [(2'h3):(1'h0)] wire39;
  input wire [(4'hf):(1'h0)] wire40;
  input wire signed [(5'h11):(1'h0)] wire41;
  wire signed [(5'h10):(1'h0)] wire175;
  wire signed [(4'he):(1'h0)] wire174;
  wire [(5'h13):(1'h0)] wire173;
  wire signed [(2'h2):(1'h0)] wire172;
  wire [(5'h12):(1'h0)] wire170;
  wire [(5'h13):(1'h0)] wire157;
  wire [(5'h13):(1'h0)] wire156;
  wire [(4'h8):(1'h0)] wire155;
  wire [(4'h9):(1'h0)] wire154;
  wire signed [(5'h12):(1'h0)] wire153;
  wire [(5'h12):(1'h0)] wire152;
  wire [(4'he):(1'h0)] wire149;
  wire [(4'h9):(1'h0)] wire148;
  wire [(4'h9):(1'h0)] wire147;
  wire [(5'h10):(1'h0)] wire146;
  wire signed [(4'he):(1'h0)] wire58;
  wire signed [(4'ha):(1'h0)] wire73;
  wire [(4'ha):(1'h0)] wire144;
  reg signed [(3'h7):(1'h0)] reg46 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg47 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg49 = (1'h0);
  reg [(4'hb):(1'h0)] reg50 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg51 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg53 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg54 = (1'h0);
  reg [(2'h3):(1'h0)] reg55 = (1'h0);
  reg [(5'h15):(1'h0)] reg56 = (1'h0);
  reg [(4'ha):(1'h0)] reg45 = (1'h0);
  reg [(4'h8):(1'h0)] reg57 = (1'h0);
  reg [(5'h12):(1'h0)] reg59 = (1'h0);
  reg [(4'ha):(1'h0)] reg61 = (1'h0);
  reg [(4'he):(1'h0)] reg62 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg63 = (1'h0);
  reg [(5'h13):(1'h0)] reg64 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg65 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg67 = (1'h0);
  reg [(3'h7):(1'h0)] reg68 = (1'h0);
  reg [(5'h13):(1'h0)] reg71 = (1'h0);
  reg [(5'h14):(1'h0)] reg72 = (1'h0);
  reg [(2'h2):(1'h0)] reg74 = (1'h0);
  reg [(2'h3):(1'h0)] reg77 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg78 = (1'h0);
  reg [(5'h12):(1'h0)] reg81 = (1'h0);
  reg [(2'h2):(1'h0)] reg83 = (1'h0);
  reg [(4'h9):(1'h0)] reg150 = (1'h0);
  reg [(5'h15):(1'h0)] reg151 = (1'h0);
  reg [(4'hd):(1'h0)] reg82 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar80 = (1'h0);
  reg [(5'h14):(1'h0)] reg79 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar76 = (1'h0);
  reg [(3'h6):(1'h0)] forvar75 = (1'h0);
  reg [(5'h14):(1'h0)] reg66 = (1'h0);
  reg [(4'h8):(1'h0)] reg70 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg69 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar66 = (1'h0);
  reg [(4'ha):(1'h0)] forvar60 = (1'h0);
  reg [(3'h6):(1'h0)] reg52 = (1'h0);
  reg [(5'h10):(1'h0)] forvar50 = (1'h0);
  reg [(3'h7):(1'h0)] reg48 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg42 = (1'h0);
  reg [(3'h4):(1'h0)] forvar52 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar48 = (1'h0);
  reg [(3'h4):(1'h0)] forvar45 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg44 = (1'h0);
  reg [(4'h8):(1'h0)] reg43 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar42 = (1'h0);
  assign y = {wire175,
                 wire174,
                 wire173,
                 wire172,
                 wire170,
                 wire157,
                 wire156,
                 wire155,
                 wire154,
                 wire153,
                 wire152,
                 wire149,
                 wire148,
                 wire147,
                 wire146,
                 wire58,
                 wire73,
                 wire144,
                 reg46,
                 reg47,
                 reg49,
                 reg50,
                 reg51,
                 reg53,
                 reg54,
                 reg55,
                 reg56,
                 reg45,
                 reg57,
                 reg59,
                 reg61,
                 reg62,
                 reg63,
                 reg64,
                 reg65,
                 reg67,
                 reg68,
                 reg71,
                 reg72,
                 reg74,
                 reg77,
                 reg78,
                 reg81,
                 reg83,
                 reg150,
                 reg151,
                 reg82,
                 forvar80,
                 reg79,
                 forvar76,
                 forvar75,
                 reg66,
                 reg70,
                 reg69,
                 forvar66,
                 forvar60,
                 reg52,
                 forvar50,
                 reg48,
                 reg42,
                 forvar52,
                 forvar48,
                 forvar45,
                 reg44,
                 reg43,
                 forvar42,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ($unsigned((($unsigned(((8'hb2) ? wire40 : wire39)) ?
          $signed((wire40 ?
              (7'h44) : wire40)) : $signed($unsigned(wire37))) >> wire41)))
        begin
          for (forvar42 = (1'h0); (forvar42 < (2'h3)); forvar42 = (forvar42 + (1'h1)))
            begin
              reg43 = $unsigned({wire39, $unsigned(wire39)});
              reg44 = forvar42[(5'h12):(2'h3)];
            end
          for (forvar45 = (1'h0); (forvar45 < (2'h3)); forvar45 = (forvar45 + (1'h1)))
            begin
              reg46 <= (!wire38);
              reg47 <= (({(~|(wire39 ? wire37 : wire41))} ~^ (($signed(wire38) ?
                      $unsigned(wire39) : forvar45[(2'h2):(2'h2)]) >>> wire37)) ?
                  $unsigned(({wire37, $signed(wire41)} + {(wire40 ?
                          reg46 : reg44),
                      $signed(reg43)})) : (wire39 ?
                      $signed(($signed(wire40) * (~^wire37))) : ((wire38[(2'h3):(1'h0)] && (reg43 << wire38)) ?
                          $signed(reg43[(3'h4):(2'h2)]) : ($unsigned(reg46) & (^reg43)))));
            end
          for (forvar48 = (1'h0); (forvar48 < (2'h3)); forvar48 = (forvar48 + (1'h1)))
            begin
              reg49 <= {$signed($unsigned((reg44 ?
                      (forvar42 < reg47) : (reg44 || reg43))))};
              reg50 <= (^~reg49);
              reg51 <= $unsigned(forvar45[(2'h2):(1'h1)]);
            end
          for (forvar52 = (1'h0); (forvar52 < (1'h1)); forvar52 = (forvar52 + (1'h1)))
            begin
              reg53 <= $unsigned($signed(((~^(8'hb3)) ?
                  (reg46 >> ((8'had) & reg44)) : {(wire41 * reg49)})));
              reg54 <= ($unsigned($unsigned(forvar52)) >= $unsigned($unsigned($signed((reg44 >>> reg44)))));
              reg55 <= $unsigned((wire38 - wire41[(1'h0):(1'h0)]));
              reg56 <= $unsigned(($signed(reg44) >> ($signed((reg55 ^~ forvar45)) ?
                  (^(reg51 - reg47)) : {$unsigned((8'ha1)), $signed(reg46)})));
            end
        end
      else
        begin
          reg42 = ((~^(reg44[(4'hb):(4'h8)] < ($unsigned(forvar48) ?
                  (!wire40) : $unsigned(reg46)))) ?
              ($unsigned($signed((~|(8'hb0)))) - wire39[(2'h3):(1'h0)]) : ((((8'had) ?
                      reg46[(1'h1):(1'h0)] : (forvar45 < reg53)) ?
                  (^~$signed(reg56)) : (&reg53)) <<< {($unsigned(reg51) ?
                      ((8'hb1) | (8'ha0)) : {reg51, reg47}),
                  wire38[(3'h4):(3'h4)]}));
          reg45 <= (8'hac);
          reg48 = ($signed($unsigned(($signed((8'hbd)) ?
                  (8'ha6) : (^~reg45)))) ?
              (~^(!(wire38[(3'h4):(3'h4)] <<< (+wire39)))) : (reg54 ?
                  ({{reg43, reg53},
                      (^~forvar48)} & $unsigned(reg54)) : (~^$unsigned((forvar52 ?
                      forvar48 : wire41)))));
          reg49 <= (forvar52[(1'h1):(1'h1)] - $signed({reg53,
              reg44[(5'h13):(4'hd)]}));
          for (forvar50 = (1'h0); (forvar50 < (1'h1)); forvar50 = (forvar50 + (1'h1)))
            begin
              reg52 = (reg44 ?
                  $unsigned((reg42[(4'he):(4'hd)] << {$signed((7'h43)),
                      (^~forvar42)})) : (((7'h41) ?
                          (reg44 ? wire39 : (^~reg50)) : reg56) ?
                      {((&(8'ha4)) + (~wire37)),
                          ((8'hb0) > $signed(forvar50))} : reg53[(5'h12):(4'h9)]));
              reg53 <= (8'ha8);
              reg54 <= ($unsigned(((~^(reg42 >= forvar52)) >>> ((reg43 ^~ reg45) ?
                  $unsigned(reg51) : ((7'h42) < reg48)))) != {(&{(reg50 ?
                          reg52 : wire39)}),
                  $signed(({forvar52, reg45} ?
                      $unsigned(forvar50) : (~&reg48)))});
              reg55 <= (($unsigned(((reg55 ? reg55 : wire40) < (forvar50 ?
                  (8'hb0) : (7'h43)))) < {($unsigned(reg54) <<< (forvar42 ?
                      forvar45 : reg42)),
                  forvar52}) != ($signed(forvar52) >> forvar52));
            end
        end
      reg57 <= $signed($unsigned(reg56[(5'h12):(4'hc)]));
    end
  assign wire58 = wire41;
  always
    @(posedge clk) begin
      reg59 <= ($signed((reg49 + $signed(reg53))) ?
          (~^$signed(((reg49 >> wire40) ?
              ((8'hb9) ? reg45 : reg56) : wire40[(1'h0):(1'h0)]))) : (((8'ha5) ?
              $unsigned((wire38 ? wire40 : reg57)) : ((reg46 ?
                  (8'ha4) : reg57) - reg53)) + ($unsigned({(8'hb2)}) | ((reg45 ?
              wire39 : reg51) * {reg56}))));
      if (((wire40 < $unsigned($signed(reg46))) - ($unsigned(reg54[(4'h8):(3'h4)]) ?
          (&({wire41} <<< wire41)) : $signed(wire41[(1'h0):(1'h0)]))))
        begin
          for (forvar60 = (1'h0); (forvar60 < (1'h0)); forvar60 = (forvar60 + (1'h1)))
            begin
              reg61 <= (reg51 ?
                  (&(wire41[(1'h0):(1'h0)] <<< ((~wire38) ?
                      $unsigned(reg50) : reg45[(4'h9):(1'h0)]))) : ($signed({{reg51}}) >> wire58));
              reg62 <= reg55[(2'h2):(1'h0)];
              reg63 <= $unsigned(((&(reg54[(1'h0):(1'h0)] ?
                  $unsigned((8'hba)) : (reg54 >>> wire58))) ^~ ((^~reg53) ?
                  ($unsigned(reg61) ?
                      $unsigned(reg61) : ((7'h44) ?
                          (8'hb5) : wire38)) : (8'ha9))));
              reg64 <= $signed($unsigned(reg55[(1'h0):(1'h0)]));
              reg65 <= reg61;
            end
          for (forvar66 = (1'h0); (forvar66 < (1'h1)); forvar66 = (forvar66 + (1'h1)))
            begin
              reg67 <= (&reg59[(2'h3):(1'h0)]);
              reg68 <= (8'ha8);
              reg69 = ($unsigned($signed((^{reg68, wire40}))) < forvar66);
              reg70 = reg59[(4'h8):(3'h7)];
              reg71 <= $signed(((+$unsigned((&wire37))) < {(reg64[(2'h3):(1'h1)] == reg47)}));
            end
          reg72 <= (reg71[(4'hb):(4'h8)] & (~&(-reg51[(2'h2):(1'h0)])));
        end
      else
        begin
          for (forvar60 = (1'h0); (forvar60 < (3'h4)); forvar60 = (forvar60 + (1'h1)))
            begin
              reg66 = (reg46[(3'h4):(2'h2)] <<< $signed($unsigned(reg64[(3'h5):(3'h5)])));
              reg69 = $signed($unsigned(({wire38[(4'h8):(1'h0)],
                  reg70[(2'h3):(2'h3)]} > (~&((8'hb4) + reg54)))));
              reg70 = wire40;
              reg71 <= (+(^($signed($signed((7'h42))) ?
                  ($signed(reg45) ?
                      {reg59} : ((8'hb1) > reg65)) : ($signed((8'hb9)) ?
                      (+wire38) : $unsigned(reg66)))));
            end
          reg72 <= wire38[(2'h3):(1'h1)];
        end
    end
  assign wire73 = ($unsigned($signed(reg56)) ?
                      (&$unsigned(($signed(reg51) ?
                          (~&reg56) : {wire40, wire39}))) : reg53);
  always
    @(posedge clk) begin
      reg74 <= ({reg72[(5'h11):(2'h3)],
          $signed((-(reg56 ? reg72 : (7'h40))))} ^ wire58[(4'h8):(3'h5)]);
      for (forvar75 = (1'h0); (forvar75 < (1'h0)); forvar75 = (forvar75 + (1'h1)))
        begin
          for (forvar76 = (1'h0); (forvar76 < (1'h0)); forvar76 = (forvar76 + (1'h1)))
            begin
              reg77 <= (!$signed((~^(~|{reg55}))));
              reg78 <= wire38[(1'h1):(1'h1)];
              reg79 = $signed((^~reg45));
            end
          for (forvar80 = (1'h0); (forvar80 < (1'h0)); forvar80 = (forvar80 + (1'h1)))
            begin
              reg81 <= (($unsigned(((reg67 | reg78) ~^ {reg68,
                      wire73})) == $signed(($unsigned(reg71) - $unsigned(reg53)))) ?
                  ((reg78 && $unsigned(reg61)) ?
                      (~&reg59[(4'he):(4'hb)]) : reg61[(3'h4):(1'h0)]) : (reg54[(3'h7):(3'h5)] - ($signed((8'hb0)) ^ (~&{wire73}))));
            end
          reg82 = reg64[(1'h1):(1'h1)];
          reg83 <= $unsigned($signed($signed(((reg62 * reg55) || (wire73 ?
              wire37 : reg49)))));
        end
    end
  module84 #() modinst145 (wire144, clk, reg64, wire38, reg47, reg53, reg65);
  assign wire146 = ($signed(({$signed(reg55)} * $signed((~^wire39)))) ?
                       ($signed($signed(reg83[(1'h0):(1'h0)])) ?
                           reg81[(4'hf):(2'h2)] : (reg72[(5'h13):(4'hd)] ?
                               reg64 : ((~&reg67) ?
                                   (reg74 ?
                                       wire38 : reg54) : $unsigned(reg67)))) : reg77);
  assign wire147 = $unsigned($signed(reg64));
  assign wire148 = (~&($signed({(reg74 >>> wire144)}) & $signed((reg51 || (reg47 ?
                       reg81 : wire40)))));
  assign wire149 = ($unsigned($unsigned(reg61)) & ($unsigned(reg68[(3'h7):(2'h3)]) ?
                       ($signed(reg68[(3'h5):(3'h4)]) > (wire58[(3'h6):(2'h3)] >>> reg74[(1'h1):(1'h1)])) : ((reg64 ?
                               {(8'hb6), wire37} : (reg54 ? (8'haa) : reg72)) ?
                           {{wire38, (8'h9d)}} : (8'hb3))));
  always
    @(posedge clk) begin
      if ((($unsigned((reg51[(2'h2):(1'h0)] ? $signed(reg62) : (-reg83))) ?
              reg74 : reg74) ?
          reg63[(1'h0):(1'h0)] : (&wire148)))
        begin
          reg150 <= reg56[(3'h5):(1'h0)];
          reg151 = (+wire147);
        end
      else
        begin
          reg151 = $unsigned($unsigned(((wire37[(4'hd):(4'h8)] ?
              (wire149 ? wire38 : reg53) : (reg74 ?
                  reg81 : reg77)) >= $signed(reg64[(3'h5):(2'h2)]))));
        end
    end
  assign wire152 = $unsigned(reg65);
  assign wire153 = (~^((wire39 ?
                           reg62[(4'hb):(4'h9)] : $unsigned((wire41 > (8'hb3)))) ?
                       wire148[(3'h4):(2'h2)] : {($unsigned(wire149) + $signed((8'had))),
                           {((8'h9f) ? (8'hb4) : reg61)}}));
  assign wire154 = {$signed(wire37)};
  assign wire155 = (8'ha4);
  assign wire156 = (~(8'hb9));
  assign wire157 = (~|wire41);
  module158 #() modinst171 (wire170, clk, wire41, reg61, wire37, reg47, reg56);
  assign wire172 = ($unsigned(reg77[(2'h2):(1'h0)]) ?
                       (reg55[(1'h1):(1'h1)] ?
                           ($unsigned((8'ha3)) ?
                               wire40 : ($unsigned(reg150) ?
                                   wire147 : (reg68 ?
                                       reg55 : (8'ha3)))) : wire152) : wire40[(4'hc):(3'h6)]);
  assign wire173 = wire41;
  assign wire174 = (&($unsigned(((reg83 >> wire155) || {reg74})) <<< (($unsigned(reg74) & ((8'hb6) > (7'h42))) >= (+((7'h44) ~^ reg81)))));
  assign wire175 = reg74[(1'h0):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module158
#(parameter param168 = (7'h44), 
parameter param169 = (param168 | (((param168 ^~ (~(8'ha0))) >>> param168) ? param168 : (({param168} == (~|(8'hb0))) <= (~|(param168 << (8'ha8)))))))
(y, clk, wire163, wire162, wire161, wire160, wire159);
  output wire [(32'h45):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h11):(1'h0)] wire163;
  input wire signed [(4'ha):(1'h0)] wire162;
  input wire signed [(5'h14):(1'h0)] wire161;
  input wire signed [(5'h10):(1'h0)] wire160;
  input wire signed [(3'h7):(1'h0)] wire159;
  wire [(5'h12):(1'h0)] wire167;
  wire signed [(4'he):(1'h0)] wire166;
  wire [(5'h12):(1'h0)] wire165;
  wire [(5'h12):(1'h0)] wire164;
  assign y = {wire167, wire166, wire165, wire164, (1'h0)};
  assign wire164 = $signed($unsigned((~&{((8'hb9) - wire162)})));
  assign wire165 = (wire160[(4'h8):(4'h8)] ?
                       $unsigned($unsigned($unsigned((!wire164)))) : ($signed(wire160) ?
                           $unsigned(wire164[(2'h2):(1'h0)]) : wire161[(5'h13):(3'h7)]));
  assign wire166 = (~&$unsigned(((-wire159) ?
                       (8'hb4) : (wire159[(3'h7):(3'h5)] ?
                           wire164 : wire160[(4'h9):(3'h6)]))));
  assign wire167 = {(~({{wire166, wire159},
                           $signed(wire162)} >> ($signed(wire161) ?
                           (~^wire160) : (~wire160)))),
                       (wire161[(1'h1):(1'h1)] ?
                           {((|wire159) ? $unsigned((8'hb6)) : wire164),
                               wire163} : (wire159 ?
                               (wire162[(3'h4):(2'h2)] ?
                                   (wire159 & wire163) : $unsigned((8'hae))) : wire162))};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module84  (y, clk, wire89, wire88, wire87, wire86, wire85);
  output wire [(32'h232):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h13):(1'h0)] wire89;
  input wire [(5'h15):(1'h0)] wire88;
  input wire signed [(5'h10):(1'h0)] wire87;
  input wire [(5'h15):(1'h0)] wire86;
  input wire [(4'hf):(1'h0)] wire85;
  wire signed [(2'h3):(1'h0)] wire91;
  wire signed [(3'h5):(1'h0)] wire90;
  reg [(5'h14):(1'h0)] reg143 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg139 = (1'h0);
  reg [(5'h13):(1'h0)] reg137 = (1'h0);
  reg signed [(4'he):(1'h0)] reg136 = (1'h0);
  reg [(4'hb):(1'h0)] reg131 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg130 = (1'h0);
  reg [(4'hb):(1'h0)] reg129 = (1'h0);
  reg [(4'h9):(1'h0)] reg125 = (1'h0);
  reg [(2'h3):(1'h0)] reg124 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg122 = (1'h0);
  reg [(3'h7):(1'h0)] reg120 = (1'h0);
  reg [(4'h9):(1'h0)] reg116 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg114 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg112 = (1'h0);
  reg [(2'h3):(1'h0)] reg111 = (1'h0);
  reg [(4'hf):(1'h0)] reg110 = (1'h0);
  reg [(5'h14):(1'h0)] reg108 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg105 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg103 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg101 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg96 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg95 = (1'h0);
  reg [(5'h14):(1'h0)] forvar142 = (1'h0);
  reg signed [(4'he):(1'h0)] reg141 = (1'h0);
  reg [(3'h4):(1'h0)] forvar140 = (1'h0);
  reg [(5'h12):(1'h0)] reg138 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg135 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar134 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar133 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg132 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar128 = (1'h0);
  reg signed [(4'he):(1'h0)] reg127 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar126 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar123 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg121 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar119 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg118 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar117 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg115 = (1'h0);
  reg [(4'h9):(1'h0)] forvar113 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar109 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar107 = (1'h0);
  reg [(4'h8):(1'h0)] forvar106 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar104 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg102 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg100 = (1'h0);
  reg [(5'h15):(1'h0)] forvar99 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar98 = (1'h0);
  reg [(4'hd):(1'h0)] reg97 = (1'h0);
  reg [(4'hc):(1'h0)] reg94 = (1'h0);
  reg [(4'hc):(1'h0)] forvar93 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar92 = (1'h0);
  assign y = {wire91,
                 wire90,
                 reg143,
                 reg139,
                 reg137,
                 reg136,
                 reg131,
                 reg130,
                 reg129,
                 reg125,
                 reg124,
                 reg122,
                 reg120,
                 reg116,
                 reg114,
                 reg112,
                 reg111,
                 reg110,
                 reg108,
                 reg105,
                 reg103,
                 reg101,
                 reg96,
                 reg95,
                 forvar142,
                 reg141,
                 forvar140,
                 reg138,
                 reg135,
                 forvar134,
                 forvar133,
                 reg132,
                 forvar128,
                 reg127,
                 forvar126,
                 forvar123,
                 reg121,
                 forvar119,
                 reg118,
                 forvar117,
                 reg115,
                 forvar113,
                 forvar109,
                 forvar107,
                 forvar106,
                 forvar104,
                 reg102,
                 reg100,
                 forvar99,
                 forvar98,
                 reg97,
                 reg94,
                 forvar93,
                 forvar92,
                 (1'h0)};
  assign wire90 = (($signed(wire89[(4'h9):(3'h4)]) ?
                          wire88 : $signed($signed({wire88}))) ?
                      (wire88 ?
                          ({$signed((8'haa)),
                              wire86} * wire86) : ($signed(wire89) <<< (wire89[(3'h6):(3'h4)] && $signed(wire85)))) : (wire89 ?
                          $unsigned(wire85) : ($unsigned((wire87 ?
                              wire88 : wire85)) ~^ $unsigned((^~wire86)))));
  assign wire91 = wire85[(1'h0):(1'h0)];
  always
    @(posedge clk) begin
      for (forvar92 = (1'h0); (forvar92 < (3'h4)); forvar92 = (forvar92 + (1'h1)))
        begin
          for (forvar93 = (1'h0); (forvar93 < (1'h1)); forvar93 = (forvar93 + (1'h1)))
            begin
              reg94 = ($signed({((!wire87) == $signed(wire89)),
                      $unsigned(wire86)}) ?
                  (wire90[(3'h4):(3'h4)] ?
                      $unsigned($signed($signed(wire88))) : wire90) : ((~((wire88 ^~ wire89) ?
                          $unsigned(forvar92) : (~|wire86))) ?
                      ($signed($signed(wire85)) && $unsigned((wire88 ?
                          forvar92 : wire85))) : wire89[(5'h11):(3'h6)]));
              reg95 <= $signed($unsigned($signed(($unsigned(wire85) ?
                  $signed(wire88) : wire88))));
              reg96 <= $signed(reg94[(2'h2):(2'h2)]);
              reg97 = wire87;
            end
        end
      for (forvar98 = (1'h0); (forvar98 < (1'h0)); forvar98 = (forvar98 + (1'h1)))
        begin
          for (forvar99 = (1'h0); (forvar99 < (3'h4)); forvar99 = (forvar99 + (1'h1)))
            begin
              reg100 = forvar99[(4'hc):(4'hb)];
              reg101 <= (wire85[(3'h5):(3'h5)] < $signed($unsigned($unsigned((wire85 & reg94)))));
            end
          reg102 = wire85[(3'h4):(1'h1)];
          reg103 <= (!$signed((reg102 ?
              forvar92 : $signed($unsigned(reg100)))));
        end
      for (forvar104 = (1'h0); (forvar104 < (2'h2)); forvar104 = (forvar104 + (1'h1)))
        begin
          reg105 <= ($unsigned($unsigned((+(+wire90)))) > $signed((wire88[(3'h5):(3'h5)] | ((wire89 ?
              reg95 : forvar104) - ((7'h41) ? reg96 : wire85)))));
        end
      for (forvar106 = (1'h0); (forvar106 < (3'h4)); forvar106 = (forvar106 + (1'h1)))
        begin
          for (forvar107 = (1'h0); (forvar107 < (3'h4)); forvar107 = (forvar107 + (1'h1)))
            begin
              reg108 <= $signed((((|wire85) ?
                  (~&forvar107) : {reg105[(2'h3):(2'h2)],
                      $signed(wire86)}) >> (|({(8'ha3)} >> $signed((8'ha2))))));
            end
          for (forvar109 = (1'h0); (forvar109 < (1'h0)); forvar109 = (forvar109 + (1'h1)))
            begin
              reg110 <= (~|{$signed(forvar99), reg96});
              reg111 <= {(^~forvar92[(3'h6):(2'h3)])};
              reg112 <= ((($signed((reg96 * reg97)) ?
                          (reg101[(1'h1):(1'h1)] ?
                              (reg108 && (8'h9e)) : (forvar109 ?
                                  wire88 : wire91)) : (+forvar104)) ?
                      reg100[(4'ha):(3'h7)] : ($signed((8'h9f)) || $signed((!reg95)))) ?
                  {{$signed($signed(wire86))}} : $signed((({reg101} ?
                          {(7'h42), reg103} : (wire90 ? forvar106 : forvar98)) ?
                      {forvar104[(4'h8):(3'h4)], wire85} : $unsigned((wire85 ?
                          reg101 : (7'h44))))));
            end
          for (forvar113 = (1'h0); (forvar113 < (2'h3)); forvar113 = (forvar113 + (1'h1)))
            begin
              reg114 <= (({$signed($signed(reg101))} ?
                      reg100[(3'h4):(1'h0)] : $unsigned(reg102[(3'h4):(1'h1)])) ?
                  (|((forvar109[(1'h0):(1'h0)] ?
                      {forvar106, wire85} : ((8'ha5) ?
                          reg94 : wire89)) + (((8'hb0) ?
                      wire88 : (8'h9d)) >= $unsigned(forvar113)))) : (!$unsigned(forvar106[(2'h3):(1'h0)])));
            end
          reg115 = $unsigned(reg112[(1'h1):(1'h0)]);
          reg116 <= {reg115[(3'h4):(1'h1)],
              ((wire85[(3'h5):(1'h0)] ^~ (+((7'h41) | (8'hb9)))) ?
                  (~|$unsigned((^~(8'hbe)))) : {$unsigned(wire86)})};
        end
    end
  always
    @(posedge clk) begin
      for (forvar117 = (1'h0); (forvar117 < (2'h3)); forvar117 = (forvar117 + (1'h1)))
        begin
          reg118 = {reg105, {$signed({$signed(wire91)})}};
          for (forvar119 = (1'h0); (forvar119 < (1'h0)); forvar119 = (forvar119 + (1'h1)))
            begin
              reg120 <= reg116;
              reg121 = (-reg105);
              reg122 <= $signed($signed((~$unsigned($signed((8'hbe))))));
            end
          for (forvar123 = (1'h0); (forvar123 < (3'h4)); forvar123 = (forvar123 + (1'h1)))
            begin
              reg124 <= $signed(((($unsigned(wire87) ?
                      (7'h42) : (reg120 ?
                          reg122 : reg116)) >>> ($signed(reg110) ?
                      $unsigned(wire86) : (reg114 >> reg95))) ?
                  reg114[(1'h0):(1'h0)] : (8'h9d)));
            end
          reg125 <= $unsigned((~|$signed({reg118})));
        end
      for (forvar126 = (1'h0); (forvar126 < (2'h3)); forvar126 = (forvar126 + (1'h1)))
        begin
          reg127 = (~((-wire87[(4'hc):(3'h4)]) ?
              ((~^(reg105 ^~ reg105)) ?
                  $signed($unsigned((8'hb5))) : (^reg120)) : wire85[(3'h4):(1'h0)]));
          for (forvar128 = (1'h0); (forvar128 < (2'h3)); forvar128 = (forvar128 + (1'h1)))
            begin
              reg129 <= $signed($signed((-wire91)));
              reg130 <= reg110;
              reg131 <= reg124;
            end
          reg132 = (reg108 ?
              $unsigned(reg130[(2'h3):(2'h2)]) : $unsigned({($unsigned((8'ha7)) ?
                      (reg101 ? (8'had) : reg130) : (~reg101)),
                  ($signed(forvar117) <= ((8'haf) & reg125))}));
        end
      for (forvar133 = (1'h0); (forvar133 < (3'h4)); forvar133 = (forvar133 + (1'h1)))
        begin
          for (forvar134 = (1'h0); (forvar134 < (2'h2)); forvar134 = (forvar134 + (1'h1)))
            begin
              reg135 = ($unsigned((((forvar126 ? wire89 : (8'hbf)) ?
                      (~&reg122) : reg112[(1'h0):(1'h0)]) * (8'had))) ?
                  $signed(reg131) : $unsigned(((wire86 ?
                          (wire91 == forvar128) : wire88[(4'hf):(3'h5)]) ?
                      reg125[(3'h4):(2'h3)] : forvar134)));
              reg136 <= reg121;
              reg137 <= $signed(reg112[(2'h3):(2'h2)]);
              reg138 = (^~$unsigned(reg129));
            end
          reg139 <= reg108;
          for (forvar140 = (1'h0); (forvar140 < (2'h2)); forvar140 = (forvar140 + (1'h1)))
            begin
              reg141 = reg111[(1'h1):(1'h0)];
            end
          for (forvar142 = (1'h0); (forvar142 < (2'h2)); forvar142 = (forvar142 + (1'h1)))
            begin
              reg143 <= ($unsigned((((7'h40) ? $signed(reg112) : (-(8'ha9))) ?
                  {(~^forvar123)} : $unsigned((wire91 - reg125)))) == (+{($signed(wire90) <<< $signed(wire90)),
                  reg95}));
            end
        end
    end
endmodule