(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h7c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire0;
  input wire signed [(3'h4):(1'h0)] wire1;
  input wire [(3'h6):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire3;
  wire [(4'hb):(1'h0)] wire69;
  wire [(4'h8):(1'h0)] wire6;
  wire [(4'ha):(1'h0)] wire7;
  wire [(2'h3):(1'h0)] wire8;
  wire signed [(4'h9):(1'h0)] wire9;
  wire signed [(3'h4):(1'h0)] wire67;
  reg signed [(3'h6):(1'h0)] reg71 = (1'h0);
  reg [(4'ha):(1'h0)] reg70 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg4 = (1'h0);
  reg [(4'ha):(1'h0)] reg5 = (1'h0);
  reg [(3'h7):(1'h0)] reg10 = (1'h0);
  reg [(4'h9):(1'h0)] reg11 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg12 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg14 = (1'h0);
  assign y = {wire69,
                 wire6,
                 wire7,
                 wire8,
                 wire9,
                 wire67,
                 reg71,
                 reg70,
                 reg4,
                 reg5,
                 reg10,
                 reg11,
                 reg12,
                 reg13,
                 reg14,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= ($signed((wire0 ?
          $signed(wire0) : wire3[(4'h9):(2'h3)])) | (wire3[(3'h6):(1'h1)] != wire2[(3'h6):(1'h0)]));
      reg5 <= wire0;
    end
  assign wire6 = ((wire3[(3'h6):(1'h1)] + ((wire2 - reg5) <= $unsigned(reg5))) ?
                     wire2[(2'h3):(2'h3)] : ($signed(wire1) < ((wire2 ?
                             (8'ha2) : wire0) ?
                         wire1[(2'h3):(2'h2)] : (|reg5))));
  assign wire7 = {({(wire2 ? reg5 : wire0)} ~^ ($unsigned(wire2) ?
                         wire1 : $signed(reg5)))};
  assign wire8 = {{(reg5[(1'h1):(1'h1)] ? (8'hac) : $signed(wire0))}};
  assign wire9 = (+(^wire7));
  always
    @(posedge clk) begin
      reg10 <= $unsigned((+(^~(~&reg5))));
      reg11 <= (~((!$unsigned(wire9)) ?
          ($unsigned(wire3) ?
              (wire8 <= wire7) : $signed(wire7)) : $signed((reg10 ?
              wire2 : reg10))));
      reg12 <= $signed(reg10);
    end
  always
    @(posedge clk) begin
      reg13 <= $signed(wire9);
      reg14 <= reg4;
    end
  module15 #() modinst68 (wire67, clk, reg4, reg11, wire9, reg12);
  assign wire69 = ((|(~|$unsigned((8'ha3)))) ?
                      {($signed(wire1) ?
                              (wire6 ? wire7 : reg14) : {reg4})} : wire7);
  always
    @(posedge clk) begin
      if (wire6[(1'h1):(1'h1)])
        begin
          reg70 <= (8'ha1);
        end
      else
        begin
          if ({(((8'ha9) ^~ $unsigned(wire9)) ? wire6 : (~(|reg70)))})
            begin
              reg70 <= wire69;
            end
          else
            begin
              reg70 <= wire6;
            end
        end
      reg71 <= reg13[(1'h1):(1'h0)];
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15
#(parameter param66 = (8'haa))
(y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h61):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire19;
  input wire signed [(4'h9):(1'h0)] wire18;
  input wire [(3'h6):(1'h0)] wire17;
  input wire [(4'h9):(1'h0)] wire16;
  wire signed [(4'h9):(1'h0)] wire64;
  wire [(3'h5):(1'h0)] wire52;
  wire [(4'ha):(1'h0)] wire51;
  wire signed [(4'ha):(1'h0)] wire50;
  wire signed [(4'ha):(1'h0)] wire43;
  wire [(4'ha):(1'h0)] wire42;
  wire [(3'h4):(1'h0)] wire41;
  wire [(4'hb):(1'h0)] wire39;
  reg signed [(2'h2):(1'h0)] reg49 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg48 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg47 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg46 = (1'h0);
  reg [(2'h2):(1'h0)] reg45 = (1'h0);
  reg [(4'hb):(1'h0)] reg44 = (1'h0);
  assign y = {wire64,
                 wire52,
                 wire51,
                 wire50,
                 wire43,
                 wire42,
                 wire41,
                 wire39,
                 reg49,
                 reg48,
                 reg47,
                 reg46,
                 reg45,
                 reg44,
                 (1'h0)};
  module20 #() modinst40 (wire39, clk, wire16, wire18, wire19, wire17);
  assign wire41 = ((wire19[(1'h0):(1'h0)] | (+(wire18 ?
                      wire19 : wire17))) > wire18[(4'h9):(2'h2)]);
  assign wire42 = {wire18[(4'h9):(3'h6)]};
  assign wire43 = ({wire41} < wire39);
  always
    @(posedge clk) begin
      if ((8'hae))
        begin
          reg44 <= {wire17[(2'h2):(2'h2)]};
          reg45 <= $unsigned($signed(reg44));
          reg46 <= (8'ha7);
        end
      else
        begin
          reg44 <= $signed(wire42);
          if ((reg44[(3'h6):(3'h6)] ?
              ((reg44[(4'h9):(2'h3)] && $signed(wire42)) ?
                  ({wire19} ?
                      ((8'hab) <= reg46) : wire16[(2'h2):(1'h1)]) : wire41) : (~^{{wire18}})))
            begin
              reg45 <= ($signed(wire18[(3'h7):(3'h5)]) ?
                  (((wire17 == reg45) ?
                      (wire41 ?
                          wire18 : wire16) : reg46[(1'h1):(1'h1)]) ^~ $signed($unsigned(wire16))) : (|$unsigned($unsigned(wire18))));
            end
          else
            begin
              reg45 <= $signed(wire43[(3'h5):(2'h2)]);
              reg46 <= (^$unsigned((^(wire39 ? wire19 : wire39))));
            end
          reg47 <= reg46[(2'h2):(1'h1)];
        end
      reg48 <= wire39[(3'h7):(3'h5)];
      reg49 <= ((^wire39[(4'ha):(1'h0)]) ?
          $unsigned(wire42) : $unsigned({{wire39}}));
    end
  assign wire50 = {$signed({(wire39 ? wire41 : wire41)})};
  assign wire51 = wire39;
  assign wire52 = wire41[(3'h4):(2'h2)];
  module53 #() modinst65 (wire64, clk, wire50, wire42, wire51, wire52);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module53  (y, clk, wire57, wire56, wire55, wire54);
  output wire [(32'h2a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire57;
  input wire signed [(2'h2):(1'h0)] wire56;
  input wire signed [(4'h8):(1'h0)] wire55;
  input wire [(2'h2):(1'h0)] wire54;
  wire [(3'h7):(1'h0)] wire63;
  wire signed [(4'ha):(1'h0)] wire62;
  wire signed [(3'h7):(1'h0)] wire61;
  wire [(4'h8):(1'h0)] wire60;
  wire [(3'h7):(1'h0)] wire59;
  wire signed [(2'h2):(1'h0)] wire58;
  assign y = {wire63, wire62, wire61, wire60, wire59, wire58, (1'h0)};
  assign wire58 = (~^wire55);
  assign wire59 = wire55;
  assign wire60 = wire55[(3'h7):(1'h1)];
  assign wire61 = wire55;
  assign wire62 = wire58;
  assign wire63 = wire60[(2'h2):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module20  (y, clk, wire24, wire23, wire22, wire21);
  output wire [(32'h67):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire24;
  input wire signed [(4'h9):(1'h0)] wire23;
  input wire [(4'h8):(1'h0)] wire22;
  input wire signed [(3'h6):(1'h0)] wire21;
  wire signed [(2'h2):(1'h0)] wire38;
  wire signed [(4'h9):(1'h0)] wire37;
  wire signed [(4'h8):(1'h0)] wire36;
  wire [(4'hb):(1'h0)] wire35;
  reg signed [(3'h6):(1'h0)] reg34 = (1'h0);
  reg [(4'h9):(1'h0)] reg33 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg32 = (1'h0);
  reg [(3'h4):(1'h0)] reg31 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg30 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg29 = (1'h0);
  reg [(4'ha):(1'h0)] reg28 = (1'h0);
  reg [(4'hb):(1'h0)] reg27 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg26 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg25 = (1'h0);
  assign y = {wire38,
                 wire37,
                 wire36,
                 wire35,
                 reg34,
                 reg33,
                 reg32,
                 reg31,
                 reg30,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ({$unsigned(({wire23} ? $unsigned(wire22) : wire23[(3'h7):(3'h5)]))})
        begin
          reg25 <= ($signed((8'ha9)) | $signed(wire24));
          reg26 <= (((~{wire21}) ?
                  $unsigned((reg25 || wire23)) : reg25[(2'h2):(2'h2)]) ?
              ($unsigned((&reg25)) ?
                  reg25 : $unsigned((wire21 ?
                      wire23 : reg25))) : $unsigned(wire22[(3'h4):(2'h3)]));
          reg27 <= wire24;
        end
      else
        begin
          reg25 <= wire22[(3'h5):(2'h3)];
        end
      reg28 <= (~&reg27);
    end
  always
    @(posedge clk) begin
      reg29 <= ($signed(((wire23 > wire23) ?
          $unsigned(reg28) : (8'ha9))) <= ((reg25 && (wire22 & reg28)) ?
          (~&$unsigned((8'ha7))) : ({(8'hab)} ?
              ((8'haf) ? reg26 : reg28) : (reg28 - reg28))));
      if ((8'ha9))
        begin
          reg30 <= $signed(((^~((8'ha7) <<< (8'ha8))) ?
              $unsigned({(8'hac)}) : reg27));
          if ($unsigned({reg27}))
            begin
              reg31 <= reg30[(3'h5):(2'h2)];
              reg32 <= reg30[(3'h4):(1'h0)];
              reg33 <= reg27[(1'h0):(1'h0)];
            end
          else
            begin
              reg31 <= (^~(reg28 - reg32));
              reg32 <= wire24;
            end
        end
      else
        begin
          reg30 <= (~^wire21[(3'h5):(3'h5)]);
          reg31 <= $unsigned(reg28[(4'h9):(3'h6)]);
        end
      reg34 <= (&$signed({reg25}));
    end
  assign wire35 = $unsigned(reg29);
  assign wire36 = (wire22[(3'h4):(2'h2)] >= wire22[(3'h4):(1'h0)]);
  assign wire37 = $unsigned((~^reg25[(3'h4):(1'h0)]));
  assign wire38 = reg30;
endmodule