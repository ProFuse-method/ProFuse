(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param12 = (&{{((8'ha5) ? (8'ha0) : (8'ha9))}}))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h2e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire3;
  input wire [(4'h8):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire signed [(2'h2):(1'h0)] wire11;
  wire [(3'h6):(1'h0)] wire9;
  wire signed [(3'h6):(1'h0)] wire8;
  wire [(3'h6):(1'h0)] wire7;
  reg [(4'h8):(1'h0)] reg10 = (1'h0);
  reg [(3'h5):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg5 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg4 = (1'h0);
  assign y = {wire11, wire9, wire8, wire7, reg10, reg6, reg5, reg4, (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire1[(2'h2):(1'h1)];
      reg5 <= ({($unsigned(wire0) >> $unsigned((8'ha3)))} ?
          (~|(^~$signed((8'hac)))) : wire1);
      reg6 <= wire0[(4'h8):(1'h0)];
    end
  assign wire7 = ((wire1 <<< $signed((reg6 ? reg6 : wire0))) ?
                     {$signed((reg5 | reg4))} : wire1);
  assign wire8 = (|$signed(((wire7 ? wire7 : reg4) <= (reg6 > wire1))));
  assign wire9 = (!wire8);
  always
    @(posedge clk) begin
      reg10 <= (reg5[(2'h2):(1'h0)] ^~ $unsigned(($unsigned(reg6) >= $signed(wire2))));
    end
  assign wire11 = reg4[(3'h4):(1'h1)];
endmodule