(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h8f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire0;
  input wire [(3'h5):(1'h0)] wire1;
  input wire [(4'h8):(1'h0)] wire2;
  input wire signed [(3'h7):(1'h0)] wire3;
  wire signed [(3'h4):(1'h0)] wire64;
  wire [(4'ha):(1'h0)] wire63;
  wire [(4'h9):(1'h0)] wire62;
  wire [(2'h3):(1'h0)] wire61;
  wire signed [(4'ha):(1'h0)] wire60;
  wire [(2'h2):(1'h0)] wire59;
  wire signed [(2'h2):(1'h0)] wire58;
  wire signed [(3'h6):(1'h0)] wire57;
  wire signed [(3'h7):(1'h0)] wire55;
  reg signed [(4'h9):(1'h0)] reg4 = (1'h0);
  reg [(2'h3):(1'h0)] reg5 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg6 = (1'h0);
  reg [(3'h6):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg8 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg10 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg11 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg12 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg14 = (1'h0);
  reg [(4'h8):(1'h0)] reg15 = (1'h0);
  reg [(3'h6):(1'h0)] reg16 = (1'h0);
  assign y = {wire64,
                 wire63,
                 wire62,
                 wire61,
                 wire60,
                 wire59,
                 wire58,
                 wire57,
                 wire55,
                 reg4,
                 reg5,
                 reg6,
                 reg7,
                 reg8,
                 reg9,
                 reg10,
                 reg11,
                 reg12,
                 reg13,
                 reg14,
                 reg15,
                 reg16,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ({$signed((((8'had) ? wire3 : wire2) << (wire3 >>> wire0)))})
        begin
          if ((wire3 ? {$signed({(8'h9e)})} : ((^{wire1}) <<< (^~wire2))))
            begin
              reg4 <= (wire3[(3'h5):(2'h3)] ?
                  (^~wire3[(3'h4):(2'h3)]) : ((8'h9d) - ((8'h9c) ?
                      ((8'hac) & (8'h9c)) : wire0[(4'h8):(2'h2)])));
              reg5 <= wire2[(3'h7):(3'h5)];
            end
          else
            begin
              reg4 <= $unsigned(wire2);
            end
          reg6 <= $unsigned(reg4);
          reg7 <= reg4[(3'h5):(3'h5)];
        end
      else
        begin
          if ((8'ha8))
            begin
              reg4 <= (($signed($signed(reg5)) ?
                  reg7 : reg4) << (~^reg6[(4'h9):(3'h4)]));
              reg5 <= (((8'h9d) != reg4[(1'h0):(1'h0)]) == wire0[(1'h1):(1'h0)]);
              reg6 <= ((8'h9f) ? wire0 : wire3);
            end
          else
            begin
              reg4 <= {(((reg7 ^~ reg4) & wire3) <<< ((wire1 ?
                      reg4 : reg5) > (&reg4)))};
            end
          reg7 <= reg7;
        end
      reg8 <= wire1[(1'h0):(1'h0)];
      reg9 <= (~&{$signed((reg6 ? reg4 : wire3))});
    end
  always
    @(posedge clk) begin
      if ((&wire1[(1'h0):(1'h0)]))
        begin
          if (reg9[(4'h9):(3'h7)])
            begin
              reg10 <= $unsigned(reg4);
            end
          else
            begin
              reg10 <= $unsigned(($signed((+wire2)) < $unsigned($signed(reg9))));
              reg11 <= $unsigned(reg9[(2'h2):(2'h2)]);
              reg12 <= reg10;
            end
          reg13 <= ($signed($unsigned(reg6)) ~^ (reg9 ?
              reg6[(3'h7):(2'h3)] : reg10[(2'h2):(1'h0)]));
          reg14 <= $unsigned({wire1[(2'h3):(2'h2)]});
        end
      else
        begin
          reg10 <= ({({reg14} ?
                  $unsigned((8'ha4)) : (~^(8'ha0)))} >>> (($signed(reg5) ?
              wire2 : {reg13}) >>> (+(~&reg8))));
          reg11 <= $signed((^$signed((reg5 ? reg14 : reg8))));
        end
      reg15 <= reg10;
      reg16 <= ($unsigned((^~(&reg11))) ?
          reg14[(2'h3):(1'h0)] : reg14[(1'h1):(1'h1)]);
    end
  module17 #() modinst56 (wire55, clk, reg8, reg4, wire3, reg11);
  assign wire57 = $unsigned($unsigned(($unsigned(reg5) ?
                      (reg11 ? reg4 : reg9) : reg13[(1'h0):(1'h0)])));
  assign wire58 = reg10[(2'h3):(1'h0)];
  assign wire59 = ((+{$unsigned(reg12)}) ?
                      {((reg15 > reg11) ?
                              {(8'ha8)} : {wire57})} : (((reg5 & wire2) << wire58) ?
                          (~(reg10 >>> reg8)) : $signed((reg6 ~^ reg11))));
  assign wire60 = (($signed($signed((8'h9d))) ? reg8 : ((^~reg13) ~^ {reg12})) ?
                      (!(reg12 | (reg9 ~^ wire2))) : $unsigned($unsigned((|wire57))));
  assign wire61 = (~$signed(({reg5} >> reg12[(3'h4):(2'h2)])));
  assign wire62 = ($unsigned((wire1[(3'h4):(1'h0)] << reg15)) ?
                      wire59 : ({(+reg7)} ^~ wire1));
  assign wire63 = ({$unsigned({(8'ha9)})} && reg6[(2'h2):(2'h2)]);
  assign wire64 = $unsigned((reg8 ?
                      (reg11[(3'h5):(1'h0)] ?
                          (reg13 ?
                              (8'ha8) : (8'ha8)) : $signed(wire1)) : $signed(reg10)));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module17
#(parameter param54 = (~&(((~^(8'ha9)) ? ((8'hae) <<< (8'ha9)) : (!(8'ha3))) ? (((8'ha8) ? (8'ha1) : (8'hac)) ? {(8'hab)} : ((8'h9f) ? (8'ha9) : (8'ha7))) : ((8'ha8) + ((8'hac) ? (8'hac) : (8'ha3))))))
(y, clk, wire21, wire20, wire19, wire18);
  output wire [(32'h3c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire21;
  input wire signed [(4'h8):(1'h0)] wire20;
  input wire [(3'h7):(1'h0)] wire19;
  input wire [(3'h5):(1'h0)] wire18;
  wire [(4'h8):(1'h0)] wire53;
  wire signed [(4'ha):(1'h0)] wire52;
  wire [(2'h2):(1'h0)] wire46;
  wire signed [(3'h6):(1'h0)] wire45;
  wire signed [(2'h3):(1'h0)] wire44;
  wire signed [(3'h5):(1'h0)] wire42;
  reg [(2'h2):(1'h0)] reg51 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg50 = (1'h0);
  reg [(2'h3):(1'h0)] reg49 = (1'h0);
  reg [(4'h8):(1'h0)] reg48 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg47 = (1'h0);
  assign y = {wire53,
                 wire52,
                 wire46,
                 wire45,
                 wire44,
                 wire42,
                 reg51,
                 reg50,
                 reg49,
                 reg48,
                 reg47,
                 (1'h0)};
  module22 #() modinst43 (wire42, clk, wire19, wire18, wire20, wire21);
  assign wire44 = $signed(wire18[(2'h3):(2'h3)]);
  assign wire45 = (+$signed((!$signed(wire18))));
  assign wire46 = $signed(wire18[(2'h2):(1'h0)]);
  always
    @(posedge clk) begin
      if (wire19)
        begin
          reg47 <= wire21[(1'h0):(1'h0)];
        end
      else
        begin
          reg47 <= wire20;
        end
      reg48 <= ({wire44} ~^ (wire44[(2'h2):(1'h1)] ?
          $signed(((8'hb0) ? wire45 : wire42)) : wire20[(3'h6):(3'h5)]));
    end
  always
    @(posedge clk) begin
      reg49 <= wire46;
      reg50 <= {wire45};
      reg51 <= wire21[(3'h5):(1'h0)];
    end
  assign wire52 = reg48;
  assign wire53 = ($unsigned((+$unsigned(wire18))) - (($unsigned(wire21) == (~|(8'ha6))) ?
                      ((wire46 == wire46) ?
                          (~^reg50) : (~wire20)) : $unsigned({(8'ha5)})));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module22
#(parameter param41 = ({(((8'ha8) ? (8'h9c) : (8'hb0)) ? ((8'had) ? (8'h9f) : (8'hac)) : {(8'ha3)})} <= ((~{(8'ha0)}) != {{(8'haf)}})))
(y, clk, wire26, wire25, wire24, wire23);
  output wire [(32'h52):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire26;
  input wire signed [(3'h5):(1'h0)] wire25;
  input wire [(2'h2):(1'h0)] wire24;
  input wire [(2'h3):(1'h0)] wire23;
  wire signed [(2'h2):(1'h0)] wire40;
  wire signed [(3'h5):(1'h0)] wire39;
  wire [(4'ha):(1'h0)] wire38;
  wire [(3'h5):(1'h0)] wire37;
  wire signed [(4'h8):(1'h0)] wire36;
  wire [(3'h6):(1'h0)] wire35;
  wire signed [(4'hb):(1'h0)] wire34;
  wire signed [(3'h7):(1'h0)] wire33;
  wire [(2'h2):(1'h0)] wire32;
  wire [(4'h8):(1'h0)] wire31;
  wire signed [(2'h2):(1'h0)] wire28;
  wire [(3'h5):(1'h0)] wire27;
  reg [(2'h2):(1'h0)] reg30 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg29 = (1'h0);
  assign y = {wire40,
                 wire39,
                 wire38,
                 wire37,
                 wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire28,
                 wire27,
                 reg30,
                 reg29,
                 (1'h0)};
  assign wire27 = wire25;
  assign wire28 = (wire23 ?
                      $signed(((8'ha6) ?
                          $signed(wire24) : (+wire26))) : ($unsigned((+wire23)) * wire23));
  always
    @(posedge clk) begin
      reg29 <= (^~wire25[(2'h2):(2'h2)]);
      reg30 <= (&wire24);
    end
  assign wire31 = $unsigned(((&(~|wire27)) ? wire28[(1'h0):(1'h0)] : wire24));
  assign wire32 = wire26;
  assign wire33 = wire32[(2'h2):(1'h1)];
  assign wire34 = ({$unsigned((~&wire26))} >>> (8'ha1));
  assign wire35 = $signed(reg29);
  assign wire36 = {$signed(reg29)};
  assign wire37 = $unsigned(reg30);
  assign wire38 = (wire28[(1'h1):(1'h1)] ^ ((-(wire24 ? reg29 : wire28)) ?
                      $unsigned((~wire37)) : (^(wire26 ? wire25 : wire25))));
  assign wire39 = (^wire32);
  assign wire40 = (^(8'hae));
endmodule