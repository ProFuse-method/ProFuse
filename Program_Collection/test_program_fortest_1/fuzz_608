(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h29):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire3;
  input wire [(3'h7):(1'h0)] wire2;
  input wire [(4'h9):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire [(3'h7):(1'h0)] wire64;
  wire signed [(3'h6):(1'h0)] wire63;
  wire [(3'h5):(1'h0)] wire61;
  wire signed [(4'h8):(1'h0)] wire59;
  wire signed [(3'h7):(1'h0)] wire57;
  wire signed [(3'h7):(1'h0)] wire17;
  assign y = {wire64, wire63, wire61, wire59, wire57, wire17, (1'h0)};
  module4 #() modinst18 (.wire6(wire0), .wire7(wire1), .clk(clk), .wire8(wire3), .y(wire17), .wire5(wire2));
  module19 #() modinst58 (.wire21(wire17), .y(wire57), .clk(clk), .wire22(wire1), .wire20(wire2), .wire23(wire3));
  module19 #() modinst60 (.wire22(wire0), .wire21(wire3), .y(wire59), .clk(clk), .wire20(wire17), .wire23(wire57));
  module19 #() modinst62 (wire61, clk, wire2, wire0, wire59, wire3);
  assign wire63 = $signed(wire59[(1'h1):(1'h0)]);
  assign wire64 = $signed((((wire3 ~^ wire0) * (wire59 && wire17)) ^~ $signed(wire59)));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module19
#(parameter param56 = ((^~(^~((8'h9d) << (8'ha1)))) ? ((((8'ha5) >> (8'ha4)) <= ((8'ha5) ? (8'ha2) : (8'h9d))) >= (~((8'hae) ? (8'hac) : (8'h9e)))) : {((-(8'ha8)) >>> ((8'ha5) >= (8'ha3)))}))
(y, clk, wire23, wire22, wire21, wire20);
  output wire [(32'h63):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire23;
  input wire signed [(4'h8):(1'h0)] wire22;
  input wire [(3'h5):(1'h0)] wire21;
  input wire [(3'h5):(1'h0)] wire20;
  wire signed [(4'h9):(1'h0)] wire55;
  wire signed [(4'hb):(1'h0)] wire49;
  wire [(4'h8):(1'h0)] wire30;
  wire signed [(4'h8):(1'h0)] wire25;
  wire [(4'h8):(1'h0)] wire24;
  reg [(2'h3):(1'h0)] reg54 = (1'h0);
  reg [(3'h4):(1'h0)] reg53 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg52 = (1'h0);
  reg [(4'ha):(1'h0)] reg51 = (1'h0);
  reg [(4'hb):(1'h0)] reg29 = (1'h0);
  reg [(3'h5):(1'h0)] reg28 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg27 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg26 = (1'h0);
  assign y = {wire55,
                 wire49,
                 wire30,
                 wire25,
                 wire24,
                 reg54,
                 reg53,
                 reg52,
                 reg51,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 (1'h0)};
  assign wire24 = {$signed($unsigned($unsigned(wire20)))};
  assign wire25 = ($unsigned($unsigned(((8'ha0) ? (8'hac) : wire21))) ?
                      wire20 : (($signed(wire22) <<< (wire21 ~^ wire20)) ~^ wire21));
  always
    @(posedge clk) begin
      if (wire20[(3'h4):(1'h0)])
        begin
          reg26 <= (wire24[(1'h0):(1'h0)] ?
              $unsigned($signed((~^wire20))) : wire25[(2'h3):(1'h1)]);
          reg27 <= $unsigned($signed(wire25));
        end
      else
        begin
          reg26 <= wire22[(2'h3):(2'h2)];
          reg27 <= $unsigned(reg26);
          reg28 <= (wire23[(1'h0):(1'h0)] ~^ (((8'had) && $signed(wire23)) >= wire25[(3'h6):(1'h1)]));
        end
      reg29 <= $unsigned($unsigned(((-wire21) >= (reg26 == reg28))));
    end
  assign wire30 = ($unsigned((~&(wire25 ?
                      reg29 : wire20))) << $signed($signed(((8'ha1) && reg26))));
  module31 #() modinst50 (wire49, clk, reg26, wire30, wire24, reg29);
  always
    @(posedge clk) begin
      reg51 <= (|wire49[(3'h7):(3'h7)]);
      if (((((reg27 != wire20) <<< {reg28}) >>> ({(8'ha9)} <= wire23)) == $unsigned($unsigned((~^reg26)))))
        begin
          reg52 <= $unsigned(wire21);
          reg53 <= reg28;
        end
      else
        begin
          reg52 <= (((^(reg52 ^ reg52)) ?
              $unsigned(reg28) : (~|$unsigned(wire49))) == wire49);
          reg53 <= $signed((8'ha5));
        end
    end
  always
    @(posedge clk) begin
      if (reg53)
        begin
          reg54 <= wire25;
        end
      else
        begin
          if (((wire20 <<< wire22) ?
              (($signed(reg52) ? $signed(wire20) : wire30) ~^ ((wire20 ?
                  wire23 : (8'ha2)) + (wire22 ? (8'haa) : wire24))) : (8'h9c)))
            begin
              reg54 <= wire49[(2'h3):(2'h2)];
            end
          else
            begin
              reg54 <= {reg53[(1'h1):(1'h1)]};
            end
        end
    end
  assign wire55 = reg29[(4'h9):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4
#(parameter param16 = (~{(|((8'h9f) > (8'ha9)))}))
(y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h26):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire8;
  input wire signed [(3'h4):(1'h0)] wire7;
  input wire signed [(4'hb):(1'h0)] wire6;
  input wire signed [(2'h3):(1'h0)] wire5;
  wire [(2'h3):(1'h0)] wire15;
  wire signed [(2'h2):(1'h0)] wire10;
  wire signed [(2'h3):(1'h0)] wire9;
  reg signed [(4'h8):(1'h0)] reg14 = (1'h0);
  reg [(3'h5):(1'h0)] reg13 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg12 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg11 = (1'h0);
  assign y = {wire15, wire10, wire9, reg14, reg13, reg12, reg11, (1'h0)};
  assign wire9 = wire8;
  assign wire10 = (~&(wire5 ?
                      $unsigned($unsigned((8'ha5))) : $signed((|wire9))));
  always
    @(posedge clk) begin
      reg11 <= $unsigned((~^$unsigned((wire10 ~^ wire10))));
      if (wire5[(1'h1):(1'h0)])
        begin
          reg12 <= (^($unsigned((wire10 ? wire5 : wire6)) ?
              reg11[(1'h1):(1'h0)] : {$unsigned(wire10)}));
          reg13 <= $unsigned({($signed(wire9) & {reg12})});
          reg14 <= $signed(({$signed((8'ha7))} || reg11));
        end
      else
        begin
          if (reg11)
            begin
              reg12 <= $signed(wire7[(1'h0):(1'h0)]);
              reg13 <= wire9[(2'h3):(1'h1)];
            end
          else
            begin
              reg12 <= (-(^(8'haa)));
            end
          reg14 <= (reg13 && $unsigned($unsigned((^~wire7))));
        end
    end
  assign wire15 = wire8[(1'h1):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module31
#(parameter param48 = {{(~&(|(8'ha2)))}})
(y, clk, wire35, wire34, wire33, wire32);
  output wire [(32'h55):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire35;
  input wire [(3'h7):(1'h0)] wire34;
  input wire [(4'h8):(1'h0)] wire33;
  input wire [(3'h4):(1'h0)] wire32;
  wire signed [(4'h9):(1'h0)] wire47;
  wire signed [(3'h4):(1'h0)] wire46;
  wire signed [(3'h5):(1'h0)] wire45;
  wire signed [(2'h3):(1'h0)] wire44;
  wire signed [(4'hb):(1'h0)] wire43;
  wire signed [(4'h8):(1'h0)] wire42;
  wire signed [(4'hb):(1'h0)] wire41;
  wire signed [(4'h9):(1'h0)] wire40;
  wire [(4'hb):(1'h0)] wire39;
  wire signed [(2'h3):(1'h0)] wire38;
  wire [(4'h8):(1'h0)] wire37;
  wire [(2'h2):(1'h0)] wire36;
  assign y = {wire47,
                 wire46,
                 wire45,
                 wire44,
                 wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire39,
                 wire38,
                 wire37,
                 wire36,
                 (1'h0)};
  assign wire36 = (((-wire34) ?
                      (!{wire33}) : ((wire34 ?
                          wire34 : wire34) <= wire33[(1'h0):(1'h0)])) ^ {(wire33[(1'h0):(1'h0)] ?
                          (wire32 ? wire33 : wire33) : (-wire35))});
  assign wire37 = wire35;
  assign wire38 = (wire34[(3'h4):(3'h4)] + (((wire37 ~^ (8'h9f)) ?
                      wire32[(1'h1):(1'h1)] : (wire36 == wire33)) >> $unsigned((~&wire35))));
  assign wire39 = $signed((((wire33 ?
                      wire33 : wire34) * $unsigned(wire37)) >> wire33[(4'h8):(3'h6)]));
  assign wire40 = ($signed($signed($signed(wire38))) | $signed(({wire34} <<< wire33[(1'h0):(1'h0)])));
  assign wire41 = (+$unsigned({(!wire38)}));
  assign wire42 = $unsigned(wire39[(3'h4):(2'h3)]);
  assign wire43 = (~&(wire37[(2'h2):(1'h1)] ?
                      {(wire32 ? wire41 : wire39)} : $unsigned(wire32)));
  assign wire44 = wire41[(4'hb):(4'hb)];
  assign wire45 = {(^~wire43)};
  assign wire46 = ({wire43[(3'h7):(2'h3)]} * (((wire32 << wire33) ?
                          $signed(wire41) : wire38) ?
                      {{wire32}} : wire44[(2'h3):(1'h0)]));
  assign wire47 = (~wire41[(1'h1):(1'h1)]);
endmodule