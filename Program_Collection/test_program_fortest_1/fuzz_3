(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param44 = {({((8'ha4) <= (8'hab))} ? (((8'ha8) ? (8'ha6) : (8'hab)) ? ((8'h9f) ? (8'h9f) : (8'h9d)) : ((8'haf) <= (8'ha4))) : {(8'hac)})})
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h5c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire3;
  input wire [(3'h6):(1'h0)] wire2;
  input wire signed [(4'h9):(1'h0)] wire1;
  input wire signed [(3'h4):(1'h0)] wire0;
  wire [(3'h4):(1'h0)] wire43;
  wire signed [(3'h6):(1'h0)] wire39;
  wire [(3'h5):(1'h0)] wire38;
  wire signed [(3'h6):(1'h0)] wire37;
  wire [(4'h9):(1'h0)] wire36;
  wire [(3'h4):(1'h0)] wire34;
  wire signed [(3'h6):(1'h0)] wire8;
  reg signed [(4'h9):(1'h0)] reg42 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg41 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg40 = (1'h0);
  reg [(3'h4):(1'h0)] reg7 = (1'h0);
  reg [(2'h2):(1'h0)] reg6 = (1'h0);
  reg [(4'hb):(1'h0)] reg5 = (1'h0);
  reg [(4'hb):(1'h0)] reg4 = (1'h0);
  assign y = {wire43,
                 wire39,
                 wire38,
                 wire37,
                 wire36,
                 wire34,
                 wire8,
                 reg42,
                 reg41,
                 reg40,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (((wire0 <<< ((wire2 + wire0) > wire3)) ?
          ((&wire0[(2'h3):(1'h0)]) ?
              ((~|wire1) ? {wire2} : (~|wire2)) : wire0) : $unsigned(wire2)))
        begin
          reg4 <= wire1;
        end
      else
        begin
          reg4 <= (^wire3[(2'h3):(1'h1)]);
          reg5 <= $unsigned(wire2[(2'h3):(1'h0)]);
          if (wire0)
            begin
              reg6 <= ($signed(wire3[(1'h1):(1'h1)]) << reg5[(1'h0):(1'h0)]);
            end
          else
            begin
              reg6 <= $unsigned(($signed((reg4 ?
                  wire3 : wire0)) >> $unsigned((-wire3))));
              reg7 <= {(8'had)};
            end
        end
    end
  assign wire8 = $unsigned((8'ha0));
  module9 #() modinst35 (wire34, clk, reg5, wire0, wire1, reg4);
  assign wire36 = (((!(wire1 ^~ wire34)) ?
                          $signed((^~reg6)) : ((~&wire0) && wire3[(2'h2):(1'h0)])) ?
                      (reg7 <= wire1) : $signed((wire2 ^~ reg7[(2'h3):(1'h0)])));
  assign wire37 = (~&wire1[(3'h7):(1'h0)]);
  assign wire38 = $unsigned($signed((reg5[(2'h3):(1'h0)] <<< (reg6 ?
                      reg4 : (8'h9c)))));
  assign wire39 = (-(~&{$signed(wire3)}));
  always
    @(posedge clk) begin
      if ((~|($signed(reg7) ?
          $unsigned((wire38 >>> wire38)) : $signed((reg6 & wire3)))))
        begin
          reg40 <= $signed(({(~reg5)} ?
              wire0[(1'h1):(1'h1)] : $signed({wire39})));
          reg41 <= wire39;
        end
      else
        begin
          reg40 <= (-({wire36} <= (8'hb0)));
          reg41 <= wire37;
          reg42 <= $signed($signed(wire37));
        end
    end
  assign wire43 = $unsigned($signed(wire38));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9  (y, clk, wire10, wire11, wire12, wire13);
  output wire [(32'h3a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire10;
  input wire [(3'h4):(1'h0)] wire11;
  input wire signed [(2'h3):(1'h0)] wire12;
  input wire [(3'h4):(1'h0)] wire13;
  wire [(4'ha):(1'h0)] wire33;
  wire signed [(2'h3):(1'h0)] wire32;
  wire signed [(4'h9):(1'h0)] wire14;
  wire signed [(4'h8):(1'h0)] wire15;
  wire signed [(4'h9):(1'h0)] wire16;
  wire signed [(4'h8):(1'h0)] wire30;
  reg signed [(4'ha):(1'h0)] reg17 = (1'h0);
  assign y = {wire33, wire32, wire14, wire15, wire16, wire30, reg17, (1'h0)};
  assign wire14 = (^~wire10);
  assign wire15 = (|(~|wire11));
  assign wire16 = $unsigned(((+wire14) > $unsigned($signed(wire11))));
  always
    @(posedge clk) begin
      reg17 <= ($signed(wire10[(3'h7):(2'h3)]) | (wire12 >> ($signed(wire10) ~^ $signed(wire15))));
    end
  module18 #() modinst31 (wire30, clk, reg17, wire16, wire14, wire10);
  assign wire32 = (wire10[(4'ha):(1'h0)] > wire12[(1'h0):(1'h0)]);
  assign wire33 = (!((((8'hb0) <= wire32) ?
                      ((8'ha5) << (8'h9e)) : wire16[(3'h5):(3'h5)]) != $unsigned((wire11 ?
                      wire32 : wire12))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18  (y, clk, wire22, wire21, wire20, wire19);
  output wire [(32'h2c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire22;
  input wire signed [(4'h9):(1'h0)] wire21;
  input wire [(4'h9):(1'h0)] wire20;
  input wire signed [(4'hb):(1'h0)] wire19;
  wire [(3'h7):(1'h0)] wire29;
  wire signed [(2'h3):(1'h0)] wire28;
  wire signed [(4'ha):(1'h0)] wire27;
  wire [(2'h3):(1'h0)] wire26;
  reg signed [(4'h8):(1'h0)] reg25 = (1'h0);
  reg [(4'ha):(1'h0)] reg24 = (1'h0);
  reg [(2'h2):(1'h0)] reg23 = (1'h0);
  assign y = {wire29, wire28, wire27, wire26, reg25, reg24, reg23, (1'h0)};
  always
    @(posedge clk) begin
      reg23 <= ((|(wire19 ? (wire19 ? wire22 : (8'haa)) : ((8'ha5) & wire21))) ?
          $unsigned(wire19[(3'h6):(3'h5)]) : ((-(wire22 + wire21)) << wire20[(2'h3):(2'h2)]));
      reg24 <= ((~&(!$unsigned(wire19))) ? wire21 : wire21);
      reg25 <= $unsigned((8'ha0));
    end
  assign wire26 = reg23[(1'h1):(1'h1)];
  assign wire27 = wire21;
  assign wire28 = $unsigned(((((8'h9d) <= wire19) << wire19[(3'h7):(2'h3)]) << reg25[(4'h8):(4'h8)]));
  assign wire29 = (8'had);
endmodule