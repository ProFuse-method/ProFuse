(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param37 = (^~{((~|(8'ha4)) ? ((8'ha1) ? (8'h9f) : (8'ha3)) : (8'ha5))}))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h37):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire0;
  input wire [(4'hb):(1'h0)] wire1;
  input wire [(3'h4):(1'h0)] wire2;
  input wire [(4'ha):(1'h0)] wire3;
  wire signed [(4'h9):(1'h0)] wire36;
  wire signed [(4'hb):(1'h0)] wire35;
  wire [(3'h7):(1'h0)] wire34;
  wire [(3'h7):(1'h0)] wire28;
  wire [(2'h2):(1'h0)] wire31;
  wire [(4'hb):(1'h0)] wire32;
  reg signed [(3'h7):(1'h0)] reg30 = (1'h0);
  assign y = {wire36, wire35, wire34, wire28, wire31, wire32, reg30, (1'h0)};
  module4 #() modinst29 (wire28, clk, wire0, wire3, wire1, wire2);
  always
    @(posedge clk) begin
      reg30 <= (wire3[(4'h8):(3'h4)] ~^ (^~(~^wire1[(3'h4):(1'h1)])));
    end
  assign wire31 = {$signed(($signed((8'ha0)) <<< $unsigned(wire1)))};
  module14 #() modinst33 (.wire17(reg30), .wire18(wire1), .clk(clk), .wire16(wire3), .y(wire32), .wire15(wire0));
  assign wire34 = wire3[(1'h0):(1'h0)];
  assign wire35 = ($unsigned(reg30) ?
                      $unsigned((((8'ha6) ?
                          reg30 : wire0) > $signed(wire34))) : wire34[(3'h4):(3'h4)]);
  assign wire36 = ($unsigned($signed((wire34 == (8'ha6)))) ?
                      (wire0 << wire35[(2'h2):(1'h0)]) : wire1);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h39):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire8;
  input wire [(3'h4):(1'h0)] wire7;
  input wire [(3'h7):(1'h0)] wire6;
  input wire signed [(2'h3):(1'h0)] wire5;
  wire signed [(4'ha):(1'h0)] wire26;
  wire [(4'ha):(1'h0)] wire13;
  wire [(4'ha):(1'h0)] wire12;
  wire [(3'h4):(1'h0)] wire11;
  wire signed [(4'hb):(1'h0)] wire10;
  wire signed [(4'hb):(1'h0)] wire9;
  assign y = {wire26, wire13, wire12, wire11, wire10, wire9, (1'h0)};
  assign wire9 = wire8[(3'h6):(2'h2)];
  assign wire10 = $unsigned((~&wire6));
  assign wire11 = wire5;
  assign wire12 = (((^~(wire10 == wire5)) << ((~wire11) ?
                          wire8 : $signed(wire10))) ?
                      (^(wire5 ^ (wire6 ? wire7 : (8'hab)))) : $signed(wire9));
  assign wire13 = (^~(~^(!(wire10 - wire11))));
  module14 #() modinst27 (.wire16(wire5), .clk(clk), .y(wire26), .wire17(wire11), .wire18(wire9), .wire15(wire10));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module14  (y, clk, wire18, wire17, wire16, wire15);
  output wire [(32'h2a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire18;
  input wire [(3'h4):(1'h0)] wire17;
  input wire signed [(2'h3):(1'h0)] wire16;
  input wire [(3'h4):(1'h0)] wire15;
  wire signed [(3'h6):(1'h0)] wire25;
  wire [(4'h8):(1'h0)] wire24;
  wire [(3'h6):(1'h0)] wire23;
  wire signed [(4'hb):(1'h0)] wire22;
  reg [(2'h2):(1'h0)] reg21 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg20 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg19 = (1'h0);
  assign y = {wire25, wire24, wire23, wire22, reg21, reg20, reg19, (1'h0)};
  always
    @(posedge clk) begin
      reg19 <= wire17;
      reg20 <= wire18;
      reg21 <= $unsigned((reg20 - (~&reg20)));
    end
  assign wire22 = $signed(({$signed(reg20)} ?
                      $signed(reg19) : wire17[(1'h0):(1'h0)]));
  assign wire23 = $signed(($signed((~|wire15)) * ($signed(wire17) <= {reg21})));
  assign wire24 = reg21[(1'h1):(1'h0)];
  assign wire25 = (&$unsigned(wire15[(3'h4):(1'h1)]));
endmodule