(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param45 = (&((~&((8'ha7) ? (8'hac) : (8'haa))) & (-(|(8'ha1))))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h23):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire0;
  input wire signed [(3'h7):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire signed [(3'h6):(1'h0)] wire3;
  wire signed [(4'ha):(1'h0)] wire44;
  wire signed [(3'h4):(1'h0)] wire43;
  wire [(3'h7):(1'h0)] wire38;
  wire [(2'h3):(1'h0)] wire41;
  reg [(4'ha):(1'h0)] reg40 = (1'h0);
  assign y = {wire44, wire43, wire38, wire41, reg40, (1'h0)};
  module4 #() modinst39 (wire38, clk, wire0, wire3, wire2, wire1);
  always
    @(posedge clk) begin
      reg40 <= $signed(($signed($signed(wire1)) ?
          $unsigned($unsigned(wire2)) : wire2[(2'h2):(1'h0)]));
    end
  module4 #() modinst42 (.wire8(wire0), .wire5(wire1), .clk(clk), .wire7(wire2), .y(wire41), .wire6(reg40));
  assign wire43 = $unsigned(reg40);
  assign wire44 = $signed(wire38);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4
#(parameter param37 = (((((8'ha5) ? (8'ha7) : (8'ha5)) * ((8'had) ? (8'ha4) : (8'ha5))) ^~ (&(^(8'ha3)))) ? (((8'h9c) < (~^(8'ha3))) + (((8'ha0) ? (8'ha8) : (8'h9f)) * ((8'ha0) ? (8'h9f) : (8'hae)))) : (8'hb0)))
(y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h6e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire8;
  input wire signed [(3'h5):(1'h0)] wire7;
  input wire signed [(4'ha):(1'h0)] wire6;
  input wire [(3'h7):(1'h0)] wire5;
  wire signed [(3'h4):(1'h0)] wire36;
  wire signed [(4'h8):(1'h0)] wire31;
  wire [(3'h6):(1'h0)] wire30;
  wire [(4'hb):(1'h0)] wire29;
  wire [(4'ha):(1'h0)] wire28;
  wire signed [(2'h3):(1'h0)] wire22;
  reg [(4'h8):(1'h0)] reg35 = (1'h0);
  reg [(3'h5):(1'h0)] reg34 = (1'h0);
  reg [(4'hb):(1'h0)] reg33 = (1'h0);
  reg [(3'h6):(1'h0)] reg32 = (1'h0);
  reg [(4'hb):(1'h0)] reg27 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg26 = (1'h0);
  reg [(4'h9):(1'h0)] reg25 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg24 = (1'h0);
  assign y = {wire36,
                 wire31,
                 wire30,
                 wire29,
                 wire28,
                 wire22,
                 reg35,
                 reg34,
                 reg33,
                 reg32,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 (1'h0)};
  module9 #() modinst23 (.clk(clk), .wire11(wire8), .wire12(wire5), .wire10(wire6), .y(wire22), .wire13(wire7));
  always
    @(posedge clk) begin
      reg24 <= $unsigned({{wire8}});
      reg25 <= $unsigned((((wire7 ? wire5 : reg24) ?
          (wire22 << wire7) : reg24) >>> wire7));
      if (($signed(wire7) | wire8[(3'h4):(1'h0)]))
        begin
          reg26 <= (wire6 <<< ($signed({reg24}) ?
              (^wire7[(3'h5):(3'h4)]) : reg25));
        end
      else
        begin
          reg26 <= {(|$signed((-wire7)))};
          reg27 <= wire7[(3'h5):(3'h5)];
        end
    end
  assign wire28 = $signed((($signed(wire22) << $unsigned(reg25)) ?
                      $unsigned($unsigned(reg24)) : reg27[(3'h6):(2'h3)]));
  assign wire29 = (!$unsigned($signed(((8'ha8) == reg25))));
  assign wire30 = wire28[(1'h0):(1'h0)];
  assign wire31 = $signed($unsigned({wire6}));
  always
    @(posedge clk) begin
      if (((-reg24[(1'h1):(1'h0)]) >= (-((|wire22) ?
          $signed(reg27) : wire28[(3'h6):(3'h5)]))))
        begin
          reg32 <= wire28;
        end
      else
        begin
          reg32 <= {{$signed((+(8'hb0)))}};
          reg33 <= $unsigned((^~$unsigned((!wire29))));
          reg34 <= $unsigned((8'ha3));
        end
      reg35 <= $signed($signed({(reg33 > reg34)}));
    end
  assign wire36 = $unsigned((wire31[(1'h0):(1'h0)] ?
                      $signed(reg34[(1'h1):(1'h0)]) : ($unsigned(reg25) && reg33[(2'h2):(1'h0)])));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9  (y, clk, wire13, wire12, wire11, wire10);
  output wire [(32'h2e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire13;
  input wire [(3'h7):(1'h0)] wire12;
  input wire [(3'h5):(1'h0)] wire11;
  input wire signed [(3'h7):(1'h0)] wire10;
  wire signed [(2'h3):(1'h0)] wire21;
  wire [(3'h7):(1'h0)] wire17;
  wire [(3'h7):(1'h0)] wire16;
  wire [(2'h2):(1'h0)] wire15;
  wire signed [(2'h2):(1'h0)] wire14;
  reg [(4'hb):(1'h0)] reg20 = (1'h0);
  reg [(3'h5):(1'h0)] reg19 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg18 = (1'h0);
  assign y = {wire21,
                 wire17,
                 wire16,
                 wire15,
                 wire14,
                 reg20,
                 reg19,
                 reg18,
                 (1'h0)};
  assign wire14 = ((8'ha5) ?
                      $unsigned($signed((wire13 < wire10))) : $unsigned(($unsigned(wire10) ?
                          ((8'haf) ^~ (8'ha2)) : wire12[(2'h2):(1'h0)])));
  assign wire15 = (wire14[(1'h1):(1'h1)] ?
                      (-(-wire10[(2'h2):(2'h2)])) : ((wire14[(2'h2):(1'h1)] || $signed(wire12)) ?
                          $signed((wire14 ?
                              wire12 : wire12)) : wire11[(3'h5):(3'h4)]));
  assign wire16 = $signed((8'h9e));
  assign wire17 = wire12;
  always
    @(posedge clk) begin
      reg18 <= ($signed(((8'ha7) ? $signed(wire15) : wire12[(2'h3):(1'h1)])) ?
          ($signed((-wire16)) > $unsigned(wire12[(3'h6):(2'h2)])) : (wire12 >> (!wire13[(1'h1):(1'h0)])));
      reg19 <= (wire13[(2'h2):(1'h0)] ?
          $signed(wire17[(3'h7):(1'h0)]) : (|($signed(wire11) ?
              $unsigned(wire15) : wire14[(1'h1):(1'h0)])));
      reg20 <= $signed({wire11});
    end
  assign wire21 = reg19;
endmodule