(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param65 = (^~(((^~((7'h43) << (8'h9e))) - (~|((8'ha1) ? (8'h9e) : (8'ha8)))) ? ({(^(8'ha1))} ? (~^((7'h42) ^ (8'had))) : (((8'hbf) ? (8'hb4) : (8'ha8)) <= ((8'hba) != (7'h42)))) : (!((!(8'hb4)) | {(7'h40), (8'ha2)})))), 
parameter param66 = (~&(8'ha5)))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h295):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire4;
  input wire [(5'h14):(1'h0)] wire3;
  input wire [(5'h12):(1'h0)] wire2;
  input wire signed [(3'h7):(1'h0)] wire1;
  input wire signed [(5'h12):(1'h0)] wire0;
  wire [(4'hc):(1'h0)] wire64;
  wire signed [(2'h3):(1'h0)] wire63;
  wire signed [(3'h4):(1'h0)] wire62;
  wire [(4'h8):(1'h0)] wire61;
  wire signed [(4'he):(1'h0)] wire6;
  wire [(3'h4):(1'h0)] wire5;
  reg [(4'h8):(1'h0)] reg59 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg58 = (1'h0);
  reg [(3'h4):(1'h0)] reg56 = (1'h0);
  reg [(3'h6):(1'h0)] reg52 = (1'h0);
  reg [(3'h4):(1'h0)] reg49 = (1'h0);
  reg [(3'h4):(1'h0)] reg48 = (1'h0);
  reg [(3'h7):(1'h0)] reg47 = (1'h0);
  reg [(2'h2):(1'h0)] reg43 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg42 = (1'h0);
  reg [(4'hb):(1'h0)] reg40 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg36 = (1'h0);
  reg [(5'h11):(1'h0)] reg34 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg33 = (1'h0);
  reg [(4'he):(1'h0)] reg29 = (1'h0);
  reg [(3'h5):(1'h0)] reg25 = (1'h0);
  reg [(5'h13):(1'h0)] reg22 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg19 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg18 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg17 = (1'h0);
  reg [(2'h3):(1'h0)] reg14 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg12 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg11 = (1'h0);
  reg [(5'h15):(1'h0)] reg8 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg60 = (1'h0);
  reg [(3'h5):(1'h0)] forvar57 = (1'h0);
  reg [(5'h11):(1'h0)] reg55 = (1'h0);
  reg [(5'h11):(1'h0)] reg54 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg53 = (1'h0);
  reg signed [(4'he):(1'h0)] reg51 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg50 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg46 = (1'h0);
  reg [(4'h8):(1'h0)] forvar45 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg44 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg41 = (1'h0);
  reg [(5'h11):(1'h0)] forvar39 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar38 = (1'h0);
  reg [(4'h9):(1'h0)] reg37 = (1'h0);
  reg [(5'h14):(1'h0)] forvar35 = (1'h0);
  reg [(5'h12):(1'h0)] reg32 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg31 = (1'h0);
  reg [(4'h9):(1'h0)] reg30 = (1'h0);
  reg [(3'h7):(1'h0)] forvar28 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg27 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg26 = (1'h0);
  reg [(4'h9):(1'h0)] forvar24 = (1'h0);
  reg [(3'h7):(1'h0)] forvar23 = (1'h0);
  reg [(5'h15):(1'h0)] reg21 = (1'h0);
  reg [(4'hf):(1'h0)] reg20 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg16 = (1'h0);
  reg [(3'h6):(1'h0)] forvar15 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar10 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar9 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar7 = (1'h0);
  assign y = {wire64,
                 wire63,
                 wire62,
                 wire61,
                 wire6,
                 wire5,
                 reg59,
                 reg58,
                 reg56,
                 reg52,
                 reg49,
                 reg48,
                 reg47,
                 reg43,
                 reg42,
                 reg40,
                 reg36,
                 reg34,
                 reg33,
                 reg29,
                 reg25,
                 reg22,
                 reg19,
                 reg18,
                 reg17,
                 reg14,
                 reg12,
                 reg11,
                 reg8,
                 reg60,
                 forvar57,
                 reg55,
                 reg54,
                 reg53,
                 reg51,
                 reg50,
                 reg46,
                 forvar45,
                 reg44,
                 reg41,
                 forvar39,
                 forvar38,
                 reg37,
                 forvar35,
                 reg32,
                 reg31,
                 reg30,
                 forvar28,
                 reg27,
                 reg26,
                 forvar24,
                 forvar23,
                 reg21,
                 reg20,
                 reg16,
                 forvar15,
                 reg13,
                 forvar10,
                 forvar9,
                 forvar7,
                 (1'h0)};
  assign wire5 = wire1[(3'h5):(3'h5)];
  assign wire6 = {{wire4[(3'h4):(1'h0)]}, $signed(wire5)};
  always
    @(posedge clk) begin
      for (forvar7 = (1'h0); (forvar7 < (1'h0)); forvar7 = (forvar7 + (1'h1)))
        begin
          reg8 <= $signed(wire1[(3'h4):(1'h0)]);
        end
      for (forvar9 = (1'h0); (forvar9 < (1'h0)); forvar9 = (forvar9 + (1'h1)))
        begin
          for (forvar10 = (1'h0); (forvar10 < (2'h2)); forvar10 = (forvar10 + (1'h1)))
            begin
              reg11 <= (&$signed({$unsigned($signed(wire4)),
                  (~&$signed(wire2))}));
              reg12 <= (wire1 * wire3[(5'h13):(3'h7)]);
              reg13 = (+reg8);
              reg14 <= ($signed((wire2[(2'h3):(2'h3)] ?
                      ({reg11, wire5} * (forvar7 ?
                          (8'hb4) : forvar9)) : ($unsigned(forvar9) <= $signed(wire4)))) ?
                  $signed(wire1) : {(forvar10 >= (reg12 ?
                          (forvar10 << wire4) : (-wire2))),
                      ($unsigned($signed(reg13)) == ($signed(wire5) ?
                          wire3 : (&(8'ha6))))});
            end
          for (forvar15 = (1'h0); (forvar15 < (2'h3)); forvar15 = (forvar15 + (1'h1)))
            begin
              reg16 = $unsigned($unsigned(forvar7[(1'h1):(1'h0)]));
              reg17 <= (^reg14);
            end
          if (reg16[(4'hf):(3'h6)])
            begin
              reg18 <= reg12[(5'h13):(4'hf)];
              reg19 <= wire5;
              reg20 = (reg12 ? forvar15 : forvar15);
              reg21 = {forvar9, $signed(reg17[(3'h4):(1'h1)])};
              reg22 <= $signed(forvar10);
            end
          else
            begin
              reg20 = $signed(reg16[(4'ha):(4'h8)]);
            end
        end
      for (forvar23 = (1'h0); (forvar23 < (2'h3)); forvar23 = (forvar23 + (1'h1)))
        begin
          for (forvar24 = (1'h0); (forvar24 < (1'h0)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 <= (reg14[(1'h0):(1'h0)] - forvar7[(3'h7):(2'h3)]);
              reg26 = (reg19 & $unsigned((~^forvar24)));
              reg27 = ($signed($signed((^forvar24))) ?
                  $signed((+$signed({forvar9, wire6}))) : reg19);
            end
          for (forvar28 = (1'h0); (forvar28 < (2'h3)); forvar28 = (forvar28 + (1'h1)))
            begin
              reg29 <= $signed($signed((((+reg19) ?
                  reg18 : $unsigned((8'hb3))) ^~ forvar9[(4'hc):(4'ha)])));
              reg30 = $unsigned((reg19[(5'h11):(1'h0)] > $signed(reg16)));
              reg31 = (&(~forvar24[(2'h3):(1'h0)]));
              reg32 = (((|wire6[(3'h7):(3'h5)]) < $signed({$signed(reg18),
                  (reg16 ? reg14 : (8'hab))})) != reg22[(1'h0):(1'h0)]);
            end
          reg33 <= ($unsigned($unsigned({(~|forvar10)})) ^~ (wire4[(1'h1):(1'h0)] == $signed($unsigned($signed(wire0)))));
          reg34 <= ($signed({(8'hbd),
                  ((-reg29) ? $signed((7'h40)) : (~reg16))}) ?
              $unsigned(((+reg17[(3'h6):(3'h5)]) <= $unsigned((reg26 ?
                  reg32 : reg29)))) : reg29);
          for (forvar35 = (1'h0); (forvar35 < (2'h2)); forvar35 = (forvar35 + (1'h1)))
            begin
              reg36 <= (8'ha2);
              reg37 = $unsigned((^~reg31[(2'h2):(2'h2)]));
            end
        end
      for (forvar38 = (1'h0); (forvar38 < (2'h3)); forvar38 = (forvar38 + (1'h1)))
        begin
          for (forvar39 = (1'h0); (forvar39 < (1'h0)); forvar39 = (forvar39 + (1'h1)))
            begin
              reg40 <= wire4;
              reg41 = forvar35[(3'h4):(1'h0)];
              reg42 <= $signed(reg31[(1'h0):(1'h0)]);
              reg43 <= (wire1[(1'h0):(1'h0)] >> (wire1 + (~&((^(8'hb6)) ?
                  reg11[(3'h5):(2'h3)] : wire2))));
              reg44 = $unsigned(({$signed($unsigned((8'ha5)))} || $signed($unsigned((reg11 ?
                  forvar10 : (7'h42))))));
            end
          for (forvar45 = (1'h0); (forvar45 < (2'h3)); forvar45 = (forvar45 + (1'h1)))
            begin
              reg46 = (($signed(reg37) ?
                  ((forvar23 <= reg27[(1'h1):(1'h1)]) ?
                      reg41 : {$unsigned(reg30), (wire1 >> reg26)}) : {reg26,
                      $unsigned(wire6[(3'h5):(2'h3)])}) | reg29);
              reg47 <= reg41[(4'h8):(4'h8)];
              reg48 <= {(-(reg36[(4'h9):(3'h4)] >>> forvar10[(2'h2):(2'h2)])),
                  ($signed((8'hb1)) - ($signed($unsigned(reg43)) ?
                      $signed((reg17 ?
                          wire1 : forvar28)) : (^wire2[(4'he):(4'he)])))};
              reg49 <= (|$signed((~&$unsigned($unsigned(forvar7)))));
              reg50 = ((8'hba) + $unsigned($unsigned((wire4 ?
                  $unsigned((8'ha4)) : (forvar28 ? wire0 : forvar39)))));
            end
          if (reg50[(4'hb):(1'h1)])
            begin
              reg51 = wire4;
              reg52 <= reg43[(1'h0):(1'h0)];
            end
          else
            begin
              reg51 = {(forvar15[(2'h3):(2'h3)] ?
                      ($signed($signed(wire5)) > (^(forvar15 ?
                          reg44 : forvar7))) : (((^(8'hb7)) | reg18) ?
                          $unsigned((wire1 ^~ reg8)) : $unsigned(forvar24)))};
              reg53 = reg19[(4'hd):(4'hc)];
              reg54 = {reg51};
              reg55 = (!reg12);
              reg56 <= {(8'hae)};
            end
          for (forvar57 = (1'h0); (forvar57 < (2'h3)); forvar57 = (forvar57 + (1'h1)))
            begin
              reg58 <= ($unsigned($signed(((reg20 ? wire6 : reg32) ?
                      reg33 : $unsigned(forvar39)))) ?
                  $signed({$unsigned(((8'h9d) ? reg33 : forvar57)),
                      (&forvar28[(1'h1):(1'h1)])}) : $unsigned({$unsigned($signed(forvar39))}));
              reg59 <= $signed(reg21);
              reg60 = reg13[(2'h2):(1'h0)];
            end
        end
    end
  assign wire61 = reg52;
  assign wire62 = (+$unsigned(reg40[(1'h1):(1'h1)]));
  assign wire63 = $signed(((8'ha4) ?
                      ($unsigned(reg48) == (reg12[(4'h9):(1'h0)] != reg58)) : ($unsigned((reg49 != reg33)) | (!reg40[(1'h0):(1'h0)]))));
  assign wire64 = $unsigned($unsigned(reg34[(4'he):(3'h5)]));
endmodule