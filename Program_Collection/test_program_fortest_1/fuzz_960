(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param100 = ((+(!(!{(8'ha2)}))) ? (((((8'haf) ? (8'had) : (8'hb2)) ? {(8'ha8)} : {(8'hab), (8'hab)}) ^ {((8'hbb) ? (8'had) : (7'h40)), ((7'h42) ? (7'h42) : (8'hb6))}) ? ({((8'ha6) ^~ (8'ha2))} ? (((8'hb2) ^~ (8'hba)) ? (~&(7'h40)) : {(8'ha9)}) : (7'h41)) : ((-((8'hac) * (7'h44))) ? (((8'hb4) | (8'ha7)) ? {(8'hb9)} : (^~(7'h42))) : ({(8'ha0), (8'ha3)} && ((8'ha4) & (8'hb4))))) : (((~&(8'ha0)) >= (~|(-(8'ha3)))) ? {(((7'h41) & (8'hb2)) | ((8'h9e) ~^ (8'hb6))), (((8'ha2) ? (8'had) : (8'ha5)) && ((8'hb5) >> (8'ha5)))} : (((7'h44) ? ((7'h41) && (8'ha3)) : (~|(8'hb0))) ? (~|(8'ha9)) : (^~(~&(7'h43)))))))
(y, clk, wire0, wire1, wire2, wire3, wire4);
  output wire [(32'h3e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h14):(1'h0)] wire0;
  input wire signed [(3'h5):(1'h0)] wire1;
  input wire [(5'h15):(1'h0)] wire2;
  input wire signed [(4'hc):(1'h0)] wire3;
  input wire signed [(4'h8):(1'h0)] wire4;
  wire signed [(4'hb):(1'h0)] wire99;
  wire [(5'h10):(1'h0)] wire5;
  wire [(4'hc):(1'h0)] wire6;
  wire signed [(4'hd):(1'h0)] wire7;
  wire [(4'h9):(1'h0)] wire97;
  assign y = {wire99, wire5, wire6, wire7, wire97, (1'h0)};
  assign wire5 = ($unsigned(wire2[(4'h8):(4'h8)]) || $unsigned($unsigned((-((8'h9c) >= wire0)))));
  assign wire6 = wire4[(3'h4):(2'h3)];
  assign wire7 = (wire4 ^~ {{$unsigned((wire3 << wire3))}});
  module8 #() modinst98 (wire97, clk, wire6, wire0, wire2, wire3, wire7);
  assign wire99 = ($signed(({(wire6 ? (8'h9c) : (8'hb4)),
                      (wire7 & wire0)} >= ((wire2 ? (8'hb4) : (8'hac)) ?
                      wire0 : $signed(wire1)))) <= $unsigned(wire5[(1'h0):(1'h0)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module8
#(parameter param95 = (8'h9f), 
parameter param96 = ({(^~((~^param95) > param95))} <= param95))
(y, clk, wire13, wire12, wire11, wire10, wire9);
  output wire [(32'h397):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hc):(1'h0)] wire13;
  input wire signed [(4'hf):(1'h0)] wire12;
  input wire signed [(5'h15):(1'h0)] wire11;
  input wire signed [(4'hc):(1'h0)] wire10;
  input wire [(4'hd):(1'h0)] wire9;
  wire signed [(5'h11):(1'h0)] wire67;
  wire [(2'h2):(1'h0)] wire65;
  wire [(3'h4):(1'h0)] wire64;
  wire [(2'h2):(1'h0)] wire16;
  wire signed [(2'h3):(1'h0)] wire15;
  wire signed [(4'hd):(1'h0)] wire14;
  reg signed [(4'ha):(1'h0)] reg94 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg93 = (1'h0);
  reg [(3'h7):(1'h0)] reg90 = (1'h0);
  reg [(5'h12):(1'h0)] reg87 = (1'h0);
  reg [(5'h11):(1'h0)] reg85 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg83 = (1'h0);
  reg [(4'he):(1'h0)] reg82 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg80 = (1'h0);
  reg [(5'h15):(1'h0)] reg77 = (1'h0);
  reg [(5'h12):(1'h0)] reg74 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg72 = (1'h0);
  reg [(4'h9):(1'h0)] reg71 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg70 = (1'h0);
  reg [(5'h15):(1'h0)] reg66 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg63 = (1'h0);
  reg [(3'h7):(1'h0)] reg62 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg58 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg57 = (1'h0);
  reg [(4'h9):(1'h0)] reg56 = (1'h0);
  reg [(5'h10):(1'h0)] reg55 = (1'h0);
  reg [(3'h4):(1'h0)] reg54 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg52 = (1'h0);
  reg [(5'h13):(1'h0)] reg51 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg50 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg45 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg44 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg42 = (1'h0);
  reg [(3'h6):(1'h0)] reg40 = (1'h0);
  reg [(3'h4):(1'h0)] reg39 = (1'h0);
  reg [(4'hc):(1'h0)] reg34 = (1'h0);
  reg [(4'ha):(1'h0)] reg33 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg30 = (1'h0);
  reg [(3'h4):(1'h0)] reg28 = (1'h0);
  reg [(4'h9):(1'h0)] reg25 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg22 = (1'h0);
  reg [(4'ha):(1'h0)] reg20 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg17 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg92 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar91 = (1'h0);
  reg [(4'hb):(1'h0)] reg89 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg88 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar86 = (1'h0);
  reg [(4'he):(1'h0)] reg84 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar81 = (1'h0);
  reg [(3'h6):(1'h0)] forvar79 = (1'h0);
  reg [(4'hb):(1'h0)] reg79 = (1'h0);
  reg [(5'h10):(1'h0)] reg78 = (1'h0);
  reg [(3'h4):(1'h0)] reg76 = (1'h0);
  reg [(5'h10):(1'h0)] forvar75 = (1'h0);
  reg [(5'h10):(1'h0)] forvar73 = (1'h0);
  reg [(5'h11):(1'h0)] forvar69 = (1'h0);
  reg [(4'h8):(1'h0)] forvar68 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg61 = (1'h0);
  reg [(4'hf):(1'h0)] reg60 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg59 = (1'h0);
  reg [(5'h14):(1'h0)] reg53 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg49 = (1'h0);
  reg [(5'h11):(1'h0)] forvar48 = (1'h0);
  reg [(5'h15):(1'h0)] forvar47 = (1'h0);
  reg [(5'h11):(1'h0)] reg46 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg43 = (1'h0);
  reg [(5'h12):(1'h0)] reg41 = (1'h0);
  reg [(2'h2):(1'h0)] reg38 = (1'h0);
  reg [(5'h10):(1'h0)] reg37 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar36 = (1'h0);
  reg [(5'h13):(1'h0)] reg35 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar32 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar31 = (1'h0);
  reg signed [(4'he):(1'h0)] reg29 = (1'h0);
  reg [(4'h9):(1'h0)] forvar27 = (1'h0);
  reg [(4'h8):(1'h0)] reg26 = (1'h0);
  reg [(5'h10):(1'h0)] forvar24 = (1'h0);
  reg [(3'h5):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg21 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar19 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar18 = (1'h0);
  assign y = {wire67,
                 wire65,
                 wire64,
                 wire16,
                 wire15,
                 wire14,
                 reg94,
                 reg93,
                 reg90,
                 reg87,
                 reg85,
                 reg83,
                 reg82,
                 reg80,
                 reg77,
                 reg74,
                 reg72,
                 reg71,
                 reg70,
                 reg66,
                 reg63,
                 reg62,
                 reg58,
                 reg57,
                 reg56,
                 reg55,
                 reg54,
                 reg52,
                 reg51,
                 reg50,
                 reg45,
                 reg44,
                 reg42,
                 reg40,
                 reg39,
                 reg34,
                 reg33,
                 reg30,
                 reg28,
                 reg25,
                 reg22,
                 reg20,
                 reg17,
                 reg92,
                 forvar91,
                 reg89,
                 reg88,
                 forvar86,
                 reg84,
                 forvar81,
                 forvar79,
                 reg79,
                 reg78,
                 reg76,
                 forvar75,
                 forvar73,
                 forvar69,
                 forvar68,
                 reg61,
                 reg60,
                 reg59,
                 reg53,
                 reg49,
                 forvar48,
                 forvar47,
                 reg46,
                 reg43,
                 reg41,
                 reg38,
                 reg37,
                 forvar36,
                 reg35,
                 forvar32,
                 forvar31,
                 reg29,
                 forvar27,
                 reg26,
                 forvar24,
                 reg23,
                 reg21,
                 forvar19,
                 forvar18,
                 (1'h0)};
  assign wire14 = ({wire9[(4'ha):(2'h3)],
                          ($signed((wire13 ?
                              wire10 : wire13)) >> $signed((+wire10)))} ?
                      (!wire9) : ($signed($unsigned((7'h43))) ?
                          (wire13 ?
                              wire11[(1'h1):(1'h1)] : ($unsigned(wire12) ?
                                  (+wire13) : (wire10 ?
                                      wire9 : (8'hb1)))) : $unsigned($signed(wire13))));
  assign wire15 = (~&(8'ha5));
  assign wire16 = ((-($signed((wire11 ? wire15 : wire10)) && {$unsigned(wire10),
                          (wire9 | wire10)})) ?
                      ($signed({(wire10 ? wire13 : (8'ha4)), {wire9, wire11}}) ?
                          wire9[(2'h3):(2'h2)] : wire9) : wire15[(1'h1):(1'h0)]);
  always
    @(posedge clk) begin
      reg17 <= wire10;
      for (forvar18 = (1'h0); (forvar18 < (1'h1)); forvar18 = (forvar18 + (1'h1)))
        begin
          for (forvar19 = (1'h0); (forvar19 < (1'h0)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 <= (^~(($signed($unsigned(forvar18)) ~^ $signed($unsigned(wire11))) ~^ reg17));
              reg21 = $signed((&(^~reg20)));
              reg22 <= $unsigned(wire14[(3'h5):(1'h0)]);
              reg23 = $unsigned(wire12);
            end
          for (forvar24 = (1'h0); (forvar24 < (2'h2)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 <= wire10;
              reg26 = $unsigned((^{((reg23 ? forvar18 : wire13) < (|(8'ha5))),
                  $signed({wire11})}));
            end
          for (forvar27 = (1'h0); (forvar27 < (3'h4)); forvar27 = (forvar27 + (1'h1)))
            begin
              reg28 <= ((+$unsigned(((forvar19 ?
                  forvar24 : wire12) <<< (wire15 || forvar19)))) ~^ (($unsigned(forvar24) < ((^~reg23) ?
                  $signed(reg22) : reg20[(3'h7):(1'h0)])) <= (^(8'hb5))));
              reg29 = (wire14 ? $signed(reg21) : {(~|reg28[(2'h3):(2'h2)])});
              reg30 <= (wire9[(4'h8):(2'h3)] & wire16[(1'h0):(1'h0)]);
            end
        end
      for (forvar31 = (1'h0); (forvar31 < (3'h4)); forvar31 = (forvar31 + (1'h1)))
        begin
          for (forvar32 = (1'h0); (forvar32 < (2'h3)); forvar32 = (forvar32 + (1'h1)))
            begin
              reg33 <= reg23;
              reg34 <= (forvar18[(1'h0):(1'h0)] <= (8'hbd));
              reg35 = wire10;
            end
          for (forvar36 = (1'h0); (forvar36 < (1'h1)); forvar36 = (forvar36 + (1'h1)))
            begin
              reg37 = $signed(((reg17[(1'h0):(1'h0)] & reg23[(2'h3):(2'h2)]) || $unsigned(reg29)));
              reg38 = forvar27;
              reg39 <= ($signed($unsigned(reg29)) | $signed(($unsigned((forvar31 ?
                      wire15 : forvar24)) ?
                  wire16 : reg25)));
            end
          if ($unsigned(reg33))
            begin
              reg40 <= ($unsigned({(!reg33)}) || $signed(($signed((~|wire16)) ?
                  ($unsigned(wire12) ?
                      (8'haf) : (wire14 ? forvar24 : forvar27)) : (&(8'hae)))));
            end
          else
            begin
              reg41 = $unsigned($signed($unsigned((~((8'haf) << forvar18)))));
              reg42 <= (($signed(({(8'hb7)} ?
                  (~&forvar27) : wire10[(3'h4):(1'h0)])) >>> (|wire9[(3'h7):(2'h3)])) ^ (reg35 <<< reg34));
              reg43 = wire16[(2'h2):(1'h0)];
              reg44 <= (((^~forvar18[(1'h0):(1'h0)]) ?
                      ((&(8'hbc)) >= $unsigned((reg30 ?
                          reg26 : reg41))) : ($signed($unsigned(reg25)) != ((~^reg29) ?
                          (reg22 ? reg43 : reg26) : $unsigned(reg43)))) ?
                  $signed(($signed(forvar32) ?
                      ($unsigned(reg29) >>> $signed((7'h41))) : {(reg21 ?
                              reg23 : wire10),
                          (reg42 == reg23)})) : ((~&(+(reg41 - wire16))) ?
                      $signed((reg40[(2'h3):(1'h1)] >= (~&reg37))) : reg20[(4'ha):(3'h6)]));
              reg45 <= (^~((-reg42[(4'h9):(2'h3)]) ?
                  (reg38[(1'h1):(1'h0)] + (+$unsigned(reg43))) : reg40));
            end
        end
      reg46 = $unsigned((^reg26));
      for (forvar47 = (1'h0); (forvar47 < (1'h1)); forvar47 = (forvar47 + (1'h1)))
        begin
          for (forvar48 = (1'h0); (forvar48 < (1'h0)); forvar48 = (forvar48 + (1'h1)))
            begin
              reg49 = $unsigned($unsigned((8'ha6)));
              reg50 <= reg49[(4'ha):(4'h8)];
            end
          if (wire15)
            begin
              reg51 <= $unsigned(((($unsigned(reg40) + forvar31) ?
                      ((wire11 << wire15) ?
                          (reg34 ?
                              reg26 : wire12) : (forvar32 - reg38)) : $unsigned($signed(wire15))) ?
                  (((-reg40) >= (reg26 ? reg35 : reg50)) ?
                      ((|reg20) ?
                          (reg37 ?
                              (8'ha6) : reg23) : $signed(wire12)) : (((8'hb0) ?
                              reg21 : reg20) ?
                          (reg49 ?
                              reg23 : reg37) : wire13[(4'ha):(3'h5)])) : forvar27[(1'h0):(1'h0)]));
              reg52 <= $unsigned({({reg41[(3'h7):(3'h4)],
                      (8'hbe)} ^~ $unsigned((forvar48 >= wire9))),
                  $signed({(~^reg30)})});
            end
          else
            begin
              reg53 = $signed({$signed($signed(reg28)),
                  (($signed(reg26) | (wire14 ?
                      wire11 : reg23)) == (reg45 == reg41[(4'h8):(3'h5)]))});
              reg54 <= $signed(forvar48);
              reg55 <= reg40[(3'h4):(1'h1)];
              reg56 <= $signed($unsigned($signed(reg20[(4'ha):(1'h0)])));
            end
          reg57 <= (~^(^~wire9));
          if ((^~$unsigned((($signed(wire15) ? reg26[(3'h7):(1'h1)] : reg57) ?
              wire16[(2'h2):(1'h0)] : forvar19[(3'h6):(2'h2)]))))
            begin
              reg58 <= (~$signed($unsigned(wire13)));
              reg59 = {(wire13 ~^ reg46)};
              reg60 = {$unsigned((-$unsigned($signed(forvar31)))),
                  ({{$signed((8'ha3))},
                      $unsigned($unsigned(reg43))} >> $unsigned(forvar47))};
              reg61 = ($unsigned((forvar36[(3'h5):(2'h2)] ~^ (((8'h9f) ?
                      reg52 : reg59) ?
                  forvar24[(4'h9):(1'h1)] : $signed(reg22)))) < wire12[(4'ha):(3'h7)]);
            end
          else
            begin
              reg59 = reg59;
              reg62 <= (!forvar27[(1'h0):(1'h0)]);
              reg63 <= wire13;
            end
        end
    end
  assign wire64 = (reg28 ?
                      $unsigned($signed($unsigned((reg33 != reg28)))) : $unsigned((~|reg62)));
  assign wire65 = reg51[(5'h10):(3'h7)];
  always
    @(posedge clk) begin
      reg66 <= $signed({{(reg63[(1'h0):(1'h0)] ?
                  $unsigned(reg17) : $unsigned(reg30))},
          $signed(wire65[(1'h0):(1'h0)])});
    end
  assign wire67 = ((8'hbb) ?
                      ((((wire65 ? reg50 : (8'hb7)) & reg58) ?
                          reg40 : (reg56 ?
                              reg17[(4'hd):(4'hb)] : (^~(8'hab)))) > (((!(8'ha0)) ?
                          $signed(reg56) : $signed(reg28)) - wire9)) : ((($unsigned(reg56) | (~|reg50)) ?
                              ({reg44, reg57} ? reg50 : (|wire14)) : {wire65}) ?
                          $unsigned(reg28) : (~^(wire16[(1'h1):(1'h1)] ?
                              (-reg63) : (^wire16)))));
  always
    @(posedge clk) begin
      for (forvar68 = (1'h0); (forvar68 < (3'h4)); forvar68 = (forvar68 + (1'h1)))
        begin
          for (forvar69 = (1'h0); (forvar69 < (3'h4)); forvar69 = (forvar69 + (1'h1)))
            begin
              reg70 <= reg62;
              reg71 <= $unsigned(($signed(((reg22 << wire12) ?
                  (~|wire15) : {reg28})) >> (reg45[(1'h1):(1'h0)] != $signed(wire9[(2'h2):(1'h0)]))));
              reg72 <= $unsigned({(&wire14)});
            end
        end
    end
  always
    @(posedge clk) begin
      for (forvar73 = (1'h0); (forvar73 < (1'h1)); forvar73 = (forvar73 + (1'h1)))
        begin
          reg74 <= reg25[(1'h1):(1'h1)];
          for (forvar75 = (1'h0); (forvar75 < (2'h3)); forvar75 = (forvar75 + (1'h1)))
            begin
              reg76 = reg52;
              reg77 <= forvar73;
            end
        end
      reg78 = reg30;
      if (((($signed((forvar73 ? wire10 : wire65)) ?
              reg57[(2'h2):(1'h0)] : $unsigned({wire11, reg70})) ?
          (reg39 ?
              (|$unsigned((7'h42))) : (^~reg76[(2'h3):(1'h1)])) : reg70) - $signed(((wire9 + $unsigned(reg34)) ?
          (reg34[(2'h3):(2'h3)] + (+reg34)) : ($signed(wire16) ?
              {wire11, reg76} : wire12[(4'hc):(3'h5)])))))
        begin
          reg79 = (($unsigned(wire9[(4'ha):(3'h6)]) ?
                  {reg57[(4'h8):(1'h1)],
                      $signed($signed(reg62))} : $signed((wire9[(4'h8):(3'h5)] ?
                      $unsigned(wire12) : (reg42 ? reg45 : reg40)))) ?
              reg52[(1'h0):(1'h0)] : (^{($signed(wire10) ?
                      $unsigned(wire14) : $unsigned(reg74))}));
        end
      else
        begin
          for (forvar79 = (1'h0); (forvar79 < (1'h1)); forvar79 = (forvar79 + (1'h1)))
            begin
              reg80 <= reg34;
            end
          for (forvar81 = (1'h0); (forvar81 < (2'h2)); forvar81 = (forvar81 + (1'h1)))
            begin
              reg82 <= ($signed($signed($unsigned($signed(reg28)))) >> $unsigned((wire64[(1'h0):(1'h0)] ?
                  {reg74, (~^reg54)} : $unsigned(reg44))));
              reg83 <= wire65;
              reg84 = wire12;
              reg85 <= wire12;
            end
          for (forvar86 = (1'h0); (forvar86 < (1'h0)); forvar86 = (forvar86 + (1'h1)))
            begin
              reg87 <= (({forvar73[(2'h2):(1'h1)]} << $unsigned(((+(8'haa)) <<< {wire65,
                  reg79}))) && {{reg44}});
              reg88 = $unsigned(reg72[(3'h5):(3'h5)]);
              reg89 = reg83;
            end
          reg90 <= reg83[(3'h6):(2'h3)];
          for (forvar91 = (1'h0); (forvar91 < (1'h0)); forvar91 = (forvar91 + (1'h1)))
            begin
              reg92 = ((^$signed((((7'h40) < wire15) >> $signed(reg77)))) < ($unsigned($signed({reg55,
                  reg89})) || (-($signed(reg20) || (reg17 ? reg30 : reg22)))));
              reg93 <= $unsigned((reg51[(2'h3):(2'h3)] ? (8'had) : (8'ha0)));
            end
        end
    end
  always
    @(posedge clk) begin
      reg94 <= (reg72[(3'h5):(2'h3)] < wire15[(2'h2):(2'h2)]);
    end
endmodule