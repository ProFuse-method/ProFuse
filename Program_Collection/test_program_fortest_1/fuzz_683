(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h64):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h2):(1'h0)] wire0;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire [(3'h6):(1'h0)] wire3;
  wire [(4'h9):(1'h0)] wire62;
  wire [(3'h7):(1'h0)] wire4;
  wire signed [(4'ha):(1'h0)] wire5;
  wire signed [(2'h2):(1'h0)] wire9;
  wire [(4'h9):(1'h0)] wire12;
  wire signed [(4'h8):(1'h0)] wire13;
  wire signed [(4'h8):(1'h0)] wire14;
  wire signed [(4'h8):(1'h0)] wire15;
  wire [(2'h2):(1'h0)] wire16;
  wire [(3'h6):(1'h0)] wire60;
  reg signed [(2'h3):(1'h0)] reg6 = (1'h0);
  reg [(3'h5):(1'h0)] reg7 = (1'h0);
  reg [(4'hb):(1'h0)] reg8 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg10 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg11 = (1'h0);
  assign y = {wire62,
                 wire4,
                 wire5,
                 wire9,
                 wire12,
                 wire13,
                 wire14,
                 wire15,
                 wire16,
                 wire60,
                 reg6,
                 reg7,
                 reg8,
                 reg10,
                 reg11,
                 (1'h0)};
  assign wire4 = $signed($unsigned(wire2[(4'ha):(3'h5)]));
  assign wire5 = wire1[(2'h2):(2'h2)];
  always
    @(posedge clk) begin
      if ({(~&$unsigned(wire5[(3'h4):(1'h0)]))})
        begin
          reg6 <= ((wire3 ?
              wire5[(4'h9):(4'h9)] : (~^$signed(wire1))) + (8'hb0));
        end
      else
        begin
          reg6 <= (wire1 == wire1[(2'h2):(1'h1)]);
          reg7 <= wire0[(1'h0):(1'h0)];
        end
      reg8 <= wire1;
    end
  assign wire9 = ((((^reg8) <<< ((8'h9f) ? reg7 : (8'ha6))) ?
                     (^~$signed((8'ha8))) : ({(8'ha6)} ?
                         reg8 : $signed(reg6))) ^~ $unsigned((8'ha7)));
  always
    @(posedge clk) begin
      reg10 <= wire5;
      reg11 <= (!((^(^wire1)) & (8'h9e)));
    end
  assign wire12 = {$signed((wire4[(2'h3):(1'h1)] ? wire3 : $signed(wire4)))};
  assign wire13 = wire9[(1'h0):(1'h0)];
  assign wire14 = wire12;
  assign wire15 = (wire12 > {reg6});
  assign wire16 = (&$signed(reg7[(2'h3):(1'h0)]));
  module17 #() modinst61 (wire60, clk, wire13, wire9, wire2, reg10);
  assign wire62 = $unsigned((({wire9} ?
                      ((8'hac) < wire1) : $signed(wire1)) >>> wire12[(2'h2):(1'h0)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module17
#(parameter param59 = (((~|{(8'ha0)}) <= (~((8'haf) ? (8'ha7) : (8'ha2)))) >= ((~&((8'hae) > (8'ha3))) >>> ((~^(8'hac)) <<< ((8'hac) >> (8'ha1))))))
(y, clk, wire18, wire19, wire20, wire21);
  output wire [(32'h80):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire18;
  input wire signed [(2'h2):(1'h0)] wire19;
  input wire [(2'h3):(1'h0)] wire20;
  input wire [(2'h3):(1'h0)] wire21;
  wire [(4'h8):(1'h0)] wire58;
  wire [(3'h5):(1'h0)] wire22;
  wire signed [(3'h4):(1'h0)] wire23;
  wire signed [(4'h9):(1'h0)] wire24;
  wire [(2'h3):(1'h0)] wire30;
  wire [(4'h9):(1'h0)] wire39;
  wire signed [(3'h5):(1'h0)] wire56;
  reg [(3'h6):(1'h0)] reg25 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg26 = (1'h0);
  reg [(4'hb):(1'h0)] reg27 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg28 = (1'h0);
  reg [(3'h6):(1'h0)] reg29 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg31 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg32 = (1'h0);
  reg [(4'h9):(1'h0)] reg33 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg34 = (1'h0);
  reg [(4'h9):(1'h0)] reg35 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg36 = (1'h0);
  reg [(2'h2):(1'h0)] reg37 = (1'h0);
  reg [(2'h3):(1'h0)] reg38 = (1'h0);
  assign y = {wire58,
                 wire22,
                 wire23,
                 wire24,
                 wire30,
                 wire39,
                 wire56,
                 reg25,
                 reg26,
                 reg27,
                 reg28,
                 reg29,
                 reg31,
                 reg32,
                 reg33,
                 reg34,
                 reg35,
                 reg36,
                 reg37,
                 reg38,
                 (1'h0)};
  assign wire22 = $unsigned(({wire21[(1'h1):(1'h0)]} ?
                      $unsigned((wire19 <= wire18)) : (~&{wire18})));
  assign wire23 = {$unsigned($signed((wire20 ? wire21 : wire18)))};
  assign wire24 = {$signed((^~wire22[(1'h0):(1'h0)]))};
  always
    @(posedge clk) begin
      reg25 <= $signed(wire19[(2'h2):(1'h0)]);
      if ({$signed(((wire20 ? (8'h9e) : (8'h9c)) & wire21))})
        begin
          reg26 <= (~^{{$unsigned(wire20)}});
        end
      else
        begin
          if (({wire23} << $unsigned((reg26[(3'h7):(3'h4)] ? wire24 : reg26))))
            begin
              reg26 <= $unsigned(wire22[(2'h3):(1'h1)]);
              reg27 <= wire19;
            end
          else
            begin
              reg26 <= wire20[(1'h1):(1'h0)];
              reg27 <= $unsigned((reg26[(2'h2):(1'h1)] ?
                  $unsigned((wire24 ? reg27 : wire24)) : reg25[(3'h4):(1'h1)]));
            end
          reg28 <= (-wire18);
        end
      reg29 <= (!$signed((wire19 >= $unsigned(wire23))));
    end
  assign wire30 = reg27[(1'h1):(1'h0)];
  always
    @(posedge clk) begin
      if (wire21[(1'h0):(1'h0)])
        begin
          reg31 <= (8'h9f);
          reg32 <= (wire18 << $unsigned((reg25 >= {wire22})));
          reg33 <= (|(~&(8'ha9)));
        end
      else
        begin
          reg31 <= (~|($signed(reg32) << $signed((wire19 ? wire18 : wire30))));
        end
      reg34 <= ((({wire18} || $unsigned(wire30)) ?
              $unsigned(reg25[(1'h0):(1'h0)]) : (wire22 ?
                  reg27 : (wire20 ? reg25 : reg31))) ?
          (reg32[(1'h1):(1'h0)] + $unsigned($signed(reg26))) : $signed({$signed(reg28)}));
      if (reg34)
        begin
          if ((-(8'ha6)))
            begin
              reg35 <= ($signed({(|wire23)}) ?
                  (reg25 ?
                      {$signed(wire23)} : (~reg25[(3'h6):(3'h4)])) : ($unsigned($signed((8'ha0))) && $unsigned((~^wire20))));
              reg36 <= reg33;
              reg37 <= ($unsigned(reg35) ? wire30[(1'h1):(1'h0)] : (8'h9d));
            end
          else
            begin
              reg35 <= (~^reg26[(1'h0):(1'h0)]);
              reg36 <= (&(&$unsigned((wire30 ? wire18 : (8'ha2)))));
              reg37 <= $unsigned(wire19);
            end
          if ((!reg35[(3'h7):(3'h4)]))
            begin
              reg38 <= $signed($signed($signed($signed(reg32))));
            end
          else
            begin
              reg38 <= (!reg37[(2'h2):(2'h2)]);
            end
        end
      else
        begin
          if ($unsigned(wire19))
            begin
              reg35 <= (wire19[(1'h1):(1'h0)] ? reg32 : (!wire18));
            end
          else
            begin
              reg35 <= $signed(wire20[(1'h0):(1'h0)]);
              reg36 <= wire22[(2'h3):(1'h1)];
              reg37 <= ($signed((wire18 & {reg32})) > reg26[(3'h4):(3'h4)]);
            end
          reg38 <= ($signed($signed((reg27 ?
              wire30 : wire21))) >= ((!$unsigned(reg25)) ?
              reg34 : $unsigned((reg34 << wire23))));
        end
    end
  assign wire39 = (8'ha1);
  module40 #() modinst57 (.wire41(reg26), .clk(clk), .wire43(reg35), .y(wire56), .wire42(reg32), .wire44(wire24));
  assign wire58 = $unsigned(((|((8'haf) ? wire24 : reg35)) ?
                      $signed((reg29 << wire56)) : (~$unsigned(reg35))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module40
#(parameter param55 = ((^((~^(8'ha9)) ? ((8'ha7) ? (8'hb0) : (8'ha2)) : {(8'ha5)})) * (((~(8'ha0)) >= {(8'ha2)}) + (|((8'ha2) ? (8'ha1) : (8'ha0))))))
(y, clk, wire44, wire43, wire42, wire41);
  output wire [(32'h44):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire44;
  input wire signed [(3'h7):(1'h0)] wire43;
  input wire [(2'h3):(1'h0)] wire42;
  input wire signed [(3'h6):(1'h0)] wire41;
  wire [(3'h7):(1'h0)] wire54;
  wire signed [(3'h6):(1'h0)] wire52;
  wire [(3'h7):(1'h0)] wire51;
  wire [(3'h7):(1'h0)] wire50;
  wire signed [(3'h6):(1'h0)] wire46;
  wire [(4'ha):(1'h0)] wire45;
  reg signed [(4'ha):(1'h0)] reg53 = (1'h0);
  reg [(2'h2):(1'h0)] reg49 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg48 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg47 = (1'h0);
  assign y = {wire54,
                 wire52,
                 wire51,
                 wire50,
                 wire46,
                 wire45,
                 reg53,
                 reg49,
                 reg48,
                 reg47,
                 (1'h0)};
  assign wire45 = {(+{(~|wire41)})};
  assign wire46 = wire44;
  always
    @(posedge clk) begin
      if ({$signed(wire42)})
        begin
          reg47 <= (~^$signed((wire46 ?
              $signed(wire42) : wire41[(3'h6):(3'h5)])));
          reg48 <= $unsigned((~&$signed($signed(wire45))));
        end
      else
        begin
          reg47 <= wire41;
          reg48 <= (+reg48);
        end
      reg49 <= ({$unsigned((wire42 ?
              (8'h9d) : reg48))} ~^ reg47[(1'h1):(1'h1)]);
    end
  assign wire50 = $signed(($signed($unsigned(wire45)) ?
                      ((wire41 <<< wire42) ?
                          (|wire46) : {wire42}) : (wire43[(3'h7):(2'h3)] ^~ wire45)));
  assign wire51 = (-$signed(reg47[(2'h2):(1'h0)]));
  assign wire52 = ($signed((~^(wire45 != (8'ha5)))) ?
                      $unsigned($signed({wire51})) : ($signed((reg47 ^~ wire44)) != {(reg49 >>> reg48)}));
  always
    @(posedge clk) begin
      reg53 <= ((&$unsigned((reg48 ? wire43 : (8'ha2)))) && $unsigned(wire51));
    end
  assign wire54 = {(+(+((8'hac) ^ reg48)))};
endmodule