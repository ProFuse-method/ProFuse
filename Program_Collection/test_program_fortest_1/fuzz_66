(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h70):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire0;
  input wire signed [(3'h7):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire2;
  input wire [(3'h4):(1'h0)] wire3;
  wire [(2'h3):(1'h0)] wire71;
  wire [(3'h5):(1'h0)] wire70;
  wire signed [(4'ha):(1'h0)] wire4;
  wire [(4'ha):(1'h0)] wire5;
  wire signed [(3'h7):(1'h0)] wire7;
  wire signed [(3'h5):(1'h0)] wire8;
  wire [(4'hb):(1'h0)] wire9;
  wire signed [(3'h5):(1'h0)] wire65;
  reg signed [(4'h9):(1'h0)] reg74 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg73 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg72 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg69 = (1'h0);
  reg [(3'h6):(1'h0)] reg68 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg67 = (1'h0);
  reg [(3'h7):(1'h0)] reg6 = (1'h0);
  assign y = {wire71,
                 wire70,
                 wire4,
                 wire5,
                 wire7,
                 wire8,
                 wire9,
                 wire65,
                 reg74,
                 reg73,
                 reg72,
                 reg69,
                 reg68,
                 reg67,
                 reg6,
                 (1'h0)};
  assign wire4 = wire1[(3'h4):(2'h2)];
  assign wire5 = (~&(((wire1 ?
                     wire2 : wire0) & $signed(wire0)) && (~&(wire3 && wire2))));
  always
    @(posedge clk) begin
      reg6 <= $signed((wire0 ?
          wire1[(3'h6):(3'h5)] : (wire0[(1'h1):(1'h0)] ~^ wire0)));
    end
  assign wire7 = (((^(8'ha8)) + {wire3[(3'h4):(1'h1)]}) >> (8'had));
  assign wire8 = ($unsigned($unsigned(((8'had) ?
                     wire3 : wire2))) | {(reg6[(1'h1):(1'h0)] ?
                         (wire3 ~^ reg6) : {wire7})});
  assign wire9 = $unsigned((wire7 ?
                     $unsigned($signed((8'ha3))) : wire3[(2'h2):(1'h1)]));
  module10 #() modinst66 (.y(wire65), .wire11(wire2), .wire14(wire7), .wire13(reg6), .wire12(wire0), .clk(clk));
  always
    @(posedge clk) begin
      reg67 <= reg6;
      if (wire8)
        begin
          reg68 <= $signed($unsigned({((8'hae) ? (8'ha5) : (8'ha5))}));
        end
      else
        begin
          reg68 <= ($unsigned($unsigned(wire2[(4'hb):(3'h6)])) ?
              $signed(((reg68 ^ wire5) | reg67[(3'h6):(3'h4)])) : ((-$signed(reg6)) > $unsigned($unsigned(wire5))));
          if ((~wire65[(3'h4):(1'h1)]))
            begin
              reg69 <= wire9[(4'ha):(4'h9)];
            end
          else
            begin
              reg69 <= (reg67 ~^ wire8[(1'h0):(1'h0)]);
            end
        end
    end
  assign wire70 = $unsigned(wire8);
  assign wire71 = wire7;
  always
    @(posedge clk) begin
      reg72 <= $signed($signed(reg69));
      reg73 <= wire70;
      if ($signed(reg69[(1'h1):(1'h0)]))
        begin
          reg74 <= (^~(^{$unsigned(reg68)}));
        end
      else
        begin
          reg74 <= {$signed((|(^reg72)))};
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10  (y, clk, wire14, wire13, wire12, wire11);
  output wire [(32'h6e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire14;
  input wire [(3'h7):(1'h0)] wire13;
  input wire [(4'ha):(1'h0)] wire12;
  input wire [(4'hb):(1'h0)] wire11;
  wire signed [(2'h3):(1'h0)] wire63;
  wire [(2'h2):(1'h0)] wire62;
  wire signed [(4'h9):(1'h0)] wire60;
  wire signed [(4'hb):(1'h0)] wire38;
  wire [(4'ha):(1'h0)] wire34;
  wire signed [(4'ha):(1'h0)] wire33;
  wire signed [(2'h3):(1'h0)] wire32;
  wire [(3'h6):(1'h0)] wire31;
  wire [(4'ha):(1'h0)] wire30;
  wire signed [(3'h5):(1'h0)] wire29;
  wire signed [(2'h3):(1'h0)] wire28;
  wire signed [(3'h7):(1'h0)] wire26;
  reg [(4'h8):(1'h0)] reg37 = (1'h0);
  reg [(4'hb):(1'h0)] reg36 = (1'h0);
  reg [(4'hb):(1'h0)] reg35 = (1'h0);
  assign y = {wire63,
                 wire62,
                 wire60,
                 wire38,
                 wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire30,
                 wire29,
                 wire28,
                 wire26,
                 reg37,
                 reg36,
                 reg35,
                 (1'h0)};
  module15 #() modinst27 (wire26, clk, wire14, wire12, wire11, wire13);
  assign wire28 = (8'hae);
  assign wire29 = ($unsigned((~^(wire26 ? wire26 : wire14))) >>> wire11);
  assign wire30 = $signed($unsigned(wire11[(2'h2):(2'h2)]));
  assign wire31 = wire11[(3'h5):(1'h1)];
  assign wire32 = ((wire26 ?
                      $unsigned((wire11 ?
                          wire11 : (8'ha5))) : (wire29 && wire14)) ~^ (wire11[(2'h2):(1'h1)] ?
                      (|(+wire28)) : wire26));
  assign wire33 = $unsigned(((((8'ha7) | (8'hae)) > wire32[(1'h1):(1'h1)]) ?
                      (wire14 << $unsigned(wire26)) : (wire29 ?
                          wire31 : (wire11 + wire31))));
  assign wire34 = $signed($unsigned($unsigned(wire28)));
  always
    @(posedge clk) begin
      if ((($signed((wire29 ? wire28 : wire28)) ?
          {(-wire14)} : ((wire31 ? wire28 : wire12) ?
              wire30 : (|wire12))) ^~ (((wire29 | (8'ha5)) ?
              (~^wire32) : {wire32}) ?
          (((8'h9c) ? wire32 : (8'hab)) < (~^(8'haf))) : ({wire33} ^~ wire11))))
        begin
          reg35 <= $unsigned((~&wire28[(2'h3):(2'h3)]));
          reg36 <= $unsigned(wire28);
          reg37 <= (($signed((|wire14)) <= $unsigned((&wire14))) >= (^wire31[(1'h0):(1'h0)]));
        end
      else
        begin
          reg35 <= (~($signed(((8'ha7) ? reg37 : wire34)) ?
              $unsigned($signed(wire13)) : $unsigned($signed(reg37))));
          reg36 <= $unsigned(wire33[(3'h7):(1'h0)]);
        end
    end
  assign wire38 = (reg35 > ((!wire32[(2'h3):(1'h0)]) ?
                      {$unsigned(reg37)} : $unsigned((~|wire29))));
  module39 #() modinst61 (wire60, clk, wire11, reg36, reg37, wire14);
  assign wire62 = $unsigned((($unsigned((8'ha1)) ?
                          {wire11} : (wire14 ? wire13 : reg35)) ?
                      wire30 : ($unsigned(wire30) <= wire30[(2'h3):(1'h1)])));
  module39 #() modinst64 (wire63, clk, wire38, wire30, wire29, wire33);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module39  (y, clk, wire43, wire42, wire41, wire40);
  output wire [(32'h79):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire43;
  input wire signed [(3'h6):(1'h0)] wire42;
  input wire [(3'h5):(1'h0)] wire41;
  input wire [(2'h2):(1'h0)] wire40;
  wire signed [(3'h4):(1'h0)] wire59;
  wire [(4'hb):(1'h0)] wire58;
  wire [(2'h3):(1'h0)] wire57;
  wire [(4'hb):(1'h0)] wire56;
  wire [(4'hb):(1'h0)] wire55;
  wire [(4'h9):(1'h0)] wire54;
  wire [(3'h6):(1'h0)] wire52;
  wire [(4'ha):(1'h0)] wire51;
  wire signed [(4'ha):(1'h0)] wire46;
  wire [(2'h2):(1'h0)] wire45;
  wire [(3'h4):(1'h0)] wire44;
  reg signed [(3'h7):(1'h0)] reg53 = (1'h0);
  reg [(4'ha):(1'h0)] reg50 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg49 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg48 = (1'h0);
  reg [(4'ha):(1'h0)] reg47 = (1'h0);
  assign y = {wire59,
                 wire58,
                 wire57,
                 wire56,
                 wire55,
                 wire54,
                 wire52,
                 wire51,
                 wire46,
                 wire45,
                 wire44,
                 reg53,
                 reg50,
                 reg49,
                 reg48,
                 reg47,
                 (1'h0)};
  assign wire44 = ($signed(wire43) + wire43[(4'h8):(3'h4)]);
  assign wire45 = wire40;
  assign wire46 = (wire45 ?
                      (8'ha5) : $unsigned(($signed((8'ha0)) ?
                          wire44 : wire44[(3'h4):(2'h2)])));
  always
    @(posedge clk) begin
      if (((-((wire46 ? wire41 : wire43) ?
          wire41[(3'h5):(2'h3)] : (wire43 ?
              wire41 : wire43))) > ((wire45[(1'h0):(1'h0)] ^~ wire46) * ((^~wire45) ?
          wire46[(3'h4):(3'h4)] : (wire42 ? wire45 : wire45)))))
        begin
          reg47 <= (+wire43);
          reg48 <= {(8'had)};
        end
      else
        begin
          if ($signed(wire43))
            begin
              reg47 <= ($unsigned((+(reg47 - wire41))) ? wire44 : (8'h9c));
              reg48 <= $signed((^~({wire44} > $unsigned((8'haf)))));
              reg49 <= (wire44[(3'h4):(1'h0)] ?
                  $signed(($signed(reg48) ?
                      $signed(reg48) : $signed(wire44))) : wire45);
            end
          else
            begin
              reg47 <= {$unsigned($signed((wire44 >= (8'ha0))))};
              reg48 <= (reg47 ?
                  ((^$signed(wire43)) ?
                      wire40[(1'h1):(1'h1)] : ((~|reg47) ?
                          $signed((8'ha9)) : (wire46 | (8'ha7)))) : ((|(&wire40)) & $signed((wire42 ?
                      wire41 : reg47))));
              reg49 <= ({$signed((reg49 < wire41))} ?
                  reg47[(3'h4):(2'h2)] : reg49[(2'h3):(1'h0)]);
            end
        end
      reg50 <= (reg47[(1'h1):(1'h1)] == (^(reg47 && reg49)));
    end
  assign wire51 = (reg48 & (8'ha1));
  assign wire52 = wire42;
  always
    @(posedge clk) begin
      reg53 <= wire45[(2'h2):(2'h2)];
    end
  assign wire54 = reg47;
  assign wire55 = (8'h9f);
  assign wire56 = {$signed(reg48[(3'h7):(2'h3)])};
  assign wire57 = $signed((~((|reg53) >> wire56[(4'h9):(1'h0)])));
  assign wire58 = (+wire54);
  assign wire59 = wire44[(1'h0):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15  (y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h25):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire19;
  input wire [(4'ha):(1'h0)] wire18;
  input wire [(4'h9):(1'h0)] wire17;
  input wire [(3'h7):(1'h0)] wire16;
  wire [(3'h6):(1'h0)] wire25;
  wire signed [(4'hb):(1'h0)] wire24;
  wire [(4'hb):(1'h0)] wire23;
  reg [(3'h4):(1'h0)] reg22 = (1'h0);
  reg [(2'h2):(1'h0)] reg21 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg20 = (1'h0);
  assign y = {wire25, wire24, wire23, reg22, reg21, reg20, (1'h0)};
  always
    @(posedge clk) begin
      reg20 <= $signed((^((wire19 - wire19) & (wire16 ? wire17 : wire18))));
      reg21 <= ((reg20 > wire19) ? wire18[(4'ha):(4'ha)] : reg20);
      reg22 <= (!wire17[(1'h0):(1'h0)]);
    end
  assign wire23 = (8'ha5);
  assign wire24 = (^(&wire16));
  assign wire25 = {(reg21 ?
                          {(wire18 >>> wire23)} : $signed((wire23 + wire17)))};
endmodule