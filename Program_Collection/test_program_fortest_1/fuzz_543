(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param17 = ({(~((8'hab) ? (8'ha3) : (8'h9d)))} ? ((~|((8'h9f) | (8'ha3))) ? (~^(-(8'hab))) : ((~(8'hab)) ? ((8'h9f) << (8'ha0)) : ((8'ha4) ? (8'hb0) : (8'h9c)))) : (|(((8'haa) ? (8'ha6) : (8'h9f)) ? (~|(8'ha0)) : (8'ha0)))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h63):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire3;
  input wire [(3'h6):(1'h0)] wire2;
  input wire [(2'h3):(1'h0)] wire1;
  input wire signed [(3'h7):(1'h0)] wire0;
  wire [(4'h8):(1'h0)] wire13;
  wire signed [(4'ha):(1'h0)] wire12;
  wire signed [(2'h3):(1'h0)] wire7;
  wire signed [(4'h8):(1'h0)] wire6;
  wire [(3'h6):(1'h0)] wire5;
  wire signed [(3'h5):(1'h0)] wire4;
  reg [(4'hb):(1'h0)] reg16 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg15 = (1'h0);
  reg [(4'ha):(1'h0)] reg14 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg11 = (1'h0);
  reg [(3'h6):(1'h0)] reg10 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg9 = (1'h0);
  reg [(3'h7):(1'h0)] reg8 = (1'h0);
  assign y = {wire13,
                 wire12,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 reg16,
                 reg15,
                 reg14,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 (1'h0)};
  assign wire4 = wire1[(2'h3):(2'h2)];
  assign wire5 = (-{wire4[(3'h5):(3'h5)]});
  assign wire6 = (wire5[(3'h6):(1'h1)] ? $unsigned((~|{(8'ha2)})) : wire4);
  assign wire7 = $signed(wire4);
  always
    @(posedge clk) begin
      reg8 <= wire4[(2'h3):(2'h2)];
      if ({$signed(wire0[(3'h6):(3'h4)])})
        begin
          reg9 <= (&(wire5[(2'h2):(2'h2)] ?
              $unsigned((wire5 ? wire6 : wire3)) : wire0));
        end
      else
        begin
          if (((~^wire5) ?
              (-(^~reg9)) : ((wire3[(1'h1):(1'h0)] & wire6) ?
                  wire4 : $signed({wire5}))))
            begin
              reg9 <= wire7;
              reg10 <= wire3;
            end
          else
            begin
              reg9 <= (((reg9 ?
                      (reg8 ?
                          wire5 : (8'ha8)) : wire2) << reg10[(3'h4):(2'h3)]) ?
                  wire5 : {(-(~wire6))});
            end
        end
      reg11 <= $unsigned((wire0 + reg8[(1'h0):(1'h0)]));
    end
  assign wire12 = reg10[(3'h6):(2'h3)];
  assign wire13 = reg9[(1'h1):(1'h1)];
  always
    @(posedge clk) begin
      reg14 <= $unsigned(wire2);
      reg15 <= {reg9[(1'h0):(1'h0)]};
      reg16 <= reg14;
    end
endmodule