(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param44 = ({((^~(8'haf)) <= (&(8'ha1)))} <<< (((|(8'ha2)) ? ((8'ha8) ? (8'haf) : (8'haf)) : {(8'haa)}) ? (((8'ha1) & (8'haf)) ? (&(8'ha0)) : (!(8'had))) : ((^~(8'had)) * ((8'ha2) + (8'hb0))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h45):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire3;
  input wire signed [(4'h8):(1'h0)] wire2;
  input wire [(4'ha):(1'h0)] wire1;
  input wire [(2'h2):(1'h0)] wire0;
  wire signed [(3'h4):(1'h0)] wire43;
  wire [(3'h4):(1'h0)] wire42;
  wire signed [(3'h4):(1'h0)] wire41;
  wire signed [(4'hb):(1'h0)] wire40;
  wire [(3'h4):(1'h0)] wire38;
  wire [(4'ha):(1'h0)] wire8;
  wire signed [(4'hb):(1'h0)] wire7;
  wire [(4'ha):(1'h0)] wire6;
  wire signed [(3'h7):(1'h0)] wire5;
  reg [(2'h3):(1'h0)] reg4 = (1'h0);
  assign y = {wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire38,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= $unsigned($signed($signed((wire0 ? wire2 : wire0))));
    end
  assign wire5 = (^~$unsigned($unsigned(wire1)));
  assign wire6 = (wire5[(1'h1):(1'h1)] <<< ((wire3 > (!wire0)) ?
                     {wire0[(2'h2):(2'h2)]} : wire5));
  assign wire7 = $unsigned($signed($signed(wire5[(2'h2):(1'h1)])));
  assign wire8 = (((~{wire0}) >= {((8'hab) << wire0)}) ?
                     $signed(wire2) : (~&{(^reg4)}));
  module9 #() modinst39 (wire38, clk, wire8, wire1, wire6, wire2);
  assign wire40 = {wire8[(3'h7):(3'h6)]};
  assign wire41 = ((~|(reg4 >>> (wire7 ?
                      (8'h9d) : wire6))) & wire2[(3'h7):(3'h7)]);
  assign wire42 = $signed({wire38});
  assign wire43 = $unsigned(wire1[(4'h9):(3'h6)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9
#(parameter param37 = (|(({(8'h9c)} * ((8'ha5) ? (8'hac) : (8'hac))) ? (((8'ha3) >>> (8'hab)) ? (~|(8'h9f)) : ((8'hae) ? (8'had) : (8'ha8))) : ((^(8'ha3)) >> ((8'ha7) ? (8'haf) : (8'h9c))))))
(y, clk, wire13, wire12, wire11, wire10);
  output wire [(32'h1c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire13;
  input wire [(4'ha):(1'h0)] wire12;
  input wire [(4'ha):(1'h0)] wire11;
  input wire [(3'h4):(1'h0)] wire10;
  wire signed [(3'h4):(1'h0)] wire35;
  wire [(3'h5):(1'h0)] wire17;
  wire signed [(2'h2):(1'h0)] wire16;
  wire [(4'ha):(1'h0)] wire15;
  wire [(3'h6):(1'h0)] wire14;
  assign y = {wire35, wire17, wire16, wire15, wire14, (1'h0)};
  assign wire14 = (~^(wire13 ? $signed((8'hab)) : wire11));
  assign wire15 = wire11[(3'h6):(3'h4)];
  assign wire16 = (~&($signed(wire13[(1'h0):(1'h0)]) ^ (!((8'ha5) <= wire12))));
  assign wire17 = wire16;
  module18 #() modinst36 (.wire20(wire15), .wire21(wire11), .wire22(wire13), .y(wire35), .clk(clk), .wire19(wire17));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18  (y, clk, wire22, wire21, wire20, wire19);
  output wire [(32'h5d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire22;
  input wire signed [(4'ha):(1'h0)] wire21;
  input wire signed [(3'h7):(1'h0)] wire20;
  input wire [(3'h5):(1'h0)] wire19;
  wire signed [(2'h3):(1'h0)] wire31;
  wire [(4'ha):(1'h0)] wire30;
  wire [(4'h9):(1'h0)] wire29;
  wire signed [(2'h2):(1'h0)] wire28;
  wire signed [(3'h7):(1'h0)] wire27;
  wire signed [(4'ha):(1'h0)] wire26;
  wire signed [(3'h7):(1'h0)] wire25;
  wire [(4'h9):(1'h0)] wire24;
  wire [(4'h8):(1'h0)] wire23;
  reg signed [(4'ha):(1'h0)] reg34 = (1'h0);
  reg [(4'h8):(1'h0)] reg33 = (1'h0);
  reg [(4'h9):(1'h0)] reg32 = (1'h0);
  assign y = {wire31,
                 wire30,
                 wire29,
                 wire28,
                 wire27,
                 wire26,
                 wire25,
                 wire24,
                 wire23,
                 reg34,
                 reg33,
                 reg32,
                 (1'h0)};
  assign wire23 = {({{(8'ha2)}} * {$unsigned(wire21)})};
  assign wire24 = wire21[(4'ha):(2'h3)];
  assign wire25 = wire24;
  assign wire26 = (wire21 || wire25);
  assign wire27 = ({(!wire26[(2'h3):(1'h0)])} <<< wire19);
  assign wire28 = $unsigned({((wire24 ? wire27 : wire19) ?
                          (wire19 ? wire21 : wire22) : wire27[(1'h0):(1'h0)])});
  assign wire29 = $unsigned(wire28[(1'h1):(1'h1)]);
  assign wire30 = wire20[(3'h5):(1'h0)];
  assign wire31 = $unsigned(wire24[(3'h6):(3'h5)]);
  always
    @(posedge clk) begin
      if ((^(8'hac)))
        begin
          if ($signed(wire20))
            begin
              reg32 <= (^~wire30);
              reg33 <= wire23;
            end
          else
            begin
              reg32 <= (^~$signed($unsigned((wire23 || wire19))));
            end
        end
      else
        begin
          reg32 <= wire30;
        end
      reg34 <= (|{(-reg33[(1'h1):(1'h0)])});
    end
endmodule