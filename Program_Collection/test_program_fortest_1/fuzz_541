(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h30):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h2):(1'h0)] wire3;
  input wire signed [(2'h3):(1'h0)] wire2;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire [(4'h8):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire28;
  wire [(3'h7):(1'h0)] wire27;
  wire signed [(3'h6):(1'h0)] wire26;
  wire [(4'ha):(1'h0)] wire25;
  wire [(2'h3):(1'h0)] wire24;
  wire signed [(3'h7):(1'h0)] wire22;
  wire [(4'h9):(1'h0)] wire4;
  assign y = {wire28, wire27, wire26, wire25, wire24, wire22, wire4, (1'h0)};
  assign wire4 = $signed(((+(wire3 ? wire3 : wire3)) ?
                     $unsigned((8'ha3)) : ($unsigned(wire1) ?
                         (wire1 ? (8'ha2) : wire2) : (|(8'haf)))));
  module5 #() modinst23 (.wire9(wire1), .wire8(wire2), .wire7(wire4), .clk(clk), .wire6(wire0), .y(wire22));
  assign wire24 = $signed((wire4[(3'h5):(1'h1)] ?
                      ((!wire4) ? {(8'ha7)} : wire22[(1'h1):(1'h1)]) : wire4));
  assign wire25 = (!{wire0[(3'h6):(2'h2)]});
  assign wire26 = ((wire1[(2'h2):(1'h0)] ?
                      $unsigned(((8'h9d) ?
                          wire0 : (8'hb0))) : $signed((^wire2))) * (8'had));
  assign wire27 = ((wire3[(2'h2):(1'h1)] ?
                      wire3[(2'h2):(2'h2)] : (~|wire22[(3'h7):(3'h5)])) == wire25);
  assign wire28 = (wire22[(1'h1):(1'h1)] << (wire27 > wire25));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module5
#(parameter param21 = {(&(8'ha5))})
(y, clk, wire9, wire8, wire7, wire6);
  output wire [(32'h41):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire9;
  input wire [(2'h2):(1'h0)] wire8;
  input wire signed [(4'h8):(1'h0)] wire7;
  input wire [(3'h4):(1'h0)] wire6;
  wire signed [(4'h8):(1'h0)] wire19;
  wire [(4'h9):(1'h0)] wire18;
  wire signed [(2'h2):(1'h0)] wire17;
  wire signed [(3'h5):(1'h0)] wire12;
  wire [(3'h5):(1'h0)] wire11;
  wire [(3'h6):(1'h0)] wire10;
  reg signed [(4'h9):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg16 = (1'h0);
  reg [(2'h2):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg14 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg13 = (1'h0);
  assign y = {wire19,
                 wire18,
                 wire17,
                 wire12,
                 wire11,
                 wire10,
                 reg20,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 (1'h0)};
  assign wire10 = $signed({($unsigned(wire6) >= (wire8 - wire9))});
  assign wire11 = wire7;
  assign wire12 = $signed($unsigned(wire11[(1'h1):(1'h1)]));
  always
    @(posedge clk) begin
      if ($unsigned({wire8}))
        begin
          reg13 <= wire8;
        end
      else
        begin
          reg13 <= ((((wire11 ? wire11 : wire6) ?
              $unsigned(reg13) : (&reg13)) << (~&(wire11 && wire9))) ^~ ($unsigned(wire12) & {wire7[(1'h0):(1'h0)]}));
        end
      if ($unsigned($signed(wire11)))
        begin
          reg14 <= $signed(((^{(8'hb0)}) ~^ ((wire7 ~^ wire6) ?
              (|wire11) : wire11)));
        end
      else
        begin
          reg14 <= reg14;
          reg15 <= $signed((|wire10[(1'h0):(1'h0)]));
        end
    end
  always
    @(posedge clk) begin
      reg16 <= ((reg14[(2'h2):(1'h0)] ?
          reg14[(3'h5):(2'h3)] : $unsigned((-(8'hab)))) < wire6[(3'h4):(2'h3)]);
    end
  assign wire17 = (~&reg16);
  assign wire18 = ($signed((^~(!reg14))) ?
                      ((wire9[(2'h2):(2'h2)] ~^ (~wire17)) >= (reg13 ?
                          (^wire10) : ((8'hae) > (8'hae)))) : ($signed((wire9 ?
                              wire9 : wire6)) ?
                          wire12 : (~^$signed((8'ha5)))));
  assign wire19 = (^$unsigned(wire11));
  always
    @(posedge clk) begin
      reg20 <= $unsigned(wire10[(1'h0):(1'h0)]);
    end
endmodule