(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param16 = ((|((8'ha2) & (~(8'hb0)))) <<< ((^~(^~(8'h9f))) ? (((8'ha8) ? (8'ha3) : (8'ha2)) >>> (&(8'ha4))) : (~&{(8'haa)}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h4a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire3;
  input wire [(2'h2):(1'h0)] wire2;
  input wire [(3'h7):(1'h0)] wire1;
  input wire [(4'ha):(1'h0)] wire0;
  wire [(2'h3):(1'h0)] wire15;
  wire [(4'h8):(1'h0)] wire14;
  reg [(3'h7):(1'h0)] reg13 = (1'h0);
  reg [(3'h6):(1'h0)] reg12 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg11 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg10 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg9 = (1'h0);
  reg [(3'h6):(1'h0)] reg8 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg7 = (1'h0);
  reg [(2'h2):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg5 = (1'h0);
  reg [(4'hb):(1'h0)] reg4 = (1'h0);
  assign y = {wire15,
                 wire14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ((($signed($unsigned(wire3)) ?
          $signed(((8'ha9) < wire2)) : $signed($unsigned((8'hac)))) + wire0))
        begin
          reg4 <= ((|(+wire0)) >= $signed($unsigned($unsigned((8'ha6)))));
          if (wire1[(2'h2):(1'h0)])
            begin
              reg5 <= $unsigned({(wire3 ^ $unsigned(wire3))});
              reg6 <= ($unsigned((^~$unsigned((8'haa)))) ~^ $signed((8'hb0)));
              reg7 <= ((8'h9f) ?
                  ({{reg4}} ?
                      ({reg4} ?
                          (wire0 ?
                              reg6 : reg5) : wire1) : wire3) : $signed(wire2));
            end
          else
            begin
              reg5 <= (($unsigned({wire2}) > ({reg5} ?
                  $signed(reg6) : $signed(wire3))) | $unsigned((|wire3)));
              reg6 <= (($signed(((8'ha0) ^ wire2)) * reg6[(2'h2):(1'h1)]) >>> wire1[(3'h6):(1'h0)]);
              reg7 <= $signed($signed((|$unsigned(reg4))));
            end
          reg8 <= ({(wire0[(3'h6):(2'h3)] ? (reg4 <<< reg6) : (~reg6))} ?
              {$signed((~reg7))} : (^~reg4));
        end
      else
        begin
          if (($signed(($signed(reg7) ^ $signed((8'ha5)))) >= {(((8'had) || (8'ha5)) ?
                  wire1[(1'h1):(1'h0)] : $signed(reg4))}))
            begin
              reg4 <= ($signed(($signed(wire2) ?
                  {reg8} : (^~reg6))) & $unsigned($unsigned((^wire1))));
              reg5 <= (reg6 <= $signed($signed((wire3 ? reg7 : reg8))));
            end
          else
            begin
              reg4 <= wire3[(1'h0):(1'h0)];
            end
          reg6 <= {$signed($unsigned(reg6[(2'h2):(2'h2)]))};
          reg7 <= reg8[(3'h6):(1'h0)];
        end
      reg9 <= (wire1 ?
          (wire3 ?
              ($unsigned(reg5) >>> {(8'h9e)}) : ({reg5} ?
                  $unsigned(wire2) : $unsigned(reg4))) : $unsigned(reg6));
      reg10 <= (&(8'h9c));
    end
  always
    @(posedge clk) begin
      reg11 <= ((8'hac) <<< $unsigned(wire3[(3'h5):(1'h1)]));
      reg12 <= $unsigned(({$signed((8'ha5))} << wire0));
      reg13 <= reg5;
    end
  assign wire14 = {{({reg10} >>> (reg9 ? reg7 : wire3))}};
  assign wire15 = $signed(reg5[(1'h0):(1'h0)]);
endmodule