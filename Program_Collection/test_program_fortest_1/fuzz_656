(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h84):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire3;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire [(3'h6):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire0;
  wire [(4'ha):(1'h0)] wire24;
  wire [(2'h2):(1'h0)] wire23;
  wire signed [(4'h9):(1'h0)] wire22;
  wire [(3'h5):(1'h0)] wire21;
  wire [(3'h7):(1'h0)] wire17;
  wire signed [(3'h7):(1'h0)] wire13;
  wire signed [(2'h2):(1'h0)] wire8;
  wire signed [(3'h5):(1'h0)] wire7;
  wire signed [(3'h6):(1'h0)] wire4;
  reg [(4'hb):(1'h0)] reg20 = (1'h0);
  reg [(3'h5):(1'h0)] reg19 = (1'h0);
  reg [(4'h8):(1'h0)] reg18 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg16 = (1'h0);
  reg [(4'hb):(1'h0)] reg15 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg14 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg12 = (1'h0);
  reg [(4'ha):(1'h0)] reg11 = (1'h0);
  reg [(3'h4):(1'h0)] reg10 = (1'h0);
  reg [(2'h3):(1'h0)] reg9 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg6 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg5 = (1'h0);
  assign y = {wire24,
                 wire23,
                 wire22,
                 wire21,
                 wire17,
                 wire13,
                 wire8,
                 wire7,
                 wire4,
                 reg20,
                 reg19,
                 reg18,
                 reg16,
                 reg15,
                 reg14,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg6,
                 reg5,
                 (1'h0)};
  assign wire4 = (8'ha0);
  always
    @(posedge clk) begin
      reg5 <= (($signed({(8'ha4)}) ?
              (~|(wire1 ? wire0 : wire3)) : $signed((~|wire4))) ?
          (~wire3[(3'h6):(3'h6)]) : wire0);
      reg6 <= wire2;
    end
  assign wire7 = $unsigned(wire1[(3'h6):(1'h0)]);
  assign wire8 = wire7;
  always
    @(posedge clk) begin
      if ((wire3[(2'h3):(2'h2)] ? wire1[(3'h6):(1'h1)] : reg6))
        begin
          reg9 <= wire1;
          reg10 <= $unsigned($signed(reg9));
          reg11 <= {reg9[(1'h0):(1'h0)]};
        end
      else
        begin
          reg9 <= (^((reg9[(2'h3):(1'h1)] ?
              $unsigned(wire8) : (reg11 ^ wire2)) + $unsigned($signed(wire3))));
          if ((($unsigned((wire3 >> reg9)) ^ (~^(wire2 ? reg10 : wire3))) ?
              (~&reg11[(1'h0):(1'h0)]) : ((!wire1[(3'h6):(3'h4)]) ?
                  $unsigned((~|wire4)) : $unsigned($signed(wire1)))))
            begin
              reg10 <= (($unsigned($unsigned(reg11)) << reg6) || (|$signed($signed(wire4))));
            end
          else
            begin
              reg10 <= reg9;
              reg11 <= (($signed((~&reg6)) != $signed((wire2 & reg10))) ?
                  $unsigned({$unsigned(wire8)}) : ($unsigned($unsigned((8'h9f))) ^~ reg10));
            end
        end
      reg12 <= wire1[(3'h4):(2'h2)];
    end
  assign wire13 = reg6[(3'h5):(3'h4)];
  always
    @(posedge clk) begin
      reg14 <= (((+$signed(wire7)) != $unsigned((|(8'had)))) + reg10);
      reg15 <= $signed(wire1);
      reg16 <= (!($unsigned($signed((8'ha3))) ^ {$unsigned((8'ha5))}));
    end
  assign wire17 = wire13[(3'h7):(1'h0)];
  always
    @(posedge clk) begin
      reg18 <= wire8;
      reg19 <= $unsigned(wire1);
      reg20 <= (^~reg15);
    end
  assign wire21 = $unsigned(reg11[(2'h2):(1'h1)]);
  assign wire22 = ({((|wire2) >= reg6)} ?
                      (^wire0[(1'h1):(1'h0)]) : $signed((((8'ha7) & (8'hab)) | $signed(reg12))));
  assign wire23 = reg5[(3'h5):(1'h1)];
  assign wire24 = (~|($unsigned(wire1) * wire17));
endmodule