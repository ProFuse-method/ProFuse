(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h3ec):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h14):(1'h0)] wire4;
  input wire signed [(4'h8):(1'h0)] wire3;
  input wire signed [(4'hc):(1'h0)] wire2;
  input wire [(5'h12):(1'h0)] wire1;
  input wire [(5'h13):(1'h0)] wire0;
  wire [(3'h6):(1'h0)] wire95;
  wire signed [(4'hf):(1'h0)] wire62;
  wire signed [(3'h6):(1'h0)] wire61;
  wire signed [(5'h10):(1'h0)] wire60;
  wire [(4'hd):(1'h0)] wire59;
  wire signed [(4'hb):(1'h0)] wire58;
  wire signed [(4'hd):(1'h0)] wire57;
  wire [(5'h11):(1'h0)] wire56;
  wire [(4'h8):(1'h0)] wire55;
  wire signed [(3'h5):(1'h0)] wire29;
  wire signed [(4'h8):(1'h0)] wire28;
  wire signed [(4'hb):(1'h0)] wire27;
  wire signed [(2'h2):(1'h0)] wire26;
  reg signed [(5'h11):(1'h0)] reg96 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg94 = (1'h0);
  reg [(4'hb):(1'h0)] reg91 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg90 = (1'h0);
  reg [(5'h14):(1'h0)] reg85 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg80 = (1'h0);
  reg [(3'h6):(1'h0)] reg77 = (1'h0);
  reg [(4'hf):(1'h0)] reg74 = (1'h0);
  reg [(5'h10):(1'h0)] reg72 = (1'h0);
  reg [(5'h10):(1'h0)] reg65 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg68 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg66 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg54 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg53 = (1'h0);
  reg [(3'h4):(1'h0)] reg48 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg45 = (1'h0);
  reg [(3'h5):(1'h0)] reg44 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg42 = (1'h0);
  reg [(4'hb):(1'h0)] reg41 = (1'h0);
  reg [(3'h4):(1'h0)] reg39 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg38 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg35 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg33 = (1'h0);
  reg [(3'h5):(1'h0)] reg32 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg25 = (1'h0);
  reg [(5'h10):(1'h0)] reg22 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg21 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg20 = (1'h0);
  reg [(4'hb):(1'h0)] reg18 = (1'h0);
  reg [(3'h7):(1'h0)] reg16 = (1'h0);
  reg [(5'h11):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg12 = (1'h0);
  reg [(3'h4):(1'h0)] reg10 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg9 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg6 = (1'h0);
  reg [(4'hb):(1'h0)] reg93 = (1'h0);
  reg [(4'hd):(1'h0)] forvar92 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar89 = (1'h0);
  reg [(4'he):(1'h0)] forvar88 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg87 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg86 = (1'h0);
  reg [(4'h8):(1'h0)] reg84 = (1'h0);
  reg [(4'ha):(1'h0)] reg83 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar82 = (1'h0);
  reg signed [(4'he):(1'h0)] reg81 = (1'h0);
  reg [(4'he):(1'h0)] reg79 = (1'h0);
  reg [(5'h15):(1'h0)] forvar78 = (1'h0);
  reg [(4'ha):(1'h0)] reg76 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg75 = (1'h0);
  reg [(4'hc):(1'h0)] reg73 = (1'h0);
  reg [(5'h14):(1'h0)] forvar71 = (1'h0);
  reg [(5'h14):(1'h0)] forvar64 = (1'h0);
  reg [(2'h2):(1'h0)] reg70 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg69 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg67 = (1'h0);
  reg [(5'h12):(1'h0)] forvar65 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg64 = (1'h0);
  reg [(4'ha):(1'h0)] reg63 = (1'h0);
  reg [(5'h11):(1'h0)] forvar52 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg51 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg50 = (1'h0);
  reg [(5'h13):(1'h0)] reg49 = (1'h0);
  reg [(4'h8):(1'h0)] forvar47 = (1'h0);
  reg [(4'ha):(1'h0)] forvar46 = (1'h0);
  reg [(5'h12):(1'h0)] reg43 = (1'h0);
  reg [(3'h4):(1'h0)] forvar40 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg37 = (1'h0);
  reg [(3'h5):(1'h0)] reg36 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar34 = (1'h0);
  reg [(3'h4):(1'h0)] forvar31 = (1'h0);
  reg [(3'h7):(1'h0)] forvar30 = (1'h0);
  reg [(5'h14):(1'h0)] forvar24 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar23 = (1'h0);
  reg [(4'ha):(1'h0)] forvar19 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar17 = (1'h0);
  reg [(5'h12):(1'h0)] reg15 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg14 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar11 = (1'h0);
  reg [(2'h3):(1'h0)] forvar8 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar7 = (1'h0);
  reg [(3'h6):(1'h0)] reg5 = (1'h0);
  assign y = {wire95,
                 wire62,
                 wire61,
                 wire60,
                 wire59,
                 wire58,
                 wire57,
                 wire56,
                 wire55,
                 wire29,
                 wire28,
                 wire27,
                 wire26,
                 reg96,
                 reg94,
                 reg91,
                 reg90,
                 reg85,
                 reg80,
                 reg77,
                 reg74,
                 reg72,
                 reg65,
                 reg68,
                 reg66,
                 reg54,
                 reg53,
                 reg48,
                 reg45,
                 reg44,
                 reg42,
                 reg41,
                 reg39,
                 reg38,
                 reg35,
                 reg33,
                 reg32,
                 reg25,
                 reg22,
                 reg21,
                 reg20,
                 reg18,
                 reg16,
                 reg13,
                 reg12,
                 reg10,
                 reg9,
                 reg6,
                 reg93,
                 forvar92,
                 forvar89,
                 forvar88,
                 reg87,
                 reg86,
                 reg84,
                 reg83,
                 forvar82,
                 reg81,
                 reg79,
                 forvar78,
                 reg76,
                 reg75,
                 reg73,
                 forvar71,
                 forvar64,
                 reg70,
                 reg69,
                 reg67,
                 forvar65,
                 reg64,
                 reg63,
                 forvar52,
                 reg51,
                 reg50,
                 reg49,
                 forvar47,
                 forvar46,
                 reg43,
                 forvar40,
                 reg37,
                 reg36,
                 forvar34,
                 forvar31,
                 forvar30,
                 forvar24,
                 forvar23,
                 forvar19,
                 forvar17,
                 reg15,
                 reg14,
                 forvar11,
                 forvar8,
                 forvar7,
                 reg5,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg5 = (-wire2);
      reg6 <= (8'ha9);
      for (forvar7 = (1'h0); (forvar7 < (1'h1)); forvar7 = (forvar7 + (1'h1)))
        begin
          for (forvar8 = (1'h0); (forvar8 < (1'h0)); forvar8 = (forvar8 + (1'h1)))
            begin
              reg9 <= ((~^(reg6[(3'h4):(2'h3)] <<< wire1[(1'h1):(1'h1)])) ?
                  $signed(wire2) : ($signed((+(wire0 >>> reg6))) ?
                      reg6[(4'hb):(4'ha)] : ((~|(wire1 ?
                          wire4 : reg5)) ^~ wire2)));
              reg10 <= (~|wire3[(2'h2):(1'h0)]);
            end
          for (forvar11 = (1'h0); (forvar11 < (1'h1)); forvar11 = (forvar11 + (1'h1)))
            begin
              reg12 <= forvar11;
              reg13 <= wire1[(3'h7):(3'h5)];
              reg14 = $signed(($unsigned(wire0[(5'h11):(3'h6)]) ?
                  (((reg12 ? (8'hb7) : (8'h9c)) <= (reg9 || forvar8)) ?
                      (8'haa) : (^~forvar11)) : wire3));
              reg15 = forvar11[(2'h2):(2'h2)];
              reg16 <= wire0;
            end
        end
      for (forvar17 = (1'h0); (forvar17 < (1'h0)); forvar17 = (forvar17 + (1'h1)))
        begin
          reg18 <= $signed(wire1[(5'h11):(4'h8)]);
          for (forvar19 = (1'h0); (forvar19 < (3'h4)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 <= $unsigned(wire0[(3'h6):(1'h0)]);
              reg21 <= (^~$signed($signed({(forvar11 | reg10),
                  (wire2 ? reg15 : reg14)})));
              reg22 <= (($signed($signed((forvar8 ?
                      wire4 : forvar17))) ^ $signed(reg9[(1'h1):(1'h1)])) ?
                  {$unsigned({$signed(reg15)})} : wire2);
            end
        end
      for (forvar23 = (1'h0); (forvar23 < (1'h0)); forvar23 = (forvar23 + (1'h1)))
        begin
          for (forvar24 = (1'h0); (forvar24 < (1'h1)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 <= $signed(reg20[(2'h3):(1'h0)]);
            end
        end
    end
  assign wire26 = wire1[(1'h0):(1'h0)];
  assign wire27 = wire0;
  assign wire28 = $signed(reg12[(3'h5):(3'h4)]);
  assign wire29 = {((+reg21) <= (((!reg9) ?
                              (reg12 | reg21) : (reg22 ? reg22 : reg20)) ?
                          (+(reg12 >= wire1)) : (^~(~|reg12))))};
  always
    @(posedge clk) begin
      for (forvar30 = (1'h0); (forvar30 < (2'h3)); forvar30 = (forvar30 + (1'h1)))
        begin
          for (forvar31 = (1'h0); (forvar31 < (2'h3)); forvar31 = (forvar31 + (1'h1)))
            begin
              reg32 <= (!((^wire26[(2'h2):(2'h2)]) ^~ {reg25[(4'he):(3'h6)],
                  ($signed((8'hbb)) ^~ (-(8'haa)))}));
              reg33 <= (8'hbc);
            end
          for (forvar34 = (1'h0); (forvar34 < (2'h3)); forvar34 = (forvar34 + (1'h1)))
            begin
              reg35 <= {{reg25[(5'h10):(4'hb)],
                      $unsigned($signed((reg12 ? reg32 : wire2)))},
                  (-$signed($unsigned(wire1)))};
              reg36 = ((({{reg13}} | wire3) <<< (|$signed($unsigned(reg18)))) ?
                  ((~((8'ha8) ? (wire0 * (8'hb9)) : (^forvar34))) ?
                      $signed(wire28) : reg12) : wire26);
              reg37 = ($unsigned(reg16[(3'h6):(3'h4)]) ?
                  wire28 : $unsigned($signed((|{reg6, (8'ha7)}))));
              reg38 <= reg35;
              reg39 <= forvar31;
            end
          for (forvar40 = (1'h0); (forvar40 < (1'h1)); forvar40 = (forvar40 + (1'h1)))
            begin
              reg41 <= $signed((^$unsigned(reg35[(2'h2):(1'h1)])));
              reg42 <= reg41[(1'h0):(1'h0)];
              reg43 = ((+$unsigned($signed((reg18 ? (8'hb9) : forvar34)))) ?
                  {{wire26, $signed($unsigned(wire27))},
                      ($unsigned(reg41[(3'h4):(2'h3)]) != $unsigned((~|forvar40)))} : (8'haa));
              reg44 <= $unsigned(reg12[(1'h0):(1'h0)]);
              reg45 <= reg35;
            end
        end
      for (forvar46 = (1'h0); (forvar46 < (1'h0)); forvar46 = (forvar46 + (1'h1)))
        begin
          for (forvar47 = (1'h0); (forvar47 < (2'h3)); forvar47 = (forvar47 + (1'h1)))
            begin
              reg48 <= reg12[(3'h4):(2'h3)];
              reg49 = ($signed(reg32) ?
                  reg20[(3'h7):(1'h0)] : (~^((~&{forvar40, reg41}) << (reg25 ?
                      (reg41 ? forvar46 : reg25) : (|reg12)))));
              reg50 = ($unsigned((~((&reg43) != (reg48 > reg38)))) ~^ {(reg21 + wire29),
                  ({reg38} != {{reg13, (8'hb9)}, (wire4 ? reg33 : reg18)})});
              reg51 = wire0;
            end
          for (forvar52 = (1'h0); (forvar52 < (3'h4)); forvar52 = (forvar52 + (1'h1)))
            begin
              reg53 <= $signed($unsigned(reg9[(2'h2):(1'h1)]));
              reg54 <= (({$signed(reg22[(4'he):(4'hb)])} != reg42[(2'h3):(2'h3)]) || reg20[(1'h1):(1'h1)]);
            end
        end
    end
  assign wire55 = reg25[(4'hb):(4'ha)];
  assign wire56 = {($signed((~(reg38 >> (8'hb2)))) >>> $signed(($unsigned(reg22) <<< {(8'hbe)}))),
                      reg38[(4'h9):(2'h3)]};
  assign wire57 = reg53[(4'hf):(3'h5)];
  assign wire58 = $signed(reg48[(1'h1):(1'h0)]);
  assign wire59 = $unsigned((wire29 ?
                      (&({(8'hb6)} <= (reg35 ?
                          reg39 : (8'ha7)))) : wire1[(4'h8):(1'h1)]));
  assign wire60 = reg33;
  assign wire61 = ((({wire3[(4'h8):(1'h0)]} ?
                      ({reg33} ?
                          reg16 : $unsigned(wire27)) : (~^(reg33 || wire58))) && (8'hb2)) >>> $signed((8'ha1)));
  assign wire62 = (~&(8'hb9));
  always
    @(posedge clk) begin
      reg63 = wire55;
      if ($unsigned($unsigned($unsigned({$signed(wire4)}))))
        begin
          reg64 = (~^$signed((~&(^~((8'hac) ? wire2 : reg41)))));
          for (forvar65 = (1'h0); (forvar65 < (3'h4)); forvar65 = (forvar65 + (1'h1)))
            begin
              reg66 <= reg32[(1'h1):(1'h0)];
              reg67 = $signed(((reg20[(4'ha):(4'ha)] == $signed((reg22 + wire4))) ?
                  ((reg38 ? {wire57, wire0} : reg6[(4'ha):(3'h7)]) && ({(8'hb2),
                      reg10} > $signed(wire58))) : ((wire1[(1'h0):(1'h0)] ?
                      (reg12 ? wire0 : (8'ha1)) : wire26) <= reg66)));
              reg68 <= wire3;
            end
          reg69 = (({reg66, wire29} ?
              ({$unsigned(reg6),
                  $signed(reg22)} ^~ (8'h9c)) : (((reg54 << reg10) <= $unsigned(reg48)) ~^ wire4)) <= $signed(reg13[(1'h0):(1'h0)]));
          reg70 = {(^(~^reg32))};
        end
      else
        begin
          for (forvar64 = (1'h0); (forvar64 < (2'h3)); forvar64 = (forvar64 + (1'h1)))
            begin
              reg65 <= reg18;
              reg66 <= (!forvar64[(4'hb):(4'hb)]);
              reg67 = $unsigned(reg44);
              reg68 <= $unsigned((wire56[(1'h0):(1'h0)] | (^(-(reg65 <= (8'had))))));
              reg69 = {$signed(wire1), $signed({(~$signed(wire59))})};
            end
        end
      for (forvar71 = (1'h0); (forvar71 < (2'h2)); forvar71 = (forvar71 + (1'h1)))
        begin
          if ($signed((^reg53)))
            begin
              reg72 <= $unsigned(reg41);
              reg73 = reg68;
              reg74 <= (8'hb8);
            end
          else
            begin
              reg72 <= $signed({$unsigned($unsigned(wire4[(1'h1):(1'h1)])),
                  forvar64});
              reg74 <= {(~(wire26[(1'h0):(1'h0)] ?
                      reg42[(1'h0):(1'h0)] : {(8'hbc)})),
                  reg63};
              reg75 = {(~($signed(reg39) ?
                      ((wire60 ?
                          (8'h9f) : reg21) ~^ reg9) : (reg42 != $signed(wire26))))};
              reg76 = (^$unsigned((reg35[(3'h5):(2'h2)] != wire59)));
            end
          reg77 <= (wire62[(4'h8):(3'h7)] ?
              reg39 : {($signed(reg66) ?
                      (((8'hb3) - wire61) ?
                          reg72[(3'h6):(1'h0)] : reg75[(1'h0):(1'h0)]) : wire2),
                  reg75[(1'h0):(1'h0)]});
          for (forvar78 = (1'h0); (forvar78 < (1'h0)); forvar78 = (forvar78 + (1'h1)))
            begin
              reg79 = $signed($signed((-($unsigned(reg20) * (wire28 == (8'hbf))))));
              reg80 <= (~^{$unsigned($signed(reg44)), reg39[(1'h1):(1'h0)]});
              reg81 = $signed((~|(reg75[(1'h1):(1'h1)] ?
                  reg79[(2'h3):(1'h0)] : wire28[(1'h1):(1'h0)])));
            end
          for (forvar82 = (1'h0); (forvar82 < (1'h1)); forvar82 = (forvar82 + (1'h1)))
            begin
              reg83 = $signed(($signed($unsigned((wire57 & reg35))) + $unsigned($signed(((8'hb9) ?
                  (8'hbf) : wire27)))));
              reg84 = (8'hbe);
              reg85 <= $unsigned({$unsigned(wire1),
                  (~|($signed(reg48) != $unsigned(reg35)))});
              reg86 = {({(^reg21),
                      $unsigned(reg85[(4'ha):(4'h8)])} && $signed({$signed(wire55)})),
                  {$unsigned(wire57),
                      (($unsigned(reg12) ^ ((8'ha6) ~^ (8'hbb))) ?
                          reg25 : reg39[(1'h0):(1'h0)])}};
            end
          reg87 = {$signed(forvar71[(3'h4):(2'h3)])};
        end
      for (forvar88 = (1'h0); (forvar88 < (2'h3)); forvar88 = (forvar88 + (1'h1)))
        begin
          for (forvar89 = (1'h0); (forvar89 < (2'h2)); forvar89 = (forvar89 + (1'h1)))
            begin
              reg90 <= reg22;
            end
          reg91 <= ($signed({reg12, reg77}) ?
              ((+reg73) ?
                  ($signed($signed(wire0)) != (reg48 ?
                      wire56[(3'h7):(2'h2)] : reg90)) : ((forvar64 < (wire58 ?
                          forvar71 : reg10)) ?
                      (^~(reg12 && reg81)) : $unsigned(wire62[(4'h9):(4'h8)]))) : (^reg48));
          for (forvar92 = (1'h0); (forvar92 < (1'h1)); forvar92 = (forvar92 + (1'h1)))
            begin
              reg93 = $unsigned({(reg75[(1'h0):(1'h0)] <<< reg85[(3'h4):(1'h0)]),
                  (8'hbf)});
            end
        end
      reg94 <= ((~&$signed(($unsigned(wire28) ?
          ((8'haa) == reg72) : (wire2 ?
              reg42 : reg6)))) << $unsigned((~&$signed((8'h9c)))));
    end
  assign wire95 = reg45;
  always
    @(posedge clk) begin
      reg96 <= ($signed((reg48[(3'h4):(2'h2)] ?
          (reg80 >> $signed(reg42)) : ((wire0 ^~ wire59) | reg16[(3'h6):(3'h4)]))) >>> $signed(wire0[(5'h12):(3'h4)]));
    end
endmodule