(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param52 = (({((8'haf) <<< (8'ha2))} >= {((8'had) ? (8'ha3) : (8'ha7))}) ? {(~(8'ha0))} : (~|(~&{(8'h9c)}))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h6f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire0;
  input wire signed [(2'h3):(1'h0)] wire1;
  input wire [(3'h6):(1'h0)] wire2;
  input wire [(3'h7):(1'h0)] wire3;
  wire [(2'h3):(1'h0)] wire51;
  wire signed [(4'ha):(1'h0)] wire4;
  wire signed [(4'ha):(1'h0)] wire5;
  wire signed [(3'h7):(1'h0)] wire14;
  wire signed [(4'hb):(1'h0)] wire47;
  wire [(2'h3):(1'h0)] wire49;
  reg [(4'ha):(1'h0)] reg6 = (1'h0);
  reg [(4'ha):(1'h0)] reg7 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg8 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg9 = (1'h0);
  reg [(4'h9):(1'h0)] reg10 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg11 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg12 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg13 = (1'h0);
  assign y = {wire51,
                 wire4,
                 wire5,
                 wire14,
                 wire47,
                 wire49,
                 reg6,
                 reg7,
                 reg8,
                 reg9,
                 reg10,
                 reg11,
                 reg12,
                 reg13,
                 (1'h0)};
  assign wire4 = ((wire2 ? wire2[(1'h1):(1'h0)] : $unsigned((|wire2))) ?
                     wire3[(1'h0):(1'h0)] : {$signed((wire1 ~^ wire3))});
  assign wire5 = wire2;
  always
    @(posedge clk) begin
      reg6 <= (^~$signed(wire4));
      reg7 <= ($signed((~|wire4[(2'h3):(2'h3)])) ?
          {(wire4 - ((8'ha1) ? wire0 : wire2))} : (~&wire0[(2'h2):(1'h1)]));
      reg8 <= wire2[(2'h2):(1'h1)];
    end
  always
    @(posedge clk) begin
      if ((|$signed((wire5[(2'h3):(2'h3)] ? {(8'ha7)} : wire1))))
        begin
          reg9 <= wire4[(3'h5):(1'h1)];
        end
      else
        begin
          if ({(!wire2[(1'h0):(1'h0)])})
            begin
              reg9 <= wire1;
            end
          else
            begin
              reg9 <= wire2;
              reg10 <= {wire5};
              reg11 <= (&(8'h9e));
            end
        end
      reg12 <= wire0;
      reg13 <= $unsigned(wire1[(2'h3):(1'h0)]);
    end
  assign wire14 = $signed(reg6[(4'ha):(4'h8)]);
  module15 #() modinst48 (wire47, clk, reg11, wire2, wire5, reg7);
  module27 #() modinst50 (.clk(clk), .y(wire49), .wire29(reg13), .wire28(reg8), .wire31(reg10), .wire30(wire5));
  assign wire51 = {(|$signed((wire1 ? wire47 : reg9)))};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15
#(parameter param46 = (8'ha9))
(y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h41):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire19;
  input wire [(3'h6):(1'h0)] wire18;
  input wire [(3'h5):(1'h0)] wire17;
  input wire [(3'h4):(1'h0)] wire16;
  wire signed [(2'h3):(1'h0)] wire45;
  wire [(2'h2):(1'h0)] wire44;
  wire [(3'h4):(1'h0)] wire43;
  wire signed [(2'h3):(1'h0)] wire40;
  wire signed [(2'h3):(1'h0)] wire26;
  wire signed [(4'h8):(1'h0)] wire25;
  wire [(4'ha):(1'h0)] wire24;
  wire [(3'h5):(1'h0)] wire23;
  wire signed [(3'h4):(1'h0)] wire22;
  reg [(3'h5):(1'h0)] reg42 = (1'h0);
  reg [(3'h7):(1'h0)] reg21 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg20 = (1'h0);
  assign y = {wire45,
                 wire44,
                 wire43,
                 wire40,
                 wire26,
                 wire25,
                 wire24,
                 wire23,
                 wire22,
                 reg42,
                 reg21,
                 reg20,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg20 <= (&(wire16 && wire16[(1'h1):(1'h0)]));
      reg21 <= wire19[(3'h5):(1'h0)];
    end
  assign wire22 = wire17;
  assign wire23 = (^~wire19[(1'h0):(1'h0)]);
  assign wire24 = {$signed(({wire23} && ((8'had) <<< wire16)))};
  assign wire25 = (8'ha1);
  assign wire26 = wire16[(3'h4):(1'h1)];
  module27 #() modinst41 (wire40, clk, wire18, reg20, wire19, reg21);
  always
    @(posedge clk) begin
      reg42 <= (!($signed((~|wire23)) ?
          $unsigned($unsigned(wire19)) : (8'haf)));
    end
  assign wire43 = $signed((reg21 >> (reg42 ? (~&wire16) : wire26)));
  assign wire44 = $unsigned($signed((~&(^(8'ha5)))));
  assign wire45 = (^~(wire22 ?
                      {$unsigned(wire26)} : $unsigned((wire43 & wire43))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module27
#(parameter param39 = (8'hac))
(y, clk, wire31, wire30, wire29, wire28);
  output wire [(32'h25):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire31;
  input wire [(4'ha):(1'h0)] wire30;
  input wire signed [(4'ha):(1'h0)] wire29;
  input wire [(2'h2):(1'h0)] wire28;
  wire [(2'h3):(1'h0)] wire38;
  wire [(2'h3):(1'h0)] wire37;
  wire [(4'h8):(1'h0)] wire36;
  wire [(2'h2):(1'h0)] wire34;
  wire signed [(4'h9):(1'h0)] wire33;
  wire [(3'h5):(1'h0)] wire32;
  reg signed [(3'h6):(1'h0)] reg35 = (1'h0);
  assign y = {wire38, wire37, wire36, wire34, wire33, wire32, reg35, (1'h0)};
  assign wire32 = wire28;
  assign wire33 = wire29;
  assign wire34 = ((($unsigned(wire31) ^~ $unsigned(wire32)) ?
                          (|(wire30 <= wire32)) : wire32) ?
                      wire30 : wire32[(1'h0):(1'h0)]);
  always
    @(posedge clk) begin
      reg35 <= $signed(wire33);
    end
  assign wire36 = (!{($unsigned(wire31) ? (~&wire32) : (wire31 | wire32))});
  assign wire37 = wire32;
  assign wire38 = {(8'haa)};
endmodule