(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param13 = (({((8'hae) ? (8'ha9) : (8'h9d))} ? {{(8'hae)}} : {((8'haf) + (8'h9e))}) * (~(((8'ha1) ? (8'had) : (8'ha8)) ? ((8'ha2) << (8'ha0)) : {(8'haa)}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h4c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h2):(1'h0)] wire3;
  input wire [(4'h8):(1'h0)] wire2;
  input wire [(3'h4):(1'h0)] wire1;
  input wire signed [(3'h4):(1'h0)] wire0;
  wire signed [(3'h6):(1'h0)] wire12;
  wire [(4'hb):(1'h0)] wire11;
  wire signed [(4'h9):(1'h0)] wire10;
  wire [(3'h7):(1'h0)] wire9;
  wire [(4'h8):(1'h0)] wire8;
  wire signed [(4'h8):(1'h0)] wire7;
  wire [(3'h6):(1'h0)] wire6;
  reg [(4'ha):(1'h0)] reg5 = (1'h0);
  reg [(4'ha):(1'h0)] reg4 = (1'h0);
  assign y = {wire12,
                 wire11,
                 wire10,
                 wire9,
                 wire8,
                 wire7,
                 wire6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= (~&wire2);
      reg5 <= (($signed((wire0 && wire1)) ?
              (wire0[(3'h4):(2'h2)] ? wire1 : {reg4}) : (wire1[(1'h1):(1'h1)] ?
                  (wire0 ? wire1 : wire2) : wire0[(1'h0):(1'h0)])) ?
          (reg4[(3'h5):(2'h3)] > (wire3 ?
              $unsigned(wire2) : (wire2 <<< (8'ha7)))) : ($unsigned(((8'hb0) >> wire0)) << ($signed(wire1) ?
              (+wire0) : reg4)));
    end
  assign wire6 = {$unsigned($unsigned((+reg5)))};
  assign wire7 = (wire6[(3'h4):(1'h0)] != $signed(((reg5 ?
                     wire0 : wire3) + reg5)));
  assign wire8 = $signed(($unsigned(reg4[(2'h2):(2'h2)]) <<< ((^~wire1) ?
                     (wire7 ? wire6 : wire3) : (~|(8'ha5)))));
  assign wire9 = (reg4 + reg5[(3'h6):(3'h5)]);
  assign wire10 = $signed(wire3[(1'h0):(1'h0)]);
  assign wire11 = wire0;
  assign wire12 = wire0[(2'h3):(2'h2)];
endmodule