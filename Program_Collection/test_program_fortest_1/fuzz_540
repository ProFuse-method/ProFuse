(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h5e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h2):(1'h0)] wire3;
  input wire [(4'h9):(1'h0)] wire2;
  input wire [(3'h6):(1'h0)] wire1;
  input wire [(3'h6):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire18;
  wire signed [(4'h9):(1'h0)] wire17;
  wire signed [(3'h5):(1'h0)] wire14;
  wire [(3'h6):(1'h0)] wire13;
  wire signed [(3'h4):(1'h0)] wire12;
  wire signed [(3'h5):(1'h0)] wire11;
  wire signed [(4'h9):(1'h0)] wire10;
  reg signed [(3'h7):(1'h0)] reg16 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg15 = (1'h0);
  reg [(3'h5):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg8 = (1'h0);
  reg [(3'h7):(1'h0)] reg7 = (1'h0);
  reg [(3'h6):(1'h0)] reg6 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg5 = (1'h0);
  reg [(2'h2):(1'h0)] reg4 = (1'h0);
  assign y = {wire18,
                 wire17,
                 wire14,
                 wire13,
                 wire12,
                 wire11,
                 wire10,
                 reg16,
                 reg15,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (wire2[(3'h4):(2'h2)])
        begin
          reg4 <= wire2[(1'h0):(1'h0)];
          reg5 <= ((~^(wire0[(2'h2):(1'h0)] ^~ $signed(reg4))) ?
              wire3[(1'h0):(1'h0)] : ((+wire2) <= ($unsigned(wire0) ?
                  (reg4 ? wire0 : wire3) : (~|reg4))));
          if ((8'hae))
            begin
              reg6 <= reg4[(1'h1):(1'h0)];
              reg7 <= $unsigned($signed(((wire3 != wire1) ?
                  $unsigned(reg4) : {reg5})));
            end
          else
            begin
              reg6 <= (({(wire2 & wire3)} ? reg5 : $signed(reg5)) ?
                  ((^(^(8'ha4))) - ($signed(wire1) ^~ reg6)) : reg6);
              reg7 <= (wire1 ? wire0[(3'h5):(2'h2)] : {$unsigned({reg7})});
              reg8 <= $signed((-$signed((reg5 << wire2))));
            end
        end
      else
        begin
          if ((wire2[(1'h0):(1'h0)] ?
              ($signed(reg4) == ($unsigned(reg7) ?
                  $signed(wire3) : (wire3 ? wire0 : wire0))) : {((~^reg6) ?
                      $signed(reg7) : wire2[(4'h9):(3'h6)])}))
            begin
              reg4 <= $signed(($unsigned(wire2) & $unsigned(reg5)));
              reg5 <= (8'ha6);
            end
          else
            begin
              reg4 <= {({wire2} ?
                      $unsigned($signed(reg4)) : $unsigned(reg4[(1'h1):(1'h0)]))};
              reg5 <= $signed(reg5[(3'h4):(1'h0)]);
            end
          reg6 <= {$signed(wire3[(1'h1):(1'h1)])};
          if ((-wire1[(3'h4):(2'h3)]))
            begin
              reg7 <= reg6[(2'h2):(1'h1)];
              reg8 <= ($signed(wire1[(1'h1):(1'h1)]) ?
                  (reg5[(3'h4):(1'h1)] << (wire2[(4'h9):(1'h0)] || wire0[(1'h1):(1'h0)])) : $unsigned(wire1[(3'h6):(3'h5)]));
            end
          else
            begin
              reg7 <= wire1[(1'h0):(1'h0)];
            end
        end
      reg9 <= {$unsigned((reg6 <= {reg8}))};
    end
  assign wire10 = (-$unsigned($signed($signed(reg4))));
  assign wire11 = $unsigned((|$unsigned($signed(wire2))));
  assign wire12 = wire11[(1'h0):(1'h0)];
  assign wire13 = (-reg5);
  assign wire14 = (wire12 == ($unsigned(wire1[(2'h3):(1'h0)]) ?
                      (^~$signed(wire13)) : (|(8'ha7))));
  always
    @(posedge clk) begin
      reg15 <= ((~&{$signed(wire14)}) & {((reg6 != wire13) ?
              reg6[(2'h3):(2'h3)] : wire13)});
      reg16 <= $unsigned($signed({{reg6}}));
    end
  assign wire17 = $unsigned({(wire11[(1'h0):(1'h0)] == (~|reg16))});
  assign wire18 = $unsigned((^~wire13[(3'h4):(1'h1)]));
endmodule