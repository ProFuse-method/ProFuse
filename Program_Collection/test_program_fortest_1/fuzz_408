(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param10 = (~|((((8'ha8) && (8'ha7)) ? ((8'hb0) ? (8'ha6) : (8'ha9)) : ((8'hb0) ? (8'ha2) : (8'ha3))) ? (((8'hae) ? (8'had) : (8'h9d)) ? (-(8'h9f)) : ((8'hab) ? (8'hae) : (8'h9f))) : ((!(8'ha3)) + (~^(8'h9e))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h27):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire3;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire0;
  wire signed [(2'h2):(1'h0)] wire6;
  wire [(3'h7):(1'h0)] wire5;
  wire [(2'h3):(1'h0)] wire4;
  reg signed [(3'h6):(1'h0)] reg9 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg8 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg7 = (1'h0);
  assign y = {wire6, wire5, wire4, reg9, reg8, reg7, (1'h0)};
  assign wire4 = (wire1[(3'h7):(1'h1)] ^~ $unsigned(wire1[(4'h8):(3'h7)]));
  assign wire5 = (8'ha8);
  assign wire6 = $signed($unsigned({(wire2 * wire5)}));
  always
    @(posedge clk) begin
      reg7 <= wire3[(2'h3):(1'h0)];
      if (wire4)
        begin
          reg8 <= $unsigned(reg7);
          reg9 <= reg7[(3'h5):(1'h1)];
        end
      else
        begin
          reg8 <= $signed({reg7[(3'h6):(1'h1)]});
        end
    end
endmodule