(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param21 = (^~(~&(((8'ha4) & (8'hae)) ? ((8'ha2) << (8'ha7)) : ((8'ha5) ? (8'hab) : (8'ha7))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h6b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire3;
  input wire signed [(3'h7):(1'h0)] wire2;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire signed [(4'h8):(1'h0)] wire0;
  wire signed [(4'hb):(1'h0)] wire20;
  wire signed [(2'h2):(1'h0)] wire19;
  wire [(3'h7):(1'h0)] wire18;
  wire signed [(4'h8):(1'h0)] wire11;
  wire signed [(4'h9):(1'h0)] wire10;
  wire signed [(4'h8):(1'h0)] wire9;
  wire [(3'h5):(1'h0)] wire8;
  reg [(4'h8):(1'h0)] reg17 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg16 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg15 = (1'h0);
  reg [(4'h9):(1'h0)] reg14 = (1'h0);
  reg [(3'h4):(1'h0)] reg13 = (1'h0);
  reg [(3'h4):(1'h0)] reg12 = (1'h0);
  reg [(2'h2):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg6 = (1'h0);
  reg [(4'hb):(1'h0)] reg5 = (1'h0);
  reg [(2'h3):(1'h0)] reg4 = (1'h0);
  assign y = {wire20,
                 wire19,
                 wire18,
                 wire11,
                 wire10,
                 wire9,
                 wire8,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (((wire2[(1'h1):(1'h0)] | (wire2 ?
          (wire1 || (8'haa)) : wire1)) | ((wire1[(1'h0):(1'h0)] ?
              (wire1 ? wire0 : wire3) : (~wire2)) ?
          ((wire2 - wire3) ?
              wire0[(3'h7):(1'h0)] : wire3) : $unsigned($signed((8'hac))))))
        begin
          reg4 <= wire0[(1'h1):(1'h1)];
          reg5 <= wire3[(2'h3):(2'h3)];
          if ((-wire0[(2'h2):(1'h1)]))
            begin
              reg6 <= $signed((reg5 ? wire2[(1'h1):(1'h0)] : reg5));
            end
          else
            begin
              reg6 <= ($unsigned(($signed(reg5) ?
                  $unsigned((8'ha1)) : reg6)) >>> wire2);
              reg7 <= (8'hb0);
            end
        end
      else
        begin
          reg4 <= (reg6 ?
              {($unsigned(reg5) | (^reg4))} : {((wire1 ? reg5 : reg7) - (reg5 ?
                      reg7 : wire1))});
        end
    end
  assign wire8 = (8'ha1);
  assign wire9 = wire2;
  assign wire10 = (((wire2[(3'h6):(3'h6)] - wire0) != $unsigned((~^wire0))) ?
                      ($unsigned((|wire9)) ?
                          $signed(wire3) : {wire8[(2'h2):(2'h2)]}) : (wire8 ?
                          wire1[(4'h8):(1'h0)] : (reg7 ~^ (reg4 << wire9))));
  assign wire11 = $unsigned(((reg4 && (8'hac)) * wire3));
  always
    @(posedge clk) begin
      if (reg7)
        begin
          reg12 <= $signed(wire10);
        end
      else
        begin
          if ($signed($signed(wire1)))
            begin
              reg12 <= (((~^{wire9}) ? (^~(reg12 + wire1)) : (+reg4)) ?
                  wire1[(2'h3):(2'h2)] : (!(^~$unsigned(wire3))));
            end
          else
            begin
              reg12 <= $signed(({(!wire3)} ^ $unsigned((wire0 >= reg12))));
              reg13 <= wire2;
              reg14 <= ($unsigned($unsigned($signed(wire1))) ?
                  reg12 : (&$unsigned($unsigned((8'ha7)))));
            end
          reg15 <= $unsigned((wire0[(3'h7):(2'h3)] ?
              wire9 : $unsigned((reg7 <<< reg4))));
        end
      reg16 <= $unsigned(((reg6[(2'h3):(2'h3)] ?
              (wire3 ? reg5 : reg7) : $signed(wire2)) ?
          (reg7 ? (reg13 ~^ reg14) : (~|wire0)) : ($unsigned(wire10) ?
              (wire1 || wire1) : $signed(wire10))));
      reg17 <= ({({reg7} ? (reg14 ? reg6 : (8'haf)) : wire0)} & wire8);
    end
  assign wire18 = wire8[(1'h0):(1'h0)];
  assign wire19 = $unsigned((8'h9c));
  assign wire20 = (wire8[(2'h2):(1'h0)] ^~ {($signed((8'h9d)) ?
                          wire3[(1'h1):(1'h1)] : (|wire8))});
endmodule