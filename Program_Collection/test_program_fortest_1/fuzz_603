(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param70 = ((^~(((8'haf) || (8'ha2)) >>> (~^(8'ha0)))) ? ((^(-(8'ha9))) || (((8'ha9) ? (8'ha1) : (8'haf)) ? ((8'ha0) ? (8'h9e) : (8'ha6)) : ((8'had) <<< (8'ha4)))) : (-{(+(8'ha9))})))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h9f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire0;
  input wire [(3'h7):(1'h0)] wire1;
  input wire [(4'ha):(1'h0)] wire2;
  input wire [(4'ha):(1'h0)] wire3;
  wire [(4'h8):(1'h0)] wire45;
  wire signed [(4'hb):(1'h0)] wire47;
  wire [(3'h7):(1'h0)] wire48;
  wire signed [(3'h4):(1'h0)] wire49;
  wire signed [(3'h4):(1'h0)] wire50;
  wire signed [(4'h8):(1'h0)] wire51;
  wire signed [(4'hb):(1'h0)] wire52;
  wire signed [(3'h7):(1'h0)] wire53;
  wire [(4'ha):(1'h0)] wire54;
  wire signed [(3'h4):(1'h0)] wire62;
  reg [(3'h6):(1'h0)] reg69 = (1'h0);
  reg [(4'h8):(1'h0)] reg68 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg67 = (1'h0);
  reg [(3'h5):(1'h0)] reg66 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg65 = (1'h0);
  reg [(3'h6):(1'h0)] reg64 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg55 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg56 = (1'h0);
  reg [(3'h7):(1'h0)] reg57 = (1'h0);
  reg [(4'h9):(1'h0)] reg58 = (1'h0);
  reg [(4'ha):(1'h0)] reg59 = (1'h0);
  reg [(2'h2):(1'h0)] reg60 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg61 = (1'h0);
  assign y = {wire45,
                 wire47,
                 wire48,
                 wire49,
                 wire50,
                 wire51,
                 wire52,
                 wire53,
                 wire54,
                 wire62,
                 reg69,
                 reg68,
                 reg67,
                 reg66,
                 reg65,
                 reg64,
                 reg55,
                 reg56,
                 reg57,
                 reg58,
                 reg59,
                 reg60,
                 reg61,
                 (1'h0)};
  module4 #() modinst46 (.wire6(wire0), .y(wire45), .wire7(wire2), .clk(clk), .wire8(wire1), .wire5(wire3));
  assign wire47 = wire3[(3'h6):(3'h4)];
  assign wire48 = (wire2[(1'h0):(1'h0)] <<< wire45[(2'h2):(1'h1)]);
  assign wire49 = ($signed(wire45[(2'h3):(1'h1)]) ?
                      wire45 : wire2[(3'h7):(3'h7)]);
  assign wire50 = wire2[(4'h8):(1'h1)];
  assign wire51 = $signed((wire1 ?
                      ((wire3 ? (8'ha1) : wire48) << (+wire47)) : wire3));
  assign wire52 = ((!(wire45 ? wire45 : {wire1})) ?
                      (wire51 ?
                          wire48[(3'h5):(1'h1)] : $unsigned($signed(wire0))) : ($signed(wire45) ?
                          {$unsigned(wire51)} : (wire45[(1'h1):(1'h0)] <= wire48)));
  assign wire53 = $signed($unsigned($unsigned(wire45)));
  assign wire54 = ($signed(((wire1 < (8'ha2)) ?
                      $signed(wire0) : wire50[(3'h4):(3'h4)])) || (wire50 ?
                      $unsigned($unsigned(wire49)) : wire48[(3'h6):(3'h6)]));
  always
    @(posedge clk) begin
      reg55 <= (wire2 >>> wire0);
      reg56 <= (~^$unsigned($unsigned(wire49[(1'h0):(1'h0)])));
      if (wire49[(1'h1):(1'h1)])
        begin
          if (wire51[(3'h7):(2'h2)])
            begin
              reg57 <= $unsigned(wire1[(3'h7):(2'h2)]);
              reg58 <= $signed($signed($signed(wire54)));
              reg59 <= (~^{(8'ha3)});
            end
          else
            begin
              reg57 <= ({wire2} ? (wire2 <= (^(|wire50))) : reg57);
              reg58 <= ({((wire48 ? wire2 : wire47) ?
                      (reg59 ?
                          wire50 : wire53) : wire45[(1'h0):(1'h0)])} ~^ {((wire3 < (8'ha1)) ^~ $signed(reg56))});
              reg59 <= (($signed(wire51) <= $unsigned($unsigned(wire0))) ?
                  wire45[(2'h3):(2'h3)] : {((&wire45) + {wire49})});
            end
          reg60 <= wire48[(3'h6):(3'h6)];
        end
      else
        begin
          reg57 <= wire48;
          if ($signed(wire52))
            begin
              reg58 <= wire52;
              reg59 <= (-wire54[(2'h3):(1'h0)]);
              reg60 <= $unsigned(reg59);
            end
          else
            begin
              reg58 <= (($unsigned((!reg59)) >>> (^~$signed(wire49))) ?
                  $signed($unsigned(wire47[(2'h2):(1'h0)])) : $signed(reg57[(2'h2):(1'h1)]));
            end
          reg61 <= ((^~wire3[(3'h5):(1'h0)]) ?
              $unsigned(wire1) : (~|reg55[(1'h0):(1'h0)]));
        end
    end
  module25 #() modinst63 (.wire26(reg55), .wire29(wire45), .wire27(wire53), .wire28(wire48), .clk(clk), .y(wire62));
  always
    @(posedge clk) begin
      reg64 <= (+$signed(reg59[(4'h8):(3'h5)]));
      reg65 <= (~&reg64);
      reg66 <= wire54;
    end
  always
    @(posedge clk) begin
      reg67 <= ($signed($unsigned((+wire53))) ?
          (~((wire45 ? wire51 : reg64) <= $signed((8'ha7)))) : $signed(reg65));
      reg68 <= (((8'hac) << wire45[(3'h7):(3'h6)]) ?
          $signed((reg61[(2'h2):(1'h0)] ?
              {reg55} : $signed((8'ha9)))) : ({$signed(wire0)} == reg65));
      reg69 <= ((~&{reg56}) < $signed(wire53));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4
#(parameter param44 = {((&(^(8'haa))) * ((-(8'ha1)) ? (~^(8'haf)) : ((8'haa) ? (8'ha4) : (8'h9e))))})
(y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h2d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire8;
  input wire signed [(4'ha):(1'h0)] wire7;
  input wire [(4'ha):(1'h0)] wire6;
  input wire signed [(3'h6):(1'h0)] wire5;
  wire [(3'h7):(1'h0)] wire42;
  wire signed [(3'h4):(1'h0)] wire24;
  wire signed [(3'h4):(1'h0)] wire22;
  wire signed [(3'h7):(1'h0)] wire11;
  wire signed [(4'hb):(1'h0)] wire10;
  wire signed [(4'hb):(1'h0)] wire9;
  assign y = {wire42, wire24, wire22, wire11, wire10, wire9, (1'h0)};
  assign wire9 = (wire5 * wire8);
  assign wire10 = (|wire9[(3'h5):(1'h1)]);
  assign wire11 = (((&$unsigned(wire6)) > {wire5}) << (((~&wire8) >= (wire5 ?
                          (8'h9f) : wire9)) ?
                      ((wire8 >> wire8) ~^ {wire9}) : $signed((wire10 ?
                          wire9 : wire9))));
  module12 #() modinst23 (.y(wire22), .wire15(wire11), .wire14(wire10), .clk(clk), .wire13(wire6), .wire16(wire5));
  assign wire24 = (($signed((wire5 * (8'ha7))) >= wire5) ?
                      wire10[(3'h6):(3'h6)] : (&($unsigned(wire11) ?
                          {wire11} : wire8)));
  module25 #() modinst43 (wire42, clk, wire6, wire10, wire11, wire9);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module25  (y, clk, wire29, wire28, wire27, wire26);
  output wire [(32'h54):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire29;
  input wire signed [(3'h5):(1'h0)] wire28;
  input wire signed [(3'h6):(1'h0)] wire27;
  input wire signed [(4'h9):(1'h0)] wire26;
  wire signed [(4'h8):(1'h0)] wire41;
  wire signed [(4'hb):(1'h0)] wire40;
  wire signed [(3'h6):(1'h0)] wire39;
  wire signed [(4'h8):(1'h0)] wire38;
  wire signed [(4'h8):(1'h0)] wire37;
  wire signed [(2'h2):(1'h0)] wire36;
  wire signed [(4'hb):(1'h0)] wire35;
  wire signed [(3'h5):(1'h0)] wire34;
  wire [(4'h9):(1'h0)] wire33;
  wire [(4'h8):(1'h0)] wire32;
  wire signed [(3'h5):(1'h0)] wire31;
  wire signed [(2'h2):(1'h0)] wire30;
  assign y = {wire41,
                 wire40,
                 wire39,
                 wire38,
                 wire37,
                 wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire30,
                 (1'h0)};
  assign wire30 = $signed($signed($unsigned((wire29 ^ wire26))));
  assign wire31 = (~&(~|$unsigned((wire29 <= wire26))));
  assign wire32 = ({wire28[(2'h3):(2'h3)]} ?
                      $unsigned((((8'ha7) ? wire31 : wire27) ?
                          $unsigned((8'ha3)) : wire30[(2'h2):(1'h0)])) : (~^wire30[(1'h1):(1'h0)]));
  assign wire33 = $unsigned(wire32);
  assign wire34 = (((&{wire29}) ~^ wire33[(3'h6):(2'h3)]) ?
                      $signed($signed($signed(wire33))) : ((^~$signed(wire29)) ?
                          (^((8'ha9) ? wire29 : wire28)) : ((wire29 ?
                                  (8'ha4) : wire32) ?
                              $unsigned(wire27) : $signed(wire28))));
  assign wire35 = wire33[(1'h1):(1'h0)];
  assign wire36 = ((wire35[(2'h2):(2'h2)] && (^(8'ha9))) ?
                      {$signed((|wire28))} : $signed(wire34));
  assign wire37 = $signed((($unsigned(wire35) ? wire35 : (8'hb0)) ?
                      ($unsigned(wire30) ^ $unsigned(wire28)) : (^wire36[(2'h2):(2'h2)])));
  assign wire38 = $unsigned(wire36[(2'h2):(1'h0)]);
  assign wire39 = (wire33 ?
                      (wire34 ?
                          wire30 : {$signed((8'ha2))}) : $unsigned((wire30 >= (wire30 ?
                          (8'hae) : wire31))));
  assign wire40 = $signed($unsigned((&wire26)));
  assign wire41 = (wire30[(1'h1):(1'h0)] ?
                      (((wire33 > wire33) < {wire35}) ?
                          $unsigned((wire31 >>> wire36)) : $unsigned(((8'ha4) && wire39))) : ($unsigned($signed(wire38)) * ((~|wire36) * (wire37 & wire32))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module12  (y, clk, wire16, wire15, wire14, wire13);
  output wire [(32'h2c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire16;
  input wire [(3'h7):(1'h0)] wire15;
  input wire signed [(4'hb):(1'h0)] wire14;
  input wire signed [(4'h9):(1'h0)] wire13;
  wire [(3'h6):(1'h0)] wire21;
  wire signed [(4'hb):(1'h0)] wire18;
  wire [(4'h8):(1'h0)] wire17;
  reg [(4'h9):(1'h0)] reg20 = (1'h0);
  reg [(4'h9):(1'h0)] reg19 = (1'h0);
  assign y = {wire21, wire18, wire17, reg20, reg19, (1'h0)};
  assign wire17 = wire16[(1'h1):(1'h1)];
  assign wire18 = $unsigned(wire13[(3'h7):(2'h3)]);
  always
    @(posedge clk) begin
      reg19 <= wire14[(2'h2):(1'h0)];
      reg20 <= ($unsigned(reg19[(3'h5):(3'h4)]) >= (+($unsigned(wire15) << (8'ha2))));
    end
  assign wire21 = (wire18 ?
                      ($unsigned($signed(reg20)) >> (wire17[(2'h3):(1'h0)] ?
                          $signed(reg20) : $signed(reg20))) : wire16);
endmodule