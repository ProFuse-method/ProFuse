(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h390):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'he):(1'h0)] wire3;
  input wire [(3'h6):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire1;
  input wire [(4'hd):(1'h0)] wire0;
  wire [(4'hc):(1'h0)] wire372;
  wire [(4'ha):(1'h0)] wire371;
  wire signed [(2'h3):(1'h0)] wire370;
  wire [(5'h15):(1'h0)] wire77;
  wire [(2'h3):(1'h0)] wire66;
  wire signed [(5'h13):(1'h0)] wire31;
  wire [(5'h11):(1'h0)] wire30;
  wire signed [(4'he):(1'h0)] wire29;
  wire [(4'hd):(1'h0)] wire28;
  wire [(5'h10):(1'h0)] wire5;
  wire [(5'h14):(1'h0)] wire4;
  wire [(4'hd):(1'h0)] wire79;
  wire [(5'h11):(1'h0)] wire80;
  wire [(4'ha):(1'h0)] wire81;
  wire [(3'h4):(1'h0)] wire82;
  wire signed [(3'h6):(1'h0)] wire83;
  wire signed [(4'ha):(1'h0)] wire368;
  reg [(5'h10):(1'h0)] reg374 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg65 = (1'h0);
  reg [(5'h11):(1'h0)] reg62 = (1'h0);
  reg [(4'hb):(1'h0)] reg61 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg60 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg57 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg56 = (1'h0);
  reg [(5'h12):(1'h0)] reg55 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg54 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg51 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg50 = (1'h0);
  reg [(4'hd):(1'h0)] reg49 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg47 = (1'h0);
  reg [(5'h12):(1'h0)] reg44 = (1'h0);
  reg [(4'hf):(1'h0)] reg43 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg41 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg39 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg38 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg37 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg26 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg25 = (1'h0);
  reg [(5'h10):(1'h0)] reg19 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg18 = (1'h0);
  reg [(2'h3):(1'h0)] reg16 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg15 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg13 = (1'h0);
  reg signed [(4'he):(1'h0)] reg10 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg9 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg376 = (1'h0);
  reg [(3'h7):(1'h0)] reg375 = (1'h0);
  reg signed [(4'he):(1'h0)] reg373 = (1'h0);
  reg [(3'h6):(1'h0)] forvar64 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg63 = (1'h0);
  reg [(2'h2):(1'h0)] forvar59 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg58 = (1'h0);
  reg [(5'h13):(1'h0)] forvar53 = (1'h0);
  reg [(4'hc):(1'h0)] forvar52 = (1'h0);
  reg [(2'h3):(1'h0)] reg48 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg46 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar45 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg42 = (1'h0);
  reg [(4'ha):(1'h0)] forvar40 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg36 = (1'h0);
  reg [(4'hd):(1'h0)] reg35 = (1'h0);
  reg [(5'h15):(1'h0)] reg34 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar33 = (1'h0);
  reg [(4'h8):(1'h0)] forvar32 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg27 = (1'h0);
  reg [(5'h15):(1'h0)] forvar24 = (1'h0);
  reg [(5'h14):(1'h0)] reg23 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg22 = (1'h0);
  reg [(5'h12):(1'h0)] forvar21 = (1'h0);
  reg [(3'h4):(1'h0)] forvar20 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg17 = (1'h0);
  reg [(2'h2):(1'h0)] forvar14 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar12 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg11 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar8 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar7 = (1'h0);
  reg [(4'h9):(1'h0)] reg6 = (1'h0);
  assign y = {wire372,
                 wire371,
                 wire370,
                 wire77,
                 wire66,
                 wire31,
                 wire30,
                 wire29,
                 wire28,
                 wire5,
                 wire4,
                 wire79,
                 wire80,
                 wire81,
                 wire82,
                 wire83,
                 wire368,
                 reg374,
                 reg65,
                 reg62,
                 reg61,
                 reg60,
                 reg57,
                 reg56,
                 reg55,
                 reg54,
                 reg51,
                 reg50,
                 reg49,
                 reg47,
                 reg44,
                 reg43,
                 reg41,
                 reg39,
                 reg38,
                 reg37,
                 reg26,
                 reg25,
                 reg19,
                 reg18,
                 reg16,
                 reg15,
                 reg13,
                 reg10,
                 reg9,
                 reg376,
                 reg375,
                 reg373,
                 forvar64,
                 reg63,
                 forvar59,
                 reg58,
                 forvar53,
                 forvar52,
                 reg48,
                 reg46,
                 forvar45,
                 reg42,
                 forvar40,
                 reg36,
                 reg35,
                 reg34,
                 forvar33,
                 forvar32,
                 reg27,
                 forvar24,
                 reg23,
                 reg22,
                 forvar21,
                 forvar20,
                 reg17,
                 forvar14,
                 forvar12,
                 reg11,
                 forvar8,
                 forvar7,
                 reg6,
                 (1'h0)};
  assign wire4 = wire3[(2'h2):(1'h0)];
  assign wire5 = wire1[(3'h7):(2'h2)];
  always
    @(posedge clk) begin
      reg6 = (+((wire0[(3'h4):(2'h2)] ?
              wire3[(2'h2):(2'h2)] : ((^~wire4) ?
                  $unsigned(wire4) : wire5[(1'h1):(1'h1)])) ?
          (wire1[(3'h4):(2'h2)] >>> ($signed(wire0) < wire3[(2'h3):(1'h1)])) : wire0));
      for (forvar7 = (1'h0); (forvar7 < (3'h4)); forvar7 = (forvar7 + (1'h1)))
        begin
          for (forvar8 = (1'h0); (forvar8 < (2'h3)); forvar8 = (forvar8 + (1'h1)))
            begin
              reg9 <= {(&$signed(wire5)),
                  $unsigned($unsigned(wire3[(1'h0):(1'h0)]))};
              reg10 <= (&((8'hb1) - forvar7[(4'hb):(3'h5)]));
              reg11 = $unsigned($signed($signed((|(~&(8'ha1))))));
            end
          for (forvar12 = (1'h0); (forvar12 < (1'h0)); forvar12 = (forvar12 + (1'h1)))
            begin
              reg13 <= $signed(({$unsigned((wire1 << wire1))} << (($signed(reg10) ^~ $signed((8'ha1))) ?
                  {wire4, wire0[(4'hc):(2'h2)]} : ((wire5 ?
                      wire5 : wire1) >= (forvar8 >> forvar7)))));
            end
          for (forvar14 = (1'h0); (forvar14 < (2'h3)); forvar14 = (forvar14 + (1'h1)))
            begin
              reg15 <= ((reg11[(3'h5):(3'h5)] ^ $signed(forvar12[(2'h2):(1'h0)])) ?
                  reg10[(2'h3):(2'h2)] : (|((~^reg13) ?
                      forvar14 : $unsigned(forvar12[(2'h3):(1'h1)]))));
              reg16 <= (reg11 > $unsigned(wire2));
              reg17 = $signed((~^$signed($unsigned(forvar12[(3'h4):(2'h2)]))));
              reg18 <= {reg9[(5'h10):(4'hf)]};
              reg19 <= (wire0[(4'hc):(4'hb)] ?
                  ($unsigned(forvar7[(2'h3):(2'h3)]) ?
                      $unsigned(reg6) : ($signed(reg13[(4'h9):(2'h2)]) && reg11[(3'h5):(2'h2)])) : forvar12);
            end
        end
      for (forvar20 = (1'h0); (forvar20 < (3'h4)); forvar20 = (forvar20 + (1'h1)))
        begin
          for (forvar21 = (1'h0); (forvar21 < (2'h2)); forvar21 = (forvar21 + (1'h1)))
            begin
              reg22 = ((reg19 ?
                  (~|$signed((wire4 ? forvar12 : reg10))) : ((8'hb6) ?
                      forvar8[(3'h4):(2'h2)] : ((~^reg19) ?
                          $unsigned(wire4) : reg18))) ^ $signed(reg13));
            end
          reg23 = wire4;
          for (forvar24 = (1'h0); (forvar24 < (1'h0)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 <= reg15[(1'h1):(1'h1)];
              reg26 <= reg23[(2'h3):(1'h0)];
            end
          reg27 = (!(forvar14 ?
              $signed(wire4[(4'h8):(2'h3)]) : $signed(wire4[(3'h7):(1'h1)])));
        end
    end
  assign wire28 = (reg15 ^~ (((wire5 != (|wire3)) ?
                          (~((7'h42) ? (8'hb2) : wire0)) : (~&wire3)) ?
                      (reg18[(1'h0):(1'h0)] ?
                          $unsigned((reg25 > wire5)) : ($unsigned(reg26) ?
                              reg25 : (wire2 ?
                                  reg13 : reg26))) : wire4[(3'h5):(3'h4)]));
  assign wire29 = ((wire2 ?
                          $signed((((8'hb0) ?
                              wire4 : (8'hb4)) << $unsigned(wire4))) : wire5) ?
                      (reg9[(2'h2):(2'h2)] << (~|reg26[(1'h1):(1'h1)])) : {($unsigned(reg25) ?
                              (!reg16[(2'h3):(1'h1)]) : ((~&wire5) ?
                                  $signed(wire1) : (reg18 ? reg19 : wire3))),
                          {$signed(reg26),
                              ((wire28 ? (8'hb0) : (8'ha6)) ?
                                  wire5[(3'h7):(2'h2)] : reg25)}});
  assign wire30 = $unsigned(($unsigned(wire3) ?
                      $signed(reg18[(2'h2):(1'h1)]) : $signed(((!wire5) ?
                          reg9[(4'hb):(3'h6)] : reg25))));
  assign wire31 = $unsigned(reg10);
  always
    @(posedge clk) begin
      for (forvar32 = (1'h0); (forvar32 < (2'h2)); forvar32 = (forvar32 + (1'h1)))
        begin
          for (forvar33 = (1'h0); (forvar33 < (2'h3)); forvar33 = (forvar33 + (1'h1)))
            begin
              reg34 = ({reg13,
                  reg18[(2'h3):(2'h2)]} * (((^~wire5[(4'he):(3'h5)]) ?
                      reg9 : wire0[(1'h1):(1'h0)]) ?
                  ((^~(forvar32 ?
                      (8'ha5) : (8'ha3))) * (|(reg15 <= (8'hbb)))) : $unsigned($unsigned(reg15))));
              reg35 = {$unsigned(wire29[(1'h1):(1'h1)]),
                  (($signed((&wire1)) ?
                          ($unsigned(reg26) ?
                              {reg9} : wire31[(1'h0):(1'h0)]) : (reg18[(3'h4):(1'h0)] ?
                              {wire3, reg10} : (8'hb2))) ?
                      wire31 : (reg34 | $unsigned(reg16[(2'h3):(2'h2)])))};
              reg36 = $unsigned((wire3[(2'h3):(1'h0)] * {$signed($unsigned(wire31)),
                  reg19}));
              reg37 <= ((&((wire5 ? reg34 : wire5[(4'hd):(1'h1)]) ?
                  wire31[(4'ha):(4'h9)] : $signed({reg25}))) > reg10);
              reg38 <= reg16[(2'h3):(1'h0)];
            end
          reg39 <= {(wire4[(5'h10):(4'hc)] ^ {(reg36 ?
                      (wire3 ? reg37 : wire1) : $unsigned((8'hbc)))}),
              wire2[(3'h6):(3'h4)]};
          for (forvar40 = (1'h0); (forvar40 < (1'h0)); forvar40 = (forvar40 + (1'h1)))
            begin
              reg41 <= {((reg26 != reg38[(2'h2):(1'h0)]) ?
                      wire4 : wire5[(4'hf):(3'h5)])};
              reg42 = $unsigned((reg39 ?
                  $unsigned(((wire0 & reg36) ?
                      $unsigned(forvar32) : $unsigned(forvar32))) : $signed(wire5[(4'hc):(3'h4)])));
              reg43 <= (!((({wire1, wire28} ? wire30 : {wire30}) ?
                      reg13[(3'h6):(3'h5)] : reg41[(4'ha):(3'h5)]) ?
                  {forvar33} : (|(reg16[(2'h2):(2'h2)] || reg41))));
              reg44 <= reg36[(2'h3):(1'h0)];
            end
          for (forvar45 = (1'h0); (forvar45 < (2'h2)); forvar45 = (forvar45 + (1'h1)))
            begin
              reg46 = reg43[(4'hc):(4'ha)];
              reg47 <= reg9[(5'h13):(5'h13)];
              reg48 = wire1[(4'h9):(3'h4)];
              reg49 <= forvar40[(2'h2):(2'h2)];
            end
        end
      reg50 <= ({$unsigned(reg16[(1'h0):(1'h0)]),
              {$unsigned($unsigned(forvar40)), $unsigned(reg34)}} ?
          wire2 : reg37[(2'h3):(1'h0)]);
      reg51 <= reg50[(3'h4):(3'h4)];
      for (forvar52 = (1'h0); (forvar52 < (2'h3)); forvar52 = (forvar52 + (1'h1)))
        begin
          for (forvar53 = (1'h0); (forvar53 < (1'h0)); forvar53 = (forvar53 + (1'h1)))
            begin
              reg54 <= $signed(({$signed((reg44 ? wire4 : (8'hb0))), (|wire5)} ?
                  (8'haf) : (((forvar33 ? forvar33 : reg9) ?
                      ((8'hac) <<< forvar53) : $unsigned(reg49)) > ((reg42 - reg36) ?
                      $unsigned(reg51) : {reg36, wire1}))));
              reg55 <= (reg48 ?
                  {reg13,
                      reg19[(4'hd):(4'hb)]} : (($signed((reg41 || reg37)) & {$signed(wire30),
                      (reg19 ? (8'hb2) : reg19)}) ^ reg36));
              reg56 <= ((&((8'hb9) ?
                      (+$unsigned(reg50)) : forvar40[(4'h8):(4'h8)])) ?
                  wire30[(2'h3):(1'h1)] : wire5);
              reg57 <= reg49[(4'hb):(4'ha)];
              reg58 = reg51[(4'hc):(3'h6)];
            end
          for (forvar59 = (1'h0); (forvar59 < (1'h0)); forvar59 = (forvar59 + (1'h1)))
            begin
              reg60 <= $signed($signed(((~&$signed(reg57)) ? reg50 : reg38)));
              reg61 <= forvar33[(4'hf):(3'h6)];
              reg62 <= (reg19[(3'h6):(3'h6)] ?
                  $unsigned(($signed((reg25 > reg37)) ?
                      $signed(reg57[(2'h2):(1'h1)]) : {reg43})) : (|$unsigned((-reg61))));
            end
          reg63 = reg35[(3'h7):(1'h1)];
          for (forvar64 = (1'h0); (forvar64 < (1'h1)); forvar64 = (forvar64 + (1'h1)))
            begin
              reg65 <= reg25[(2'h3):(1'h1)];
            end
        end
    end
  assign wire66 = {(8'ha7)};
  module67 #() modinst78 (wire77, clk, reg61, wire31, wire3, wire30, reg47);
  assign wire79 = $unsigned((((+$unsigned(reg50)) || $signed($unsigned(reg38))) ?
                      reg15 : $signed((~|(~wire29)))));
  assign wire80 = $unsigned(($unsigned($unsigned((wire3 ?
                      reg51 : wire31))) & (^$signed({reg61, reg51}))));
  assign wire81 = reg19;
  assign wire82 = wire4[(4'ha):(4'ha)];
  assign wire83 = $signed($signed($unsigned(reg61[(3'h7):(2'h2)])));
  module84 #() modinst369 (wire368, clk, reg49, wire30, wire29, wire77, reg13);
  assign wire370 = reg62;
  assign wire371 = (~&$unsigned((reg54 ? reg61[(2'h2):(1'h1)] : (~^(8'hbc)))));
  assign wire372 = (~|{wire29[(4'hc):(4'ha)]});
  always
    @(posedge clk) begin
      reg373 = wire2;
      reg374 <= reg61[(3'h5):(1'h1)];
      reg375 = (wire0[(4'hb):(4'ha)] ~^ {{wire5, (!{wire5})}});
      reg376 = {(8'hac), $signed(reg38[(4'ha):(3'h5)])};
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module84  (y, clk, wire85, wire86, wire87, wire88, wire89);
  output wire [(32'h147):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hd):(1'h0)] wire85;
  input wire [(3'h5):(1'h0)] wire86;
  input wire [(4'he):(1'h0)] wire87;
  input wire signed [(5'h15):(1'h0)] wire88;
  input wire [(5'h11):(1'h0)] wire89;
  wire [(5'h12):(1'h0)] wire367;
  wire signed [(4'h9):(1'h0)] wire366;
  wire signed [(3'h7):(1'h0)] wire365;
  wire signed [(5'h15):(1'h0)] wire363;
  wire signed [(3'h4):(1'h0)] wire90;
  wire signed [(2'h2):(1'h0)] wire91;
  wire signed [(5'h14):(1'h0)] wire92;
  wire signed [(5'h15):(1'h0)] wire93;
  wire signed [(5'h10):(1'h0)] wire94;
  wire signed [(3'h5):(1'h0)] wire95;
  wire signed [(4'hc):(1'h0)] wire128;
  wire [(3'h5):(1'h0)] wire223;
  reg [(5'h12):(1'h0)] reg146 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg145 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg143 = (1'h0);
  reg signed [(4'he):(1'h0)] reg141 = (1'h0);
  reg [(3'h7):(1'h0)] reg138 = (1'h0);
  reg [(4'hc):(1'h0)] reg134 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg147 = (1'h0);
  reg [(2'h3):(1'h0)] reg144 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar142 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar140 = (1'h0);
  reg [(2'h3):(1'h0)] reg139 = (1'h0);
  reg [(2'h2):(1'h0)] reg137 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar136 = (1'h0);
  reg [(3'h5):(1'h0)] reg135 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg133 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg132 = (1'h0);
  reg [(4'he):(1'h0)] forvar131 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar130 = (1'h0);
  assign y = {wire367,
                 wire366,
                 wire365,
                 wire363,
                 wire90,
                 wire91,
                 wire92,
                 wire93,
                 wire94,
                 wire95,
                 wire128,
                 wire223,
                 reg146,
                 reg145,
                 reg143,
                 reg141,
                 reg138,
                 reg134,
                 reg147,
                 reg144,
                 forvar142,
                 forvar140,
                 reg139,
                 reg137,
                 forvar136,
                 reg135,
                 reg133,
                 reg132,
                 forvar131,
                 forvar130,
                 (1'h0)};
  assign wire90 = (^~(-$unsigned((wire85[(3'h6):(1'h0)] ?
                      $unsigned(wire88) : wire89[(3'h6):(1'h1)]))));
  assign wire91 = (wire85[(4'h9):(4'h8)] >> wire88[(5'h12):(4'hc)]);
  assign wire92 = $unsigned(wire91);
  assign wire93 = ($unsigned($unsigned($unsigned(((8'hab) + wire90)))) | $signed({wire88[(3'h6):(1'h1)]}));
  assign wire94 = (wire93[(4'h9):(4'h8)] << (8'hb8));
  assign wire95 = $signed(wire89);
  module96 #() modinst129 (.wire97(wire93), .wire100(wire89), .y(wire128), .clk(clk), .wire99(wire87), .wire98(wire85));
  always
    @(posedge clk) begin
      for (forvar130 = (1'h0); (forvar130 < (3'h4)); forvar130 = (forvar130 + (1'h1)))
        begin
          for (forvar131 = (1'h0); (forvar131 < (1'h0)); forvar131 = (forvar131 + (1'h1)))
            begin
              reg132 = wire92[(4'h9):(3'h5)];
              reg133 = $signed(wire94);
              reg134 <= reg132;
              reg135 = (&(wire88 == $unsigned(($signed(wire89) - (wire128 <= reg132)))));
            end
          for (forvar136 = (1'h0); (forvar136 < (1'h1)); forvar136 = (forvar136 + (1'h1)))
            begin
              reg137 = (+((~^$unsigned(wire89)) ?
                  $unsigned($unsigned(wire87[(2'h2):(2'h2)])) : $signed($unsigned((&wire93)))));
              reg138 <= reg134[(1'h1):(1'h0)];
              reg139 = $unsigned((^{wire92, (^forvar131)}));
            end
        end
      for (forvar140 = (1'h0); (forvar140 < (2'h2)); forvar140 = (forvar140 + (1'h1)))
        begin
          reg141 <= (~|$signed($unsigned(((forvar131 ~^ wire87) - wire128))));
          for (forvar142 = (1'h0); (forvar142 < (2'h2)); forvar142 = (forvar142 + (1'h1)))
            begin
              reg143 <= ((({$signed((8'hbe))} ?
                      ((forvar142 >>> wire95) >> wire94) : {(reg132 ?
                              (8'ha6) : forvar130),
                          (wire89 ? wire95 : wire86)}) && ((wire92 ?
                      $signed(wire128) : reg134[(4'ha):(2'h2)]) | wire93[(4'hd):(3'h7)])) ?
                  wire89[(4'hd):(4'hc)] : (^~$unsigned($unsigned((reg132 ~^ forvar131)))));
              reg144 = $signed(reg133[(3'h4):(3'h4)]);
              reg145 <= (^($signed(({wire89, wire128} >>> $signed(reg137))) ?
                  $unsigned(($unsigned(reg141) * (reg143 & (8'ha0)))) : $unsigned((+$signed(reg135)))));
              reg146 <= $unsigned({(wire128[(3'h5):(2'h2)] ~^ ((wire91 ?
                      wire90 : reg132) << $unsigned(wire90))),
                  $unsigned(((reg135 ? reg133 : wire93) << (reg137 ?
                      reg145 : forvar140)))});
            end
          reg147 = (((8'hbf) ?
                  (((forvar140 ? reg134 : wire128) ?
                      $signed(wire87) : (~|wire128)) || forvar130[(1'h0):(1'h0)]) : (&{$signed(wire91),
                      (8'ha1)})) ?
              (forvar131 ^ reg146) : (~(^$signed($unsigned(reg145)))));
        end
    end
  module148 #() modinst224 (wire223, clk, wire93, reg146, wire88, wire92);
  module225 #() modinst364 (wire363, clk, wire90, reg141, wire86, wire85, wire94);
  assign wire365 = wire91;
  assign wire366 = wire89[(4'h8):(3'h5)];
  assign wire367 = $signed(wire94);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module67  (y, clk, wire72, wire71, wire70, wire69, wire68);
  output wire [(32'h28):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire72;
  input wire signed [(5'h12):(1'h0)] wire71;
  input wire [(4'he):(1'h0)] wire70;
  input wire signed [(5'h11):(1'h0)] wire69;
  input wire signed [(5'h10):(1'h0)] wire68;
  wire [(4'he):(1'h0)] wire76;
  wire [(2'h3):(1'h0)] wire75;
  wire signed [(3'h5):(1'h0)] wire74;
  wire [(5'h11):(1'h0)] wire73;
  assign y = {wire76, wire75, wire74, wire73, (1'h0)};
  assign wire73 = (7'h41);
  assign wire74 = (^~wire68);
  assign wire75 = wire74;
  assign wire76 = ({(((|wire69) != $signed(wire69)) <= $unsigned((~&(8'hb8)))),
                          wire70} ?
                      (|$unsigned($unsigned({wire68,
                          wire75}))) : $signed(wire75));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module225  (y, clk, wire230, wire229, wire228, wire227, wire226);
  output wire [(32'h585):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire230;
  input wire signed [(4'he):(1'h0)] wire229;
  input wire signed [(2'h3):(1'h0)] wire228;
  input wire [(3'h6):(1'h0)] wire227;
  input wire signed [(5'h10):(1'h0)] wire226;
  wire signed [(2'h2):(1'h0)] wire362;
  wire [(3'h5):(1'h0)] wire361;
  wire [(5'h11):(1'h0)] wire360;
  wire signed [(3'h7):(1'h0)] wire346;
  wire [(5'h10):(1'h0)] wire345;
  wire signed [(2'h3):(1'h0)] wire289;
  wire [(3'h7):(1'h0)] wire263;
  wire signed [(2'h2):(1'h0)] wire262;
  wire [(5'h11):(1'h0)] wire261;
  wire [(4'h8):(1'h0)] wire260;
  wire signed [(4'hf):(1'h0)] wire259;
  wire [(3'h7):(1'h0)] wire231;
  reg [(4'ha):(1'h0)] reg359 = (1'h0);
  reg [(5'h10):(1'h0)] reg358 = (1'h0);
  reg [(5'h14):(1'h0)] reg352 = (1'h0);
  reg [(4'hb):(1'h0)] reg351 = (1'h0);
  reg [(5'h10):(1'h0)] reg349 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg344 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg338 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg333 = (1'h0);
  reg [(5'h14):(1'h0)] reg329 = (1'h0);
  reg [(3'h5):(1'h0)] reg325 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg324 = (1'h0);
  reg [(3'h6):(1'h0)] reg323 = (1'h0);
  reg [(2'h3):(1'h0)] reg322 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg320 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg318 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg317 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg315 = (1'h0);
  reg [(3'h5):(1'h0)] reg313 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg311 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg310 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg301 = (1'h0);
  reg [(4'he):(1'h0)] reg300 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg298 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg297 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg296 = (1'h0);
  reg signed [(4'he):(1'h0)] reg294 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg292 = (1'h0);
  reg [(5'h12):(1'h0)] reg290 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg288 = (1'h0);
  reg [(3'h4):(1'h0)] reg282 = (1'h0);
  reg [(5'h15):(1'h0)] reg281 = (1'h0);
  reg [(4'hf):(1'h0)] reg278 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg277 = (1'h0);
  reg [(4'hb):(1'h0)] reg271 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg270 = (1'h0);
  reg [(5'h13):(1'h0)] reg269 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg268 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg267 = (1'h0);
  reg [(5'h14):(1'h0)] reg264 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg257 = (1'h0);
  reg [(5'h11):(1'h0)] reg255 = (1'h0);
  reg [(4'h9):(1'h0)] reg253 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg249 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg248 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg246 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg244 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg242 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg240 = (1'h0);
  reg [(5'h15):(1'h0)] reg235 = (1'h0);
  reg [(4'he):(1'h0)] forvar357 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar356 = (1'h0);
  reg [(5'h13):(1'h0)] reg355 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg354 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg353 = (1'h0);
  reg [(5'h14):(1'h0)] forvar350 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar348 = (1'h0);
  reg [(2'h2):(1'h0)] forvar347 = (1'h0);
  reg [(4'h8):(1'h0)] reg343 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg342 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg341 = (1'h0);
  reg [(3'h4):(1'h0)] forvar340 = (1'h0);
  reg [(2'h2):(1'h0)] forvar339 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg337 = (1'h0);
  reg [(5'h12):(1'h0)] forvar336 = (1'h0);
  reg [(4'hc):(1'h0)] reg335 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg334 = (1'h0);
  reg [(4'h9):(1'h0)] reg332 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar331 = (1'h0);
  reg [(3'h6):(1'h0)] forvar330 = (1'h0);
  reg [(2'h2):(1'h0)] reg328 = (1'h0);
  reg [(4'ha):(1'h0)] reg327 = (1'h0);
  reg [(4'ha):(1'h0)] reg326 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg321 = (1'h0);
  reg [(5'h15):(1'h0)] forvar319 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg316 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar314 = (1'h0);
  reg [(2'h3):(1'h0)] reg312 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar309 = (1'h0);
  reg [(4'hb):(1'h0)] reg308 = (1'h0);
  reg [(5'h11):(1'h0)] reg307 = (1'h0);
  reg [(3'h5):(1'h0)] reg306 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg305 = (1'h0);
  reg [(4'h9):(1'h0)] reg304 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar303 = (1'h0);
  reg [(3'h5):(1'h0)] forvar302 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar299 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg295 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar293 = (1'h0);
  reg [(4'h9):(1'h0)] forvar291 = (1'h0);
  reg [(3'h5):(1'h0)] reg287 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg286 = (1'h0);
  reg [(5'h10):(1'h0)] reg285 = (1'h0);
  reg [(4'hc):(1'h0)] forvar284 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar283 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar280 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg279 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg276 = (1'h0);
  reg [(2'h2):(1'h0)] reg275 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar274 = (1'h0);
  reg [(5'h14):(1'h0)] reg273 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg272 = (1'h0);
  reg [(4'h8):(1'h0)] forvar266 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar265 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg258 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar256 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar254 = (1'h0);
  reg [(4'hd):(1'h0)] reg252 = (1'h0);
  reg [(3'h7):(1'h0)] forvar251 = (1'h0);
  reg [(4'ha):(1'h0)] forvar250 = (1'h0);
  reg [(4'hc):(1'h0)] forvar247 = (1'h0);
  reg [(4'hd):(1'h0)] forvar245 = (1'h0);
  reg [(5'h11):(1'h0)] forvar243 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar241 = (1'h0);
  reg [(2'h2):(1'h0)] reg239 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar238 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar237 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg236 = (1'h0);
  reg [(5'h14):(1'h0)] reg234 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar233 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar232 = (1'h0);
  assign y = {wire362,
                 wire361,
                 wire360,
                 wire346,
                 wire345,
                 wire289,
                 wire263,
                 wire262,
                 wire261,
                 wire260,
                 wire259,
                 wire231,
                 reg359,
                 reg358,
                 reg352,
                 reg351,
                 reg349,
                 reg344,
                 reg338,
                 reg333,
                 reg329,
                 reg325,
                 reg324,
                 reg323,
                 reg322,
                 reg320,
                 reg318,
                 reg317,
                 reg315,
                 reg313,
                 reg311,
                 reg310,
                 reg301,
                 reg300,
                 reg298,
                 reg297,
                 reg296,
                 reg294,
                 reg292,
                 reg290,
                 reg288,
                 reg282,
                 reg281,
                 reg278,
                 reg277,
                 reg271,
                 reg270,
                 reg269,
                 reg268,
                 reg267,
                 reg264,
                 reg257,
                 reg255,
                 reg253,
                 reg249,
                 reg248,
                 reg246,
                 reg244,
                 reg242,
                 reg240,
                 reg235,
                 forvar357,
                 forvar356,
                 reg355,
                 reg354,
                 reg353,
                 forvar350,
                 forvar348,
                 forvar347,
                 reg343,
                 reg342,
                 reg341,
                 forvar340,
                 forvar339,
                 reg337,
                 forvar336,
                 reg335,
                 reg334,
                 reg332,
                 forvar331,
                 forvar330,
                 reg328,
                 reg327,
                 reg326,
                 reg321,
                 forvar319,
                 reg316,
                 forvar314,
                 reg312,
                 forvar309,
                 reg308,
                 reg307,
                 reg306,
                 reg305,
                 reg304,
                 forvar303,
                 forvar302,
                 forvar299,
                 reg295,
                 forvar293,
                 forvar291,
                 reg287,
                 reg286,
                 reg285,
                 forvar284,
                 forvar283,
                 forvar280,
                 reg279,
                 reg276,
                 reg275,
                 forvar274,
                 reg273,
                 reg272,
                 forvar266,
                 forvar265,
                 reg258,
                 forvar256,
                 forvar254,
                 reg252,
                 forvar251,
                 forvar250,
                 forvar247,
                 forvar245,
                 forvar243,
                 forvar241,
                 reg239,
                 forvar238,
                 forvar237,
                 reg236,
                 reg234,
                 forvar233,
                 forvar232,
                 (1'h0)};
  assign wire231 = wire230[(1'h0):(1'h0)];
  always
    @(posedge clk) begin
      for (forvar232 = (1'h0); (forvar232 < (3'h4)); forvar232 = (forvar232 + (1'h1)))
        begin
          for (forvar233 = (1'h0); (forvar233 < (1'h0)); forvar233 = (forvar233 + (1'h1)))
            begin
              reg234 = {($unsigned(forvar232) && $unsigned(forvar233[(4'h9):(4'h8)]))};
              reg235 <= (wire231 ^~ $signed(($signed(wire229) <= (wire228 ?
                  wire228[(2'h3):(1'h0)] : $signed(forvar232)))));
              reg236 = (-$unsigned((~|$signed($unsigned((8'hba))))));
            end
        end
      for (forvar237 = (1'h0); (forvar237 < (2'h2)); forvar237 = (forvar237 + (1'h1)))
        begin
          for (forvar238 = (1'h0); (forvar238 < (1'h0)); forvar238 = (forvar238 + (1'h1)))
            begin
              reg239 = reg236[(5'h11):(1'h1)];
              reg240 <= $unsigned(((|$unsigned(forvar238[(4'hb):(4'h8)])) * $signed({((8'ha8) >= forvar237),
                  $unsigned(reg239)})));
            end
          for (forvar241 = (1'h0); (forvar241 < (3'h4)); forvar241 = (forvar241 + (1'h1)))
            begin
              reg242 <= $unsigned(forvar233);
            end
          for (forvar243 = (1'h0); (forvar243 < (2'h3)); forvar243 = (forvar243 + (1'h1)))
            begin
              reg244 <= (~&(((^~$signed(wire226)) << ((^reg235) ?
                  $unsigned(wire226) : reg236)) & (-$unsigned($signed(forvar237)))));
            end
          for (forvar245 = (1'h0); (forvar245 < (2'h3)); forvar245 = (forvar245 + (1'h1)))
            begin
              reg246 <= (reg240[(3'h7):(1'h1)] ?
                  ((($signed((8'hba)) & {reg234}) ^ $unsigned(wire231[(1'h0):(1'h0)])) <<< forvar238[(4'ha):(2'h3)]) : $signed((reg234 ?
                      (8'hb9) : ((wire228 <= wire231) ?
                          $unsigned((8'hba)) : $signed(reg239)))));
            end
          for (forvar247 = (1'h0); (forvar247 < (2'h3)); forvar247 = (forvar247 + (1'h1)))
            begin
              reg248 <= (&reg234[(5'h10):(3'h7)]);
              reg249 <= $signed({((reg236 | (wire228 ? wire231 : reg236)) ?
                      ($signed(forvar233) ?
                          (forvar232 >>> reg236) : forvar233[(4'ha):(4'h9)]) : (~|$signed(reg235))),
                  {reg236}});
            end
        end
      for (forvar250 = (1'h0); (forvar250 < (2'h3)); forvar250 = (forvar250 + (1'h1)))
        begin
          for (forvar251 = (1'h0); (forvar251 < (2'h3)); forvar251 = (forvar251 + (1'h1)))
            begin
              reg252 = (((wire229 ?
                      forvar237 : forvar241) | (!reg249[(1'h1):(1'h1)])) ?
                  forvar245 : (|(~&reg246)));
              reg253 <= (($unsigned(forvar237[(4'h9):(2'h2)]) - (reg248[(2'h2):(1'h1)] ?
                  wire230 : forvar245[(1'h1):(1'h0)])) + reg235);
            end
        end
      for (forvar254 = (1'h0); (forvar254 < (1'h0)); forvar254 = (forvar254 + (1'h1)))
        begin
          reg255 <= reg242;
          for (forvar256 = (1'h0); (forvar256 < (1'h0)); forvar256 = (forvar256 + (1'h1)))
            begin
              reg257 <= {((~&wire230[(1'h0):(1'h0)]) ?
                      $unsigned((forvar250[(3'h7):(2'h2)] ?
                          forvar245 : $signed(wire228))) : (~&wire231))};
              reg258 = forvar232;
            end
        end
    end
  assign wire259 = wire226;
  assign wire260 = (reg249[(1'h0):(1'h0)] ?
                       $unsigned((reg246[(3'h7):(3'h7)] ?
                           wire259 : (wire227 ?
                               $unsigned((8'hbb)) : wire229[(1'h1):(1'h1)]))) : $signed(wire228[(1'h1):(1'h0)]));
  assign wire261 = (^~(~|(&reg246)));
  assign wire262 = $signed((^wire226));
  assign wire263 = reg235;
  always
    @(posedge clk) begin
      reg264 <= reg244[(1'h0):(1'h0)];
      for (forvar265 = (1'h0); (forvar265 < (3'h4)); forvar265 = (forvar265 + (1'h1)))
        begin
          for (forvar266 = (1'h0); (forvar266 < (2'h2)); forvar266 = (forvar266 + (1'h1)))
            begin
              reg267 <= $signed(reg242);
              reg268 <= ($signed($unsigned((|$unsigned((8'ha5))))) & $unsigned((forvar265 >= wire263)));
            end
          if ((8'hb4))
            begin
              reg269 <= {((wire229 ?
                          $signed((^~(8'ha8))) : ((+(8'haf)) ?
                              reg244 : $unsigned(reg242))) ?
                      $signed($signed((wire260 ?
                          reg264 : wire259))) : (~|wire261))};
            end
          else
            begin
              reg269 <= (wire260[(3'h7):(2'h3)] ?
                  (({(reg248 * (7'h40))} >>> (^$unsigned(wire226))) ?
                      $unsigned($signed(reg267)) : ((wire259 == forvar266[(1'h1):(1'h1)]) ^ ((reg268 >> wire229) ?
                          {reg253, (8'hb8)} : (8'hbd)))) : $unsigned(reg257));
              reg270 <= $signed(((wire259[(2'h2):(1'h0)] >>> reg235) || (((wire262 != forvar265) >= reg235) ?
                  ((reg269 - wire228) ?
                      wire227 : reg257) : reg242[(4'hd):(1'h1)])));
              reg271 <= ($unsigned($unsigned(({reg249} + {wire259}))) > (~|wire261));
              reg272 = $unsigned((&(($signed(wire229) & reg268[(2'h3):(2'h3)]) ~^ ((wire228 ?
                      reg255 : reg264) ?
                  $unsigned(reg269) : reg246))));
              reg273 = reg272[(1'h0):(1'h0)];
            end
          for (forvar274 = (1'h0); (forvar274 < (2'h2)); forvar274 = (forvar274 + (1'h1)))
            begin
              reg275 = reg257;
              reg276 = {$unsigned(((wire229[(3'h7):(3'h4)] ?
                      reg257[(1'h1):(1'h1)] : {(7'h44)}) & {{(8'hb2)}}))};
              reg277 <= wire226;
              reg278 <= (8'h9d);
              reg279 = {$signed((reg257 ?
                      (~^$unsigned(wire260)) : {reg271[(4'hb):(3'h5)]})),
                  {$signed($signed((+wire263))), forvar265[(3'h7):(1'h0)]}};
            end
          for (forvar280 = (1'h0); (forvar280 < (3'h4)); forvar280 = (forvar280 + (1'h1)))
            begin
              reg281 <= $unsigned({$unsigned($signed($unsigned(forvar280))),
                  (8'hae)});
              reg282 <= ((~|reg275) ? {wire259} : reg270[(3'h5):(2'h2)]);
            end
        end
      for (forvar283 = (1'h0); (forvar283 < (1'h1)); forvar283 = (forvar283 + (1'h1)))
        begin
          for (forvar284 = (1'h0); (forvar284 < (2'h2)); forvar284 = (forvar284 + (1'h1)))
            begin
              reg285 = reg282;
              reg286 = wire263;
              reg287 = (forvar280[(2'h3):(1'h1)] ~^ (!wire231[(3'h6):(1'h0)]));
            end
          reg288 <= $unsigned($signed((reg281 ^ {(~|forvar280)})));
        end
    end
  assign wire289 = $signed((~(-((reg240 ? reg240 : wire263) ?
                       $unsigned(wire230) : ((8'hba) ? wire260 : (8'hb0))))));
  always
    @(posedge clk) begin
      reg290 <= {($unsigned(((8'hac) ?
              $unsigned(wire228) : (~reg235))) < $unsigned($unsigned((!(8'ha2)))))};
      for (forvar291 = (1'h0); (forvar291 < (2'h3)); forvar291 = (forvar291 + (1'h1)))
        begin
          reg292 <= ($signed(((reg268[(2'h2):(2'h2)] ~^ $unsigned(reg257)) && wire228)) + $signed(reg290[(1'h0):(1'h0)]));
          for (forvar293 = (1'h0); (forvar293 < (2'h2)); forvar293 = (forvar293 + (1'h1)))
            begin
              reg294 <= $signed(reg270[(2'h3):(2'h3)]);
              reg295 = $unsigned((reg278 >> reg288[(4'hb):(1'h0)]));
              reg296 <= reg269[(3'h4):(2'h2)];
              reg297 <= (8'h9d);
              reg298 <= reg242[(3'h7):(1'h0)];
            end
          for (forvar299 = (1'h0); (forvar299 < (1'h0)); forvar299 = (forvar299 + (1'h1)))
            begin
              reg300 <= (~$unsigned((($unsigned(reg277) || $signed(reg270)) ~^ $signed((^(8'haa))))));
              reg301 <= {(~|reg248), $signed(reg249[(3'h4):(2'h3)])};
            end
        end
      for (forvar302 = (1'h0); (forvar302 < (3'h4)); forvar302 = (forvar302 + (1'h1)))
        begin
          for (forvar303 = (1'h0); (forvar303 < (1'h0)); forvar303 = (forvar303 + (1'h1)))
            begin
              reg304 = $signed($signed($unsigned(wire260)));
              reg305 = reg301;
              reg306 = (&$unsigned((!{(reg296 ? reg255 : reg281)})));
              reg307 = (^(reg296 <= $signed($unsigned(forvar303))));
              reg308 = reg257[(2'h2):(1'h0)];
            end
          for (forvar309 = (1'h0); (forvar309 < (2'h3)); forvar309 = (forvar309 + (1'h1)))
            begin
              reg310 <= $unsigned((!reg296));
              reg311 <= (reg282 + (^~wire263[(3'h4):(2'h3)]));
              reg312 = ({(8'hb2)} ?
                  ((|$signed({wire229})) ?
                      (+(reg307 ~^ wire259[(2'h2):(2'h2)])) : ((^~wire227[(3'h6):(3'h4)]) == wire263)) : {(8'h9f),
                      ({(wire262 ? forvar293 : wire229)} ?
                          reg240 : (|(wire231 > reg242)))});
            end
          reg313 <= reg298;
          for (forvar314 = (1'h0); (forvar314 < (1'h1)); forvar314 = (forvar314 + (1'h1)))
            begin
              reg315 <= (-((~&forvar291) != $unsigned($unsigned((reg281 || (8'ha4))))));
              reg316 = {(reg267[(2'h2):(1'h1)] ^~ reg305[(4'hb):(2'h3)]),
                  reg249};
              reg317 <= reg268[(2'h2):(1'h1)];
              reg318 <= {$signed($signed($signed((reg268 ?
                      (8'ha7) : reg282))))};
            end
        end
    end
  always
    @(posedge clk) begin
      for (forvar319 = (1'h0); (forvar319 < (1'h0)); forvar319 = (forvar319 + (1'h1)))
        begin
          if ((8'ha0))
            begin
              reg320 <= {reg294, $unsigned(reg270)};
              reg321 = (~|$unsigned({wire289}));
            end
          else
            begin
              reg320 <= wire229[(3'h7):(2'h2)];
              reg322 <= {((8'ha8) ?
                      $signed((~^$unsigned(reg270))) : $signed($signed(((8'hba) + wire227))))};
            end
          if ($signed($signed($unsigned(({reg311,
              wire230} ^~ (reg267 ^~ reg281))))))
            begin
              reg323 <= (^((|(8'hab)) ?
                  {(reg248[(1'h0):(1'h0)] && $unsigned(reg297))} : $unsigned(reg264)));
              reg324 <= (~reg267);
              reg325 <= {((8'h9f) ? $unsigned(reg292[(4'hc):(4'h9)]) : reg235),
                  $unsigned((~reg292[(4'hf):(1'h1)]))};
            end
          else
            begin
              reg326 = {reg294};
              reg327 = $unsigned((^~(~|(8'hb0))));
              reg328 = $unsigned((reg269 + ((reg318 ?
                  reg242 : $unsigned(reg325)) >= $unsigned($unsigned(reg313)))));
            end
          reg329 <= reg240;
        end
      for (forvar330 = (1'h0); (forvar330 < (1'h0)); forvar330 = (forvar330 + (1'h1)))
        begin
          for (forvar331 = (1'h0); (forvar331 < (3'h4)); forvar331 = (forvar331 + (1'h1)))
            begin
              reg332 = $signed($unsigned((~|$unsigned((wire259 > (8'ha8))))));
              reg333 <= wire227[(1'h1):(1'h0)];
              reg334 = (&$unsigned(((~|wire260[(1'h0):(1'h0)]) | $signed($signed(reg329)))));
              reg335 = $signed(reg281[(4'hc):(3'h4)]);
            end
          for (forvar336 = (1'h0); (forvar336 < (1'h1)); forvar336 = (forvar336 + (1'h1)))
            begin
              reg337 = reg332;
            end
        end
      reg338 <= ((forvar330 >= reg328[(1'h0):(1'h0)]) <= $unsigned(reg267[(5'h11):(4'hf)]));
      for (forvar339 = (1'h0); (forvar339 < (2'h2)); forvar339 = (forvar339 + (1'h1)))
        begin
          for (forvar340 = (1'h0); (forvar340 < (1'h0)); forvar340 = (forvar340 + (1'h1)))
            begin
              reg341 = {(reg246[(4'ha):(4'h8)] ?
                      forvar330[(2'h3):(1'h1)] : ($signed((forvar331 ?
                              reg318 : reg294)) ?
                          (reg292 <= {reg317}) : $unsigned((~|reg335))))};
              reg342 = $unsigned(reg328);
              reg343 = reg292;
              reg344 <= reg268[(2'h2):(1'h1)];
            end
        end
    end
  assign wire345 = reg298[(3'h5):(2'h2)];
  assign wire346 = (^~(({(~^reg313)} < $unsigned((reg310 + reg257))) <= (wire226 < ($unsigned(reg264) ~^ reg324))));
  always
    @(posedge clk) begin
      for (forvar347 = (1'h0); (forvar347 < (2'h2)); forvar347 = (forvar347 + (1'h1)))
        begin
          for (forvar348 = (1'h0); (forvar348 < (1'h0)); forvar348 = (forvar348 + (1'h1)))
            begin
              reg349 <= (~&$unsigned(reg320[(4'h9):(3'h6)]));
            end
          for (forvar350 = (1'h0); (forvar350 < (2'h3)); forvar350 = (forvar350 + (1'h1)))
            begin
              reg351 <= (!$signed((|$unsigned(reg249))));
              reg352 <= (!$unsigned(reg344[(3'h7):(1'h1)]));
              reg353 = $signed((^reg320));
              reg354 = $signed(reg325[(1'h0):(1'h0)]);
            end
          reg355 = (forvar348[(2'h2):(1'h1)] ?
              $signed($signed(wire262)) : {{{(reg325 ? reg294 : wire263),
                          (+(8'h9c))},
                      $signed((reg313 ? wire263 : reg329))}});
        end
      for (forvar356 = (1'h0); (forvar356 < (2'h3)); forvar356 = (forvar356 + (1'h1)))
        begin
          for (forvar357 = (1'h0); (forvar357 < (1'h0)); forvar357 = (forvar357 + (1'h1)))
            begin
              reg358 <= $signed(reg264[(4'hb):(3'h5)]);
              reg359 <= reg352;
            end
        end
    end
  assign wire360 = reg253[(3'h4):(3'h4)];
  assign wire361 = $signed({(((wire289 ?
                           reg268 : reg246) < {reg311}) >> ($unsigned((8'hbf)) ?
                           (~^reg294) : reg358)),
                       $signed((reg288[(2'h2):(1'h1)] ?
                           {wire263, reg288} : (reg310 << reg329)))});
  assign wire362 = $unsigned($signed(($signed($signed(reg318)) ?
                       ((reg249 >> reg344) >= (reg313 ?
                           reg325 : wire230)) : ({wire260, reg235} ?
                           wire228[(1'h0):(1'h0)] : $unsigned(reg296)))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module148
#(parameter param221 = ((8'hb6) ? (((|{(8'ha0)}) != (~&(&(8'had)))) ? ((~&{(8'ha5), (8'ha2)}) & ((~(7'h43)) ? {(8'hbe)} : {(8'hbb)})) : (({(7'h43)} >> (^~(8'h9f))) >> ((~(7'h43)) || ((8'hb6) >> (8'h9c))))) : (|({(+(7'h40)), ((8'ha6) <<< (8'h9f))} ? (((8'hb5) ? (8'ha7) : (8'hab)) ? ((8'hae) << (8'hb9)) : (~|(8'hbb))) : ({(8'hb7), (8'ha5)} || (!(8'had)))))), 
parameter param222 = {(~&param221)})
(y, clk, wire152, wire151, wire150, wire149);
  output wire [(32'h30a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h15):(1'h0)] wire152;
  input wire signed [(5'h12):(1'h0)] wire151;
  input wire signed [(4'h9):(1'h0)] wire150;
  input wire signed [(4'hb):(1'h0)] wire149;
  wire signed [(4'he):(1'h0)] wire220;
  wire signed [(5'h13):(1'h0)] wire219;
  wire [(5'h14):(1'h0)] wire218;
  wire [(4'h9):(1'h0)] wire198;
  wire [(5'h10):(1'h0)] wire197;
  wire signed [(3'h6):(1'h0)] wire196;
  wire signed [(4'hf):(1'h0)] wire195;
  wire signed [(4'he):(1'h0)] wire194;
  wire signed [(4'hc):(1'h0)] wire193;
  wire [(4'hf):(1'h0)] wire192;
  wire signed [(5'h10):(1'h0)] wire191;
  wire [(5'h15):(1'h0)] wire190;
  wire signed [(4'hb):(1'h0)] wire189;
  wire [(5'h10):(1'h0)] wire188;
  wire [(4'h8):(1'h0)] wire187;
  wire [(4'hd):(1'h0)] wire186;
  wire signed [(4'h9):(1'h0)] wire153;
  reg [(5'h11):(1'h0)] reg216 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg214 = (1'h0);
  reg [(4'hf):(1'h0)] reg212 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg211 = (1'h0);
  reg [(5'h12):(1'h0)] reg208 = (1'h0);
  reg [(4'h9):(1'h0)] reg207 = (1'h0);
  reg [(4'hb):(1'h0)] reg204 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg203 = (1'h0);
  reg [(4'hc):(1'h0)] reg202 = (1'h0);
  reg signed [(4'he):(1'h0)] reg201 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg184 = (1'h0);
  reg [(5'h12):(1'h0)] reg181 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg177 = (1'h0);
  reg [(4'he):(1'h0)] reg175 = (1'h0);
  reg [(2'h3):(1'h0)] reg172 = (1'h0);
  reg [(4'hb):(1'h0)] reg171 = (1'h0);
  reg [(5'h13):(1'h0)] reg170 = (1'h0);
  reg [(4'hd):(1'h0)] reg169 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg167 = (1'h0);
  reg [(4'h8):(1'h0)] reg163 = (1'h0);
  reg [(4'hc):(1'h0)] reg161 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg217 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg215 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg213 = (1'h0);
  reg [(4'h9):(1'h0)] forvar210 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg209 = (1'h0);
  reg [(4'ha):(1'h0)] reg206 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar205 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar200 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar199 = (1'h0);
  reg [(3'h4):(1'h0)] reg185 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg183 = (1'h0);
  reg [(4'he):(1'h0)] forvar182 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg180 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg179 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar178 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg176 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg174 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar173 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg168 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg166 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar165 = (1'h0);
  reg [(3'h7):(1'h0)] reg164 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg162 = (1'h0);
  reg [(4'hb):(1'h0)] reg160 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar159 = (1'h0);
  reg [(5'h12):(1'h0)] reg158 = (1'h0);
  reg [(4'hb):(1'h0)] reg157 = (1'h0);
  reg [(5'h10):(1'h0)] reg156 = (1'h0);
  reg [(2'h2):(1'h0)] forvar155 = (1'h0);
  reg [(4'hb):(1'h0)] forvar154 = (1'h0);
  assign y = {wire220,
                 wire219,
                 wire218,
                 wire198,
                 wire197,
                 wire196,
                 wire195,
                 wire194,
                 wire193,
                 wire192,
                 wire191,
                 wire190,
                 wire189,
                 wire188,
                 wire187,
                 wire186,
                 wire153,
                 reg216,
                 reg214,
                 reg212,
                 reg211,
                 reg208,
                 reg207,
                 reg204,
                 reg203,
                 reg202,
                 reg201,
                 reg184,
                 reg181,
                 reg177,
                 reg175,
                 reg172,
                 reg171,
                 reg170,
                 reg169,
                 reg167,
                 reg163,
                 reg161,
                 reg217,
                 reg215,
                 reg213,
                 forvar210,
                 reg209,
                 reg206,
                 forvar205,
                 forvar200,
                 forvar199,
                 reg185,
                 reg183,
                 forvar182,
                 reg180,
                 reg179,
                 forvar178,
                 reg176,
                 reg174,
                 forvar173,
                 reg168,
                 reg166,
                 forvar165,
                 reg164,
                 reg162,
                 reg160,
                 forvar159,
                 reg158,
                 reg157,
                 reg156,
                 forvar155,
                 forvar154,
                 (1'h0)};
  assign wire153 = ((!(~|wire150[(1'h0):(1'h0)])) ?
                       $signed(wire151) : (&(8'hb4)));
  always
    @(posedge clk) begin
      for (forvar154 = (1'h0); (forvar154 < (1'h0)); forvar154 = (forvar154 + (1'h1)))
        begin
          for (forvar155 = (1'h0); (forvar155 < (2'h2)); forvar155 = (forvar155 + (1'h1)))
            begin
              reg156 = (((~^wire150[(2'h2):(1'h0)]) ^ ($unsigned($unsigned(wire151)) ?
                      (wire149[(4'h9):(1'h0)] ?
                          wire153 : (~wire153)) : ($unsigned((8'hbc)) + (wire152 ?
                          forvar154 : wire152)))) ?
                  (~^{forvar154,
                      $unsigned((wire152 > wire149))}) : forvar155[(1'h0):(1'h0)]);
              reg157 = $unsigned(reg156[(2'h2):(1'h1)]);
              reg158 = $signed((((~&$signed(forvar155)) ^~ $signed((wire150 ?
                  wire151 : wire151))) - {wire150[(4'h8):(3'h4)]}));
            end
          for (forvar159 = (1'h0); (forvar159 < (1'h1)); forvar159 = (forvar159 + (1'h1)))
            begin
              reg160 = wire153;
              reg161 <= (^~(({{(8'had), (8'ha9)}, wire149[(4'hb):(3'h7)]} ?
                  $unsigned((wire149 & wire151)) : {wire150[(1'h0):(1'h0)]}) ^ ($signed(wire150) ?
                  reg156 : (8'hb2))));
              reg162 = wire153[(4'h8):(3'h4)];
              reg163 <= $unsigned($signed((^~(wire150[(2'h3):(1'h0)] ?
                  (forvar155 ^~ wire152) : $signed(forvar154)))));
            end
          reg164 = (((^{$unsigned(reg157),
                  $unsigned((8'hbb))}) < reg162[(4'ha):(3'h6)]) ?
              forvar159 : reg162);
        end
      for (forvar165 = (1'h0); (forvar165 < (1'h1)); forvar165 = (forvar165 + (1'h1)))
        begin
          reg166 = forvar155[(1'h1):(1'h1)];
          if ((reg157[(4'hb):(4'ha)] ?
              ({forvar155} ?
                  $signed(($unsigned((8'hbe)) ?
                      reg164 : $signed(wire152))) : ($signed(wire149) << {(|(8'hb7))})) : (|$unsigned((reg156[(3'h6):(1'h0)] ?
                  wire151 : $unsigned(wire149))))))
            begin
              reg167 <= $unsigned(((~|(reg156 * $signed(reg160))) ?
                  ($signed({reg164, wire151}) >>> $signed((reg162 ?
                      wire151 : reg158))) : reg158));
              reg168 = (wire152[(2'h3):(1'h1)] || ($signed((8'ha7)) ?
                  reg160 : reg156));
            end
          else
            begin
              reg167 <= (~$unsigned((reg161 ?
                  reg160 : (forvar155 ? (!forvar159) : $unsigned(forvar155)))));
              reg169 <= reg157[(4'hb):(1'h0)];
              reg170 <= wire153;
            end
          reg171 <= $unsigned((reg162 || reg168));
          reg172 <= forvar165[(2'h2):(1'h1)];
        end
      if ($unsigned($unsigned((($signed(reg162) > $unsigned(reg160)) < $unsigned((~&reg157))))))
        begin
          for (forvar173 = (1'h0); (forvar173 < (2'h2)); forvar173 = (forvar173 + (1'h1)))
            begin
              reg174 = $unsigned($unsigned(wire151));
              reg175 <= ((reg157 && (~({forvar154} != forvar165[(3'h7):(2'h2)]))) * (&{(reg157 ?
                      (wire153 > reg160) : (forvar154 ? reg163 : reg164)),
                  (&reg174[(2'h2):(1'h1)])}));
            end
          reg176 = reg160;
        end
      else
        begin
          for (forvar173 = (1'h0); (forvar173 < (2'h2)); forvar173 = (forvar173 + (1'h1)))
            begin
              reg175 <= $unsigned({$unsigned(reg175[(4'h8):(1'h0)])});
              reg176 = (reg169 * $signed(($unsigned($unsigned(reg156)) ?
                  $signed((|reg157)) : $unsigned($unsigned(wire150)))));
              reg177 <= reg168;
            end
          for (forvar178 = (1'h0); (forvar178 < (2'h3)); forvar178 = (forvar178 + (1'h1)))
            begin
              reg179 = ((^$signed((8'ha3))) ?
                  $unsigned((|{(reg170 ? reg171 : (8'hb5)),
                      $signed(wire153)})) : (+$signed($unsigned((^~(8'hba))))));
              reg180 = (~^reg158);
              reg181 <= $unsigned(reg177);
            end
          for (forvar182 = (1'h0); (forvar182 < (1'h1)); forvar182 = (forvar182 + (1'h1)))
            begin
              reg183 = forvar173[(2'h2):(1'h0)];
              reg184 <= {$signed(reg163),
                  ((8'ha1) ?
                      $signed({(reg167 >> reg166),
                          ((8'hbe) ?
                              reg164 : reg174)}) : $unsigned(($signed((8'hb8)) || $signed(reg167))))};
              reg185 = $signed(reg158);
            end
        end
    end
  assign wire186 = (^~(^$signed((~&reg175[(4'he):(3'h4)]))));
  assign wire187 = reg161;
  assign wire188 = reg181[(3'h4):(2'h3)];
  assign wire189 = wire188[(2'h2):(1'h0)];
  assign wire190 = $unsigned({(wire187[(3'h5):(1'h1)] ?
                           ((wire186 <<< wire149) ?
                               $unsigned(reg170) : reg167) : wire188)});
  assign wire191 = ((wire189[(4'h9):(1'h0)] ?
                       {(~&(wire149 == (8'hbb)))} : $signed(($unsigned((8'ha7)) ?
                           $unsigned((8'hb3)) : (wire151 >> wire186)))) & wire186[(3'h5):(1'h0)]);
  assign wire192 = wire151;
  assign wire193 = (^((wire192[(3'h4):(2'h2)] ?
                           $signed(wire153[(1'h0):(1'h0)]) : $signed((wire189 - reg169))) ?
                       reg177 : ($signed((-(8'hac))) == (|(&reg181)))));
  assign wire194 = $unsigned(((wire193[(4'h8):(3'h5)] ?
                       $signed(reg172) : $signed(reg167[(2'h3):(1'h0)])) | (8'hb6)));
  assign wire195 = ($signed(((!$unsigned((8'ha6))) ?
                       $signed($unsigned(reg175)) : reg161)) >= wire193[(2'h2):(1'h0)]);
  assign wire196 = wire186[(1'h1):(1'h0)];
  assign wire197 = reg171;
  assign wire198 = ((~^(!(~wire197))) > $unsigned((wire191[(3'h4):(3'h4)] ?
                       reg177[(1'h1):(1'h0)] : wire194[(2'h3):(2'h3)])));
  always
    @(posedge clk) begin
      for (forvar199 = (1'h0); (forvar199 < (1'h0)); forvar199 = (forvar199 + (1'h1)))
        begin
          for (forvar200 = (1'h0); (forvar200 < (2'h3)); forvar200 = (forvar200 + (1'h1)))
            begin
              reg201 <= {reg172[(2'h2):(1'h0)]};
              reg202 <= {$signed((~(~^$signed((8'hb4))))),
                  ((^~$signed((&reg169))) != $unsigned($unsigned({reg163})))};
              reg203 <= wire196[(1'h1):(1'h1)];
              reg204 <= ((reg167[(1'h1):(1'h1)] ?
                  (8'ha5) : wire197[(4'hc):(3'h7)]) * ((~reg161) ^~ (&(~(reg170 ^ reg177)))));
            end
          for (forvar205 = (1'h0); (forvar205 < (1'h1)); forvar205 = (forvar205 + (1'h1)))
            begin
              reg206 = (~&$unsigned(wire152[(4'h9):(3'h5)]));
              reg207 <= {reg177};
              reg208 <= (&reg171[(3'h6):(3'h6)]);
            end
          reg209 = ((!((reg177[(1'h1):(1'h0)] ?
                  $signed((8'ha2)) : (wire193 ?
                      reg169 : (8'h9c))) != (~^(reg163 > reg184)))) ?
              ((reg207[(4'h8):(3'h6)] > (~^$signed(wire193))) ?
                  (wire189 ?
                      ($signed(reg202) + (&reg181)) : $unsigned(reg170)) : (reg202 >> wire198[(2'h2):(2'h2)])) : (wire192 * {(~^wire150[(1'h1):(1'h0)]),
                  $unsigned((reg175 ? wire196 : (7'h44)))}));
        end
      for (forvar210 = (1'h0); (forvar210 < (1'h0)); forvar210 = (forvar210 + (1'h1)))
        begin
          if ((reg203[(4'h9):(1'h0)] ?
              {(($signed(wire191) > reg167) << (forvar200[(4'he):(4'hc)] ?
                      (~&reg203) : {reg209})),
                  wire191[(5'h10):(2'h2)]} : $signed(($signed(reg175[(3'h6):(1'h0)]) ?
                  (8'ha2) : (reg206[(3'h7):(3'h4)] >>> reg202[(3'h7):(3'h5)])))))
            begin
              reg211 <= reg172[(1'h0):(1'h0)];
              reg212 <= reg171[(2'h2):(2'h2)];
              reg213 = reg204;
              reg214 <= $signed($signed($signed((forvar210 & $unsigned((8'hba))))));
              reg215 = $signed(reg203);
            end
          else
            begin
              reg211 <= (~((8'hb8) ?
                  $unsigned(wire191) : {$signed((-reg161))}));
              reg213 = $signed($unsigned(((|(+reg177)) ?
                  (-((8'ha7) ? wire149 : wire188)) : ((~|reg211) ?
                      reg213[(2'h2):(1'h0)] : (~^forvar199)))));
              reg214 <= {$signed({(8'hac)}),
                  {{(^(^wire195)), $unsigned($signed(reg167))}}};
              reg216 <= reg177[(1'h1):(1'h0)];
              reg217 = reg175[(4'he):(1'h0)];
            end
        end
    end
  assign wire218 = ((reg170 ?
                       ((8'hb8) >= (wire195 ^~ wire198[(2'h3):(2'h3)])) : ($signed(reg214) >= $signed((reg201 ?
                           wire188 : wire186)))) > $signed($unsigned({$unsigned(wire153)})));
  assign wire219 = $signed({wire186, reg177[(1'h1):(1'h0)]});
  assign wire220 = (+wire191);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module96
#(parameter param126 = {({(((8'hbe) ? (8'ha5) : (8'hb9)) ? ((8'hbc) ^~ (8'hb4)) : ((8'hab) ? (7'h42) : (8'hba)))} ? (((|(8'ha2)) ? ((8'hba) > (8'hae)) : (~&(8'hbc))) ? {((8'h9e) <<< (8'hb0))} : (((8'ha9) ? (8'h9c) : (8'hb0)) ? ((8'hb0) ? (8'hb7) : (8'ha2)) : ((8'hb9) ? (8'ha0) : (8'hab)))) : ((~&(^(8'hbd))) | {{(8'ha1)}, ((7'h43) ? (8'h9d) : (7'h44))})), ((+{{(8'ha6), (8'ha3)}}) ? (((~^(8'hb0)) ^~ ((8'hb4) ? (8'hb6) : (7'h41))) * ((~^(7'h41)) * ((8'hba) - (8'ha7)))) : (~&((^(8'hb7)) >>> ((8'hb1) && (8'hb5)))))}, 
parameter param127 = (~&((&(~{(8'ha0)})) ^ param126)))
(y, clk, wire100, wire99, wire98, wire97);
  output wire [(32'h133):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire100;
  input wire [(4'he):(1'h0)] wire99;
  input wire signed [(4'hd):(1'h0)] wire98;
  input wire [(4'hb):(1'h0)] wire97;
  wire [(4'hb):(1'h0)] wire125;
  wire signed [(5'h15):(1'h0)] wire124;
  wire signed [(3'h6):(1'h0)] wire123;
  wire signed [(3'h5):(1'h0)] wire122;
  wire signed [(3'h7):(1'h0)] wire102;
  wire [(4'hc):(1'h0)] wire101;
  reg signed [(5'h14):(1'h0)] reg117 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg119 = (1'h0);
  reg [(4'hb):(1'h0)] reg118 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg115 = (1'h0);
  reg [(3'h5):(1'h0)] reg113 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg109 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg108 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg107 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg106 = (1'h0);
  reg [(3'h5):(1'h0)] reg121 = (1'h0);
  reg [(5'h15):(1'h0)] reg120 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar117 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg116 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar114 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg112 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar111 = (1'h0);
  reg [(5'h14):(1'h0)] reg110 = (1'h0);
  reg [(3'h4):(1'h0)] forvar105 = (1'h0);
  reg [(5'h10):(1'h0)] forvar104 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg103 = (1'h0);
  assign y = {wire125,
                 wire124,
                 wire123,
                 wire122,
                 wire102,
                 wire101,
                 reg117,
                 reg119,
                 reg118,
                 reg115,
                 reg113,
                 reg109,
                 reg108,
                 reg107,
                 reg106,
                 reg121,
                 reg120,
                 forvar117,
                 reg116,
                 forvar114,
                 reg112,
                 forvar111,
                 reg110,
                 forvar105,
                 forvar104,
                 reg103,
                 (1'h0)};
  assign wire101 = wire100[(1'h0):(1'h0)];
  assign wire102 = {((({wire100} ?
                               wire99 : wire98[(3'h4):(2'h2)]) >>> wire100[(1'h0):(1'h0)]) ?
                           (((8'hbe) ? $unsigned((8'ha1)) : wire98) ?
                               $unsigned((|wire98)) : $unsigned((8'hbb))) : ($unsigned(wire98) != ((8'ha0) && (wire101 ?
                               wire101 : wire97))))};
  always
    @(posedge clk) begin
      reg103 = (~|((~((wire102 ^ (8'haa)) - (wire98 >> wire101))) ?
          $unsigned($signed($unsigned(wire98))) : $unsigned({$signed((8'ha3))})));
      for (forvar104 = (1'h0); (forvar104 < (1'h1)); forvar104 = (forvar104 + (1'h1)))
        begin
          for (forvar105 = (1'h0); (forvar105 < (2'h3)); forvar105 = (forvar105 + (1'h1)))
            begin
              reg106 <= $signed(((($unsigned(wire102) & $unsigned(wire97)) & forvar104) > (|reg103)));
              reg107 <= $signed(((~|forvar104[(4'hc):(4'h9)]) ?
                  ($unsigned($signed((8'ha0))) ?
                      wire99 : forvar104) : ($unsigned($unsigned(wire98)) ?
                      wire102 : {(forvar105 * wire97), {(8'hbc), wire102}})));
              reg108 <= reg106[(1'h1):(1'h0)];
              reg109 <= wire100[(2'h3):(1'h1)];
              reg110 = reg106[(2'h2):(1'h0)];
            end
          for (forvar111 = (1'h0); (forvar111 < (2'h2)); forvar111 = (forvar111 + (1'h1)))
            begin
              reg112 = (~|$signed((({wire97} | {reg107}) ?
                  forvar105[(2'h3):(1'h1)] : (~(reg109 ? wire97 : reg107)))));
              reg113 <= reg106[(1'h0):(1'h0)];
            end
        end
      if ($unsigned($signed({((|wire99) >= (reg113 < wire97))})))
        begin
          for (forvar114 = (1'h0); (forvar114 < (1'h0)); forvar114 = (forvar114 + (1'h1)))
            begin
              reg115 <= $signed($signed((!forvar114[(1'h1):(1'h0)])));
              reg116 = (wire98[(4'ha):(1'h1)] ?
                  $unsigned((forvar104[(2'h3):(2'h3)] ^~ $unsigned($signed(reg113)))) : wire99[(1'h0):(1'h0)]);
            end
          for (forvar117 = (1'h0); (forvar117 < (3'h4)); forvar117 = (forvar117 + (1'h1)))
            begin
              reg118 <= ((wire102 ?
                      (($signed((8'h9d)) <<< wire97) << ((forvar105 ?
                              reg113 : reg109) ?
                          {reg113} : (forvar117 ?
                              wire101 : forvar114))) : $signed($signed({forvar105}))) ?
                  (!$signed((8'hb2))) : (-(-((&wire102) <<< (7'h43)))));
              reg119 <= ($signed($unsigned(((reg116 << (8'hbf)) ?
                      (reg109 | wire100) : (reg108 ? wire97 : wire99)))) ?
                  $signed({reg110}) : (&((~&(~|forvar105)) || wire98[(2'h2):(1'h1)])));
              reg120 = ((^$unsigned((-(8'ha4)))) ?
                  (~$unsigned($signed(reg108))) : (^wire102[(1'h1):(1'h1)]));
            end
        end
      else
        begin
          for (forvar114 = (1'h0); (forvar114 < (2'h2)); forvar114 = (forvar114 + (1'h1)))
            begin
              reg115 <= ((reg116[(3'h6):(2'h3)] ~^ (&forvar105)) ?
                  reg103[(4'h9):(3'h4)] : reg109);
              reg117 <= ($signed(reg106) ?
                  $unsigned((|$signed(((7'h43) ?
                      (8'ha5) : reg119)))) : ((reg110[(4'hd):(4'h9)] >= (reg106 & wire99[(2'h2):(1'h0)])) || ($signed((|reg109)) <<< reg103)));
              reg118 <= (($unsigned($signed((|(8'hb0)))) ?
                  (&{$signed(forvar117)}) : ((((8'haf) ? wire99 : wire99) ?
                      $signed(forvar111) : (~&(7'h43))) & $signed($unsigned(reg116)))) && forvar104[(1'h1):(1'h1)]);
              reg120 = $unsigned(reg120);
              reg121 = reg103[(3'h4):(1'h0)];
            end
        end
    end
  assign wire122 = $unsigned($unsigned((reg106 ~^ reg117)));
  assign wire123 = ((!$signed(wire122)) ?
                       ((~$signed({reg113})) != reg107) : (reg106[(1'h0):(1'h0)] == $unsigned(reg106)));
  assign wire124 = wire101;
  assign wire125 = (!$signed($signed(wire97)));
endmodule