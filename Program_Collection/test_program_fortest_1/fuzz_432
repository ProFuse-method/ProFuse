(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h64):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire0;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire [(3'h4):(1'h0)] wire2;
  input wire signed [(2'h2):(1'h0)] wire3;
  wire signed [(4'ha):(1'h0)] wire43;
  wire [(3'h5):(1'h0)] wire42;
  wire signed [(4'h9):(1'h0)] wire41;
  wire signed [(3'h7):(1'h0)] wire4;
  wire signed [(4'hb):(1'h0)] wire5;
  wire [(4'ha):(1'h0)] wire6;
  wire signed [(2'h3):(1'h0)] wire7;
  wire signed [(4'h8):(1'h0)] wire8;
  wire [(4'ha):(1'h0)] wire39;
  reg [(3'h6):(1'h0)] reg9 = (1'h0);
  reg [(4'ha):(1'h0)] reg10 = (1'h0);
  reg [(2'h2):(1'h0)] reg11 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg12 = (1'h0);
  assign y = {wire43,
                 wire42,
                 wire41,
                 wire4,
                 wire5,
                 wire6,
                 wire7,
                 wire8,
                 wire39,
                 reg9,
                 reg10,
                 reg11,
                 reg12,
                 (1'h0)};
  assign wire4 = $unsigned((+{(wire3 ? (8'hb0) : wire0)}));
  assign wire5 = $unsigned(($signed($signed(wire2)) || wire1[(2'h2):(1'h0)]));
  assign wire6 = wire0[(1'h1):(1'h1)];
  assign wire7 = {$signed(wire5[(3'h5):(1'h0)])};
  assign wire8 = $unsigned(((wire1 >>> wire0[(2'h2):(1'h0)]) ?
                     (~^(~&wire0)) : ((wire3 ~^ (8'hab)) || {wire4})));
  always
    @(posedge clk) begin
      if (({wire6[(1'h1):(1'h1)]} < {$unsigned((&wire0))}))
        begin
          if (((wire7 ?
                  $unsigned(wire8[(4'h8):(1'h1)]) : $signed($unsigned(wire6))) ?
              ((~&$unsigned(wire8)) + $signed((+(8'h9c)))) : $signed(({wire7} ?
                  $signed(wire7) : $signed(wire2)))))
            begin
              reg9 <= wire2[(2'h3):(1'h0)];
              reg10 <= ((!wire1[(3'h7):(3'h7)]) ?
                  (~^({wire0} ?
                      ((8'ha6) >> wire2) : (8'haa))) : ($signed(wire4[(3'h4):(2'h2)]) && $signed($signed(wire4))));
            end
          else
            begin
              reg9 <= {wire0[(3'h7):(2'h2)]};
            end
        end
      else
        begin
          reg9 <= $unsigned(reg10[(1'h0):(1'h0)]);
          reg10 <= wire7;
        end
      reg11 <= ($signed($signed(wire2[(1'h0):(1'h0)])) ?
          ({$unsigned(wire0)} ?
              $unsigned($signed(wire4)) : (wire6 <<< wire0[(3'h7):(3'h5)])) : {reg10[(2'h3):(1'h1)]});
      reg12 <= wire5;
    end
  module13 #() modinst40 (.wire15(wire5), .clk(clk), .y(wire39), .wire16(wire7), .wire17(wire2), .wire14(reg10));
  assign wire41 = ($signed((~&$signed(wire0))) ?
                      $signed((8'hb0)) : (((&reg9) + $unsigned(wire3)) ?
                          $signed(wire7) : wire4));
  assign wire42 = $signed(wire41[(2'h3):(2'h3)]);
  assign wire43 = ($unsigned($signed(wire0[(3'h5):(1'h0)])) ?
                      wire3[(2'h2):(2'h2)] : $unsigned(({wire42} & $signed(wire4))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13  (y, clk, wire14, wire15, wire16, wire17);
  output wire [(32'h31):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire14;
  input wire signed [(4'hb):(1'h0)] wire15;
  input wire [(2'h3):(1'h0)] wire16;
  input wire [(2'h3):(1'h0)] wire17;
  wire [(2'h2):(1'h0)] wire38;
  wire signed [(4'h9):(1'h0)] wire20;
  wire [(4'h8):(1'h0)] wire21;
  wire [(4'h8):(1'h0)] wire36;
  reg signed [(4'hb):(1'h0)] reg18 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg19 = (1'h0);
  assign y = {wire38, wire20, wire21, wire36, reg18, reg19, (1'h0)};
  always
    @(posedge clk) begin
      reg18 <= (|{{(~&wire14)}});
      reg19 <= $signed(wire17[(2'h3):(2'h2)]);
    end
  assign wire20 = wire14;
  assign wire21 = (wire16[(2'h3):(1'h1)] ^ $unsigned($unsigned($signed(wire17))));
  module22 #() modinst37 (wire36, clk, wire20, wire16, reg19, wire21);
  assign wire38 = ((!($unsigned(wire36) && (~&(8'h9c)))) ? (8'hae) : wire16);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module22
#(parameter param35 = (^{(~&(8'hb0))}))
(y, clk, wire26, wire25, wire24, wire23);
  output wire [(32'h32):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire26;
  input wire [(2'h2):(1'h0)] wire25;
  input wire signed [(4'h9):(1'h0)] wire24;
  input wire signed [(4'h8):(1'h0)] wire23;
  wire [(2'h2):(1'h0)] wire34;
  wire [(3'h6):(1'h0)] wire32;
  wire [(2'h3):(1'h0)] wire31;
  wire signed [(4'hb):(1'h0)] wire30;
  wire signed [(2'h3):(1'h0)] wire29;
  wire [(3'h7):(1'h0)] wire28;
  reg [(4'h8):(1'h0)] reg33 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg27 = (1'h0);
  assign y = {wire34,
                 wire32,
                 wire31,
                 wire30,
                 wire29,
                 wire28,
                 reg33,
                 reg27,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg27 <= $unsigned(wire25);
    end
  assign wire28 = (reg27[(2'h3):(1'h0)] ? wire26 : $unsigned(wire26));
  assign wire29 = ((+(wire25[(1'h1):(1'h0)] ?
                          wire25[(1'h1):(1'h0)] : wire25[(1'h0):(1'h0)])) ?
                      reg27 : (8'ha6));
  assign wire30 = $signed(reg27);
  assign wire31 = wire29[(2'h3):(1'h1)];
  assign wire32 = ((~^reg27) ?
                      ($unsigned((~|wire26)) ? wire25 : wire25) : wire25);
  always
    @(posedge clk) begin
      reg33 <= ((wire24[(3'h7):(3'h4)] ^ $unsigned(wire26[(3'h4):(3'h4)])) ?
          wire25 : ($signed(wire30[(2'h3):(1'h0)]) * wire32[(3'h6):(3'h6)]));
    end
  assign wire34 = {$unsigned((8'ha5))};
endmodule