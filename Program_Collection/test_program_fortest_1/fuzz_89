(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param80 = (!((((8'ha0) & (8'ha5)) ? ((8'ha4) | (8'hab)) : ((8'ha5) >= (8'h9c))) ? {(!(8'hb0))} : (+(8'hab)))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h87):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire3;
  input wire [(4'h9):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire [(4'h9):(1'h0)] wire0;
  wire [(4'h9):(1'h0)] wire78;
  wire signed [(4'h9):(1'h0)] wire77;
  wire [(4'h8):(1'h0)] wire76;
  wire [(2'h3):(1'h0)] wire75;
  wire signed [(4'h8):(1'h0)] wire74;
  wire signed [(4'hb):(1'h0)] wire70;
  wire signed [(4'hb):(1'h0)] wire69;
  wire signed [(3'h6):(1'h0)] wire66;
  wire signed [(4'ha):(1'h0)] wire64;
  wire [(4'hb):(1'h0)] wire72;
  reg [(3'h7):(1'h0)] reg79 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg68 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg67 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg6 = (1'h0);
  reg [(2'h2):(1'h0)] reg5 = (1'h0);
  reg [(4'hb):(1'h0)] reg4 = (1'h0);
  assign y = {wire78,
                 wire77,
                 wire76,
                 wire75,
                 wire74,
                 wire70,
                 wire69,
                 wire66,
                 wire64,
                 wire72,
                 reg79,
                 reg68,
                 reg67,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= $unsigned((wire0 ?
          (wire3[(2'h3):(1'h0)] ?
              (wire3 ?
                  (8'haf) : wire1) : $unsigned(wire1)) : (|$signed(wire2))));
      reg5 <= wire3;
      reg6 <= (8'h9d);
    end
  module7 #() modinst65 (wire64, clk, reg6, wire1, wire2, reg4);
  assign wire66 = wire3;
  always
    @(posedge clk) begin
      if (((((8'ha2) | $signed(reg6)) ?
          wire2 : ($unsigned(wire66) ?
              $unsigned((8'hab)) : wire0)) >>> (~^(~(reg4 ?
          wire66 : (8'had))))))
        begin
          reg67 <= wire64;
          reg68 <= (({(wire0 ? wire66 : (8'hb0))} ?
              (|$unsigned(wire3)) : ($unsigned(wire66) ?
                  $signed((8'ha1)) : $signed(wire2))) || reg4);
        end
      else
        begin
          reg67 <= $signed({((~&wire2) && $unsigned(reg67))});
        end
    end
  assign wire69 = wire0;
  module7 #() modinst71 (.wire10(wire2), .clk(clk), .wire11(wire69), .wire9(wire3), .y(wire70), .wire8(reg4));
  module7 #() modinst73 (.wire11(wire64), .wire9(wire0), .wire8(wire1), .y(wire72), .wire10(reg67), .clk(clk));
  assign wire74 = $unsigned(((((8'had) && reg67) ?
                          (wire66 ^~ wire72) : $signed(reg6)) ?
                      $signed((~|wire0)) : $unsigned((wire69 ?
                          wire72 : wire0))));
  assign wire75 = ($unsigned({(~^wire66)}) < reg4[(1'h0):(1'h0)]);
  assign wire76 = wire2;
  assign wire77 = wire64;
  assign wire78 = {wire64[(1'h1):(1'h0)]};
  always
    @(posedge clk) begin
      reg79 <= $signed((wire69[(4'h9):(4'h8)] ?
          {(reg6 ^~ wire76)} : wire0[(3'h7):(3'h6)]));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7
#(parameter param63 = ((8'haf) - ((&((8'ha7) * (8'hb0))) ? {(~&(8'ha2))} : ({(8'h9d)} ? ((8'h9f) - (8'h9c)) : ((8'hac) < (8'ha7))))))
(y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h49):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire11;
  input wire signed [(4'h8):(1'h0)] wire10;
  input wire [(4'h9):(1'h0)] wire9;
  input wire signed [(4'hb):(1'h0)] wire8;
  wire signed [(3'h4):(1'h0)] wire61;
  wire signed [(4'h9):(1'h0)] wire36;
  wire [(4'hb):(1'h0)] wire35;
  wire [(4'hb):(1'h0)] wire34;
  wire signed [(4'h8):(1'h0)] wire31;
  wire [(3'h5):(1'h0)] wire30;
  wire [(4'ha):(1'h0)] wire28;
  wire signed [(3'h4):(1'h0)] wire12;
  reg [(3'h6):(1'h0)] reg33 = (1'h0);
  reg [(3'h4):(1'h0)] reg32 = (1'h0);
  assign y = {wire61,
                 wire36,
                 wire35,
                 wire34,
                 wire31,
                 wire30,
                 wire28,
                 wire12,
                 reg33,
                 reg32,
                 (1'h0)};
  assign wire12 = (~wire10);
  module13 #() modinst29 (.wire14(wire9), .clk(clk), .y(wire28), .wire15(wire10), .wire16(wire8), .wire17(wire12));
  assign wire30 = wire8[(2'h2):(2'h2)];
  assign wire31 = {(wire28 ?
                          ({wire11} && (|wire9)) : ((wire10 - (8'ha7)) ?
                              (+wire10) : wire10))};
  always
    @(posedge clk) begin
      if ($signed(wire12))
        begin
          reg32 <= wire9;
        end
      else
        begin
          reg32 <= (+wire31);
        end
      reg33 <= (~^wire12);
    end
  assign wire34 = ({$signed($unsigned(wire8))} < $unsigned($unsigned($unsigned(reg33))));
  assign wire35 = {(~{$unsigned((8'ha7))})};
  assign wire36 = (|wire28);
  module37 #() modinst62 (wire61, clk, wire10, wire11, wire30, wire36);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module37  (y, clk, wire41, wire40, wire39, wire38);
  output wire [(32'h9b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire41;
  input wire signed [(4'ha):(1'h0)] wire40;
  input wire [(2'h2):(1'h0)] wire39;
  input wire signed [(4'h9):(1'h0)] wire38;
  wire [(3'h7):(1'h0)] wire48;
  wire [(4'hb):(1'h0)] wire47;
  wire [(4'h8):(1'h0)] wire46;
  wire signed [(4'ha):(1'h0)] wire45;
  wire [(4'hb):(1'h0)] wire43;
  wire signed [(3'h6):(1'h0)] wire42;
  reg [(3'h4):(1'h0)] reg60 = (1'h0);
  reg [(4'h9):(1'h0)] reg59 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg58 = (1'h0);
  reg [(4'h8):(1'h0)] reg57 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg56 = (1'h0);
  reg [(3'h5):(1'h0)] reg55 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg54 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg53 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg52 = (1'h0);
  reg [(3'h6):(1'h0)] reg51 = (1'h0);
  reg [(4'ha):(1'h0)] reg50 = (1'h0);
  reg [(4'h8):(1'h0)] reg49 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg44 = (1'h0);
  assign y = {wire48,
                 wire47,
                 wire46,
                 wire45,
                 wire43,
                 wire42,
                 reg60,
                 reg59,
                 reg58,
                 reg57,
                 reg56,
                 reg55,
                 reg54,
                 reg53,
                 reg52,
                 reg51,
                 reg50,
                 reg49,
                 reg44,
                 (1'h0)};
  assign wire42 = $unsigned($unsigned((((8'h9f) != wire39) != (wire39 & wire38))));
  assign wire43 = ((+$signed((wire38 || wire40))) & $unsigned(wire42));
  always
    @(posedge clk) begin
      reg44 <= ((wire40 ? wire39 : (^$unsigned(wire41))) ?
          $unsigned(wire38[(3'h5):(3'h4)]) : $unsigned(wire42));
    end
  assign wire45 = ((wire42 | $unsigned((reg44 <<< reg44))) == wire42[(3'h6):(3'h6)]);
  assign wire46 = wire43[(4'h9):(2'h2)];
  assign wire47 = (^~{wire40});
  assign wire48 = ((wire40 ?
                      wire41[(1'h1):(1'h0)] : reg44) + (^~(~$signed(wire43))));
  always
    @(posedge clk) begin
      reg49 <= wire38[(4'h9):(3'h6)];
      reg50 <= $signed((&($signed(wire43) ?
          wire45[(4'ha):(3'h6)] : reg49[(4'h8):(3'h5)])));
      if ((8'ha1))
        begin
          reg51 <= reg49;
        end
      else
        begin
          if (($unsigned(wire46[(1'h0):(1'h0)]) >>> wire45))
            begin
              reg51 <= $signed($unsigned($signed(wire41[(2'h2):(1'h1)])));
              reg52 <= {reg44[(1'h1):(1'h0)]};
            end
          else
            begin
              reg51 <= $signed(($signed($unsigned(wire46)) >>> $unsigned({wire38})));
              reg52 <= {reg51[(3'h4):(1'h0)]};
              reg53 <= {wire42};
            end
          if (wire45)
            begin
              reg54 <= wire39;
              reg55 <= ((wire48[(3'h6):(3'h4)] ? reg44 : reg44) + reg52);
            end
          else
            begin
              reg54 <= (|(~&{wire46}));
              reg55 <= wire42[(1'h0):(1'h0)];
            end
        end
    end
  always
    @(posedge clk) begin
      reg56 <= (!wire45[(3'h7):(3'h7)]);
    end
  always
    @(posedge clk) begin
      reg57 <= $unsigned(((^(-wire40)) ~^ ((+wire47) && $unsigned(wire41))));
      if (wire47)
        begin
          reg58 <= (^~$unsigned((reg56[(3'h6):(1'h1)] & $signed((8'h9c)))));
        end
      else
        begin
          reg58 <= (^((~^((8'h9f) <<< wire48)) ?
              (wire42[(1'h0):(1'h0)] ?
                  (8'h9f) : reg53[(2'h3):(2'h2)]) : ({wire41} ?
                  reg49 : (wire47 <<< reg55))));
          reg59 <= ($signed(wire45) ? $unsigned($signed(wire43)) : reg56);
          reg60 <= wire45[(3'h7):(3'h7)];
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13
#(parameter param27 = ((((-(8'ha6)) ? ((8'h9f) ^ (8'ha7)) : (~^(8'ha5))) >> (((8'haa) ? (8'haa) : (8'ha7)) >>> ((8'had) ? (8'ha7) : (8'hac)))) ? (~&(((8'hab) ? (8'h9f) : (8'ha8)) >= (+(8'ha1)))) : ((((8'haf) == (8'hb0)) ? ((8'h9c) ^~ (8'hae)) : (~|(8'ha2))) ? (((8'h9c) + (8'ha6)) ? ((8'ha0) > (8'h9d)) : ((8'ha0) ? (8'hac) : (8'hab))) : (~^((8'had) ? (8'ha0) : (8'haf))))))
(y, clk, wire17, wire16, wire15, wire14);
  output wire [(32'h43):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h2):(1'h0)] wire17;
  input wire signed [(3'h5):(1'h0)] wire16;
  input wire signed [(3'h4):(1'h0)] wire15;
  input wire signed [(3'h4):(1'h0)] wire14;
  wire [(3'h5):(1'h0)] wire26;
  wire [(4'hb):(1'h0)] wire25;
  wire [(4'h8):(1'h0)] wire24;
  wire signed [(3'h4):(1'h0)] wire23;
  wire [(3'h4):(1'h0)] wire22;
  wire [(4'ha):(1'h0)] wire21;
  wire signed [(4'hb):(1'h0)] wire20;
  wire [(4'hb):(1'h0)] wire19;
  wire [(2'h2):(1'h0)] wire18;
  assign y = {wire26,
                 wire25,
                 wire24,
                 wire23,
                 wire22,
                 wire21,
                 wire20,
                 wire19,
                 wire18,
                 (1'h0)};
  assign wire18 = $unsigned($signed(((+wire17) == $unsigned((8'had)))));
  assign wire19 = $unsigned((8'ha4));
  assign wire20 = (+$signed({((8'h9e) <<< (8'haa))}));
  assign wire21 = (8'ha0);
  assign wire22 = (~|{wire21[(3'h6):(3'h6)]});
  assign wire23 = (8'ha4);
  assign wire24 = ((&$unsigned(wire21[(4'ha):(1'h1)])) && {($signed(wire21) - (^(8'ha6)))});
  assign wire25 = $unsigned((wire15[(2'h3):(2'h2)] ?
                      (|$unsigned(wire14)) : (+wire21)));
  assign wire26 = {((!(wire14 ? wire17 : (8'ha8))) << wire24)};
endmodule