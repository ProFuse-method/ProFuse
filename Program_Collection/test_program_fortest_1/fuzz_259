(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h3e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire signed [(3'h7):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire0;
  wire signed [(3'h4):(1'h0)] wire16;
  wire [(3'h4):(1'h0)] wire15;
  wire signed [(3'h6):(1'h0)] wire4;
  reg [(3'h6):(1'h0)] reg14 = (1'h0);
  reg [(3'h6):(1'h0)] reg13 = (1'h0);
  reg [(4'h9):(1'h0)] reg12 = (1'h0);
  reg [(4'h8):(1'h0)] reg11 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg10 = (1'h0);
  reg [(2'h2):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg8 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg6 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg5 = (1'h0);
  assign y = {wire16,
                 wire15,
                 wire4,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 (1'h0)};
  assign wire4 = ($unsigned(wire3[(2'h3):(2'h2)]) ?
                     wire0 : $signed(((wire2 ? wire3 : wire1) ?
                         (wire1 <<< (8'ha5)) : wire0)));
  always
    @(posedge clk) begin
      reg5 <= wire3[(1'h0):(1'h0)];
      if ((|{{(+reg5)}}))
        begin
          reg6 <= $unsigned({(reg5[(2'h2):(2'h2)] << {reg5})});
          reg7 <= (((reg6[(1'h0):(1'h0)] ?
              {reg6} : (|wire2)) << (+wire0[(3'h6):(2'h2)])) ^~ wire2[(3'h6):(1'h1)]);
          reg8 <= ({({wire4} - (wire3 ?
                  wire2 : (8'ha0)))} + {(wire1[(1'h0):(1'h0)] ?
                  (wire1 ? wire2 : wire2) : $signed(wire4))});
        end
      else
        begin
          reg6 <= (-wire0[(2'h3):(1'h1)]);
        end
    end
  always
    @(posedge clk) begin
      reg9 <= {(^(!(~^reg6)))};
      if ((~&(wire3[(2'h3):(1'h1)] >= $signed(wire4))))
        begin
          reg10 <= (~&wire4[(3'h6):(1'h1)]);
        end
      else
        begin
          reg10 <= $unsigned((|(wire3[(2'h2):(2'h2)] ?
              $signed(wire2) : {reg8})));
          reg11 <= $unsigned($unsigned((-$signed(wire3))));
          reg12 <= reg10[(2'h2):(1'h0)];
        end
      if ((wire2 ?
          ($unsigned(wire0[(4'ha):(2'h2)]) ^ ($signed(wire2) >> wire4[(1'h1):(1'h0)])) : wire4[(3'h5):(1'h1)]))
        begin
          reg13 <= reg7[(1'h0):(1'h0)];
          reg14 <= ($unsigned((reg10[(2'h2):(2'h2)] < wire4)) ?
              wire2[(4'h9):(3'h7)] : {(~&(-wire3))});
        end
      else
        begin
          reg13 <= wire3;
        end
    end
  assign wire15 = (^(|(wire3 ? reg8[(3'h5):(3'h5)] : (8'ha3))));
  assign wire16 = ((~|wire0) ?
                      $signed({$signed(wire4)}) : $unsigned((reg7 >> reg8)));
endmodule