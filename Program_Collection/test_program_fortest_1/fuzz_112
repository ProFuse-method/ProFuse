(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h28):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire3;
  input wire signed [(3'h7):(1'h0)] wire2;
  input wire [(3'h6):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire0;
  wire [(3'h4):(1'h0)] wire53;
  wire [(4'hb):(1'h0)] wire51;
  wire signed [(4'hb):(1'h0)] wire6;
  wire [(3'h5):(1'h0)] wire5;
  wire [(4'h8):(1'h0)] wire4;
  assign y = {wire53, wire51, wire6, wire5, wire4, (1'h0)};
  assign wire4 = ($signed(({wire3} ?
                     $signed(wire3) : (wire0 ?
                         wire0 : wire1))) ^ (~&wire1[(1'h0):(1'h0)]));
  assign wire5 = wire3[(1'h0):(1'h0)];
  assign wire6 = wire1[(3'h6):(2'h3)];
  module7 #() modinst52 (.y(wire51), .wire8(wire1), .wire11(wire0), .wire10(wire3), .wire9(wire6), .clk(clk));
  assign wire53 = $unsigned(((~^wire0) >>> wire1[(2'h3):(2'h3)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7  (y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h57):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire11;
  input wire signed [(3'h7):(1'h0)] wire10;
  input wire signed [(4'hb):(1'h0)] wire9;
  input wire [(2'h3):(1'h0)] wire8;
  wire signed [(2'h3):(1'h0)] wire50;
  wire [(4'h8):(1'h0)] wire49;
  wire signed [(4'h8):(1'h0)] wire43;
  wire [(2'h3):(1'h0)] wire28;
  wire [(4'h8):(1'h0)] wire27;
  wire [(4'ha):(1'h0)] wire25;
  reg signed [(3'h5):(1'h0)] reg48 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg47 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg46 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg45 = (1'h0);
  reg [(3'h4):(1'h0)] reg14 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg13 = (1'h0);
  reg [(4'h8):(1'h0)] reg12 = (1'h0);
  assign y = {wire50,
                 wire49,
                 wire43,
                 wire28,
                 wire27,
                 wire25,
                 reg48,
                 reg47,
                 reg46,
                 reg45,
                 reg14,
                 reg13,
                 reg12,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg12 <= {{wire11[(2'h2):(1'h0)]}};
      reg13 <= ($signed($signed($unsigned((8'hac)))) ?
          $signed(wire9[(3'h4):(2'h2)]) : (+wire8));
      reg14 <= reg12;
    end
  module15 #() modinst26 (.clk(clk), .y(wire25), .wire18(reg12), .wire19(wire9), .wire17(reg13), .wire16(wire11));
  assign wire27 = ((+$signed($unsigned((8'hb0)))) && (((reg12 | reg13) ?
                      reg14[(2'h3):(1'h1)] : (wire9 ~^ wire8)) <= ({wire11} ~^ $signed(wire8))));
  assign wire28 = $signed($unsigned(wire8[(2'h2):(1'h0)]));
  module29 #() modinst44 (wire43, clk, reg13, reg12, wire11, wire25);
  always
    @(posedge clk) begin
      reg45 <= wire10;
    end
  always
    @(posedge clk) begin
      reg46 <= reg12;
      if ($signed((^~((8'ha9) != (~|wire9)))))
        begin
          reg47 <= $signed((wire43 >> ((!wire11) > reg14)));
          reg48 <= ($unsigned(((reg46 && reg46) && {(8'hab)})) << $unsigned(reg12));
        end
      else
        begin
          reg47 <= ($unsigned(((wire27 & wire25) ?
                  (8'h9d) : (reg45 << (8'ha4)))) ?
              $signed(($signed(wire8) ?
                  (reg46 ?
                      wire9 : wire9) : wire9[(3'h7):(2'h3)])) : $signed($signed($signed(reg45))));
        end
    end
  assign wire49 = ({{$unsigned((8'hae))}} | $signed((~^{wire28})));
  assign wire50 = reg45[(1'h1):(1'h0)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module29  (y, clk, wire33, wire32, wire31, wire30);
  output wire [(32'h2f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire33;
  input wire [(3'h7):(1'h0)] wire32;
  input wire [(3'h4):(1'h0)] wire31;
  input wire [(4'ha):(1'h0)] wire30;
  wire signed [(4'h9):(1'h0)] wire42;
  wire [(2'h3):(1'h0)] wire41;
  wire signed [(2'h3):(1'h0)] wire40;
  wire [(4'ha):(1'h0)] wire39;
  wire [(2'h2):(1'h0)] wire35;
  wire [(3'h4):(1'h0)] wire34;
  reg [(4'h8):(1'h0)] reg38 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg37 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg36 = (1'h0);
  assign y = {wire42,
                 wire41,
                 wire40,
                 wire39,
                 wire35,
                 wire34,
                 reg38,
                 reg37,
                 reg36,
                 (1'h0)};
  assign wire34 = $unsigned(wire32[(3'h5):(3'h5)]);
  assign wire35 = wire32[(2'h2):(2'h2)];
  always
    @(posedge clk) begin
      if (wire30[(4'h8):(3'h7)])
        begin
          reg36 <= (wire35[(1'h1):(1'h1)] ?
              (((^~wire35) ? $signed(wire34) : wire31[(2'h3):(2'h3)]) ?
                  ($signed((8'ha9)) ?
                      (+wire30) : $unsigned(wire33)) : (wire32 == (!wire31))) : wire33[(1'h0):(1'h0)]);
        end
      else
        begin
          if ($signed(($unsigned({wire30}) ?
              wire35 : $signed($signed(wire34)))))
            begin
              reg36 <= ((!(+(^~wire35))) ?
                  ((wire34 ?
                      $signed((8'h9e)) : wire31) <<< reg36[(1'h0):(1'h0)]) : $unsigned(wire33));
            end
          else
            begin
              reg36 <= (&wire33[(1'h1):(1'h1)]);
              reg37 <= $unsigned((~&((wire34 ?
                  wire35 : wire33) * $unsigned((8'hab)))));
              reg38 <= (+reg37[(2'h3):(2'h3)]);
            end
        end
    end
  assign wire39 = $unsigned(wire33);
  assign wire40 = (+(&$unsigned($unsigned(wire31))));
  assign wire41 = $unsigned(($signed(wire31[(3'h4):(1'h1)]) ?
                      $signed((8'had)) : reg37));
  assign wire42 = $unsigned((~|wire39[(1'h0):(1'h0)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15  (y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h2a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire19;
  input wire [(4'h8):(1'h0)] wire18;
  input wire [(3'h4):(1'h0)] wire17;
  input wire signed [(3'h4):(1'h0)] wire16;
  wire [(4'h9):(1'h0)] wire24;
  wire signed [(3'h5):(1'h0)] wire23;
  wire [(4'hb):(1'h0)] wire21;
  wire signed [(4'ha):(1'h0)] wire20;
  reg signed [(3'h6):(1'h0)] reg22 = (1'h0);
  assign y = {wire24, wire23, wire21, wire20, reg22, (1'h0)};
  assign wire20 = (|(-wire19[(2'h2):(1'h1)]));
  assign wire21 = wire16;
  always
    @(posedge clk) begin
      reg22 <= wire16;
    end
  assign wire23 = (8'ha2);
  assign wire24 = $signed(wire18);
endmodule