(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h56):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire3;
  input wire signed [(4'hb):(1'h0)] wire2;
  input wire [(4'h8):(1'h0)] wire1;
  input wire signed [(3'h4):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire61;
  wire [(3'h4):(1'h0)] wire59;
  wire signed [(4'h9):(1'h0)] wire56;
  wire [(4'ha):(1'h0)] wire6;
  wire [(3'h6):(1'h0)] wire5;
  wire signed [(4'ha):(1'h0)] wire4;
  reg [(4'h9):(1'h0)] reg66 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg65 = (1'h0);
  reg [(3'h4):(1'h0)] reg64 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg63 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg62 = (1'h0);
  reg [(3'h7):(1'h0)] reg58 = (1'h0);
  assign y = {wire61,
                 wire59,
                 wire56,
                 wire6,
                 wire5,
                 wire4,
                 reg66,
                 reg65,
                 reg64,
                 reg63,
                 reg62,
                 reg58,
                 (1'h0)};
  assign wire4 = wire2;
  assign wire5 = (&wire3);
  assign wire6 = wire1;
  module7 #() modinst57 (wire56, clk, wire4, wire6, wire1, wire2);
  always
    @(posedge clk) begin
      reg58 <= (|$unsigned((wire5 >> $unsigned((8'ha2)))));
    end
  module35 #() modinst60 (wire59, clk, wire2, wire3, wire6, wire0);
  assign wire61 = (($signed((8'h9d)) <<< ((!reg58) ?
                          (wire56 || reg58) : wire59)) ?
                      wire59 : (|$signed((8'haf))));
  always
    @(posedge clk) begin
      if (wire6[(2'h2):(1'h0)])
        begin
          reg62 <= {{wire4}};
          reg63 <= (-(($signed(wire1) <<< reg58[(3'h5):(3'h4)]) << reg58));
          reg64 <= $unsigned((|wire3[(2'h3):(2'h2)]));
        end
      else
        begin
          reg62 <= wire5[(3'h5):(1'h1)];
          if ((~|wire6[(3'h5):(2'h2)]))
            begin
              reg63 <= ((wire2 ?
                      ((wire4 ? (8'h9d) : wire0) >> (~^wire2)) : (8'ha9)) ?
                  (~|(reg64[(1'h0):(1'h0)] >= wire6[(3'h5):(1'h0)])) : {$unsigned(wire2[(3'h5):(2'h2)])});
            end
          else
            begin
              reg63 <= $unsigned($unsigned(wire0[(2'h2):(1'h0)]));
            end
        end
      reg65 <= wire0[(2'h3):(2'h3)];
    end
  always
    @(posedge clk) begin
      reg66 <= reg64[(2'h3):(2'h2)];
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7
#(parameter param55 = (!(((~(8'ha1)) & (!(8'ha7))) - ({(8'hac)} ? ((8'haf) ? (8'hae) : (8'ha9)) : (^(8'hae))))))
(y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h29):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire11;
  input wire signed [(4'h9):(1'h0)] wire10;
  input wire [(3'h6):(1'h0)] wire9;
  input wire [(4'hb):(1'h0)] wire8;
  wire [(3'h6):(1'h0)] wire54;
  wire [(4'ha):(1'h0)] wire53;
  wire [(3'h7):(1'h0)] wire52;
  wire [(3'h4):(1'h0)] wire50;
  wire signed [(2'h2):(1'h0)] wire34;
  wire [(3'h7):(1'h0)] wire33;
  wire signed [(3'h4):(1'h0)] wire31;
  assign y = {wire54, wire53, wire52, wire50, wire34, wire33, wire31, (1'h0)};
  module12 #() modinst32 (.wire16(wire11), .wire14(wire9), .wire15(wire8), .wire13(wire10), .clk(clk), .y(wire31));
  assign wire33 = wire9;
  assign wire34 = $signed(($unsigned((wire9 > wire8)) ?
                      $signed(wire8) : wire10[(1'h1):(1'h0)]));
  module35 #() modinst51 (.wire36(wire8), .wire38(wire31), .y(wire50), .wire37(wire11), .clk(clk), .wire39(wire10));
  assign wire52 = ($signed($unsigned(((8'ha9) || wire31))) ~^ wire10);
  assign wire53 = wire50;
  assign wire54 = wire34;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module35  (y, clk, wire39, wire38, wire37, wire36);
  output wire [(32'h3d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire39;
  input wire signed [(3'h4):(1'h0)] wire38;
  input wire [(2'h3):(1'h0)] wire37;
  input wire signed [(2'h2):(1'h0)] wire36;
  wire signed [(3'h4):(1'h0)] wire49;
  wire signed [(3'h4):(1'h0)] wire48;
  wire signed [(4'h8):(1'h0)] wire47;
  wire [(3'h6):(1'h0)] wire46;
  wire signed [(4'hb):(1'h0)] wire45;
  wire [(3'h6):(1'h0)] wire42;
  wire signed [(3'h5):(1'h0)] wire41;
  wire [(2'h3):(1'h0)] wire40;
  reg [(3'h6):(1'h0)] reg44 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg43 = (1'h0);
  assign y = {wire49,
                 wire48,
                 wire47,
                 wire46,
                 wire45,
                 wire42,
                 wire41,
                 wire40,
                 reg44,
                 reg43,
                 (1'h0)};
  assign wire40 = (wire36 ^ (8'h9d));
  assign wire41 = (&wire39[(3'h4):(1'h1)]);
  assign wire42 = (|wire41[(2'h3):(1'h1)]);
  always
    @(posedge clk) begin
      reg43 <= wire41[(2'h2):(1'h0)];
      reg44 <= wire39;
    end
  assign wire45 = reg43;
  assign wire46 = $signed($unsigned($signed((wire45 ? wire45 : wire39))));
  assign wire47 = (($unsigned((wire36 ? wire40 : (8'ha6))) ?
                      wire39[(1'h0):(1'h0)] : ((&reg43) ?
                          wire40 : (&wire40))) >>> reg44);
  assign wire48 = ($signed(($signed(reg44) ?
                          (wire42 ? (8'haa) : wire36) : reg44)) ?
                      wire42 : wire42);
  assign wire49 = $unsigned(wire47[(2'h2):(1'h1)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module12  (y, clk, wire16, wire15, wire14, wire13);
  output wire [(32'h47):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire16;
  input wire [(2'h3):(1'h0)] wire15;
  input wire signed [(3'h5):(1'h0)] wire14;
  input wire [(3'h5):(1'h0)] wire13;
  wire [(2'h3):(1'h0)] wire30;
  wire [(4'hb):(1'h0)] wire29;
  wire [(2'h2):(1'h0)] wire28;
  wire signed [(3'h4):(1'h0)] wire27;
  wire [(3'h4):(1'h0)] wire26;
  wire signed [(3'h7):(1'h0)] wire25;
  wire signed [(2'h2):(1'h0)] wire21;
  wire [(2'h2):(1'h0)] wire20;
  wire [(2'h2):(1'h0)] wire19;
  wire [(3'h7):(1'h0)] wire18;
  wire [(2'h3):(1'h0)] wire17;
  reg signed [(4'ha):(1'h0)] reg24 = (1'h0);
  reg [(4'h8):(1'h0)] reg23 = (1'h0);
  reg [(3'h5):(1'h0)] reg22 = (1'h0);
  assign y = {wire30,
                 wire29,
                 wire28,
                 wire27,
                 wire26,
                 wire25,
                 wire21,
                 wire20,
                 wire19,
                 wire18,
                 wire17,
                 reg24,
                 reg23,
                 reg22,
                 (1'h0)};
  assign wire17 = ($signed(wire16[(1'h0):(1'h0)]) ?
                      wire16 : (&$unsigned($signed((8'ha7)))));
  assign wire18 = ($signed((&$signed(wire17))) ?
                      (~^$signed(wire13[(1'h0):(1'h0)])) : wire15[(2'h3):(1'h0)]);
  assign wire19 = (&{wire15});
  assign wire20 = (~&(8'h9f));
  assign wire21 = $signed($signed({$signed((8'h9d))}));
  always
    @(posedge clk) begin
      if ((wire21 + (^$signed(wire14))))
        begin
          reg22 <= (wire13[(1'h1):(1'h0)] <<< (((wire15 ?
                  wire16 : wire19) != (wire15 ^ wire21)) ?
              ($signed(wire18) ?
                  {wire15} : $signed(wire18)) : $unsigned($signed(wire19))));
          if (wire20)
            begin
              reg23 <= (~^(((wire14 >> wire14) <<< {wire17}) ?
                  wire20[(1'h1):(1'h1)] : ($signed((8'ha7)) ?
                      (wire14 - (8'h9f)) : $signed(wire19))));
              reg24 <= $unsigned((8'ha6));
            end
          else
            begin
              reg23 <= wire21;
              reg24 <= ((~|$unsigned($unsigned(wire17))) > wire13[(1'h1):(1'h0)]);
            end
        end
      else
        begin
          reg22 <= $unsigned({(wire16[(2'h2):(1'h0)] ?
                  (wire21 >> reg23) : {wire17})});
          reg23 <= $signed((^~wire18));
        end
    end
  assign wire25 = wire14;
  assign wire26 = {wire21};
  assign wire27 = (&(((!wire25) ? wire25 : (~&wire13)) || $signed((reg24 ?
                      wire14 : (8'hb0)))));
  assign wire28 = $unsigned((~&(+{wire25})));
  assign wire29 = {{wire16}};
  assign wire30 = wire25;
endmodule