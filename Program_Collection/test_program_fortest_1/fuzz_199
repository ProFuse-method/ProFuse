(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param61 = (((((8'hac) ? (8'h9e) : (8'ha5)) ? (&(8'hac)) : ((8'hab) >= (8'h9c))) ? (((8'hab) ^ (8'ha2)) ? ((8'ha5) << (8'hab)) : (&(8'ha2))) : (((8'haf) ? (8'ha6) : (8'ha2)) >>> ((8'hac) >= (8'haf)))) ^ (8'haa)))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h17):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire3;
  input wire signed [(4'hb):(1'h0)] wire2;
  input wire [(4'ha):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire [(2'h2):(1'h0)] wire59;
  wire signed [(2'h3):(1'h0)] wire57;
  wire [(4'h8):(1'h0)] wire55;
  reg signed [(4'h9):(1'h0)] reg60 = (1'h0);
  assign y = {wire59, wire57, wire55, reg60, (1'h0)};
  module4 #() modinst56 (.y(wire55), .wire6(wire0), .clk(clk), .wire8(wire3), .wire7(wire1), .wire5(wire2));
  module33 #() modinst58 (.clk(clk), .wire35(wire3), .y(wire57), .wire37(wire2), .wire36(wire0), .wire34(wire1));
  assign wire59 = $unsigned($unsigned((wire57[(2'h3):(2'h2)] ?
                      wire1 : $signed(wire57))));
  always
    @(posedge clk) begin
      reg60 <= $signed(wire2[(4'h9):(4'h9)]);
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h3b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire8;
  input wire [(4'ha):(1'h0)] wire7;
  input wire signed [(4'h9):(1'h0)] wire6;
  input wire [(4'hb):(1'h0)] wire5;
  wire [(3'h5):(1'h0)] wire54;
  wire signed [(3'h4):(1'h0)] wire51;
  wire [(2'h2):(1'h0)] wire46;
  wire [(4'ha):(1'h0)] wire32;
  wire signed [(4'hb):(1'h0)] wire31;
  wire [(3'h5):(1'h0)] wire29;
  reg signed [(2'h3):(1'h0)] reg53 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg52 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg50 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg49 = (1'h0);
  reg [(4'h9):(1'h0)] reg48 = (1'h0);
  assign y = {wire54,
                 wire51,
                 wire46,
                 wire32,
                 wire31,
                 wire29,
                 reg53,
                 reg52,
                 reg50,
                 reg49,
                 reg48,
                 (1'h0)};
  module9 #() modinst30 (.wire13(wire6), .wire11(wire5), .y(wire29), .wire12(wire7), .clk(clk), .wire10(wire8));
  assign wire31 = wire8;
  assign wire32 = wire5[(3'h4):(2'h3)];
  module33 #() modinst47 (wire46, clk, wire29, wire8, wire5, wire32);
  always
    @(posedge clk) begin
      reg48 <= wire8;
      reg49 <= wire29;
      reg50 <= reg48[(3'h6):(2'h2)];
    end
  assign wire51 = (+reg50[(2'h3):(2'h2)]);
  always
    @(posedge clk) begin
      reg52 <= ($signed(((|wire5) ? (wire6 ? reg48 : (8'hab)) : (-wire29))) ?
          (wire29 ? $unsigned((~&wire5)) : (~^wire8)) : wire8[(3'h6):(1'h0)]);
    end
  always
    @(posedge clk) begin
      reg53 <= {wire29[(2'h3):(2'h2)]};
    end
  assign wire54 = $unsigned($unsigned((+(reg49 + wire6))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module33
#(parameter param45 = ({(~&((8'ha2) != (8'had)))} ? {(((8'ha4) < (8'hab)) ^ ((8'ha3) ? (8'haf) : (8'ha6)))} : (((~|(8'ha3)) & {(8'h9c)}) ? (|((8'hae) ? (8'hb0) : (8'ha9))) : (((8'ha2) ^ (8'had)) ? ((8'ha8) >> (8'ha2)) : ((8'ha5) ? (8'h9f) : (8'ha4))))))
(y, clk, wire37, wire36, wire35, wire34);
  output wire [(32'h38):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire37;
  input wire signed [(2'h2):(1'h0)] wire36;
  input wire [(3'h7):(1'h0)] wire35;
  input wire [(3'h4):(1'h0)] wire34;
  wire signed [(2'h3):(1'h0)] wire44;
  wire [(4'hb):(1'h0)] wire43;
  wire [(3'h5):(1'h0)] wire40;
  wire [(4'h8):(1'h0)] wire39;
  wire [(4'ha):(1'h0)] wire38;
  reg [(4'hb):(1'h0)] reg42 = (1'h0);
  reg [(3'h7):(1'h0)] reg41 = (1'h0);
  assign y = {wire44, wire43, wire40, wire39, wire38, reg42, reg41, (1'h0)};
  assign wire38 = ((~^(-((8'had) ? wire35 : wire34))) <= (~^(wire36 ?
                      $unsigned(wire34) : (8'ha7))));
  assign wire39 = ((~|$signed({(8'ha1)})) ?
                      ({wire34[(1'h1):(1'h0)]} >> wire38) : wire37);
  assign wire40 = ($unsigned(wire39[(4'h8):(1'h0)]) & $signed((~wire37)));
  always
    @(posedge clk) begin
      reg41 <= (wire36[(1'h1):(1'h0)] ^ $signed(wire35));
      reg42 <= (~wire38);
    end
  assign wire43 = {($unsigned((&reg41)) ~^ (^~wire36[(1'h0):(1'h0)]))};
  assign wire44 = $unsigned((wire35[(1'h1):(1'h1)] >> reg41));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9
#(parameter param28 = (((!(+(8'haa))) ? (|((8'h9c) ? (8'haf) : (8'hab))) : (((8'ha3) > (8'haa)) ^~ ((8'ha3) >>> (8'ha2)))) > (&({(8'ha9)} * (&(8'ha8))))))
(y, clk, wire13, wire12, wire11, wire10);
  output wire [(32'h6a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire13;
  input wire signed [(2'h2):(1'h0)] wire12;
  input wire signed [(4'hb):(1'h0)] wire11;
  input wire [(3'h6):(1'h0)] wire10;
  wire signed [(4'h9):(1'h0)] wire27;
  wire [(4'ha):(1'h0)] wire26;
  wire [(4'h9):(1'h0)] wire25;
  wire [(2'h2):(1'h0)] wire24;
  wire [(2'h3):(1'h0)] wire21;
  wire [(3'h7):(1'h0)] wire20;
  wire [(4'h9):(1'h0)] wire19;
  reg signed [(4'ha):(1'h0)] reg23 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg22 = (1'h0);
  reg [(4'h9):(1'h0)] reg18 = (1'h0);
  reg [(4'h8):(1'h0)] reg17 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg16 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg14 = (1'h0);
  assign y = {wire27,
                 wire26,
                 wire25,
                 wire24,
                 wire21,
                 wire20,
                 wire19,
                 reg23,
                 reg22,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg14 <= wire12;
      if (($signed((8'hae)) << $unsigned(reg14)))
        begin
          if (wire11)
            begin
              reg15 <= (-(((wire13 >> wire13) || ((8'ha8) >>> wire10)) ?
                  wire12 : (((8'ha6) ? wire11 : (8'ha3)) & $unsigned(wire12))));
              reg16 <= $signed(($unsigned(((8'hb0) ?
                  wire13 : wire12)) - $signed(wire12)));
            end
          else
            begin
              reg15 <= (wire13 || (^reg16));
              reg16 <= reg16[(1'h0):(1'h0)];
            end
          reg17 <= (!(^$signed($signed(reg15))));
          reg18 <= {wire13[(2'h3):(2'h3)]};
        end
      else
        begin
          reg15 <= $signed({(reg17[(2'h3):(1'h1)] ~^ (~wire13))});
        end
    end
  assign wire19 = ($signed((~$signed(reg17))) >> $signed(wire13[(1'h0):(1'h0)]));
  assign wire20 = wire11;
  assign wire21 = ({{$unsigned(wire12)}} <<< $unsigned({(+(8'ha4))}));
  always
    @(posedge clk) begin
      reg22 <= $signed($unsigned(((wire10 ? reg17 : wire12) ?
          wire13[(2'h3):(1'h1)] : wire21)));
      reg23 <= ((wire13 ?
          reg22 : $unsigned(reg22)) ~^ $unsigned((~&wire10[(2'h2):(1'h0)])));
    end
  assign wire24 = (^(8'ha2));
  assign wire25 = (^~{$unsigned(reg15)});
  assign wire26 = ($signed(reg15[(2'h2):(1'h1)]) == ($unsigned(wire19[(3'h5):(1'h0)]) ?
                      $unsigned($unsigned(wire13)) : $unsigned((wire25 ?
                          wire25 : wire20))));
  assign wire27 = reg22;
endmodule