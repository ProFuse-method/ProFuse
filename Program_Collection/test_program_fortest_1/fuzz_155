(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param64 = (^~(~&(((8'h9d) ? (8'ha3) : (8'ha6)) - ((8'haf) || (8'hb0))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h7c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire3;
  input wire [(4'ha):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire [(4'h8):(1'h0)] wire0;
  wire signed [(4'hb):(1'h0)] wire62;
  wire signed [(4'ha):(1'h0)] wire14;
  wire [(3'h5):(1'h0)] wire13;
  wire [(4'h8):(1'h0)] wire12;
  wire signed [(3'h7):(1'h0)] wire4;
  reg signed [(2'h3):(1'h0)] reg20 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg19 = (1'h0);
  reg [(2'h2):(1'h0)] reg18 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg17 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg16 = (1'h0);
  reg [(4'h8):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg11 = (1'h0);
  reg [(4'ha):(1'h0)] reg10 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg8 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg7 = (1'h0);
  reg [(4'ha):(1'h0)] reg6 = (1'h0);
  reg [(3'h6):(1'h0)] reg5 = (1'h0);
  assign y = {wire62,
                 wire14,
                 wire13,
                 wire12,
                 wire4,
                 reg20,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 (1'h0)};
  assign wire4 = wire3[(3'h4):(2'h3)];
  always
    @(posedge clk) begin
      if (({wire2} < ((((8'haa) - wire4) > $unsigned(wire2)) ?
          wire1[(1'h0):(1'h0)] : (wire4[(2'h3):(2'h3)] || wire1))))
        begin
          reg5 <= wire4;
          if (((^~((wire3 ? wire1 : (8'haf)) ?
              (reg5 * wire2) : $unsigned(wire1))) & wire2))
            begin
              reg6 <= $unsigned(wire1);
              reg7 <= ((8'ha3) ?
                  (((wire1 <<< wire4) - (8'had)) ?
                      ($signed(reg6) ?
                          $signed(wire0) : (wire2 ?
                              wire3 : wire2)) : reg5[(3'h4):(2'h3)]) : (8'ha6));
              reg8 <= reg5[(1'h1):(1'h1)];
            end
          else
            begin
              reg6 <= $unsigned($signed({(!reg5)}));
              reg7 <= $signed($unsigned($signed(wire3)));
              reg8 <= wire3[(2'h2):(1'h1)];
            end
        end
      else
        begin
          reg5 <= ($unsigned($signed($signed(reg8))) ?
              $unsigned(wire4) : (~&{(~reg7)}));
          reg6 <= ($unsigned(((reg7 || wire1) ? (~reg8) : $unsigned(wire4))) ?
              (wire2 <= reg7[(4'h8):(3'h5)]) : $unsigned(reg6[(1'h1):(1'h1)]));
        end
      if (wire2)
        begin
          reg9 <= wire4;
          reg10 <= ((wire1 ?
              (wire3 ? (reg6 > wire3) : $unsigned(wire0)) : (wire0 ?
                  wire4[(1'h0):(1'h0)] : $signed(reg7))) >> {(wire0[(2'h2):(1'h1)] ?
                  reg9 : (!reg5))});
        end
      else
        begin
          reg9 <= ((((reg5 ? reg6 : (8'ha5)) >> $unsigned(reg9)) ?
                  wire2 : $unsigned((reg5 ^~ wire0))) ?
              reg6[(3'h5):(3'h4)] : ((|(~|reg8)) >>> ($unsigned(reg9) ?
                  ((8'ha9) * wire3) : reg9[(3'h5):(2'h3)])));
          reg10 <= $signed({$unsigned((&reg9))});
          reg11 <= ((~&reg9) ^ $signed(reg5));
        end
    end
  assign wire12 = reg10;
  assign wire13 = (|(((8'ha1) ? {wire12} : reg8[(2'h2):(1'h1)]) ?
                      reg11 : (8'h9d)));
  assign wire14 = wire3;
  always
    @(posedge clk) begin
      if ({reg8})
        begin
          if ({$signed({wire4})})
            begin
              reg15 <= wire12;
              reg16 <= wire13[(3'h4):(1'h0)];
            end
          else
            begin
              reg15 <= $signed((~^((~reg8) ? {wire0} : wire1)));
            end
          reg17 <= ((&(|(~^wire4))) ?
              (wire3[(1'h1):(1'h1)] || {(+wire14)}) : $signed(({reg5} == $unsigned(wire2))));
        end
      else
        begin
          reg15 <= (wire3 ? reg9[(3'h4):(1'h1)] : wire2);
        end
      if ($signed((((reg5 * reg11) ?
          reg7[(2'h3):(2'h2)] : $unsigned(wire14)) > reg9)))
        begin
          reg18 <= ((reg5[(2'h2):(1'h1)] || (^~$unsigned(wire12))) ?
              (|reg9[(3'h4):(1'h1)]) : reg5[(1'h1):(1'h0)]);
        end
      else
        begin
          reg18 <= ($signed((&$unsigned((8'hae)))) ?
              $unsigned($signed((^(8'hb0)))) : (~|$unsigned({wire2})));
          reg19 <= (^{(reg7 * reg10[(1'h0):(1'h0)])});
        end
      reg20 <= ($signed($signed($unsigned(wire3))) >>> (8'ha6));
    end
  module21 #() modinst63 (.wire23(reg10), .wire24(wire4), .clk(clk), .wire25(reg15), .wire22(wire14), .y(wire62));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module21
#(parameter param61 = {(^~((8'hb0) ~^ (|(8'ha9))))})
(y, clk, wire25, wire24, wire23, wire22);
  output wire [(32'h52):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire25;
  input wire [(3'h7):(1'h0)] wire24;
  input wire signed [(3'h5):(1'h0)] wire23;
  input wire [(2'h3):(1'h0)] wire22;
  wire signed [(4'ha):(1'h0)] wire60;
  wire signed [(3'h7):(1'h0)] wire59;
  wire signed [(3'h4):(1'h0)] wire58;
  wire signed [(4'hb):(1'h0)] wire56;
  wire [(4'h8):(1'h0)] wire30;
  wire signed [(3'h4):(1'h0)] wire29;
  wire signed [(4'ha):(1'h0)] wire28;
  wire signed [(4'h9):(1'h0)] wire27;
  wire signed [(4'h8):(1'h0)] wire26;
  reg signed [(4'ha):(1'h0)] reg31 = (1'h0);
  assign y = {wire60,
                 wire59,
                 wire58,
                 wire56,
                 wire30,
                 wire29,
                 wire28,
                 wire27,
                 wire26,
                 reg31,
                 (1'h0)};
  assign wire26 = ($signed(wire23) ?
                      $unsigned(((wire22 == wire22) ?
                          (8'ha8) : wire23)) : (($unsigned((8'ha1)) > (wire23 ?
                              wire23 : wire22)) ?
                          (~^(wire24 * (8'hb0))) : wire24[(3'h5):(2'h3)]));
  assign wire27 = {(~^$unsigned((wire22 && wire23)))};
  assign wire28 = ($signed($signed((8'ha6))) ?
                      $signed($unsigned({(8'ha5)})) : $unsigned($unsigned((wire27 > wire25))));
  assign wire29 = $signed({(((8'ha4) ? wire27 : wire24) <= (wire27 ?
                          wire27 : (8'ha0)))});
  assign wire30 = $signed(wire22);
  always
    @(posedge clk) begin
      reg31 <= $signed((((wire30 ? wire29 : wire26) <= ((8'h9c) * wire23)) ?
          wire23[(1'h1):(1'h1)] : (|(^wire22))));
    end
  module32 #() modinst57 (wire56, clk, wire29, wire28, wire25, wire24);
  assign wire58 = wire29[(1'h0):(1'h0)];
  assign wire59 = {(wire24[(2'h3):(1'h0)] ?
                          {wire28} : $unsigned((wire27 < wire24)))};
  assign wire60 = (((wire27[(4'h8):(1'h1)] > $signed(wire28)) * {{wire56}}) ?
                      wire59[(3'h6):(1'h1)] : reg31);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module32  (y, clk, wire36, wire35, wire34, wire33);
  output wire [(32'h7f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire36;
  input wire [(4'ha):(1'h0)] wire35;
  input wire signed [(2'h3):(1'h0)] wire34;
  input wire [(3'h7):(1'h0)] wire33;
  wire [(4'ha):(1'h0)] wire51;
  reg [(3'h5):(1'h0)] reg55 = (1'h0);
  reg [(3'h7):(1'h0)] reg54 = (1'h0);
  reg [(4'h8):(1'h0)] reg53 = (1'h0);
  reg [(3'h6):(1'h0)] reg52 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg50 = (1'h0);
  reg [(2'h3):(1'h0)] reg49 = (1'h0);
  reg [(4'h9):(1'h0)] reg48 = (1'h0);
  reg [(3'h6):(1'h0)] reg47 = (1'h0);
  reg [(4'hb):(1'h0)] reg46 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg45 = (1'h0);
  reg [(4'hb):(1'h0)] reg44 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg43 = (1'h0);
  reg [(2'h3):(1'h0)] reg42 = (1'h0);
  reg [(4'ha):(1'h0)] reg41 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg40 = (1'h0);
  reg [(2'h3):(1'h0)] reg39 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg38 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg37 = (1'h0);
  assign y = {wire51,
                 reg55,
                 reg54,
                 reg53,
                 reg52,
                 reg50,
                 reg49,
                 reg48,
                 reg47,
                 reg46,
                 reg45,
                 reg44,
                 reg43,
                 reg42,
                 reg41,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg37 <= $signed((-((wire35 ? wire34 : wire36) != (~^wire36))));
      if ((wire35 == $signed(wire33)))
        begin
          if ((|$unsigned($unsigned((wire34 + reg37)))))
            begin
              reg38 <= (~|(+(wire35[(3'h5):(2'h3)] ?
                  (reg37 ? reg37 : wire34) : $signed(wire33))));
              reg39 <= wire34;
              reg40 <= wire35;
            end
          else
            begin
              reg38 <= ($unsigned($signed((wire36 ?
                  reg39 : wire33))) * $unsigned(wire35[(2'h3):(2'h3)]));
              reg39 <= (wire36 ?
                  $unsigned(wire34) : $signed(((~|wire33) ?
                      (!wire36) : (wire36 << reg39))));
              reg40 <= (^~wire35[(4'ha):(4'ha)]);
            end
        end
      else
        begin
          reg38 <= reg40[(1'h0):(1'h0)];
          reg39 <= $unsigned($signed({reg40}));
          reg40 <= ({reg39} ? wire36 : reg37);
        end
      reg41 <= reg38[(3'h4):(3'h4)];
    end
  always
    @(posedge clk) begin
      reg42 <= {wire36};
      reg43 <= (!$signed(($signed(wire36) ? (wire34 ? reg39 : reg42) : reg41)));
      reg44 <= wire35[(3'h7):(1'h0)];
    end
  always
    @(posedge clk) begin
      if (($signed((wire36[(2'h3):(1'h0)] >= (^reg44))) ~^ wire36))
        begin
          reg45 <= {($signed($signed(reg38)) ?
                  $signed($signed(wire36)) : reg43[(1'h0):(1'h0)])};
          reg46 <= ((((~wire34) ^ (reg42 + (8'ha8))) == (+(wire35 ?
                  wire34 : wire34))) ?
              (|{reg41[(4'h9):(2'h3)]}) : (-reg37));
          reg47 <= $signed(wire34[(1'h1):(1'h1)]);
        end
      else
        begin
          if (($signed({reg42[(1'h0):(1'h0)]}) ^~ $signed(($unsigned(reg40) ?
              {(8'h9c)} : {reg40}))))
            begin
              reg45 <= ((({reg42} | (+wire35)) ?
                  $unsigned((reg43 ? (8'ha3) : reg40)) : (reg41 ?
                      $signed(wire33) : $signed((8'hae)))) <= reg44);
            end
          else
            begin
              reg45 <= ((^~reg41[(2'h3):(1'h0)]) ^~ ($unsigned(wire35[(4'h9):(3'h5)]) ^ wire35));
              reg46 <= reg46[(4'h9):(1'h0)];
            end
          reg47 <= $signed((reg42[(2'h2):(1'h1)] ^~ (&(reg44 <<< reg42))));
          reg48 <= reg43;
        end
      reg49 <= (($unsigned($signed(reg47)) ?
          {((8'ha9) <<< reg39)} : $unsigned(wire33)) <= reg39);
      reg50 <= $signed(({wire36[(1'h0):(1'h0)]} >> reg46));
    end
  assign wire51 = reg42[(2'h2):(1'h1)];
  always
    @(posedge clk) begin
      if (($signed($signed((reg44 ? reg39 : wire51))) << reg37))
        begin
          reg52 <= $signed(wire36[(2'h3):(1'h1)]);
          if (wire33)
            begin
              reg53 <= (reg49 & reg38[(3'h5):(3'h4)]);
              reg54 <= {(!(reg52 ? reg42 : (wire34 ? wire35 : (8'h9f))))};
              reg55 <= wire36;
            end
          else
            begin
              reg53 <= ($unsigned(((~(8'ha1)) ?
                  {reg48} : $unsigned(reg38))) | reg46);
              reg54 <= $unsigned($signed((~{(8'h9c)})));
              reg55 <= reg39[(2'h2):(2'h2)];
            end
        end
      else
        begin
          reg52 <= wire33;
        end
    end
endmodule