(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param48 = (((((8'h9c) ? (8'ha6) : (8'ha7)) ? ((8'ha8) >>> (8'had)) : ((8'ha0) ? (8'hb0) : (8'had))) | (!(-(8'hab)))) | ((((8'hab) ? (8'hac) : (8'hab)) != (!(8'h9c))) >>> (((8'hab) || (8'had)) < {(8'ha6)}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'hc4):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire [(4'h8):(1'h0)] wire1;
  input wire [(3'h4):(1'h0)] wire0;
  wire [(3'h6):(1'h0)] wire47;
  wire [(3'h5):(1'h0)] wire46;
  wire signed [(3'h5):(1'h0)] wire45;
  wire signed [(3'h7):(1'h0)] wire44;
  wire signed [(2'h3):(1'h0)] wire33;
  wire signed [(2'h2):(1'h0)] wire32;
  wire [(2'h3):(1'h0)] wire30;
  wire signed [(4'ha):(1'h0)] wire4;
  reg [(3'h4):(1'h0)] reg43 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg42 = (1'h0);
  reg [(3'h6):(1'h0)] reg41 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg40 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg39 = (1'h0);
  reg [(2'h3):(1'h0)] reg38 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg37 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg36 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg35 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg34 = (1'h0);
  reg [(4'h8):(1'h0)] reg14 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg13 = (1'h0);
  reg [(4'h8):(1'h0)] reg12 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg11 = (1'h0);
  reg [(4'h9):(1'h0)] reg10 = (1'h0);
  reg [(3'h6):(1'h0)] reg9 = (1'h0);
  reg [(3'h6):(1'h0)] reg8 = (1'h0);
  reg [(4'h8):(1'h0)] reg7 = (1'h0);
  reg [(4'h8):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg5 = (1'h0);
  assign y = {wire47,
                 wire46,
                 wire45,
                 wire44,
                 wire33,
                 wire32,
                 wire30,
                 wire4,
                 reg43,
                 reg42,
                 reg41,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 reg36,
                 reg35,
                 reg34,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 (1'h0)};
  assign wire4 = wire0;
  always
    @(posedge clk) begin
      reg5 <= (8'hb0);
      reg6 <= reg5[(3'h5):(1'h0)];
    end
  always
    @(posedge clk) begin
      if (wire1[(4'h8):(2'h3)])
        begin
          reg7 <= (|reg5[(1'h0):(1'h0)]);
        end
      else
        begin
          if (((+wire1[(3'h4):(1'h1)]) ?
              (reg5[(1'h0):(1'h0)] <= ((^~reg5) ?
                  $signed(reg6) : $signed((8'ha1)))) : reg7))
            begin
              reg7 <= ((reg6 != wire0) == (^wire2));
              reg8 <= (+(+(-{wire2})));
            end
          else
            begin
              reg7 <= $signed(reg6);
            end
          reg9 <= reg5[(3'h5):(1'h1)];
          if (wire1[(3'h5):(1'h0)])
            begin
              reg10 <= reg7[(2'h3):(1'h1)];
              reg11 <= ($signed(wire1) ?
                  (($unsigned(wire0) >>> (8'ha0)) ?
                      (|{reg10}) : $signed((^reg5))) : $unsigned({(reg7 ?
                          reg10 : (8'hb0))}));
            end
          else
            begin
              reg10 <= reg5;
              reg11 <= reg5[(1'h0):(1'h0)];
              reg12 <= {wire3[(2'h3):(2'h2)]};
            end
        end
      reg13 <= $unsigned((reg8 ?
          $unsigned((reg10 ? reg12 : reg11)) : (wire0[(1'h1):(1'h0)] ?
              $unsigned(reg10) : $signed(reg10))));
      reg14 <= $unsigned($unsigned((wire2 ?
          $signed(reg12) : (wire3 ~^ reg13))));
    end
  module15 #() modinst31 (.wire17(wire0), .wire18(wire3), .y(wire30), .wire16(reg11), .wire19(reg12), .clk(clk));
  assign wire32 = reg13[(4'h8):(1'h1)];
  assign wire33 = reg8;
  always
    @(posedge clk) begin
      reg34 <= (~^$signed($unsigned((wire32 ? reg9 : wire32))));
      reg35 <= $unsigned((^wire1[(3'h7):(2'h3)]));
    end
  always
    @(posedge clk) begin
      if ($unsigned(reg6))
        begin
          reg36 <= $unsigned(((reg35 > wire30) ?
              $signed((~^reg35)) : (~^$unsigned(reg14))));
        end
      else
        begin
          if (($unsigned((+{wire0})) ^~ $signed(wire32)))
            begin
              reg36 <= ((reg6 ?
                      wire30[(2'h2):(1'h1)] : $signed((reg5 ? reg7 : reg8))) ?
                  $signed((+((8'h9c) ?
                      reg5 : (8'hae)))) : $unsigned(((|reg12) && (reg9 + reg11))));
              reg37 <= reg6[(2'h3):(2'h2)];
              reg38 <= ((8'haf) ~^ $unsigned(($unsigned(reg5) ?
                  reg13 : wire33[(1'h1):(1'h1)])));
            end
          else
            begin
              reg36 <= ((($unsigned(reg38) == reg8[(3'h4):(2'h3)]) ?
                  {reg37} : ({reg6} + $signed(reg9))) ~^ $unsigned(reg35[(2'h2):(1'h0)]));
            end
          if ($unsigned((((8'ha7) ?
              $signed(reg38) : wire3[(2'h2):(2'h2)]) >= $signed($signed(reg12)))))
            begin
              reg39 <= (&(reg13[(1'h1):(1'h1)] << reg34[(3'h6):(1'h1)]));
              reg40 <= wire33;
            end
          else
            begin
              reg39 <= (~|((+wire30) ~^ ((~&reg40) ?
                  $unsigned(reg5) : (reg14 ? reg9 : reg11))));
            end
          reg41 <= $signed($unsigned($signed(((8'haf) ? reg10 : reg40))));
        end
      reg42 <= (8'ha9);
      reg43 <= $unsigned({((reg14 | wire4) ?
              reg36[(1'h0):(1'h0)] : $signed(wire2))});
    end
  assign wire44 = (-reg9);
  assign wire45 = (8'ha9);
  assign wire46 = $signed((reg43[(2'h2):(2'h2)] ?
                      $unsigned($signed(wire2)) : $signed($unsigned(reg36))));
  assign wire47 = (|(({wire33} < (wire1 ? (8'ha8) : reg13)) ?
                      $unsigned((+wire4)) : ($signed(reg40) * (^reg35))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15  (y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h49):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire19;
  input wire [(3'h5):(1'h0)] wire18;
  input wire [(2'h2):(1'h0)] wire17;
  input wire signed [(4'h8):(1'h0)] wire16;
  wire signed [(4'hb):(1'h0)] wire23;
  wire [(4'hb):(1'h0)] wire22;
  wire [(3'h5):(1'h0)] wire21;
  wire signed [(3'h6):(1'h0)] wire20;
  reg signed [(3'h4):(1'h0)] reg29 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg28 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg27 = (1'h0);
  reg [(4'ha):(1'h0)] reg26 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg25 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg24 = (1'h0);
  assign y = {wire23,
                 wire22,
                 wire21,
                 wire20,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 (1'h0)};
  assign wire20 = (({(wire18 < wire19)} ?
                          wire18 : (wire17 ?
                              $unsigned(wire19) : wire16[(3'h7):(3'h6)])) ?
                      ((8'ha0) ?
                          ((~^wire17) <<< $signed(wire17)) : ((wire16 > wire16) ?
                              wire18[(2'h2):(1'h0)] : $unsigned(wire17))) : {$unsigned($signed(wire19))});
  assign wire21 = wire19;
  assign wire22 = (wire19 << $unsigned(((+wire21) > $unsigned((8'ha0)))));
  assign wire23 = wire20[(1'h1):(1'h0)];
  always
    @(posedge clk) begin
      reg24 <= $signed((8'h9e));
      if (wire21[(1'h0):(1'h0)])
        begin
          reg25 <= $signed((~&wire18));
        end
      else
        begin
          if ((8'ha7))
            begin
              reg25 <= reg25;
              reg26 <= $signed((~wire22));
              reg27 <= ({(~^(wire19 > wire22))} > $unsigned((8'haf)));
            end
          else
            begin
              reg25 <= $unsigned($unsigned(((reg27 < reg27) ?
                  $signed((8'h9d)) : (wire22 ? wire17 : reg25))));
              reg26 <= (~^(-(wire18[(1'h1):(1'h0)] || {wire17})));
              reg27 <= (^$signed({(wire20 != wire17)}));
            end
          reg28 <= $unsigned($signed($signed($signed((8'hac)))));
          reg29 <= wire22[(1'h0):(1'h0)];
        end
    end
endmodule