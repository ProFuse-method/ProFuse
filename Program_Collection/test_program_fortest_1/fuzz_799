(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param26 = (({((8'h9c) ? (8'hae) : (8'h9e))} ? (&{(8'hab)}) : (((8'haa) - (8'ha8)) ? ((8'ha5) ? (8'haa) : (8'ha9)) : (!(8'ha8)))) ? ((((8'had) ? (8'ha4) : (8'ha6)) ? (!(8'hae)) : (^(8'had))) >> (((8'ha8) + (8'ha8)) <= (8'h9d))) : ((~^((8'hae) || (8'hae))) ? (((8'hae) ? (8'hb0) : (8'ha1)) ? (~|(8'ha2)) : {(8'ha6)}) : {((8'haf) ? (8'had) : (8'h9f))})))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h1a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire3;
  input wire [(4'h8):(1'h0)] wire2;
  input wire [(2'h2):(1'h0)] wire1;
  input wire signed [(3'h6):(1'h0)] wire0;
  wire [(3'h4):(1'h0)] wire24;
  wire signed [(3'h7):(1'h0)] wire23;
  wire signed [(4'ha):(1'h0)] wire21;
  reg [(3'h4):(1'h0)] reg25 = (1'h0);
  assign y = {wire24, wire23, wire21, reg25, (1'h0)};
  module4 #() modinst22 (.clk(clk), .wire8(wire2), .y(wire21), .wire5(wire3), .wire6(wire1), .wire7(wire0));
  assign wire23 = (wire1[(1'h1):(1'h0)] >> ((wire3 ?
                          (wire3 || (8'ha5)) : wire3) ?
                      $unsigned((~|wire1)) : (8'ha3)));
  assign wire24 = {((-wire2[(2'h3):(2'h2)]) ?
                          wire0[(3'h4):(2'h3)] : $signed((wire3 ?
                              (8'h9e) : wire0)))};
  always
    @(posedge clk) begin
      reg25 <= $unsigned((+$unsigned($unsigned(wire1))));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h54):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire8;
  input wire signed [(3'h6):(1'h0)] wire7;
  input wire signed [(2'h2):(1'h0)] wire6;
  input wire [(4'h9):(1'h0)] wire5;
  wire signed [(2'h3):(1'h0)] wire20;
  wire [(3'h6):(1'h0)] wire19;
  wire signed [(4'h9):(1'h0)] wire18;
  wire signed [(2'h2):(1'h0)] wire17;
  wire signed [(4'hb):(1'h0)] wire16;
  wire signed [(4'hb):(1'h0)] wire9;
  reg signed [(4'h8):(1'h0)] reg15 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg14 = (1'h0);
  reg [(3'h4):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg12 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg11 = (1'h0);
  reg [(4'h8):(1'h0)] reg10 = (1'h0);
  assign y = {wire20,
                 wire19,
                 wire18,
                 wire17,
                 wire16,
                 wire9,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 (1'h0)};
  assign wire9 = $signed((&(((8'h9c) > wire8) > $unsigned(wire5))));
  always
    @(posedge clk) begin
      if ($unsigned({((wire6 || wire9) ?
              (wire9 ? wire6 : wire7) : $unsigned(wire9))}))
        begin
          if ((^(!$signed((|wire9)))))
            begin
              reg10 <= $signed($unsigned(($unsigned((8'haf)) != $unsigned(wire6))));
              reg11 <= (8'ha6);
              reg12 <= (|{((8'ha0) ? (~&wire6) : wire7[(3'h6):(3'h4)])});
            end
          else
            begin
              reg10 <= (^{wire7[(2'h3):(2'h3)]});
            end
          reg13 <= wire6[(1'h0):(1'h0)];
        end
      else
        begin
          reg10 <= (+wire6[(1'h0):(1'h0)]);
          reg11 <= $unsigned($signed($unsigned(wire8)));
        end
      reg14 <= ($unsigned(($signed(reg13) ? (&wire7) : reg10)) ?
          (((wire7 ? reg12 : wire8) ? (~^reg11) : (~^wire5)) ?
              {$signed(wire6)} : $unsigned($unsigned(reg12))) : {wire5});
      reg15 <= (~&{$unsigned(wire6[(2'h2):(1'h0)])});
    end
  assign wire16 = wire5;
  assign wire17 = ($unsigned((wire16[(1'h0):(1'h0)] ^ (wire7 ?
                          wire6 : wire16))) ?
                      wire16 : $unsigned($unsigned((reg10 ? reg14 : wire16))));
  assign wire18 = wire9[(1'h1):(1'h0)];
  assign wire19 = (-(|(wire18 ?
                      (reg10 ? wire7 : reg10) : (reg10 ? wire18 : wire5))));
  assign wire20 = $signed(((~&$unsigned(wire9)) == wire8));
endmodule