(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h5d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire0;
  input wire [(3'h7):(1'h0)] wire1;
  input wire [(3'h6):(1'h0)] wire2;
  input wire [(4'h9):(1'h0)] wire3;
  wire [(3'h4):(1'h0)] wire68;
  wire signed [(4'h9):(1'h0)] wire67;
  wire [(4'h8):(1'h0)] wire66;
  wire signed [(4'h9):(1'h0)] wire65;
  wire [(4'hb):(1'h0)] wire64;
  wire [(4'h8):(1'h0)] wire60;
  wire signed [(4'hb):(1'h0)] wire58;
  reg signed [(4'ha):(1'h0)] reg63 = (1'h0);
  reg [(2'h3):(1'h0)] reg62 = (1'h0);
  reg [(3'h6):(1'h0)] reg61 = (1'h0);
  reg [(4'ha):(1'h0)] reg4 = (1'h0);
  reg [(2'h3):(1'h0)] reg5 = (1'h0);
  assign y = {wire68,
                 wire67,
                 wire66,
                 wire65,
                 wire64,
                 wire60,
                 wire58,
                 reg63,
                 reg62,
                 reg61,
                 reg4,
                 reg5,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= $signed(wire1);
      reg5 <= {{($unsigned(wire3) ? $signed(wire1) : ((8'ha3) != reg4))}};
    end
  module6 #() modinst59 (.wire7(wire1), .y(wire58), .clk(clk), .wire8(wire0), .wire9(reg4), .wire10(wire3));
  assign wire60 = $signed(wire3);
  always
    @(posedge clk) begin
      reg61 <= ($unsigned((reg5[(2'h3):(1'h1)] ?
              wire58[(4'hb):(3'h7)] : $signed((8'hac)))) ?
          $unsigned(((~|wire2) > {(8'h9f)})) : (~&((+wire2) ?
              (^~(8'ha6)) : (8'haf))));
      reg62 <= {wire0[(4'h9):(3'h5)]};
      reg63 <= (-$signed(wire60));
    end
  assign wire64 = ((($signed(wire2) || wire0[(3'h7):(1'h1)]) ?
                      (((8'hac) > reg61) | (&(8'h9d))) : wire60[(1'h1):(1'h0)]) * reg5);
  assign wire65 = (~&(~&reg61[(2'h2):(1'h0)]));
  assign wire66 = (^~({wire64[(1'h0):(1'h0)]} + (reg63 >= {wire3})));
  assign wire67 = reg61;
  assign wire68 = reg4;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module6
#(parameter param57 = ((((^~(8'ha0)) ? {(8'ha4)} : (&(8'h9c))) < (((8'ha1) >> (8'hab)) >= ((8'ha0) ? (8'ha9) : (8'hae)))) ^~ (({(8'ha2)} + ((8'ha4) ? (8'hb0) : (8'hab))) == (~&((8'h9c) ? (8'ha1) : (8'hab))))))
(y, clk, wire10, wire9, wire8, wire7);
  output wire [(32'h2f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire10;
  input wire [(4'ha):(1'h0)] wire9;
  input wire [(4'h9):(1'h0)] wire8;
  input wire signed [(3'h7):(1'h0)] wire7;
  wire signed [(3'h5):(1'h0)] wire56;
  wire signed [(4'h8):(1'h0)] wire53;
  wire signed [(3'h6):(1'h0)] wire51;
  wire signed [(4'ha):(1'h0)] wire49;
  wire [(3'h7):(1'h0)] wire30;
  reg [(4'ha):(1'h0)] reg55 = (1'h0);
  assign y = {wire56, wire53, wire51, wire49, wire30, reg55, (1'h0)};
  module11 #() modinst31 (wire30, clk, wire8, wire7, wire10, wire9);
  module32 #() modinst50 (.wire33(wire10), .wire35(wire7), .clk(clk), .wire36(wire9), .y(wire49), .wire34(wire8));
  module11 #() modinst52 (.wire13(wire9), .clk(clk), .wire14(wire7), .wire12(wire8), .wire15(wire30), .y(wire51));
  module32 #() modinst54 (.wire33(wire8), .wire36(wire49), .y(wire53), .wire35(wire30), .clk(clk), .wire34(wire10));
  always
    @(posedge clk) begin
      reg55 <= wire8[(3'h7):(3'h5)];
    end
  assign wire56 = {$signed((~&(wire8 > wire53)))};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module32
#(parameter param48 = {(!((-(8'haa)) != ((8'ha1) == (8'haa))))})
(y, clk, wire36, wire35, wire34, wire33);
  output wire [(32'h44):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire36;
  input wire signed [(3'h7):(1'h0)] wire35;
  input wire signed [(3'h4):(1'h0)] wire34;
  input wire [(4'h8):(1'h0)] wire33;
  wire [(2'h3):(1'h0)] wire47;
  wire [(3'h6):(1'h0)] wire46;
  wire [(4'hb):(1'h0)] wire45;
  wire [(3'h6):(1'h0)] wire44;
  wire [(3'h6):(1'h0)] wire43;
  wire signed [(3'h6):(1'h0)] wire42;
  wire [(3'h5):(1'h0)] wire41;
  wire [(4'h9):(1'h0)] wire38;
  wire [(4'h9):(1'h0)] wire37;
  reg signed [(2'h3):(1'h0)] reg40 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg39 = (1'h0);
  assign y = {wire47,
                 wire46,
                 wire45,
                 wire44,
                 wire43,
                 wire42,
                 wire41,
                 wire38,
                 wire37,
                 reg40,
                 reg39,
                 (1'h0)};
  assign wire37 = wire36;
  assign wire38 = (~|(!wire36[(3'h5):(1'h0)]));
  always
    @(posedge clk) begin
      reg39 <= (~&wire37);
      reg40 <= $signed($signed(wire37));
    end
  assign wire41 = wire37[(4'h8):(2'h2)];
  assign wire42 = (|{$signed(wire37)});
  assign wire43 = {(&$signed((wire34 ? (8'ha4) : wire41)))};
  assign wire44 = (wire38[(3'h6):(3'h4)] ?
                      ($signed(reg39[(2'h2):(1'h1)]) * $unsigned(wire38)) : (!reg40));
  assign wire45 = (((!(!wire44)) | wire41[(3'h4):(1'h1)]) ?
                      {((wire33 << wire35) ?
                              {wire42} : (^~wire33))} : (($unsigned(reg40) ?
                          wire36[(3'h5):(3'h4)] : (!reg39)) == wire37[(4'h9):(3'h4)]));
  assign wire46 = ($unsigned($signed((wire36 >> (8'h9f)))) ?
                      (~$unsigned((~^wire43))) : $unsigned($signed($unsigned(wire33))));
  assign wire47 = ((((wire38 ? wire37 : wire35) && {reg39}) ?
                      wire42 : (wire36[(3'h4):(1'h0)] | (wire43 + (8'hab)))) - wire46);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11  (y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h66):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire15;
  input wire signed [(3'h5):(1'h0)] wire14;
  input wire signed [(4'h9):(1'h0)] wire13;
  input wire [(4'h9):(1'h0)] wire12;
  wire signed [(4'h8):(1'h0)] wire29;
  wire [(4'ha):(1'h0)] wire24;
  wire signed [(4'hb):(1'h0)] wire23;
  wire signed [(3'h6):(1'h0)] wire22;
  wire signed [(2'h2):(1'h0)] wire21;
  wire signed [(3'h7):(1'h0)] wire20;
  wire signed [(4'h9):(1'h0)] wire19;
  wire [(3'h7):(1'h0)] wire18;
  wire signed [(3'h7):(1'h0)] wire17;
  wire [(4'h8):(1'h0)] wire16;
  reg [(3'h7):(1'h0)] reg28 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg27 = (1'h0);
  reg [(4'h8):(1'h0)] reg26 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg25 = (1'h0);
  assign y = {wire29,
                 wire24,
                 wire23,
                 wire22,
                 wire21,
                 wire20,
                 wire19,
                 wire18,
                 wire17,
                 wire16,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 (1'h0)};
  assign wire16 = {(-(wire12 + {wire13}))};
  assign wire17 = {(+wire13)};
  assign wire18 = $unsigned(wire17);
  assign wire19 = $signed((~($unsigned(wire14) ?
                      (wire13 ? wire16 : (8'hae)) : $signed(wire12))));
  assign wire20 = $unsigned({(|(!wire16))});
  assign wire21 = (wire18[(2'h2):(1'h0)] << $unsigned({$signed((8'ha4))}));
  assign wire22 = wire20[(3'h4):(2'h2)];
  assign wire23 = wire19[(4'h8):(2'h2)];
  assign wire24 = $signed((^~wire20));
  always
    @(posedge clk) begin
      reg25 <= (&wire12[(1'h0):(1'h0)]);
    end
  always
    @(posedge clk) begin
      reg26 <= $signed((((reg25 ?
          wire20 : wire20) == (wire21 ^~ wire18)) >> $signed((|wire13))));
      reg27 <= wire22[(3'h4):(1'h0)];
    end
  always
    @(posedge clk) begin
      reg28 <= wire19;
    end
  assign wire29 = (!(8'ha5));
endmodule