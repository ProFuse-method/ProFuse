(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h39):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h2):(1'h0)] wire3;
  input wire signed [(4'h8):(1'h0)] wire2;
  input wire [(4'h9):(1'h0)] wire1;
  input wire [(4'ha):(1'h0)] wire0;
  wire signed [(4'h8):(1'h0)] wire37;
  wire [(2'h3):(1'h0)] wire36;
  wire signed [(3'h7):(1'h0)] wire35;
  wire signed [(4'h8):(1'h0)] wire33;
  wire signed [(3'h7):(1'h0)] wire31;
  wire [(2'h3):(1'h0)] wire5;
  wire signed [(4'ha):(1'h0)] wire4;
  reg [(4'ha):(1'h0)] reg34 = (1'h0);
  assign y = {wire37,
                 wire36,
                 wire35,
                 wire33,
                 wire31,
                 wire5,
                 wire4,
                 reg34,
                 (1'h0)};
  assign wire4 = (-(~^(!wire0[(3'h4):(2'h3)])));
  assign wire5 = (^wire3[(1'h0):(1'h0)]);
  module6 #() modinst32 (.wire9(wire2), .wire8(wire0), .wire7(wire1), .y(wire31), .wire10(wire4), .clk(clk));
  assign wire33 = (^~$signed({$signed(wire3)}));
  always
    @(posedge clk) begin
      reg34 <= ((~|(wire0 << $signed(wire5))) < ($signed(wire4[(1'h0):(1'h0)]) ?
          {wire2[(2'h3):(2'h3)]} : $signed(wire4[(2'h3):(2'h3)])));
    end
  assign wire35 = $signed((-(&(8'ha7))));
  assign wire36 = (^~wire35[(1'h0):(1'h0)]);
  assign wire37 = (reg34 ?
                      ((8'h9e) ?
                          ((wire36 && wire1) ?
                              wire0[(4'ha):(3'h4)] : (-wire35)) : wire0) : wire5);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module6
#(parameter param30 = ((-{(^~(8'hac))}) >> (&((^~(8'haf)) ? ((8'hab) ? (8'hab) : (8'ha0)) : {(8'had)}))))
(y, clk, wire10, wire9, wire8, wire7);
  output wire [(32'h23):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire10;
  input wire [(4'h8):(1'h0)] wire9;
  input wire [(4'ha):(1'h0)] wire8;
  input wire signed [(4'h9):(1'h0)] wire7;
  wire signed [(3'h4):(1'h0)] wire29;
  wire [(2'h2):(1'h0)] wire27;
  wire signed [(3'h7):(1'h0)] wire25;
  wire signed [(4'ha):(1'h0)] wire11;
  reg [(4'hb):(1'h0)] reg28 = (1'h0);
  assign y = {wire29, wire27, wire25, wire11, reg28, (1'h0)};
  assign wire11 = ((^~{((8'h9c) * wire9)}) <= wire9[(3'h6):(3'h4)]);
  module12 #() modinst26 (.wire15(wire8), .wire14(wire11), .clk(clk), .wire13(wire10), .y(wire25), .wire16(wire9));
  assign wire27 = (^(wire10 || $signed(wire9)));
  always
    @(posedge clk) begin
      reg28 <= ($signed(((!wire9) ? (~&(8'h9c)) : (wire25 * wire25))) ?
          (($signed(wire27) ?
              $signed((8'had)) : wire10) >>> {wire8}) : $unsigned($signed(wire8)));
    end
  assign wire29 = ($unsigned(wire27) ?
                      (~|wire27[(1'h1):(1'h1)]) : $signed({wire25[(1'h0):(1'h0)]}));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module12  (y, clk, wire16, wire15, wire14, wire13);
  output wire [(32'h32):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire16;
  input wire signed [(4'ha):(1'h0)] wire15;
  input wire signed [(4'ha):(1'h0)] wire14;
  input wire [(4'ha):(1'h0)] wire13;
  wire signed [(3'h4):(1'h0)] wire24;
  wire [(4'ha):(1'h0)] wire20;
  wire [(3'h6):(1'h0)] wire19;
  wire [(3'h4):(1'h0)] wire18;
  wire [(3'h6):(1'h0)] wire17;
  reg signed [(4'ha):(1'h0)] reg23 = (1'h0);
  reg [(3'h5):(1'h0)] reg22 = (1'h0);
  reg [(3'h4):(1'h0)] reg21 = (1'h0);
  assign y = {wire24,
                 wire20,
                 wire19,
                 wire18,
                 wire17,
                 reg23,
                 reg22,
                 reg21,
                 (1'h0)};
  assign wire17 = wire16;
  assign wire18 = ($signed((-$unsigned(wire16))) ?
                      $unsigned((8'h9e)) : (^~((wire13 ?
                          wire15 : wire13) < (wire13 & wire16))));
  assign wire19 = wire17[(2'h2):(1'h1)];
  assign wire20 = wire18;
  always
    @(posedge clk) begin
      reg21 <= $unsigned($signed(wire17[(2'h3):(2'h2)]));
      reg22 <= ((~^((wire15 != wire17) * (~(8'hae)))) & ((^$unsigned(wire18)) ?
          (wire20 | wire16) : wire14[(4'ha):(3'h5)]));
      reg23 <= ((~^wire16[(3'h7):(1'h1)]) ?
          $unsigned(wire18[(1'h1):(1'h0)]) : wire14);
    end
  assign wire24 = wire19;
endmodule