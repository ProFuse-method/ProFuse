(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param71 = (|(-((8'hac) - ((8'hab) ? (8'ha3) : (8'h9c))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h31):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire3;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire0;
  wire [(3'h4):(1'h0)] wire69;
  wire [(3'h4):(1'h0)] wire68;
  wire signed [(3'h7):(1'h0)] wire67;
  wire signed [(4'hb):(1'h0)] wire65;
  wire signed [(4'hb):(1'h0)] wire63;
  wire [(4'hb):(1'h0)] wire4;
  assign y = {wire69, wire68, wire67, wire65, wire63, wire4, (1'h0)};
  assign wire4 = wire0[(1'h1):(1'h0)];
  module5 #() modinst64 (.wire6(wire1), .wire9(wire4), .y(wire63), .wire8(wire0), .wire7(wire2), .clk(clk));
  module10 #() modinst66 (.y(wire65), .wire14(wire4), .wire11(wire0), .wire12(wire3), .wire13(wire1), .clk(clk));
  assign wire67 = $signed((-$signed($signed((8'haa)))));
  assign wire68 = (&wire2[(2'h3):(2'h2)]);
  module5 #() modinst70 (.wire8(wire63), .y(wire69), .wire9(wire65), .wire7(wire1), .wire6(wire4), .clk(clk));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module5
#(parameter param62 = (({((8'h9f) | (8'had))} <= (((8'had) ? (8'h9d) : (8'ha2)) < {(8'ha8)})) ? {((-(8'h9c)) ? ((8'haa) ? (8'ha3) : (8'had)) : {(8'ha4)})} : ((-{(8'ha5)}) ? (!(~(8'haa))) : (^((8'had) ? (8'h9e) : (8'ha0))))))
(y, clk, wire9, wire8, wire7, wire6);
  output wire [(32'h5c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire9;
  input wire [(4'hb):(1'h0)] wire8;
  input wire signed [(4'ha):(1'h0)] wire7;
  input wire signed [(4'ha):(1'h0)] wire6;
  wire [(3'h5):(1'h0)] wire58;
  wire [(3'h5):(1'h0)] wire57;
  wire signed [(4'ha):(1'h0)] wire56;
  wire signed [(3'h5):(1'h0)] wire54;
  wire [(3'h7):(1'h0)] wire53;
  wire signed [(4'h9):(1'h0)] wire52;
  wire signed [(4'hb):(1'h0)] wire51;
  wire [(2'h3):(1'h0)] wire49;
  wire [(4'h9):(1'h0)] wire47;
  wire [(3'h4):(1'h0)] wire29;
  reg [(4'ha):(1'h0)] reg61 = (1'h0);
  reg [(2'h3):(1'h0)] reg60 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg59 = (1'h0);
  assign y = {wire58,
                 wire57,
                 wire56,
                 wire54,
                 wire53,
                 wire52,
                 wire51,
                 wire49,
                 wire47,
                 wire29,
                 reg61,
                 reg60,
                 reg59,
                 (1'h0)};
  module10 #() modinst30 (.wire14(wire6), .y(wire29), .wire11(wire9), .wire13(wire7), .wire12(wire8), .clk(clk));
  module31 #() modinst48 (wire47, clk, wire29, wire8, wire9, wire7);
  module31 #() modinst50 (wire49, clk, wire7, wire6, wire9, wire47);
  assign wire51 = wire6[(4'ha):(1'h1)];
  assign wire52 = $unsigned((&$signed(((8'h9d) ~^ wire51))));
  assign wire53 = wire49[(1'h1):(1'h1)];
  module31 #() modinst55 (.wire33(wire52), .wire32(wire47), .wire35(wire8), .wire34(wire9), .y(wire54), .clk(clk));
  assign wire56 = $signed(wire7);
  assign wire57 = ($signed(wire52[(3'h7):(1'h0)]) + wire47[(3'h4):(1'h0)]);
  assign wire58 = (^~(wire8[(2'h2):(1'h0)] == wire49));
  always
    @(posedge clk) begin
      if ($unsigned(wire56[(2'h2):(2'h2)]))
        begin
          reg59 <= (^(~^((wire6 != (8'ha8)) - (~^wire56))));
          reg60 <= (|{(wire56[(3'h6):(1'h1)] ? wire7 : wire6)});
          reg61 <= (wire6[(3'h7):(3'h5)] ?
              {(8'ha2)} : ({wire6} && $unsigned($unsigned(wire51))));
        end
      else
        begin
          reg59 <= reg59;
          reg60 <= $unsigned(wire52);
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module31
#(parameter param46 = ((&(~&(!(8'ha8)))) < ((+{(8'ha5)}) << (((8'hae) - (8'haa)) & ((8'ha7) * (8'ha8))))))
(y, clk, wire35, wire34, wire33, wire32);
  output wire [(32'h42):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire35;
  input wire [(3'h6):(1'h0)] wire34;
  input wire signed [(3'h7):(1'h0)] wire33;
  input wire [(4'h9):(1'h0)] wire32;
  wire signed [(2'h2):(1'h0)] wire44;
  wire [(2'h2):(1'h0)] wire43;
  wire [(3'h6):(1'h0)] wire42;
  wire [(3'h7):(1'h0)] wire41;
  wire signed [(4'h8):(1'h0)] wire40;
  wire signed [(3'h6):(1'h0)] wire36;
  reg [(3'h6):(1'h0)] reg45 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg39 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg38 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg37 = (1'h0);
  assign y = {wire44,
                 wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire36,
                 reg45,
                 reg39,
                 reg38,
                 reg37,
                 (1'h0)};
  assign wire36 = (&(wire33[(1'h1):(1'h0)] ?
                      (+wire32[(2'h2):(2'h2)]) : $signed((wire33 ?
                          (8'hae) : wire32))));
  always
    @(posedge clk) begin
      reg37 <= (~&{{(wire34 ? wire33 : (8'ha5))}});
      reg38 <= wire36[(1'h0):(1'h0)];
      reg39 <= $unsigned((+$signed($signed(wire33))));
    end
  assign wire40 = wire36;
  assign wire41 = (8'h9e);
  assign wire42 = $unsigned(((reg38 < (~&(8'h9c))) >>> ((wire40 == reg38) ?
                      $unsigned(wire34) : {wire41})));
  assign wire43 = (reg37[(3'h7):(1'h1)] ?
                      {wire34[(2'h3):(1'h1)]} : {$signed(wire33)});
  assign wire44 = (wire34[(3'h5):(2'h2)] >> $unsigned(reg39[(4'hb):(4'h8)]));
  always
    @(posedge clk) begin
      reg45 <= $signed($signed(wire44));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10
#(parameter param28 = (^~{(-((8'ha5) + (8'h9c)))}))
(y, clk, wire14, wire13, wire12, wire11);
  output wire [(32'h50):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire14;
  input wire signed [(4'ha):(1'h0)] wire13;
  input wire signed [(4'hb):(1'h0)] wire12;
  input wire [(4'hb):(1'h0)] wire11;
  wire signed [(4'h8):(1'h0)] wire19;
  wire signed [(2'h3):(1'h0)] wire18;
  wire signed [(3'h7):(1'h0)] wire16;
  wire [(3'h5):(1'h0)] wire15;
  reg signed [(2'h3):(1'h0)] reg27 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg26 = (1'h0);
  reg [(4'hb):(1'h0)] reg25 = (1'h0);
  reg [(4'ha):(1'h0)] reg24 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg22 = (1'h0);
  reg [(3'h5):(1'h0)] reg21 = (1'h0);
  reg [(2'h3):(1'h0)] reg20 = (1'h0);
  reg [(3'h5):(1'h0)] reg17 = (1'h0);
  assign y = {wire19,
                 wire18,
                 wire16,
                 wire15,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 reg20,
                 reg17,
                 (1'h0)};
  assign wire15 = $unsigned(wire12[(2'h3):(2'h3)]);
  assign wire16 = $signed(wire12[(3'h7):(3'h4)]);
  always
    @(posedge clk) begin
      reg17 <= $unsigned((~|$unsigned((|wire11))));
    end
  assign wire18 = {$signed($signed((wire16 ? wire11 : reg17)))};
  assign wire19 = wire14[(3'h6):(2'h3)];
  always
    @(posedge clk) begin
      if ((((&$unsigned((8'ha8))) - wire13) ?
          wire19[(4'h8):(3'h5)] : {($unsigned(reg17) > {(8'ha9)})}))
        begin
          reg20 <= {(wire13 ?
                  (wire13 ?
                      {(8'ha3)} : (wire12 ? wire14 : reg17)) : $signed((wire15 ?
                      wire14 : wire14)))};
          reg21 <= ($signed($unsigned((wire19 >> reg20))) ?
              $unsigned(($signed(wire18) && $unsigned(wire14))) : wire14);
          reg22 <= ($unsigned({wire19[(3'h6):(3'h6)]}) ?
              $signed(wire14) : (+wire14));
        end
      else
        begin
          reg20 <= $unsigned($signed((8'ha8)));
        end
      reg23 <= wire14[(4'h8):(1'h0)];
      reg24 <= wire13[(3'h4):(2'h2)];
    end
  always
    @(posedge clk) begin
      reg25 <= wire12[(3'h5):(3'h4)];
      reg26 <= ({(wire11 ? {reg22} : wire15)} ?
          $unsigned((|reg21[(3'h4):(1'h1)])) : ($unsigned((&reg21)) << (~^$unsigned((8'ha8)))));
    end
  always
    @(posedge clk) begin
      reg27 <= $unsigned($unsigned(wire12));
    end
endmodule