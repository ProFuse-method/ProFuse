(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h7c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire3;
  input wire signed [(3'h7):(1'h0)] wire2;
  input wire signed [(4'h9):(1'h0)] wire1;
  input wire [(4'h8):(1'h0)] wire0;
  wire [(4'ha):(1'h0)] wire42;
  wire signed [(4'h9):(1'h0)] wire41;
  wire [(4'hb):(1'h0)] wire40;
  wire [(3'h7):(1'h0)] wire38;
  wire [(4'h8):(1'h0)] wire15;
  wire signed [(4'ha):(1'h0)] wire14;
  wire signed [(3'h5):(1'h0)] wire13;
  reg signed [(3'h6):(1'h0)] reg12 = (1'h0);
  reg [(4'ha):(1'h0)] reg11 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg10 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg9 = (1'h0);
  reg [(4'h9):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg7 = (1'h0);
  reg [(2'h3):(1'h0)] reg6 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg5 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg4 = (1'h0);
  assign y = {wire42,
                 wire41,
                 wire40,
                 wire38,
                 wire15,
                 wire14,
                 wire13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= $unsigned({((wire1 ? wire3 : wire0) ^~ (wire0 >= wire0))});
    end
  always
    @(posedge clk) begin
      if ($signed(wire1))
        begin
          reg5 <= (wire0 || (~&((wire0 ^ wire0) <= (!(8'h9e)))));
          reg6 <= ((^wire0) & $unsigned(wire1));
          reg7 <= reg6[(2'h3):(1'h0)];
        end
      else
        begin
          reg5 <= (&((8'ha1) ? {(wire3 + reg5)} : (8'hb0)));
          if ($unsigned(($unsigned(wire0) ?
              $unsigned((reg6 ~^ wire3)) : (reg6 ? $signed(wire3) : wire3))))
            begin
              reg6 <= wire2;
            end
          else
            begin
              reg6 <= $signed(($signed(wire0[(4'h8):(2'h3)]) | $unsigned((reg5 * reg5))));
            end
          reg7 <= (&((^~$signed(reg6)) >> (reg6[(2'h2):(2'h2)] < ((8'hb0) ?
              wire3 : (8'haf)))));
        end
    end
  always
    @(posedge clk) begin
      reg8 <= $unsigned(((~|wire3[(3'h4):(3'h4)]) < ($signed(reg5) ?
          $signed(wire1) : $signed(reg5))));
      reg9 <= $unsigned((reg6 ? reg4 : $signed((wire1 ? wire1 : reg6))));
      if (((((reg4 - wire1) >> (reg7 * wire0)) == (reg8[(3'h7):(1'h0)] ?
              {wire3} : $signed(reg8))) ?
          reg8 : wire2[(2'h3):(2'h2)]))
        begin
          reg10 <= (wire1 <<< ((8'ha3) | (wire3[(3'h4):(3'h4)] ^ (wire1 ?
              reg6 : wire3))));
        end
      else
        begin
          if ((((!(wire2 & (8'ha3))) + reg7) ?
              reg6[(2'h3):(2'h2)] : (reg4 ?
                  reg4 : ((reg10 ? reg5 : reg10) ?
                      $signed(reg10) : ((8'hb0) ? wire2 : (8'ha6))))))
            begin
              reg10 <= (((^$signed(reg9)) <= $unsigned((&wire0))) ?
                  reg8 : reg4);
              reg11 <= (reg10 ?
                  $unsigned(($unsigned(reg9) ?
                      $unsigned(wire1) : reg7[(1'h1):(1'h0)])) : {$signed((reg9 ?
                          reg10 : reg6))});
              reg12 <= $unsigned((~^(reg10[(1'h1):(1'h0)] <= (reg6 ?
                  (8'haf) : wire3))));
            end
          else
            begin
              reg10 <= reg5[(3'h6):(2'h3)];
              reg11 <= ((&((~reg9) >>> reg8[(1'h0):(1'h0)])) ?
                  $unsigned(reg12) : (($unsigned(wire1) ?
                      (8'h9e) : $unsigned(wire3)) & $unsigned(reg9[(1'h0):(1'h0)])));
              reg12 <= $unsigned({$signed((reg7 ? wire3 : reg8))});
            end
        end
    end
  assign wire13 = $signed(reg12);
  assign wire14 = (-$unsigned($unsigned({(8'h9c)})));
  assign wire15 = {(wire14 << ($signed(wire14) <= {wire3}))};
  module16 #() modinst39 (.wire18(wire15), .wire20(wire2), .clk(clk), .wire17(wire13), .y(wire38), .wire19(wire3));
  assign wire40 = (~$signed(reg12));
  assign wire41 = {wire1};
  assign wire42 = reg12[(3'h4):(1'h1)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module16
#(parameter param37 = ({((^~(8'ha9)) || (-(8'ha7)))} + ({(+(8'haa))} ? (~^(~^(8'ha9))) : (~^(-(8'h9d))))))
(y, clk, wire20, wire19, wire18, wire17);
  output wire [(32'h76):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire20;
  input wire signed [(2'h2):(1'h0)] wire19;
  input wire [(4'h8):(1'h0)] wire18;
  input wire signed [(3'h5):(1'h0)] wire17;
  wire [(4'h8):(1'h0)] wire36;
  wire signed [(4'h8):(1'h0)] wire35;
  wire signed [(2'h3):(1'h0)] wire34;
  wire [(4'h9):(1'h0)] wire33;
  reg [(2'h2):(1'h0)] reg32 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg31 = (1'h0);
  reg [(4'hb):(1'h0)] reg30 = (1'h0);
  reg [(3'h6):(1'h0)] reg29 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg28 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg27 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg26 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg25 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg24 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg22 = (1'h0);
  reg [(4'h8):(1'h0)] reg21 = (1'h0);
  assign y = {wire36,
                 wire35,
                 wire34,
                 wire33,
                 reg32,
                 reg31,
                 reg30,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (wire19[(2'h2):(1'h1)])
        begin
          reg21 <= ($signed($signed($signed((8'ha4)))) ^~ $signed($signed(wire17)));
        end
      else
        begin
          reg21 <= (~|reg21[(4'h8):(1'h1)]);
          reg22 <= reg21[(4'h8):(3'h7)];
          reg23 <= $unsigned($signed(wire19[(1'h1):(1'h1)]));
        end
      reg24 <= (wire20[(2'h3):(2'h2)] >>> (~|$signed(wire17)));
    end
  always
    @(posedge clk) begin
      if ((wire18 ?
          ((reg21 ? (&reg22) : (wire18 ? reg22 : wire20)) ?
              (-reg24[(1'h0):(1'h0)]) : ({wire18} & (reg23 <<< reg24))) : $unsigned((reg22[(3'h5):(2'h2)] ?
              reg22 : (wire19 ? reg23 : wire17)))))
        begin
          if (wire19[(1'h0):(1'h0)])
            begin
              reg25 <= ((wire18[(2'h3):(2'h2)] < ($unsigned(reg24) ?
                      (wire19 ? wire19 : (8'had)) : $unsigned(wire18))) ?
                  {(((8'ha7) ?
                          (8'ha8) : (8'ha1)) > (wire17 || wire19))} : ($unsigned((wire20 - (8'hac))) && (+wire20[(1'h0):(1'h0)])));
              reg26 <= (wire19[(1'h1):(1'h1)] - $unsigned((((8'ha1) >> reg24) ?
                  (+reg25) : {wire19})));
            end
          else
            begin
              reg25 <= reg22;
              reg26 <= reg23[(3'h4):(2'h3)];
            end
          if ($signed(reg23[(1'h1):(1'h1)]))
            begin
              reg27 <= reg26;
            end
          else
            begin
              reg27 <= $signed(($unsigned((-reg22)) & wire20[(2'h2):(1'h0)]));
              reg28 <= (&reg27);
            end
          reg29 <= (^{(wire17 ? (wire17 ^~ reg24) : $signed(reg27))});
        end
      else
        begin
          reg25 <= (+(($unsigned(reg24) || $signed(reg22)) ?
              ({reg25} ?
                  wire17[(3'h4):(1'h1)] : $signed(reg28)) : $unsigned(reg25)));
          if ((~$unsigned($signed((+reg23)))))
            begin
              reg26 <= $unsigned($signed({(~|wire20)}));
            end
          else
            begin
              reg26 <= ($unsigned((|(reg27 >>> reg28))) ?
                  $unsigned((8'hb0)) : ((8'ha1) != (~&(reg25 + wire17))));
            end
          reg27 <= reg29;
        end
      reg30 <= ($unsigned(((reg24 ? wire17 : wire19) < (&(8'h9c)))) ?
          ($unsigned((reg27 ^~ reg28)) ? wire17 : reg21) : (|{{wire20}}));
      reg31 <= (^({reg25} != $unsigned(reg26[(4'h9):(4'h8)])));
    end
  always
    @(posedge clk) begin
      reg32 <= $unsigned(($signed($signed(wire17)) ?
          ({reg26} == {wire18}) : (~^(+reg29))));
    end
  assign wire33 = $signed($signed(reg32[(1'h1):(1'h1)]));
  assign wire34 = reg21[(3'h4):(2'h2)];
  assign wire35 = $signed((!reg27[(1'h0):(1'h0)]));
  assign wire36 = (wire17[(1'h0):(1'h0)] ?
                      (^((wire19 - reg25) ~^ $unsigned(reg25))) : $unsigned((reg27[(1'h0):(1'h0)] ?
                          $signed(reg25) : {wire34})));
endmodule