(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param25 = ((~|(!(&(8'had)))) & {(8'hab)}))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h44):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire0;
  input wire [(4'ha):(1'h0)] wire1;
  input wire signed [(2'h3):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire3;
  wire signed [(4'hb):(1'h0)] wire18;
  wire [(2'h3):(1'h0)] wire4;
  wire signed [(3'h5):(1'h0)] wire16;
  reg signed [(4'hb):(1'h0)] reg24 = (1'h0);
  reg [(2'h3):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg22 = (1'h0);
  reg [(2'h3):(1'h0)] reg21 = (1'h0);
  reg [(3'h6):(1'h0)] reg20 = (1'h0);
  reg [(3'h4):(1'h0)] reg19 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg5 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg6 = (1'h0);
  assign y = {wire18,
                 wire4,
                 wire16,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 reg20,
                 reg19,
                 reg5,
                 reg6,
                 (1'h0)};
  assign wire4 = $unsigned({$signed(((8'ha5) ^ wire3))});
  always
    @(posedge clk) begin
      if ($signed($signed(wire1)))
        begin
          reg5 <= wire0[(1'h1):(1'h0)];
        end
      else
        begin
          reg5 <= (8'had);
        end
      reg6 <= {wire0[(3'h4):(1'h0)]};
    end
  module7 #() modinst17 (.wire9(reg5), .y(wire16), .wire10(wire3), .wire11(wire0), .clk(clk), .wire8(wire1));
  assign wire18 = wire1[(3'h4):(3'h4)];
  always
    @(posedge clk) begin
      if ({(~&$signed((wire18 ? (8'haf) : wire16)))})
        begin
          reg19 <= wire2[(2'h3):(2'h3)];
          if ($unsigned($unsigned(wire3[(1'h1):(1'h0)])))
            begin
              reg20 <= $unsigned(wire0);
              reg21 <= ((!$unsigned(wire18[(1'h0):(1'h0)])) ?
                  $unsigned($unsigned((~|wire18))) : wire18[(1'h0):(1'h0)]);
              reg22 <= wire2[(1'h0):(1'h0)];
            end
          else
            begin
              reg20 <= (($unsigned(reg21) ?
                  (+(wire3 ? reg22 : reg22)) : ($unsigned(wire18) ?
                      $unsigned(reg6) : (wire16 ?
                          reg20 : reg20))) ^~ ($unsigned({wire16}) ?
                  (reg6 < reg21[(1'h1):(1'h0)]) : $unsigned(wire18[(4'hb):(1'h0)])));
              reg21 <= ($unsigned(($signed(reg20) ?
                  reg21 : ((8'ha6) ? reg21 : reg20))) + (8'ha8));
              reg22 <= reg20[(3'h6):(2'h3)];
            end
          reg23 <= (~^wire18[(1'h0):(1'h0)]);
        end
      else
        begin
          reg19 <= (wire3 || reg20);
          if (wire3)
            begin
              reg20 <= ($signed({wire16[(1'h0):(1'h0)]}) - wire3);
              reg21 <= (((reg22 ?
                  wire4[(2'h3):(2'h3)] : $signed(reg23)) * (!wire1[(3'h7):(3'h6)])) | (({reg22} ?
                  (|wire4) : reg20) != (-(reg23 ? reg6 : wire2))));
              reg22 <= (|reg21[(1'h1):(1'h1)]);
            end
          else
            begin
              reg20 <= reg21[(1'h0):(1'h0)];
              reg21 <= $unsigned($unsigned(wire18[(3'h5):(1'h0)]));
              reg22 <= wire18;
            end
          reg23 <= (~^((+(~wire16)) ^~ {{(8'ha4)}}));
        end
      reg24 <= ((-$signed((reg23 > reg19))) ?
          $signed(($unsigned(reg5) >= $unsigned((8'ha1)))) : wire16[(1'h1):(1'h1)]);
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7  (y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h22):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire11;
  input wire signed [(3'h7):(1'h0)] wire10;
  input wire [(3'h4):(1'h0)] wire9;
  input wire signed [(4'ha):(1'h0)] wire8;
  wire [(2'h3):(1'h0)] wire15;
  wire [(4'ha):(1'h0)] wire14;
  wire [(4'ha):(1'h0)] wire13;
  wire signed [(4'ha):(1'h0)] wire12;
  assign y = {wire15, wire14, wire13, wire12, (1'h0)};
  assign wire12 = ((wire9[(2'h3):(1'h0)] ?
                      wire8[(3'h4):(2'h2)] : wire10) && $unsigned(wire11));
  assign wire13 = wire9;
  assign wire14 = (^~({{wire12}} <= {wire10[(1'h0):(1'h0)]}));
  assign wire15 = (((^~(wire13 ?
                      (8'ha0) : (8'ha3))) ^ $unsigned($unsigned(wire13))) ^~ wire13);
endmodule