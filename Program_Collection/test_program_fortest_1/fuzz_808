(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param304 = ({(^~((^(7'h42)) ? ((8'haf) ? (8'h9c) : (8'hab)) : (!(8'hac))))} < (-(^~(~^((8'hb8) ? (8'hbd) : (8'hb1)))))), 
parameter param305 = param304)
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h2d6):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire0;
  input wire [(5'h13):(1'h0)] wire1;
  input wire signed [(4'hd):(1'h0)] wire2;
  input wire signed [(3'h6):(1'h0)] wire3;
  wire [(4'hf):(1'h0)] wire303;
  wire signed [(3'h4):(1'h0)] wire302;
  wire signed [(3'h6):(1'h0)] wire301;
  wire [(4'hd):(1'h0)] wire300;
  wire [(5'h10):(1'h0)] wire299;
  wire signed [(5'h11):(1'h0)] wire298;
  wire [(2'h3):(1'h0)] wire297;
  wire [(5'h15):(1'h0)] wire296;
  wire [(5'h15):(1'h0)] wire4;
  wire signed [(3'h4):(1'h0)] wire5;
  wire signed [(2'h2):(1'h0)] wire44;
  wire [(4'ha):(1'h0)] wire45;
  wire signed [(3'h4):(1'h0)] wire46;
  wire [(4'hb):(1'h0)] wire47;
  wire signed [(5'h10):(1'h0)] wire287;
  wire signed [(4'hb):(1'h0)] wire289;
  wire [(3'h5):(1'h0)] wire290;
  wire signed [(4'hc):(1'h0)] wire291;
  wire [(4'he):(1'h0)] wire292;
  wire [(5'h10):(1'h0)] wire293;
  wire signed [(4'hc):(1'h0)] wire294;
  reg [(5'h12):(1'h0)] reg43 = (1'h0);
  reg [(5'h14):(1'h0)] reg40 = (1'h0);
  reg [(4'ha):(1'h0)] reg39 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg36 = (1'h0);
  reg [(4'hd):(1'h0)] reg33 = (1'h0);
  reg [(3'h7):(1'h0)] reg29 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg27 = (1'h0);
  reg [(5'h13):(1'h0)] reg22 = (1'h0);
  reg [(3'h6):(1'h0)] reg19 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg18 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg14 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg11 = (1'h0);
  reg [(5'h12):(1'h0)] reg10 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg8 = (1'h0);
  reg [(3'h6):(1'h0)] reg7 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg42 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar41 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar38 = (1'h0);
  reg [(4'ha):(1'h0)] reg37 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg35 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar34 = (1'h0);
  reg [(5'h14):(1'h0)] forvar32 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg31 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg30 = (1'h0);
  reg [(2'h3):(1'h0)] forvar28 = (1'h0);
  reg [(5'h10):(1'h0)] forvar26 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar25 = (1'h0);
  reg [(4'hf):(1'h0)] reg24 = (1'h0);
  reg [(5'h11):(1'h0)] reg23 = (1'h0);
  reg [(5'h15):(1'h0)] reg21 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar20 = (1'h0);
  reg [(5'h13):(1'h0)] reg17 = (1'h0);
  reg [(4'he):(1'h0)] forvar16 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg15 = (1'h0);
  reg [(2'h2):(1'h0)] reg13 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar12 = (1'h0);
  reg [(2'h3):(1'h0)] forvar9 = (1'h0);
  reg [(4'hd):(1'h0)] forvar6 = (1'h0);
  assign y = {wire303,
                 wire302,
                 wire301,
                 wire300,
                 wire299,
                 wire298,
                 wire297,
                 wire296,
                 wire4,
                 wire5,
                 wire44,
                 wire45,
                 wire46,
                 wire47,
                 wire287,
                 wire289,
                 wire290,
                 wire291,
                 wire292,
                 wire293,
                 wire294,
                 reg43,
                 reg40,
                 reg39,
                 reg36,
                 reg33,
                 reg29,
                 reg27,
                 reg22,
                 reg19,
                 reg18,
                 reg14,
                 reg11,
                 reg10,
                 reg8,
                 reg7,
                 reg42,
                 forvar41,
                 forvar38,
                 reg37,
                 reg35,
                 forvar34,
                 forvar32,
                 reg31,
                 reg30,
                 forvar28,
                 forvar26,
                 forvar25,
                 reg24,
                 reg23,
                 reg21,
                 forvar20,
                 reg17,
                 forvar16,
                 reg15,
                 reg13,
                 forvar12,
                 forvar9,
                 forvar6,
                 (1'h0)};
  assign wire4 = {((((!(7'h41)) != (~wire3)) ?
                         (~^(-wire3)) : (wire3 ?
                             wire0 : wire1[(2'h2):(1'h0)])) <<< wire2[(3'h5):(3'h5)]),
                     $unsigned(($unsigned((8'hbc)) ?
                         ((wire0 ?
                             wire2 : wire3) << wire3) : wire0[(2'h2):(1'h1)]))};
  assign wire5 = (^(($unsigned((~|wire4)) ^ wire3) >>> wire2));
  always
    @(posedge clk) begin
      for (forvar6 = (1'h0); (forvar6 < (3'h4)); forvar6 = (forvar6 + (1'h1)))
        begin
          reg7 <= $unsigned(wire1);
          reg8 <= wire0[(1'h1):(1'h1)];
          for (forvar9 = (1'h0); (forvar9 < (2'h2)); forvar9 = (forvar9 + (1'h1)))
            begin
              reg10 <= $signed($unsigned($unsigned(((^reg8) <<< (forvar6 < (8'hb3))))));
              reg11 <= ($unsigned({((wire1 | forvar9) || {wire0, forvar9})}) ?
                  ((~&($signed(wire4) ? $unsigned(forvar9) : forvar6)) ?
                      reg10 : (($signed(reg7) <<< ((8'hb7) * wire3)) ?
                          (&wire2) : $unsigned(reg8))) : (~^((~^(wire3 ?
                      (8'h9c) : (8'hb6))) * reg8[(5'h15):(4'he)])));
            end
          for (forvar12 = (1'h0); (forvar12 < (2'h2)); forvar12 = (forvar12 + (1'h1)))
            begin
              reg13 = reg7;
              reg14 <= {($unsigned($signed((reg13 || reg10))) ?
                      reg8[(5'h13):(4'h9)] : (-{forvar6[(4'h8):(2'h2)]}))};
              reg15 = ($signed(forvar6) || ($signed($unsigned(reg13[(1'h1):(1'h1)])) ~^ (((7'h40) > $unsigned((8'hbc))) ?
                  ($signed(wire4) ?
                      (wire5 ? reg7 : wire1) : {wire1,
                          forvar6}) : $unsigned((forvar6 ^~ forvar6)))));
            end
        end
    end
  always
    @(posedge clk) begin
      for (forvar16 = (1'h0); (forvar16 < (1'h1)); forvar16 = (forvar16 + (1'h1)))
        begin
          if ((((($unsigned((8'hb8)) ? wire0 : $unsigned(wire3)) >= (-{wire1,
                  reg7})) << (8'ha9)) ?
              wire2[(4'hd):(2'h2)] : $signed((~(^~(~(7'h42)))))))
            begin
              reg17 = reg14[(1'h0):(1'h0)];
            end
          else
            begin
              reg18 <= $unsigned($signed((((&wire5) ?
                  {wire2} : reg14[(2'h2):(1'h1)]) != reg8)));
              reg19 <= wire1[(4'h8):(4'h8)];
            end
          for (forvar20 = (1'h0); (forvar20 < (2'h3)); forvar20 = (forvar20 + (1'h1)))
            begin
              reg21 = forvar16[(3'h5):(3'h5)];
              reg22 <= (8'hb9);
              reg23 = wire4[(3'h4):(1'h1)];
              reg24 = $signed($unsigned($signed(forvar20)));
            end
        end
      for (forvar25 = (1'h0); (forvar25 < (2'h2)); forvar25 = (forvar25 + (1'h1)))
        begin
          for (forvar26 = (1'h0); (forvar26 < (2'h3)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 <= $unsigned(({wire2} ?
                  $signed((&(~|(8'hb6)))) : {(^~forvar25),
                      $unsigned($unsigned(forvar25))}));
            end
          for (forvar28 = (1'h0); (forvar28 < (3'h4)); forvar28 = (forvar28 + (1'h1)))
            begin
              reg29 <= (({wire4,
                          ($signed(forvar28) ?
                              $signed(wire1) : $signed(wire1))} ?
                      (8'hb3) : (($unsigned(forvar25) ?
                              (reg21 | wire1) : $signed(wire5)) ?
                          ($unsigned(wire5) ?
                              $unsigned(reg23) : $signed(reg10)) : reg7)) ?
                  $unsigned(((reg19[(3'h4):(1'h0)] ?
                          $signed(wire2) : (forvar26 ? wire5 : reg10)) ?
                      forvar28 : ({wire1,
                          (8'hb5)} >= (forvar26 >> reg23)))) : reg21);
              reg30 = ($unsigned(((wire0[(1'h1):(1'h1)] ?
                      ((7'h41) ? reg22 : reg24) : wire4) && $signed((wire2 ?
                      (8'hb7) : reg18)))) ?
                  (~(wire5 | reg7[(1'h1):(1'h0)])) : reg17);
              reg31 = ((reg30 ?
                  {(&$unsigned(reg30)),
                      $signed(((8'haa) ~^ (8'hab)))} : (reg22[(4'he):(3'h4)] ?
                      $signed((reg27 == reg8)) : wire1)) & ((reg22[(4'h8):(1'h1)] ?
                  ({(7'h41), reg7} ?
                      $unsigned(reg14) : $signed((8'hb8))) : ((~forvar28) ?
                      wire1 : (reg19 ? forvar20 : wire2))) > wire1));
            end
        end
      for (forvar32 = (1'h0); (forvar32 < (2'h3)); forvar32 = (forvar32 + (1'h1)))
        begin
          reg33 <= $unsigned(reg31[(2'h2):(1'h0)]);
          for (forvar34 = (1'h0); (forvar34 < (1'h1)); forvar34 = (forvar34 + (1'h1)))
            begin
              reg35 = forvar16;
              reg36 <= reg17[(2'h3):(2'h3)];
              reg37 = ((reg11 ?
                  $unsigned(reg21[(3'h7):(2'h3)]) : $unsigned(((~(8'ha7)) || reg36))) ^~ (reg21[(1'h1):(1'h0)] ?
                  wire2[(4'h8):(3'h7)] : (&$signed(forvar34))));
            end
          for (forvar38 = (1'h0); (forvar38 < (1'h1)); forvar38 = (forvar38 + (1'h1)))
            begin
              reg39 <= reg31[(3'h5):(2'h3)];
              reg40 <= {$unsigned($unsigned((~&wire3[(2'h2):(1'h0)])))};
            end
          for (forvar41 = (1'h0); (forvar41 < (3'h4)); forvar41 = (forvar41 + (1'h1)))
            begin
              reg42 = (|$unsigned($unsigned(wire0)));
              reg43 <= (-((!$signed({reg39})) ?
                  $signed($unsigned((^~forvar41))) : reg37[(4'ha):(1'h1)]));
            end
        end
    end
  assign wire44 = (~&({$unsigned(wire4[(3'h4):(1'h0)])} != {(8'ha5)}));
  assign wire45 = wire2;
  assign wire46 = $unsigned(reg22[(1'h1):(1'h0)]);
  assign wire47 = wire44[(2'h2):(2'h2)];
  module48 #() modinst288 (wire287, clk, reg18, reg22, reg43, reg33);
  assign wire289 = reg10;
  assign wire290 = reg8[(5'h13):(5'h13)];
  assign wire291 = $unsigned((!{$unsigned($unsigned((8'ha2))),
                       ((reg8 * wire5) ? $signed(reg39) : wire45)}));
  assign wire292 = ((wire44 ? reg14 : reg39) ~^ {{reg19[(3'h5):(3'h4)],
                           $signed(reg39[(1'h0):(1'h0)])},
                       reg43});
  assign wire293 = wire292;
  module114 #() modinst295 (.wire117(wire4), .y(wire294), .clk(clk), .wire116(reg7), .wire115(wire289), .wire118(reg33), .wire119(wire47));
  assign wire296 = $signed(wire46);
  assign wire297 = $unsigned((|$signed((|wire45[(3'h7):(2'h2)]))));
  assign wire298 = wire292[(4'hb):(3'h6)];
  assign wire299 = $unsigned(((reg11 ?
                       ((wire3 ? wire287 : (8'hbc)) ?
                           (&reg18) : (~wire291)) : $signed((+(8'h9c)))) == wire289[(2'h2):(2'h2)]));
  assign wire300 = ((~^(wire289 + wire293)) && $signed($signed(wire46)));
  assign wire301 = (&{$unsigned($signed({reg43})),
                       (wire45 ?
                           $unsigned((reg29 ?
                               wire3 : wire4)) : $signed(wire294[(1'h1):(1'h1)]))});
  assign wire302 = $unsigned({(8'hab)});
  assign wire303 = wire302;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module48  (y, clk, wire52, wire51, wire50, wire49);
  output wire [(32'h245):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h14):(1'h0)] wire52;
  input wire [(3'h7):(1'h0)] wire51;
  input wire [(5'h12):(1'h0)] wire50;
  input wire [(4'h9):(1'h0)] wire49;
  wire signed [(4'hd):(1'h0)] wire286;
  wire [(2'h3):(1'h0)] wire167;
  wire signed [(4'ha):(1'h0)] wire153;
  wire signed [(4'hc):(1'h0)] wire152;
  wire signed [(5'h15):(1'h0)] wire93;
  wire signed [(5'h14):(1'h0)] wire56;
  wire [(4'hd):(1'h0)] wire55;
  wire [(4'hd):(1'h0)] wire54;
  wire signed [(4'hf):(1'h0)] wire53;
  wire signed [(4'h8):(1'h0)] wire113;
  wire signed [(3'h7):(1'h0)] wire150;
  wire signed [(3'h5):(1'h0)] wire169;
  wire signed [(4'hf):(1'h0)] wire170;
  wire signed [(4'h8):(1'h0)] wire284;
  reg signed [(5'h15):(1'h0)] reg97 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg98 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg99 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg101 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg107 = (1'h0);
  reg [(3'h4):(1'h0)] reg108 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg110 = (1'h0);
  reg [(3'h6):(1'h0)] reg172 = (1'h0);
  reg signed [(4'he):(1'h0)] reg175 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg176 = (1'h0);
  reg [(4'he):(1'h0)] reg177 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg180 = (1'h0);
  reg [(3'h6):(1'h0)] reg181 = (1'h0);
  reg [(4'he):(1'h0)] reg182 = (1'h0);
  reg [(4'hf):(1'h0)] reg184 = (1'h0);
  reg [(4'hc):(1'h0)] reg185 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg186 = (1'h0);
  reg [(5'h12):(1'h0)] reg183 = (1'h0);
  reg [(2'h3):(1'h0)] reg179 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg178 = (1'h0);
  reg [(4'hd):(1'h0)] forvar174 = (1'h0);
  reg [(3'h6):(1'h0)] reg173 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg171 = (1'h0);
  reg [(4'ha):(1'h0)] reg112 = (1'h0);
  reg [(3'h4):(1'h0)] reg111 = (1'h0);
  reg [(5'h11):(1'h0)] forvar109 = (1'h0);
  reg signed [(4'he):(1'h0)] reg106 = (1'h0);
  reg [(4'hd):(1'h0)] reg105 = (1'h0);
  reg [(5'h10):(1'h0)] forvar104 = (1'h0);
  reg [(5'h14):(1'h0)] forvar103 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg102 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar100 = (1'h0);
  reg [(4'ha):(1'h0)] forvar96 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar95 = (1'h0);
  assign y = {wire286,
                 wire167,
                 wire153,
                 wire152,
                 wire93,
                 wire56,
                 wire55,
                 wire54,
                 wire53,
                 wire113,
                 wire150,
                 wire169,
                 wire170,
                 wire284,
                 reg97,
                 reg98,
                 reg99,
                 reg101,
                 reg107,
                 reg108,
                 reg110,
                 reg172,
                 reg175,
                 reg176,
                 reg177,
                 reg180,
                 reg181,
                 reg182,
                 reg184,
                 reg185,
                 reg186,
                 reg183,
                 reg179,
                 reg178,
                 forvar174,
                 reg173,
                 reg171,
                 reg112,
                 reg111,
                 forvar109,
                 reg106,
                 reg105,
                 forvar104,
                 forvar103,
                 reg102,
                 forvar100,
                 forvar96,
                 forvar95,
                 (1'h0)};
  assign wire53 = wire51[(2'h3):(1'h1)];
  assign wire54 = (-wire49);
  assign wire55 = wire49[(2'h2):(1'h0)];
  assign wire56 = $unsigned($unsigned(wire54));
  module57 #() modinst94 (.wire62(wire51), .clk(clk), .wire61(wire50), .wire59(wire49), .wire58(wire52), .wire60(wire56), .y(wire93));
  always
    @(posedge clk) begin
      for (forvar95 = (1'h0); (forvar95 < (1'h0)); forvar95 = (forvar95 + (1'h1)))
        begin
          for (forvar96 = (1'h0); (forvar96 < (3'h4)); forvar96 = (forvar96 + (1'h1)))
            begin
              reg97 <= $signed($unsigned((((wire50 ?
                  wire93 : wire56) < wire51) >> (!(8'ha2)))));
              reg98 <= {(~forvar95),
                  (($signed($signed(wire52)) ?
                          ((8'hbe) ? $signed(wire50) : (~^(8'hbe))) : wire56) ?
                      {{$signed(wire53)}} : {wire55,
                          ($signed(forvar95) ^~ {reg97})})};
            end
          reg99 <= {reg97[(4'hd):(4'ha)]};
          for (forvar100 = (1'h0); (forvar100 < (2'h2)); forvar100 = (forvar100 + (1'h1)))
            begin
              reg101 <= reg99;
              reg102 = $signed($unsigned(((forvar95 ?
                  $unsigned(reg101) : reg98) - (&reg97))));
            end
        end
      for (forvar103 = (1'h0); (forvar103 < (3'h4)); forvar103 = (forvar103 + (1'h1)))
        begin
          for (forvar104 = (1'h0); (forvar104 < (1'h1)); forvar104 = (forvar104 + (1'h1)))
            begin
              reg105 = wire53[(3'h5):(2'h2)];
              reg106 = wire50;
              reg107 <= (|reg101[(3'h4):(1'h1)]);
              reg108 <= ((~^{$unsigned(reg105), ((~reg102) - (!reg105))}) ?
                  $signed(forvar103) : reg107[(3'h7):(2'h2)]);
            end
          for (forvar109 = (1'h0); (forvar109 < (1'h1)); forvar109 = (forvar109 + (1'h1)))
            begin
              reg110 <= (8'hb3);
              reg111 = ($unsigned((!$unsigned((reg107 ? reg97 : forvar95)))) ?
                  $signed(({$signed(reg110), wire56} ?
                      {reg110} : reg102)) : (wire49[(2'h2):(2'h2)] ?
                      {($unsigned((8'h9d)) ? $signed((7'h42)) : wire49),
                          (|{wire50})} : ($unsigned((forvar103 < forvar104)) >= (!(forvar95 ?
                          (8'ha1) : wire55)))));
            end
        end
      reg112 = reg98;
    end
  assign wire113 = ($unsigned((~wire54[(2'h2):(1'h0)])) ?
                       (!(~^$signed(wire50[(3'h7):(2'h3)]))) : ({reg107,
                           $signed((wire55 ?
                               wire49 : wire54))} ~^ $unsigned(($signed(reg97) ?
                           (reg97 ~^ wire93) : wire51[(3'h5):(3'h4)]))));
  module114 #() modinst151 (.clk(clk), .wire115(reg99), .wire117(wire93), .y(wire150), .wire116(reg108), .wire119(wire50), .wire118(wire54));
  assign wire152 = {$signed($unsigned($unsigned({reg107}))),
                       (&(((8'hb6) ^~ (&reg110)) != reg97))};
  assign wire153 = ({(+$signed(((7'h42) ? wire113 : (8'ha5))))} ?
                       reg107 : (($signed(reg97) ?
                               ($unsigned(wire52) ?
                                   $unsigned(reg97) : ((8'hbd) ?
                                       reg110 : (8'ha5))) : ((~&wire93) << $unsigned(wire54))) ?
                           $unsigned(reg98) : ({{wire56, wire49},
                                   $signed(wire93)} ?
                               $unsigned($signed(wire52)) : ((reg107 < wire113) ?
                                   {wire53, (8'hbc)} : {reg99, wire113}))));
  module154 #() modinst168 (wire167, clk, wire56, wire113, wire152, wire93, wire53);
  assign wire169 = wire49;
  assign wire170 = $unsigned(wire153[(2'h2):(2'h2)]);
  always
    @(posedge clk) begin
      reg171 = (($signed($unsigned(wire170)) >> $signed(($unsigned(wire113) + {wire169,
              wire152}))) ?
          wire50 : ($signed($signed({reg98, reg110})) ?
              ((~|(wire55 ^ wire169)) ?
                  ((8'hb1) ^~ $unsigned(wire150)) : wire170) : $signed($unsigned($unsigned(reg99)))));
    end
  always
    @(posedge clk) begin
      reg172 <= wire153;
      reg173 = wire52;
      if (((^wire150) < wire55))
        begin
          for (forvar174 = (1'h0); (forvar174 < (2'h2)); forvar174 = (forvar174 + (1'h1)))
            begin
              reg175 <= (($signed($signed((wire152 * (8'h9c)))) || $unsigned(((+reg101) ?
                      reg108[(3'h4):(2'h2)] : (!wire167)))) ?
                  {(wire93 ^ $unsigned((~^(8'ha1)))),
                      wire169} : (!(!wire113[(1'h0):(1'h0)])));
              reg176 <= wire50[(4'ha):(3'h4)];
              reg177 <= wire51[(2'h3):(2'h3)];
              reg178 = wire169;
            end
        end
      else
        begin
          for (forvar174 = (1'h0); (forvar174 < (2'h2)); forvar174 = (forvar174 + (1'h1)))
            begin
              reg178 = $unsigned(reg101);
              reg179 = $unsigned((|wire152[(1'h0):(1'h0)]));
              reg180 <= wire170;
              reg181 <= $unsigned($unsigned((~((reg177 ? reg180 : reg180) ?
                  wire113 : {(8'hb7)}))));
            end
          if (wire50)
            begin
              reg182 <= (~^wire170[(3'h4):(1'h1)]);
              reg183 = $signed((~wire56[(4'hf):(3'h6)]));
            end
          else
            begin
              reg182 <= reg107;
              reg183 = ((!(wire55 ?
                  $signed((~^reg181)) : (~&reg107[(4'ha):(2'h2)]))) * (reg182[(4'hd):(4'hd)] ?
                  (^((wire52 <<< wire55) ?
                      $signed(wire113) : (wire55 ?
                          reg107 : (7'h44)))) : $signed({$signed(reg178),
                      reg175[(2'h3):(2'h3)]})));
              reg184 <= $signed((-$signed($signed(reg172))));
              reg185 <= $signed(((({wire150, reg101} ?
                      $unsigned(reg181) : reg108[(2'h2):(1'h1)]) ?
                  reg97[(4'hd):(4'hb)] : ($signed(wire170) ?
                      (~^(8'ha5)) : $signed(reg110))) ~^ $signed((|(reg107 ?
                  (8'ha7) : (8'ha4))))));
            end
        end
      reg186 = (|$signed(reg177));
    end
  module187 #() modinst285 (.wire191(reg110), .y(wire284), .wire188(wire52), .wire189(wire93), .wire190(wire113), .clk(clk));
  assign wire286 = wire170;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module187
#(parameter param282 = ((((((8'hb9) << (7'h41)) ? ((8'hbc) ? (8'hbb) : (8'hae)) : ((8'hbd) || (8'ha2))) ? (((8'hbe) ? (8'ha4) : (8'hab)) <<< ((8'hbb) ? (8'haa) : (8'h9d))) : (((8'hb9) ? (8'hbb) : (8'haf)) ~^ ((8'ha7) ? (8'ha4) : (8'hb9)))) ? ((^{(8'ha4)}) ? (((8'hb9) && (8'hbc)) ? (~|(8'hb3)) : (!(7'h43))) : (|(+(7'h44)))) : ((^~((7'h42) ? (8'ha4) : (8'ha7))) == (8'ha7))) * (((~(8'hbe)) | {((8'ha4) >= (7'h40)), ((8'ha2) >> (8'hab))}) ? ((+((8'ha1) ? (8'hac) : (8'hb7))) ? (^~(8'hbb)) : (~|(8'h9c))) : (+({(8'hbe), (8'hac)} ~^ ((7'h42) ? (8'hb8) : (8'hbc)))))), 
parameter param283 = (8'haa))
(y, clk, wire191, wire190, wire189, wire188);
  output wire [(32'h40f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h15):(1'h0)] wire191;
  input wire [(4'h8):(1'h0)] wire190;
  input wire signed [(2'h2):(1'h0)] wire189;
  input wire signed [(4'he):(1'h0)] wire188;
  wire signed [(3'h4):(1'h0)] wire281;
  wire [(4'ha):(1'h0)] wire280;
  wire [(3'h6):(1'h0)] wire250;
  wire signed [(5'h12):(1'h0)] wire249;
  wire signed [(4'ha):(1'h0)] wire224;
  wire [(4'h9):(1'h0)] wire223;
  reg [(4'ha):(1'h0)] reg279 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg276 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg272 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg271 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg270 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg269 = (1'h0);
  reg [(4'he):(1'h0)] reg265 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg263 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg262 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg261 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg258 = (1'h0);
  reg signed [(4'he):(1'h0)] reg257 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg256 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg255 = (1'h0);
  reg [(5'h11):(1'h0)] reg254 = (1'h0);
  reg signed [(4'he):(1'h0)] reg252 = (1'h0);
  reg [(4'h8):(1'h0)] reg248 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg247 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg243 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg242 = (1'h0);
  reg [(3'h4):(1'h0)] reg237 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg235 = (1'h0);
  reg signed [(4'he):(1'h0)] reg230 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg226 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg225 = (1'h0);
  reg [(3'h4):(1'h0)] reg221 = (1'h0);
  reg [(5'h15):(1'h0)] reg218 = (1'h0);
  reg signed [(4'he):(1'h0)] reg212 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg210 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg207 = (1'h0);
  reg [(4'hb):(1'h0)] reg205 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg203 = (1'h0);
  reg [(5'h12):(1'h0)] reg199 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg197 = (1'h0);
  reg [(2'h2):(1'h0)] reg196 = (1'h0);
  reg [(5'h11):(1'h0)] reg195 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg193 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar278 = (1'h0);
  reg [(2'h3):(1'h0)] reg277 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg275 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar274 = (1'h0);
  reg [(4'hd):(1'h0)] forvar273 = (1'h0);
  reg [(4'hb):(1'h0)] reg268 = (1'h0);
  reg [(5'h10):(1'h0)] reg267 = (1'h0);
  reg [(3'h4):(1'h0)] forvar266 = (1'h0);
  reg [(4'hf):(1'h0)] reg264 = (1'h0);
  reg [(4'ha):(1'h0)] forvar260 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar259 = (1'h0);
  reg [(5'h12):(1'h0)] forvar253 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar251 = (1'h0);
  reg [(5'h10):(1'h0)] reg246 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg245 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg244 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar241 = (1'h0);
  reg [(4'hc):(1'h0)] forvar240 = (1'h0);
  reg [(4'hd):(1'h0)] reg234 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg239 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar238 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar236 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar234 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg233 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg232 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg231 = (1'h0);
  reg [(5'h14):(1'h0)] reg229 = (1'h0);
  reg [(5'h13):(1'h0)] forvar228 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar227 = (1'h0);
  reg [(4'h8):(1'h0)] reg222 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg220 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar219 = (1'h0);
  reg [(3'h4):(1'h0)] forvar217 = (1'h0);
  reg [(5'h13):(1'h0)] reg216 = (1'h0);
  reg [(5'h11):(1'h0)] reg215 = (1'h0);
  reg signed [(4'he):(1'h0)] reg214 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar213 = (1'h0);
  reg [(4'hb):(1'h0)] reg211 = (1'h0);
  reg [(4'h9):(1'h0)] forvar209 = (1'h0);
  reg [(5'h12):(1'h0)] forvar208 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg206 = (1'h0);
  reg [(3'h7):(1'h0)] forvar204 = (1'h0);
  reg [(2'h3):(1'h0)] forvar202 = (1'h0);
  reg [(4'ha):(1'h0)] forvar201 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg200 = (1'h0);
  reg [(3'h4):(1'h0)] forvar198 = (1'h0);
  reg [(3'h4):(1'h0)] forvar194 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar192 = (1'h0);
  assign y = {wire281,
                 wire280,
                 wire250,
                 wire249,
                 wire224,
                 wire223,
                 reg279,
                 reg276,
                 reg272,
                 reg271,
                 reg270,
                 reg269,
                 reg265,
                 reg263,
                 reg262,
                 reg261,
                 reg258,
                 reg257,
                 reg256,
                 reg255,
                 reg254,
                 reg252,
                 reg248,
                 reg247,
                 reg243,
                 reg242,
                 reg237,
                 reg235,
                 reg230,
                 reg226,
                 reg225,
                 reg221,
                 reg218,
                 reg212,
                 reg210,
                 reg207,
                 reg205,
                 reg203,
                 reg199,
                 reg197,
                 reg196,
                 reg195,
                 reg193,
                 forvar278,
                 reg277,
                 reg275,
                 forvar274,
                 forvar273,
                 reg268,
                 reg267,
                 forvar266,
                 reg264,
                 forvar260,
                 forvar259,
                 forvar253,
                 forvar251,
                 reg246,
                 reg245,
                 reg244,
                 forvar241,
                 forvar240,
                 reg234,
                 reg239,
                 forvar238,
                 forvar236,
                 forvar234,
                 reg233,
                 reg232,
                 reg231,
                 reg229,
                 forvar228,
                 forvar227,
                 reg222,
                 reg220,
                 forvar219,
                 forvar217,
                 reg216,
                 reg215,
                 reg214,
                 forvar213,
                 reg211,
                 forvar209,
                 forvar208,
                 reg206,
                 forvar204,
                 forvar202,
                 forvar201,
                 reg200,
                 forvar198,
                 forvar194,
                 forvar192,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar192 = (1'h0); (forvar192 < (1'h0)); forvar192 = (forvar192 + (1'h1)))
        begin
          reg193 <= $unsigned($signed({$signed(wire190[(3'h6):(3'h4)]),
              forvar192}));
          for (forvar194 = (1'h0); (forvar194 < (3'h4)); forvar194 = (forvar194 + (1'h1)))
            begin
              reg195 <= forvar194;
            end
          reg196 <= (($signed(wire188) >> ((~(reg195 == forvar192)) ?
              $signed((+reg195)) : $signed(wire191[(5'h12):(5'h12)]))) >> (!$signed($unsigned({wire191}))));
          reg197 <= (forvar192[(4'he):(3'h4)] ?
              forvar192 : wire190[(1'h1):(1'h0)]);
          for (forvar198 = (1'h0); (forvar198 < (2'h2)); forvar198 = (forvar198 + (1'h1)))
            begin
              reg199 <= ($unsigned(($unsigned((^wire190)) ?
                      wire189[(1'h1):(1'h0)] : ((wire188 ? (7'h43) : wire191) ?
                          (wire190 ?
                              forvar198 : reg195) : wire190[(2'h3):(1'h0)]))) ?
                  (({((8'hbb) | wire189)} ?
                      $signed(((8'h9f) ?
                          wire188 : forvar192)) : forvar198[(2'h3):(1'h1)]) <<< (reg195[(3'h4):(1'h1)] ?
                      $unsigned($unsigned(reg193)) : (8'hab))) : $unsigned({forvar194[(1'h1):(1'h0)]}));
            end
        end
      reg200 = $signed({forvar194[(3'h4):(1'h1)],
          $unsigned(wire188[(3'h6):(2'h3)])});
      for (forvar201 = (1'h0); (forvar201 < (2'h2)); forvar201 = (forvar201 + (1'h1)))
        begin
          for (forvar202 = (1'h0); (forvar202 < (2'h3)); forvar202 = (forvar202 + (1'h1)))
            begin
              reg203 <= (($signed((|(8'hae))) ?
                      forvar202[(1'h0):(1'h0)] : (&wire188)) ?
                  reg200 : wire191[(5'h12):(3'h6)]);
            end
          for (forvar204 = (1'h0); (forvar204 < (2'h3)); forvar204 = (forvar204 + (1'h1)))
            begin
              reg205 <= ({forvar192[(4'h9):(4'h9)],
                      $signed(($signed(forvar202) || ((8'ha3) ?
                          reg195 : forvar194)))} ?
                  wire191 : wire189[(1'h0):(1'h0)]);
              reg206 = wire188;
              reg207 <= $signed(wire188);
            end
        end
      for (forvar208 = (1'h0); (forvar208 < (3'h4)); forvar208 = (forvar208 + (1'h1)))
        begin
          for (forvar209 = (1'h0); (forvar209 < (3'h4)); forvar209 = (forvar209 + (1'h1)))
            begin
              reg210 <= (wire190[(3'h4):(3'h4)] ?
                  (forvar194[(3'h4):(2'h3)] >> reg193) : (reg205[(4'hb):(3'h6)] + (-((reg199 ^~ reg195) >>> wire188))));
              reg211 = $unsigned($signed((((forvar202 < reg199) ~^ (~|reg197)) ?
                  (~^reg195[(4'hd):(3'h7)]) : wire190[(3'h7):(3'h4)])));
            end
          reg212 <= $unsigned($signed(wire190[(2'h2):(1'h1)]));
          for (forvar213 = (1'h0); (forvar213 < (2'h3)); forvar213 = (forvar213 + (1'h1)))
            begin
              reg214 = ((8'hb4) - (!((reg193[(2'h2):(2'h2)] ?
                      $signed(forvar209) : {forvar213}) ?
                  reg210[(1'h0):(1'h0)] : reg195[(2'h2):(2'h2)])));
              reg215 = (((($signed((7'h43)) - reg196[(2'h2):(2'h2)]) ?
                          reg210 : (((8'ha5) ?
                              wire189 : wire190) != $unsigned(reg197))) ?
                      reg206 : $signed(forvar192[(4'hd):(4'ha)])) ?
                  forvar204[(1'h1):(1'h0)] : forvar209[(1'h1):(1'h0)]);
              reg216 = (($signed(reg195[(4'hd):(4'ha)]) ^~ (|reg215[(3'h6):(3'h5)])) >> {(8'ha3),
                  {forvar209}});
            end
          for (forvar217 = (1'h0); (forvar217 < (3'h4)); forvar217 = (forvar217 + (1'h1)))
            begin
              reg218 <= reg199;
            end
          for (forvar219 = (1'h0); (forvar219 < (1'h0)); forvar219 = (forvar219 + (1'h1)))
            begin
              reg220 = ($signed(({$signed(reg207),
                      (forvar208 ? forvar192 : reg199)} ?
                  $signed((forvar198 <= reg196)) : $unsigned(wire190[(3'h5):(2'h3)]))) ~^ ((($unsigned(forvar208) ?
                  $signed(reg196) : (forvar202 ?
                      forvar201 : (8'h9f))) | reg212[(1'h0):(1'h0)]) ^~ $unsigned((forvar219[(1'h0):(1'h0)] - (forvar208 ?
                  (8'hb5) : (8'hac))))));
              reg221 <= $unsigned($signed(reg210));
              reg222 = $signed((7'h44));
            end
        end
    end
  assign wire223 = {$unsigned(({(reg221 ? wire191 : reg210),
                           (~^(8'ha8))} << $signed((reg196 ?
                           reg203 : reg218))))};
  assign wire224 = (reg210[(3'h4):(2'h2)] ?
                       $signed($unsigned(((!reg193) ?
                           $signed(reg205) : reg196[(1'h1):(1'h1)]))) : reg207[(4'h8):(3'h7)]);
  always
    @(posedge clk) begin
      reg225 <= (!reg210);
      reg226 <= $signed(reg203);
      for (forvar227 = (1'h0); (forvar227 < (2'h3)); forvar227 = (forvar227 + (1'h1)))
        begin
          for (forvar228 = (1'h0); (forvar228 < (1'h0)); forvar228 = (forvar228 + (1'h1)))
            begin
              reg229 = reg197;
              reg230 <= reg193[(3'h4):(2'h2)];
              reg231 = (~^forvar228[(4'h8):(3'h6)]);
              reg232 = $signed(({reg195,
                  $unsigned((&forvar228))} & (((-reg225) ?
                  {reg210} : $signed(reg231)) >> (-reg205[(4'h9):(3'h7)]))));
              reg233 = (~^(~^(8'h9f)));
            end
        end
      if ((^($signed((!((8'h9f) ? reg218 : reg218))) ?
          reg232 : $signed($unsigned(wire190)))))
        begin
          for (forvar234 = (1'h0); (forvar234 < (1'h0)); forvar234 = (forvar234 + (1'h1)))
            begin
              reg235 <= {((((+reg233) ? $unsigned(wire191) : {(8'hbc)}) ?
                      $signed($signed((7'h43))) : ((wire189 ?
                              (8'h9e) : reg203) ?
                          $unsigned(reg203) : ((8'hb4) ?
                              reg230 : reg218))) | (+$signed(reg225)))};
            end
          for (forvar236 = (1'h0); (forvar236 < (1'h1)); forvar236 = (forvar236 + (1'h1)))
            begin
              reg237 <= reg205[(3'h4):(2'h3)];
            end
          for (forvar238 = (1'h0); (forvar238 < (1'h1)); forvar238 = (forvar238 + (1'h1)))
            begin
              reg239 = reg196;
            end
        end
      else
        begin
          reg234 = (~(((forvar228 ^ (wire189 | reg196)) ?
              $signed(reg210) : $signed(forvar228[(3'h5):(2'h3)])) + {$signed(forvar228)}));
          reg235 <= ($signed(((!(-reg207)) || $signed((wire188 ?
                  forvar234 : reg232)))) ?
              ((^~reg237) ?
                  (wire191[(4'hc):(3'h4)] ?
                      $signed((&reg212)) : ((reg218 ? reg193 : wire190) ?
                          (reg237 << (8'ha9)) : $signed(wire224))) : ((~wire224) >> forvar236)) : $unsigned((~^(~|$signed((8'hb4))))));
        end
      for (forvar240 = (1'h0); (forvar240 < (1'h1)); forvar240 = (forvar240 + (1'h1)))
        begin
          for (forvar241 = (1'h0); (forvar241 < (1'h1)); forvar241 = (forvar241 + (1'h1)))
            begin
              reg242 <= $signed($unsigned(reg239[(3'h6):(2'h2)]));
            end
          if ((wire224[(1'h1):(1'h0)] > reg225))
            begin
              reg243 <= reg203;
              reg244 = forvar238[(1'h1):(1'h0)];
            end
          else
            begin
              reg243 <= wire190;
              reg244 = $signed(($signed(reg239) ?
                  ((~&((8'ha6) ^~ reg221)) && reg231) : reg234[(2'h3):(1'h1)]));
              reg245 = $signed($signed($signed((reg207 << reg230))));
              reg246 = $signed((^~{({wire190} ?
                      forvar228[(1'h1):(1'h0)] : reg218),
                  ((|forvar228) ? $signed(reg210) : $unsigned(reg232))}));
              reg247 <= (~|forvar227[(4'h8):(3'h4)]);
            end
          reg248 <= (~^(reg243[(1'h0):(1'h0)] >>> ($unsigned($unsigned(reg193)) ?
              (8'hb2) : forvar236[(5'h10):(4'h9)])));
        end
    end
  assign wire249 = (~{(+$signed(reg203[(1'h1):(1'h1)])),
                       ($signed(reg203) ~^ {wire190, (&reg197)})});
  assign wire250 = reg210;
  always
    @(posedge clk) begin
      for (forvar251 = (1'h0); (forvar251 < (3'h4)); forvar251 = (forvar251 + (1'h1)))
        begin
          reg252 <= (wire189 ?
              $unsigned((($unsigned(reg212) == $signed(reg235)) ?
                  $signed($signed(reg226)) : $signed((|(8'hbf))))) : ($unsigned($unsigned(((8'ha9) << reg248))) ?
                  (((&wire249) >> reg203[(4'hc):(4'h8)]) ?
                      wire191 : (wire190 == wire191[(3'h5):(1'h0)])) : (+$unsigned((8'ha7)))));
          for (forvar253 = (1'h0); (forvar253 < (1'h0)); forvar253 = (forvar253 + (1'h1)))
            begin
              reg254 <= (~^$signed(reg226[(3'h6):(3'h5)]));
              reg255 <= $unsigned((-$unsigned($signed($unsigned((7'h43))))));
              reg256 <= reg203;
              reg257 <= (reg193[(2'h3):(2'h2)] ?
                  reg248[(1'h0):(1'h0)] : $unsigned(reg197[(1'h0):(1'h0)]));
            end
        end
      reg258 <= ({reg237[(3'h4):(2'h3)]} ?
          {((8'hb3) | $signed($signed(reg243))),
              ((^(reg221 ? reg237 : reg252)) ?
                  reg196 : ((reg199 > reg237) - (~reg237)))} : ($unsigned((~wire250)) ?
              $unsigned((reg254 | $signed(reg193))) : reg242[(4'h9):(1'h1)]));
      for (forvar259 = (1'h0); (forvar259 < (1'h0)); forvar259 = (forvar259 + (1'h1)))
        begin
          for (forvar260 = (1'h0); (forvar260 < (3'h4)); forvar260 = (forvar260 + (1'h1)))
            begin
              reg261 <= $unsigned($signed(wire250));
              reg262 <= (!$signed($signed(reg247)));
              reg263 <= (reg258 >> reg212);
              reg264 = $unsigned(reg247[(3'h5):(1'h1)]);
              reg265 <= {$signed({{$signed(reg226), (-reg207)},
                      $signed((reg197 ^~ reg247))})};
            end
          for (forvar266 = (1'h0); (forvar266 < (2'h3)); forvar266 = (forvar266 + (1'h1)))
            begin
              reg267 = $unsigned($unsigned((+{(^(7'h44))})));
              reg268 = forvar266[(1'h1):(1'h1)];
              reg269 <= ($unsigned((((reg256 ? reg207 : reg258) * ((7'h40) ?
                      forvar266 : reg243)) ?
                  ((reg203 >> (7'h41)) ?
                      (-reg262) : forvar259[(4'ha):(1'h0)]) : {reg212[(4'hb):(4'hb)],
                      (8'hb2)})) >= $signed($unsigned(($signed(reg235) ?
                  (reg193 == reg230) : $signed(reg268)))));
              reg270 <= (^~(~(({reg221, reg237} ? reg254 : (~wire249)) ?
                  $unsigned($unsigned(wire249)) : $signed(reg225))));
              reg271 <= wire250;
            end
        end
      reg272 <= {({reg218[(4'hb):(1'h1)],
              $signed($signed(wire188))} * ((^(reg256 ?
              reg271 : reg205)) >>> $signed(reg257))),
          ($unsigned(wire190[(1'h0):(1'h0)]) | (~|($signed(reg221) ?
              reg199[(4'h9):(3'h4)] : (reg218 ~^ forvar266))))};
      for (forvar273 = (1'h0); (forvar273 < (2'h3)); forvar273 = (forvar273 + (1'h1)))
        begin
          for (forvar274 = (1'h0); (forvar274 < (2'h3)); forvar274 = (forvar274 + (1'h1)))
            begin
              reg275 = (~$signed((((+forvar253) ?
                  (7'h43) : {reg262, forvar274}) >>> $unsigned(wire249))));
              reg276 <= {reg203};
              reg277 = wire189;
            end
          for (forvar278 = (1'h0); (forvar278 < (1'h0)); forvar278 = (forvar278 + (1'h1)))
            begin
              reg279 <= $signed((~&{((forvar259 ?
                      (7'h41) : (8'hac)) >= {(7'h43), reg197})}));
            end
        end
    end
  assign wire280 = (|(^reg196));
  assign wire281 = reg279[(4'ha):(4'h8)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module154
#(parameter param165 = (+({(((8'hbc) ? (8'ha4) : (8'ha1)) ? ((8'haa) ? (8'had) : (8'ha7)) : (~(8'ha7))), ((^~(8'h9e)) ? ((7'h41) && (8'hac)) : ((8'hbc) >= (8'ha2)))} ? (&((~^(8'ha5)) ? {(8'hb5)} : ((8'ha9) ? (8'hb3) : (8'ha1)))) : (((~^(8'hb5)) ? (~|(8'hbd)) : (-(8'hae))) ? (((8'h9f) | (8'h9e)) && ((8'haf) >>> (8'ha2))) : (8'ha9)))), 
parameter param166 = ((~(((param165 & (8'h9e)) ? (param165 ? param165 : param165) : (^~param165)) ? {(param165 && param165), {param165}} : param165)) ? (~&(|{(param165 ? param165 : param165), (param165 ~^ param165)})) : param165))
(y, clk, wire159, wire158, wire157, wire156, wire155);
  output wire [(32'h2d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h14):(1'h0)] wire159;
  input wire signed [(2'h3):(1'h0)] wire158;
  input wire signed [(4'hc):(1'h0)] wire157;
  input wire signed [(3'h5):(1'h0)] wire156;
  input wire signed [(4'hf):(1'h0)] wire155;
  wire [(4'ha):(1'h0)] wire164;
  wire signed [(3'h4):(1'h0)] wire163;
  wire signed [(3'h5):(1'h0)] wire162;
  wire [(4'hd):(1'h0)] wire161;
  wire [(4'hc):(1'h0)] wire160;
  assign y = {wire164, wire163, wire162, wire161, wire160, (1'h0)};
  assign wire160 = $unsigned(($signed($signed(wire157[(4'hc):(4'hc)])) ?
                       {(~&$signed(wire158)),
                           $unsigned((wire159 ^~ wire156))} : ((^~(!wire159)) >>> $signed((8'hb2)))));
  assign wire161 = $signed((|$unsigned(wire155)));
  assign wire162 = wire157[(3'h6):(2'h3)];
  assign wire163 = {wire156[(2'h2):(2'h2)]};
  assign wire164 = wire160[(1'h1):(1'h1)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module114  (y, clk, wire119, wire118, wire117, wire116, wire115);
  output wire [(32'h134):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire119;
  input wire signed [(4'hd):(1'h0)] wire118;
  input wire signed [(5'h15):(1'h0)] wire117;
  input wire [(2'h2):(1'h0)] wire116;
  input wire [(4'hb):(1'h0)] wire115;
  wire signed [(3'h5):(1'h0)] wire149;
  wire signed [(3'h7):(1'h0)] wire148;
  wire signed [(3'h5):(1'h0)] wire147;
  wire signed [(3'h6):(1'h0)] wire146;
  wire signed [(3'h7):(1'h0)] wire145;
  wire [(5'h15):(1'h0)] wire144;
  wire signed [(4'h9):(1'h0)] wire143;
  wire [(4'hf):(1'h0)] wire142;
  wire [(2'h2):(1'h0)] wire141;
  wire [(5'h11):(1'h0)] wire140;
  wire [(5'h14):(1'h0)] wire139;
  wire signed [(4'hb):(1'h0)] wire125;
  wire [(5'h12):(1'h0)] wire124;
  wire [(2'h2):(1'h0)] wire123;
  wire signed [(4'he):(1'h0)] wire122;
  wire [(3'h6):(1'h0)] wire121;
  wire signed [(4'hb):(1'h0)] wire120;
  reg [(3'h4):(1'h0)] reg135 = (1'h0);
  reg [(4'hb):(1'h0)] reg133 = (1'h0);
  reg [(5'h10):(1'h0)] reg131 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg128 = (1'h0);
  reg [(2'h3):(1'h0)] reg138 = (1'h0);
  reg [(5'h12):(1'h0)] reg137 = (1'h0);
  reg [(5'h12):(1'h0)] forvar136 = (1'h0);
  reg [(5'h14):(1'h0)] reg134 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar132 = (1'h0);
  reg [(3'h5):(1'h0)] forvar130 = (1'h0);
  reg [(4'hf):(1'h0)] reg129 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar127 = (1'h0);
  reg [(3'h5):(1'h0)] forvar126 = (1'h0);
  assign y = {wire149,
                 wire148,
                 wire147,
                 wire146,
                 wire145,
                 wire144,
                 wire143,
                 wire142,
                 wire141,
                 wire140,
                 wire139,
                 wire125,
                 wire124,
                 wire123,
                 wire122,
                 wire121,
                 wire120,
                 reg135,
                 reg133,
                 reg131,
                 reg128,
                 reg138,
                 reg137,
                 forvar136,
                 reg134,
                 forvar132,
                 forvar130,
                 reg129,
                 forvar127,
                 forvar126,
                 (1'h0)};
  assign wire120 = wire117[(5'h12):(1'h0)];
  assign wire121 = ($unsigned((~|wire117)) != wire119[(3'h4):(2'h2)]);
  assign wire122 = {(((~|(wire117 >= wire116)) ?
                           ($signed((8'h9e)) ?
                               $unsigned(wire117) : (+wire119)) : {$unsigned(wire115)}) >> wire115[(4'h8):(2'h3)])};
  assign wire123 = $signed($unsigned($signed(wire121[(3'h4):(2'h2)])));
  assign wire124 = $signed(($signed($unsigned((wire118 || wire119))) ?
                       (~|wire120[(4'h9):(4'h8)]) : $unsigned(wire117[(5'h13):(1'h1)])));
  assign wire125 = (wire119 + (8'ha6));
  always
    @(posedge clk) begin
      for (forvar126 = (1'h0); (forvar126 < (1'h1)); forvar126 = (forvar126 + (1'h1)))
        begin
          for (forvar127 = (1'h0); (forvar127 < (1'h1)); forvar127 = (forvar127 + (1'h1)))
            begin
              reg128 <= $unsigned($signed(((~wire120[(2'h3):(2'h3)]) ?
                  ($unsigned(wire116) * {wire120,
                      wire122}) : {$unsigned(wire119)})));
              reg129 = $unsigned({(reg128 - (wire116 ? wire123 : (8'hbf)))});
            end
          for (forvar130 = (1'h0); (forvar130 < (1'h0)); forvar130 = (forvar130 + (1'h1)))
            begin
              reg131 <= (~wire118[(4'hd):(4'hb)]);
            end
          for (forvar132 = (1'h0); (forvar132 < (3'h4)); forvar132 = (forvar132 + (1'h1)))
            begin
              reg133 <= (wire123[(1'h0):(1'h0)] ?
                  forvar127 : $signed($signed({$unsigned((8'hac))})));
              reg134 = reg129;
              reg135 <= $signed((~(forvar127[(2'h2):(2'h2)] ?
                  reg134 : (+(wire120 >> wire124)))));
            end
        end
      for (forvar136 = (1'h0); (forvar136 < (1'h1)); forvar136 = (forvar136 + (1'h1)))
        begin
          reg137 = wire118[(3'h6):(1'h1)];
          reg138 = ($signed(((((8'hb6) ? forvar136 : reg137) ?
                  {(8'hbc)} : reg129[(3'h4):(1'h1)]) ?
              (-$unsigned(forvar132)) : $signed(forvar136))) ^ wire121[(2'h3):(2'h3)]);
        end
    end
  assign wire139 = $unsigned($signed(wire116[(2'h2):(1'h0)]));
  assign wire140 = ({(~&wire122),
                       wire139} >= $signed((&((wire115 - reg128) < (wire139 ?
                       reg135 : wire120)))));
  assign wire141 = $signed(wire122[(2'h2):(1'h1)]);
  assign wire142 = $unsigned($signed(wire125));
  assign wire143 = (({(^~$unsigned(wire121)),
                       (~$unsigned(wire140))} & (~^$signed($unsigned(wire141)))) | wire142);
  assign wire144 = $unsigned($signed(((~|((8'hb3) ? wire116 : wire140)) ?
                       ((wire117 ?
                           wire141 : wire115) + (^wire120)) : $unsigned({wire121}))));
  assign wire145 = $signed((wire143 == wire123[(1'h0):(1'h0)]));
  assign wire146 = ($signed((8'hbf)) ? wire125[(3'h4):(1'h0)] : wire144);
  assign wire147 = reg135;
  assign wire148 = reg133;
  assign wire149 = reg131;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module57  (y, clk, wire62, wire61, wire60, wire59, wire58);
  output wire [(32'h12b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire62;
  input wire signed [(5'h12):(1'h0)] wire61;
  input wire [(5'h11):(1'h0)] wire60;
  input wire signed [(4'h9):(1'h0)] wire59;
  input wire [(2'h3):(1'h0)] wire58;
  wire signed [(3'h6):(1'h0)] wire72;
  wire [(4'hc):(1'h0)] wire71;
  wire signed [(5'h11):(1'h0)] wire70;
  wire signed [(3'h5):(1'h0)] wire67;
  wire [(4'ha):(1'h0)] wire66;
  wire [(4'hf):(1'h0)] wire65;
  wire signed [(4'h8):(1'h0)] wire64;
  wire [(3'h4):(1'h0)] wire63;
  reg signed [(3'h4):(1'h0)] reg92 = (1'h0);
  reg [(4'ha):(1'h0)] reg90 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg87 = (1'h0);
  reg [(4'h9):(1'h0)] reg76 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg75 = (1'h0);
  reg [(4'hc):(1'h0)] reg68 = (1'h0);
  reg [(3'h6):(1'h0)] forvar91 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg89 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar88 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg86 = (1'h0);
  reg [(2'h2):(1'h0)] reg85 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg84 = (1'h0);
  reg [(2'h2):(1'h0)] reg83 = (1'h0);
  reg [(4'hc):(1'h0)] forvar82 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar81 = (1'h0);
  reg [(4'hf):(1'h0)] reg80 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg79 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg78 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg77 = (1'h0);
  reg [(5'h14):(1'h0)] forvar74 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar73 = (1'h0);
  reg [(3'h7):(1'h0)] reg69 = (1'h0);
  assign y = {wire72,
                 wire71,
                 wire70,
                 wire67,
                 wire66,
                 wire65,
                 wire64,
                 wire63,
                 reg92,
                 reg90,
                 reg87,
                 reg76,
                 reg75,
                 reg68,
                 forvar91,
                 reg89,
                 forvar88,
                 reg86,
                 reg85,
                 reg84,
                 reg83,
                 forvar82,
                 forvar81,
                 reg80,
                 reg79,
                 reg78,
                 reg77,
                 forvar74,
                 forvar73,
                 reg69,
                 (1'h0)};
  assign wire63 = (wire58[(1'h0):(1'h0)] * wire60);
  assign wire64 = wire58;
  assign wire65 = wire60;
  assign wire66 = (-{(wire64 <= ((wire64 == wire64) > (~&wire60)))});
  assign wire67 = {($unsigned($unsigned($signed(wire60))) ?
                          (((wire59 ?
                              (8'hab) : wire64) * (+(8'hbf))) | $unsigned($unsigned(wire59))) : ({$signed(wire60),
                                  wire61} ?
                              {(-(8'h9c)),
                                  $unsigned(wire58)} : ($unsigned(wire61) << wire60[(4'hf):(4'hb)])))};
  always
    @(posedge clk) begin
      reg68 <= (^~(^wire61[(4'hd):(4'h9)]));
      reg69 = wire63;
    end
  assign wire70 = wire59;
  assign wire71 = (($unsigned(($signed(wire59) << {(8'ha8), reg68})) ?
                      $unsigned({$signed(wire64)}) : wire64) && $signed((((wire63 - (8'hbc)) * (wire58 <= wire63)) ?
                      (|(wire64 ? wire62 : wire65)) : $unsigned(reg68))));
  assign wire72 = wire66;
  always
    @(posedge clk) begin
      for (forvar73 = (1'h0); (forvar73 < (2'h2)); forvar73 = (forvar73 + (1'h1)))
        begin
          for (forvar74 = (1'h0); (forvar74 < (2'h3)); forvar74 = (forvar74 + (1'h1)))
            begin
              reg75 <= wire61[(4'hf):(4'hf)];
              reg76 <= $unsigned(($unsigned(((wire67 ?
                  (8'hb9) : wire63) >= (~|wire58))) || $unsigned({wire66,
                  (wire66 ? (8'hb3) : wire71)})));
              reg77 = $signed((+reg75[(1'h1):(1'h0)]));
              reg78 = ((($signed(wire70[(5'h10):(2'h2)]) ~^ forvar73[(2'h3):(1'h0)]) ?
                  wire63 : ({{forvar74,
                          reg76}} > $unsigned(wire62))) ^~ forvar73);
            end
          reg79 = (-$unsigned(wire72));
          reg80 = $signed(wire59);
        end
      for (forvar81 = (1'h0); (forvar81 < (2'h2)); forvar81 = (forvar81 + (1'h1)))
        begin
          for (forvar82 = (1'h0); (forvar82 < (2'h3)); forvar82 = (forvar82 + (1'h1)))
            begin
              reg83 = $unsigned(($unsigned((-{reg75, wire72})) && (|(+(reg77 ?
                  wire67 : wire65)))));
              reg84 = (~(-(wire65[(3'h4):(3'h4)] - {(~reg76), (~&(8'ha9))})));
              reg85 = (~|$signed(forvar81[(4'h9):(2'h3)]));
            end
          reg86 = wire65[(4'he):(1'h0)];
          reg87 <= {$signed((-(forvar74 ~^ (~^wire60)))),
              ($unsigned(forvar81[(3'h5):(1'h0)]) ?
                  (~&(&(reg77 == forvar81))) : $unsigned(forvar81))};
          for (forvar88 = (1'h0); (forvar88 < (3'h4)); forvar88 = (forvar88 + (1'h1)))
            begin
              reg89 = $unsigned(({wire60,
                  $unsigned((reg76 ?
                      reg84 : wire66))} - (~|$signed((forvar74 | wire62)))));
              reg90 <= (!reg85[(1'h0):(1'h0)]);
            end
        end
      for (forvar91 = (1'h0); (forvar91 < (3'h4)); forvar91 = (forvar91 + (1'h1)))
        begin
          reg92 <= (-(&(-$unsigned(reg79))));
        end
    end
endmodule