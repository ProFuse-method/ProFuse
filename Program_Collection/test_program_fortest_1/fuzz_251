(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param40 = (-(~^(((8'haf) - (8'ha5)) << (^(8'ha2))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h33):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire [(4'h8):(1'h0)] wire2;
  input wire signed [(3'h7):(1'h0)] wire1;
  input wire [(3'h5):(1'h0)] wire0;
  wire signed [(4'hb):(1'h0)] wire32;
  reg [(3'h5):(1'h0)] reg39 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg38 = (1'h0);
  reg [(4'ha):(1'h0)] reg37 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg36 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg35 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg34 = (1'h0);
  assign y = {wire32, reg39, reg38, reg37, reg36, reg35, reg34, (1'h0)};
  module4 #() modinst33 (wire32, clk, wire1, wire0, wire2, wire3);
  always
    @(posedge clk) begin
      reg34 <= wire1;
      reg35 <= wire1;
    end
  always
    @(posedge clk) begin
      reg36 <= (8'ha1);
      reg37 <= (~&($signed(reg36) ?
          ($unsigned(reg36) ? (wire0 <<< wire2) : $signed(wire2)) : (8'ha3)));
    end
  always
    @(posedge clk) begin
      reg38 <= $unsigned($signed(wire2[(2'h2):(1'h1)]));
      reg39 <= $signed((-wire32[(1'h1):(1'h1)]));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h4b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire8;
  input wire signed [(3'h5):(1'h0)] wire7;
  input wire signed [(4'h8):(1'h0)] wire6;
  input wire signed [(3'h7):(1'h0)] wire5;
  wire [(4'ha):(1'h0)] wire30;
  wire [(3'h7):(1'h0)] wire29;
  wire [(4'h8):(1'h0)] wire28;
  wire [(4'ha):(1'h0)] wire27;
  wire signed [(2'h2):(1'h0)] wire26;
  wire [(3'h6):(1'h0)] wire25;
  wire [(4'h8):(1'h0)] wire23;
  wire [(4'h9):(1'h0)] wire10;
  wire [(4'h8):(1'h0)] wire9;
  reg [(3'h6):(1'h0)] reg31 = (1'h0);
  assign y = {wire30,
                 wire29,
                 wire28,
                 wire27,
                 wire26,
                 wire25,
                 wire23,
                 wire10,
                 wire9,
                 reg31,
                 (1'h0)};
  assign wire9 = (((^~wire8[(1'h0):(1'h0)]) >>> wire8[(3'h7):(3'h5)]) >= $signed(wire5));
  assign wire10 = (^~$unsigned(wire9[(3'h4):(2'h3)]));
  module11 #() modinst24 (.wire13(wire9), .y(wire23), .wire12(wire10), .wire14(wire7), .wire15(wire5), .clk(clk));
  assign wire25 = $signed(wire23);
  assign wire26 = {{$unsigned($unsigned(wire8))}};
  assign wire27 = wire5;
  assign wire28 = $unsigned((&wire5));
  assign wire29 = ($unsigned((wire8[(3'h4):(2'h3)] * $unsigned(wire10))) > wire23);
  assign wire30 = (~|(wire9[(2'h2):(1'h1)] ? $unsigned((|wire7)) : {wire23}));
  always
    @(posedge clk) begin
      reg31 <= ((&$unsigned((wire9 ?
          wire26 : wire27))) >>> $signed((wire6[(1'h1):(1'h1)] || $unsigned(wire26))));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11
#(parameter param22 = (^((-((8'ha2) && (8'hb0))) ? {((8'haa) ? (8'hb0) : (8'h9c))} : ((8'hae) != (8'ha2)))))
(y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h28):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire15;
  input wire [(3'h5):(1'h0)] wire14;
  input wire [(3'h7):(1'h0)] wire13;
  input wire signed [(4'h9):(1'h0)] wire12;
  wire signed [(3'h6):(1'h0)] wire21;
  wire [(2'h2):(1'h0)] wire20;
  wire signed [(4'ha):(1'h0)] wire19;
  wire [(3'h7):(1'h0)] wire18;
  wire [(4'h8):(1'h0)] wire17;
  wire signed [(3'h6):(1'h0)] wire16;
  assign y = {wire21, wire20, wire19, wire18, wire17, wire16, (1'h0)};
  assign wire16 = ((($signed(wire13) ? wire13[(3'h6):(1'h1)] : (^~wire12)) ?
                      {wire12} : wire14) <= ({(wire13 ?
                          (8'hac) : wire15)} >> ($signed(wire13) ?
                      (8'ha2) : $unsigned(wire13))));
  assign wire17 = (8'ha3);
  assign wire18 = $unsigned(wire13[(2'h2):(1'h0)]);
  assign wire19 = wire12[(3'h4):(2'h3)];
  assign wire20 = $unsigned((^wire14));
  assign wire21 = $unsigned(wire13[(3'h5):(3'h4)]);
endmodule