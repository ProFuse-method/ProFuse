(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param44 = ({(((8'had) ? (8'h9f) : (8'ha1)) - (8'had))} != {(((8'ha2) ? (8'h9f) : (8'ha1)) >>> (&(8'had)))}))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h1e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire3;
  input wire signed [(4'hb):(1'h0)] wire2;
  input wire [(4'h8):(1'h0)] wire1;
  input wire signed [(3'h5):(1'h0)] wire0;
  wire [(2'h2):(1'h0)] wire42;
  wire [(4'hb):(1'h0)] wire6;
  wire [(4'h8):(1'h0)] wire5;
  wire signed [(4'h8):(1'h0)] wire4;
  assign y = {wire42, wire6, wire5, wire4, (1'h0)};
  assign wire4 = $unsigned((&$unsigned((&(8'h9d)))));
  assign wire5 = (wire0 ?
                     $signed({$signed(wire4)}) : $signed($signed((wire4 | (8'h9f)))));
  assign wire6 = (^$signed(wire4[(2'h3):(2'h2)]));
  module7 #() modinst43 (wire42, clk, wire3, wire0, wire4, wire2);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7
#(parameter param41 = (((~&((8'ha5) ? (8'hb0) : (8'ha3))) ? (&{(8'hab)}) : (^~(&(8'h9d)))) << (((-(8'h9c)) ~^ ((8'h9f) >> (8'ha5))) ^ ((&(8'hae)) ? ((8'ha8) ? (8'ha0) : (8'h9f)) : ((8'haf) ^ (8'hac))))))
(y, clk, wire8, wire9, wire10, wire11);
  output wire [(32'h58):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h8):(1'h0)] wire8;
  input wire signed [(2'h3):(1'h0)] wire9;
  input wire [(3'h6):(1'h0)] wire10;
  input wire signed [(3'h6):(1'h0)] wire11;
  wire [(2'h3):(1'h0)] wire36;
  wire [(3'h6):(1'h0)] wire12;
  wire signed [(3'h4):(1'h0)] wire13;
  wire [(4'h9):(1'h0)] wire14;
  wire signed [(3'h5):(1'h0)] wire19;
  wire signed [(4'ha):(1'h0)] wire34;
  reg signed [(4'hb):(1'h0)] reg40 = (1'h0);
  reg [(3'h5):(1'h0)] reg39 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg38 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg37 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg15 = (1'h0);
  reg [(2'h3):(1'h0)] reg16 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg17 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg18 = (1'h0);
  assign y = {wire36,
                 wire12,
                 wire13,
                 wire14,
                 wire19,
                 wire34,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 reg15,
                 reg16,
                 reg17,
                 reg18,
                 (1'h0)};
  assign wire12 = $signed((8'ha1));
  assign wire13 = (^$signed($signed(wire8[(3'h7):(2'h2)])));
  assign wire14 = {(wire8 ~^ (wire12[(3'h6):(3'h4)] <= (wire13 <= wire8)))};
  always
    @(posedge clk) begin
      reg15 <= wire8;
      reg16 <= (8'ha4);
    end
  always
    @(posedge clk) begin
      reg17 <= (wire10 >> reg15[(1'h0):(1'h0)]);
      reg18 <= $signed((|(-(-reg16))));
    end
  assign wire19 = ($signed(wire11) ?
                      ($unsigned($unsigned(wire9)) ?
                          ((~(8'hab)) ?
                              (wire14 ? (8'ha2) : reg18) : (wire13 ?
                                  (8'ha6) : (8'ha2))) : (^$unsigned(wire14))) : {$unsigned({(8'hac)})});
  module20 #() modinst35 (.wire21(wire13), .wire24(wire8), .clk(clk), .wire23(reg15), .wire22(wire14), .y(wire34));
  assign wire36 = ($signed(($signed(wire14) ?
                          (reg18 ? reg18 : wire11) : $signed((8'ha7)))) ?
                      ((wire34[(1'h0):(1'h0)] | reg15) ?
                          $signed(((8'ha9) ?
                              wire11 : wire9)) : $unsigned(wire8[(3'h6):(3'h6)])) : (&((wire12 ?
                          reg16 : wire34) - $signed(wire12))));
  always
    @(posedge clk) begin
      if (wire11[(1'h1):(1'h1)])
        begin
          reg37 <= wire10;
          reg38 <= (~^{reg16});
        end
      else
        begin
          reg37 <= (-($unsigned($signed(reg37)) * (~|wire12[(3'h5):(3'h5)])));
        end
      reg39 <= wire36;
      reg40 <= $unsigned($signed($unsigned((!wire13))));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module20  (y, clk, wire24, wire23, wire22, wire21);
  output wire [(32'h34):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire24;
  input wire signed [(4'h8):(1'h0)] wire23;
  input wire signed [(4'h9):(1'h0)] wire22;
  input wire [(2'h3):(1'h0)] wire21;
  wire signed [(4'ha):(1'h0)] wire31;
  wire signed [(2'h3):(1'h0)] wire29;
  wire [(2'h2):(1'h0)] wire26;
  wire [(2'h3):(1'h0)] wire25;
  reg [(3'h6):(1'h0)] reg33 = (1'h0);
  reg [(3'h6):(1'h0)] reg32 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg30 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg28 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg27 = (1'h0);
  assign y = {wire31,
                 wire29,
                 wire26,
                 wire25,
                 reg33,
                 reg32,
                 reg30,
                 reg28,
                 reg27,
                 (1'h0)};
  assign wire25 = ($unsigned((8'haa)) ?
                      (&wire21[(2'h3):(2'h2)]) : ($signed((8'h9c)) ?
                          (^wire22) : (-wire21)));
  assign wire26 = {(((~^wire23) > (|(8'h9d))) ?
                          ((wire25 <= (8'h9e)) ^~ wire22[(2'h2):(2'h2)]) : wire22[(2'h3):(2'h2)])};
  always
    @(posedge clk) begin
      reg27 <= (8'h9c);
      reg28 <= (~wire23);
    end
  assign wire29 = $signed($signed($unsigned({wire26})));
  always
    @(posedge clk) begin
      reg30 <= {$signed((~|wire26[(1'h1):(1'h1)]))};
    end
  assign wire31 = (^wire29[(1'h1):(1'h1)]);
  always
    @(posedge clk) begin
      reg32 <= (wire23 > ({{wire22}} ?
          wire21[(1'h0):(1'h0)] : (((8'ha0) == (8'haf)) >= (+wire29))));
      reg33 <= wire25[(2'h3):(2'h3)];
    end
endmodule