(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h55):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire3;
  input wire [(3'h7):(1'h0)] wire2;
  input wire [(3'h5):(1'h0)] wire1;
  input wire [(4'ha):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire30;
  wire signed [(3'h4):(1'h0)] wire29;
  wire [(3'h6):(1'h0)] wire23;
  wire [(4'h8):(1'h0)] wire22;
  wire signed [(4'h9):(1'h0)] wire20;
  wire [(2'h3):(1'h0)] wire7;
  wire signed [(3'h5):(1'h0)] wire6;
  wire signed [(3'h5):(1'h0)] wire5;
  wire [(4'h8):(1'h0)] wire4;
  reg signed [(4'ha):(1'h0)] reg28 = (1'h0);
  reg [(3'h6):(1'h0)] reg27 = (1'h0);
  reg [(2'h2):(1'h0)] reg26 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg25 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg24 = (1'h0);
  assign y = {wire30,
                 wire29,
                 wire23,
                 wire22,
                 wire20,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 (1'h0)};
  assign wire4 = ($unsigned(((wire2 ? wire3 : wire1) ?
                         wire0[(3'h5):(1'h1)] : wire2[(3'h7):(3'h4)])) ?
                     (~^((wire2 ? wire3 : wire2) ?
                         wire1[(2'h2):(2'h2)] : wire2)) : (wire1[(3'h5):(2'h2)] >>> (~&(^wire3))));
  assign wire5 = (~^$signed(($unsigned((8'hb0)) + wire0[(3'h7):(2'h3)])));
  assign wire6 = wire4;
  assign wire7 = ((wire4[(3'h4):(2'h2)] ?
                         ((~^wire1) > {wire2}) : $signed(((8'ha2) != (8'h9c)))) ?
                     wire0 : (^wire0[(3'h4):(1'h1)]));
  module8 #() modinst21 (.y(wire20), .wire11(wire4), .wire10(wire1), .wire9(wire0), .clk(clk), .wire12(wire6));
  assign wire22 = ({wire4[(3'h4):(2'h3)]} + wire4);
  assign wire23 = {(wire20 && $signed($signed(wire6)))};
  always
    @(posedge clk) begin
      if ($signed(($unsigned((8'ha1)) ?
          ((wire7 ? wire1 : wire20) ?
              wire20 : {wire3}) : (wire22[(3'h4):(1'h1)] ?
              (^wire20) : (8'ha5)))))
        begin
          reg24 <= (($unsigned((wire5 != wire2)) ?
              wire1[(1'h1):(1'h0)] : (^~$signed((8'hae)))) || wire23[(3'h4):(1'h0)]);
          reg25 <= $unsigned((((~|wire1) ?
              (-(8'ha8)) : (8'ha4)) >>> {reg24[(3'h5):(3'h5)]}));
          reg26 <= wire3;
        end
      else
        begin
          if ((8'haa))
            begin
              reg24 <= (8'ha7);
            end
          else
            begin
              reg24 <= ($signed((+reg25)) ?
                  $unsigned((8'hab)) : $signed(((wire5 ? reg24 : (8'h9e)) ?
                      wire20[(1'h1):(1'h1)] : wire6)));
            end
          reg25 <= $unsigned((~^$unsigned(wire22)));
        end
    end
  always
    @(posedge clk) begin
      reg27 <= ((wire0 ?
              wire5 : (wire7[(2'h3):(1'h1)] ?
                  {reg26} : ((8'h9e) ? wire23 : reg25))) ?
          wire3 : ((^wire3[(2'h3):(1'h0)]) << (((8'h9f) + wire3) ?
              (wire5 * (8'ha8)) : ((8'ha1) ? wire22 : wire22))));
      reg28 <= wire20;
    end
  assign wire29 = {(!$unsigned((wire5 ? wire4 : reg28)))};
  assign wire30 = (wire20 >= $unsigned({$unsigned(wire23)}));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module8
#(parameter param19 = (({(!(8'h9f))} & ({(8'haa)} ? {(8'ha8)} : ((8'ha5) ? (8'ha6) : (8'ha8)))) == (({(8'hac)} ? {(8'haa)} : ((8'ha5) ? (8'ha2) : (8'ha0))) * ((-(8'hab)) ? (~(8'ha6)) : ((8'haa) ? (8'h9d) : (8'h9c))))))
(y, clk, wire12, wire11, wire10, wire9);
  output wire [(32'h29):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire12;
  input wire signed [(2'h3):(1'h0)] wire11;
  input wire signed [(2'h3):(1'h0)] wire10;
  input wire signed [(3'h5):(1'h0)] wire9;
  wire [(3'h7):(1'h0)] wire18;
  wire [(3'h7):(1'h0)] wire17;
  wire signed [(3'h6):(1'h0)] wire13;
  reg [(2'h2):(1'h0)] reg16 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg15 = (1'h0);
  reg [(4'hb):(1'h0)] reg14 = (1'h0);
  assign y = {wire18, wire17, wire13, reg16, reg15, reg14, (1'h0)};
  assign wire13 = $unsigned(wire10);
  always
    @(posedge clk) begin
      reg14 <= wire11[(2'h3):(1'h1)];
      reg15 <= $unsigned((wire13[(2'h2):(1'h1)] ? wire10 : (8'ha6)));
      reg16 <= $unsigned(reg15);
    end
  assign wire17 = wire12[(1'h1):(1'h0)];
  assign wire18 = reg14;
endmodule