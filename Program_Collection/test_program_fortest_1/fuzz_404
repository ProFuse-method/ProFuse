(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param69 = (((8'hb0) * ((|(8'h9e)) < ((8'ha3) ? (8'hab) : (8'h9c)))) ? ((((8'ha9) ? (8'ha5) : (8'ha8)) << {(8'haa)}) ? (8'hae) : ({(8'hb0)} != ((8'h9c) ? (8'ha4) : (8'ha5)))) : (({(8'h9d)} + ((8'ha9) && (8'ha0))) + (((8'hb0) == (8'ha5)) ? (|(8'hab)) : (^(8'had))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'hab):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire3;
  input wire [(3'h7):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire [(4'h9):(1'h0)] wire0;
  wire signed [(3'h6):(1'h0)] wire68;
  wire signed [(4'h8):(1'h0)] wire67;
  wire signed [(4'ha):(1'h0)] wire66;
  wire [(4'h8):(1'h0)] wire50;
  wire signed [(4'hb):(1'h0)] wire60;
  wire [(4'h9):(1'h0)] wire61;
  wire signed [(3'h4):(1'h0)] wire62;
  wire [(2'h2):(1'h0)] wire64;
  reg [(4'h8):(1'h0)] reg10 = (1'h0);
  reg [(2'h3):(1'h0)] reg9 = (1'h0);
  reg [(2'h3):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg6 = (1'h0);
  reg [(4'hb):(1'h0)] reg5 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg4 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg52 = (1'h0);
  reg [(3'h6):(1'h0)] reg53 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg54 = (1'h0);
  reg [(4'ha):(1'h0)] reg55 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg56 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg57 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg58 = (1'h0);
  reg [(3'h7):(1'h0)] reg59 = (1'h0);
  assign y = {wire68,
                 wire67,
                 wire66,
                 wire50,
                 wire60,
                 wire61,
                 wire62,
                 wire64,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 reg52,
                 reg53,
                 reg54,
                 reg55,
                 reg56,
                 reg57,
                 reg58,
                 reg59,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (wire0)
        begin
          reg4 <= $signed(wire1[(3'h6):(1'h0)]);
        end
      else
        begin
          reg4 <= ((wire0[(3'h5):(3'h4)] ?
                  $unsigned($unsigned(wire3)) : ($unsigned(reg4) + (^wire1))) ?
              reg4[(2'h3):(2'h2)] : ((~$signed(wire0)) ?
                  $unsigned({(8'hab)}) : wire0));
          reg5 <= wire3;
          reg6 <= (~^(reg4 ? reg5[(2'h2):(2'h2)] : (!(wire3 != (8'ha4)))));
        end
      if ((~&{$signed(wire3)}))
        begin
          reg7 <= $signed($unsigned(($unsigned(wire2) ?
              (wire2 + (8'ha3)) : $signed(reg5))));
          if (((($unsigned(reg4) ? $unsigned(wire0) : $unsigned(wire0)) ?
                  $unsigned((~^reg6)) : reg7[(1'h1):(1'h0)]) ?
              (((wire0 >= reg4) >> reg4) && (!{wire3})) : (((~^(8'h9f)) ?
                  $unsigned((8'had)) : (reg5 || wire3)) >= (^~wire2[(2'h2):(2'h2)]))))
            begin
              reg8 <= ((reg5 ? (8'ha6) : reg7[(2'h3):(2'h3)]) << ({(reg6 ?
                          (8'ha6) : reg5)} ?
                  ($unsigned(wire2) <= (!wire3)) : (~|wire2)));
            end
          else
            begin
              reg8 <= $unsigned(reg8);
              reg9 <= (!$unsigned(reg4));
            end
          reg10 <= $unsigned(($signed((wire3 & wire3)) || ((reg5 >>> reg8) ?
              wire0[(2'h3):(1'h1)] : ((8'hb0) & wire1))));
        end
      else
        begin
          reg7 <= (wire1[(3'h7):(1'h1)] ?
              $unsigned(((~^wire0) ?
                  (reg6 ^ reg9) : $unsigned((8'had)))) : {{(wire1 < wire0)}});
          reg8 <= (reg9 <= reg7);
        end
    end
  module11 #() modinst51 (wire50, clk, wire2, wire0, reg4, wire3);
  always
    @(posedge clk) begin
      if (wire50)
        begin
          reg52 <= (~&$unsigned($unsigned(reg9[(2'h2):(2'h2)])));
          reg53 <= reg6;
          if (((8'ha4) ? reg53 : (8'hae)))
            begin
              reg54 <= (8'hab);
              reg55 <= $signed((wire0 ^~ {(^~(8'h9c))}));
              reg56 <= $signed((~($signed(wire0) & wire50[(2'h3):(2'h2)])));
            end
          else
            begin
              reg54 <= (($signed(reg56) <= {((8'hb0) ?
                      reg55 : reg4)}) | ($signed((8'h9c)) ?
                  $signed(((8'had) ?
                      reg52 : (8'h9f))) : ((reg6 == wire2) && $unsigned(wire2))));
              reg55 <= ($signed($signed(reg54)) ?
                  (((~(8'hac)) <<< $signed(reg52)) <<< $signed(reg54)) : reg56);
            end
        end
      else
        begin
          reg52 <= {wire3[(3'h5):(3'h4)]};
          reg53 <= reg4;
        end
      if ({$signed($unsigned(reg5))})
        begin
          reg57 <= (((~^reg53) ? $signed(wire0) : wire0) ?
              $signed(($signed(reg54) ? {(8'h9f)} : wire3)) : ((((8'haf) ?
                  (8'hab) : reg4) && reg4[(4'ha):(3'h6)]) > reg4));
        end
      else
        begin
          reg57 <= (8'hae);
          reg58 <= (8'ha1);
          reg59 <= wire1;
        end
    end
  assign wire60 = wire3[(3'h5):(2'h3)];
  assign wire61 = ($signed((wire3 ? (reg7 ? (8'ha6) : reg56) : (~&wire60))) ?
                      reg52[(1'h1):(1'h1)] : (reg53 >= reg54));
  module11 #() modinst63 (.wire13(reg55), .clk(clk), .y(wire62), .wire14(reg56), .wire15(reg59), .wire12(reg6));
  module27 #() modinst65 (wire64, clk, reg54, wire61, wire50, wire1);
  assign wire66 = ((~|($unsigned(reg8) + $signed(wire50))) ? wire62 : reg7);
  assign wire67 = (8'hac);
  assign wire68 = (wire62[(2'h3):(1'h1)] >= ($unsigned($unsigned(reg5)) ?
                      reg7[(2'h3):(2'h2)] : ((reg52 ^~ wire50) ?
                          (reg59 ? reg55 : reg8) : $unsigned(wire1))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11  (y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h71):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire15;
  input wire signed [(3'h6):(1'h0)] wire14;
  input wire [(4'ha):(1'h0)] wire13;
  input wire signed [(3'h5):(1'h0)] wire12;
  wire [(4'hb):(1'h0)] wire49;
  wire [(3'h6):(1'h0)] wire47;
  wire [(4'h9):(1'h0)] wire26;
  wire [(4'ha):(1'h0)] wire16;
  reg signed [(3'h7):(1'h0)] reg25 = (1'h0);
  reg [(4'hb):(1'h0)] reg24 = (1'h0);
  reg [(4'hb):(1'h0)] reg23 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg22 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg21 = (1'h0);
  reg [(4'h9):(1'h0)] reg20 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg19 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg18 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg17 = (1'h0);
  assign y = {wire49,
                 wire47,
                 wire26,
                 wire16,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 reg20,
                 reg19,
                 reg18,
                 reg17,
                 (1'h0)};
  assign wire16 = ($signed($signed(wire12[(3'h4):(3'h4)])) ?
                      wire12[(2'h2):(2'h2)] : ((wire15[(3'h4):(2'h3)] < wire12) * wire13[(4'ha):(2'h3)]));
  always
    @(posedge clk) begin
      reg17 <= ($unsigned((!(wire13 ? wire14 : wire13))) ?
          $signed(wire13) : ($signed({wire12}) >>> $signed((^wire16))));
    end
  always
    @(posedge clk) begin
      reg18 <= wire16;
      reg19 <= {{(|(reg18 ? wire12 : (8'haf)))}};
      if (((|((^~wire16) - (~&reg19))) ?
          $signed((reg19[(3'h7):(3'h7)] ?
              (8'ha6) : (reg18 ~^ (8'h9d)))) : (^wire12)))
        begin
          if (reg17[(3'h5):(1'h1)])
            begin
              reg20 <= (^~(^$unsigned(reg18)));
              reg21 <= $unsigned($unsigned($unsigned((reg19 ?
                  reg20 : wire15))));
              reg22 <= reg17[(1'h1):(1'h0)];
            end
          else
            begin
              reg20 <= wire16;
              reg21 <= $signed(((~|$signed(reg21)) >> (wire13[(3'h7):(3'h4)] ?
                  reg18 : $unsigned(wire14))));
            end
          if (reg22[(3'h6):(1'h1)])
            begin
              reg23 <= (reg21[(2'h3):(2'h2)] > (^(&$unsigned((8'hab)))));
              reg24 <= {$unsigned((!$signed(reg23)))};
            end
          else
            begin
              reg23 <= ((8'hb0) | wire15);
              reg24 <= wire14[(2'h3):(2'h2)];
            end
          reg25 <= (((~^reg24[(4'ha):(2'h3)]) >> (!(reg24 ?
              (8'hac) : reg24))) ^~ $signed((!(|reg20))));
        end
      else
        begin
          reg20 <= $signed(reg25[(3'h7):(1'h1)]);
          reg21 <= wire16[(3'h6):(1'h0)];
          if ($unsigned(((8'h9e) ?
              $unsigned((~wire14)) : ((wire15 ?
                  reg22 : (8'hae)) >= $signed(wire12)))))
            begin
              reg22 <= $signed(((8'ha3) ?
                  ($signed((8'haf)) ?
                      reg20[(3'h7):(2'h3)] : $unsigned(reg23)) : $unsigned($signed(reg18))));
              reg23 <= $signed((((^reg24) && (-(8'ha5))) ?
                  (reg21[(1'h1):(1'h1)] ?
                      $unsigned(reg24) : reg24[(3'h6):(1'h0)]) : ((~^(8'had)) <<< (reg20 << wire15))));
            end
          else
            begin
              reg22 <= (((reg25 && reg21) ~^ (reg23 <= ((8'ha1) >>> reg19))) < reg24);
            end
        end
    end
  assign wire26 = $unsigned(reg19);
  module27 #() modinst48 (.wire29(reg23), .wire28(reg20), .clk(clk), .y(wire47), .wire30(reg19), .wire31(reg25));
  assign wire49 = $signed(reg25[(3'h7):(3'h7)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module27
#(parameter param46 = ((^~{((8'ha6) ^ (8'haa))}) ? ((((8'had) + (8'ha8)) ? ((8'h9d) ? (8'hab) : (8'had)) : (+(8'ha8))) ^ (!((8'hab) == (8'ha1)))) : (8'haf)))
(y, clk, wire31, wire30, wire29, wire28);
  output wire [(32'h78):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire31;
  input wire [(3'h6):(1'h0)] wire30;
  input wire signed [(4'h8):(1'h0)] wire29;
  input wire [(4'h9):(1'h0)] wire28;
  wire [(4'h9):(1'h0)] wire45;
  wire signed [(4'ha):(1'h0)] wire43;
  wire signed [(4'h8):(1'h0)] wire42;
  wire [(4'h9):(1'h0)] wire33;
  wire signed [(4'ha):(1'h0)] wire32;
  reg signed [(3'h5):(1'h0)] reg44 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg41 = (1'h0);
  reg [(3'h5):(1'h0)] reg40 = (1'h0);
  reg [(4'h9):(1'h0)] reg39 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg38 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg37 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg36 = (1'h0);
  reg [(3'h4):(1'h0)] reg35 = (1'h0);
  reg [(4'hb):(1'h0)] reg34 = (1'h0);
  assign y = {wire45,
                 wire43,
                 wire42,
                 wire33,
                 wire32,
                 reg44,
                 reg41,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 reg36,
                 reg35,
                 reg34,
                 (1'h0)};
  assign wire32 = $signed($signed($unsigned($unsigned(wire31))));
  assign wire33 = (~^((8'ha7) ^ $unsigned(wire29)));
  always
    @(posedge clk) begin
      reg34 <= (wire31[(1'h0):(1'h0)] ?
          (^~{wire33[(3'h7):(2'h3)]}) : (wire32[(1'h1):(1'h0)] ?
              {(wire30 ? wire31 : wire33)} : (!wire31)));
      if ($signed($unsigned((&(~^(8'ha1))))))
        begin
          reg35 <= $unsigned($signed(((wire31 ?
              wire32 : wire30) ^ $signed(wire28))));
        end
      else
        begin
          if ($unsigned(($signed({wire30}) ?
              $signed(reg34) : $signed((wire29 ^ (8'ha0))))))
            begin
              reg35 <= ({$unsigned($signed((8'had)))} ?
                  ({$signed(wire29)} != $signed(wire29)) : $signed((~(reg35 < wire30))));
              reg36 <= (~&(wire30 ?
                  ({reg34} ? (~&wire31) : reg35) : {(wire31 < (8'haa))}));
              reg37 <= (8'ha9);
            end
          else
            begin
              reg35 <= ($unsigned((reg34[(3'h7):(1'h1)] || $unsigned(wire32))) ?
                  reg36 : wire29[(1'h1):(1'h0)]);
              reg36 <= $signed({((8'h9c) ^ $unsigned((8'ha8)))});
              reg37 <= wire30[(3'h5):(2'h3)];
            end
          if (((reg37[(3'h6):(2'h3)] >> (wire28[(2'h2):(1'h1)] ^~ wire29[(3'h6):(2'h2)])) >> reg36))
            begin
              reg38 <= wire31[(3'h5):(3'h4)];
              reg39 <= ($signed(((^~reg36) != (8'hab))) == $unsigned(wire31[(2'h2):(1'h1)]));
              reg40 <= $unsigned({reg38});
            end
          else
            begin
              reg38 <= $signed($signed((-wire33[(4'h9):(1'h0)])));
              reg39 <= (8'ha5);
              reg40 <= (reg35[(3'h4):(2'h2)] ~^ $signed(((8'haa) >> $signed((8'hb0)))));
            end
          reg41 <= wire30;
        end
    end
  assign wire42 = (reg38 ? {reg35[(2'h2):(1'h0)]} : (~&$unsigned((8'ha2))));
  assign wire43 = reg38;
  always
    @(posedge clk) begin
      reg44 <= (~(8'h9e));
    end
  assign wire45 = (($signed((reg38 != wire42)) ?
                          (~^(8'haa)) : ((reg36 ?
                              reg40 : (8'ha1)) ~^ (^wire29))) ?
                      $signed(reg40) : $signed(((^~reg40) ^ reg41)));
endmodule