(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h19):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire3;
  input wire [(4'ha):(1'h0)] wire2;
  input wire [(4'ha):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire [(2'h3):(1'h0)] wire49;
  wire [(2'h2):(1'h0)] wire48;
  wire signed [(2'h3):(1'h0)] wire47;
  wire [(3'h5):(1'h0)] wire46;
  wire signed [(4'hb):(1'h0)] wire44;
  assign y = {wire49, wire48, wire47, wire46, wire44, (1'h0)};
  module4 #() modinst45 (wire44, clk, wire1, wire2, wire3, wire0);
  assign wire46 = (8'ha7);
  assign wire47 = wire46;
  assign wire48 = $unsigned($signed(wire3[(3'h6):(3'h4)]));
  assign wire49 = $unsigned(($unsigned((^wire48)) ?
                      $unsigned((wire44 ? wire1 : wire46)) : ((&(8'ha9)) ?
                          wire0 : wire0[(3'h6):(3'h6)])));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h7a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire8;
  input wire signed [(4'ha):(1'h0)] wire7;
  input wire [(4'h8):(1'h0)] wire6;
  input wire [(4'hb):(1'h0)] wire5;
  wire [(4'ha):(1'h0)] wire35;
  wire [(4'ha):(1'h0)] wire25;
  wire signed [(2'h2):(1'h0)] wire9;
  reg signed [(3'h6):(1'h0)] reg43 = (1'h0);
  reg [(4'hb):(1'h0)] reg42 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg41 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg40 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg39 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg38 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg37 = (1'h0);
  reg [(4'ha):(1'h0)] reg36 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg34 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg33 = (1'h0);
  reg [(3'h5):(1'h0)] reg32 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg31 = (1'h0);
  reg [(3'h4):(1'h0)] reg30 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg29 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg28 = (1'h0);
  reg [(4'h9):(1'h0)] reg27 = (1'h0);
  assign y = {wire35,
                 wire25,
                 wire9,
                 reg43,
                 reg42,
                 reg41,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 reg36,
                 reg34,
                 reg33,
                 reg32,
                 reg31,
                 reg30,
                 reg29,
                 reg28,
                 reg27,
                 (1'h0)};
  assign wire9 = {($unsigned({wire8}) ?
                         (wire8[(3'h4):(1'h1)] ?
                             (wire5 ?
                                 (8'ha9) : wire5) : {wire5}) : (+{wire7}))};
  module10 #() modinst26 (.wire12(wire7), .wire13(wire6), .y(wire25), .clk(clk), .wire11(wire5), .wire14(wire8));
  always
    @(posedge clk) begin
      reg27 <= wire8;
      if ($signed((((wire25 ? wire8 : wire8) >>> (wire5 ? (8'hb0) : wire9)) ?
          wire25[(3'h5):(3'h4)] : $signed($unsigned(wire5)))))
        begin
          reg28 <= ((|wire7) ?
              ((8'hac) >> (((8'ha0) ? (8'h9e) : wire5) ?
                  $signed(wire5) : $signed(wire6))) : (&{$unsigned(wire6)}));
        end
      else
        begin
          if ((|(8'ha1)))
            begin
              reg28 <= (($unsigned(reg27) ?
                  (wire6[(2'h2):(2'h2)] ?
                      wire8[(3'h6):(3'h6)] : $unsigned(wire6)) : ((8'ha2) ?
                      $signed(wire25) : reg28)) && ($unsigned((&wire7)) <<< (^~wire9[(1'h0):(1'h0)])));
              reg29 <= {((8'hab) ?
                      wire9[(1'h1):(1'h1)] : $unsigned(wire5[(1'h0):(1'h0)]))};
            end
          else
            begin
              reg28 <= wire6;
              reg29 <= wire6;
              reg30 <= wire25;
            end
          reg31 <= wire25;
        end
      reg32 <= $unsigned({({(8'hac)} ? wire9 : reg27[(3'h5):(3'h5)])});
    end
  always
    @(posedge clk) begin
      reg33 <= wire6[(1'h1):(1'h0)];
      reg34 <= reg33;
    end
  assign wire35 = reg28;
  always
    @(posedge clk) begin
      reg36 <= wire6;
    end
  always
    @(posedge clk) begin
      if ($signed(reg32[(3'h5):(1'h1)]))
        begin
          reg37 <= ($unsigned($signed($unsigned(wire7))) ?
              ((&(^~reg34)) ?
                  ($signed(wire5) ?
                      $signed((8'haf)) : (reg32 - reg29)) : $signed(reg31)) : wire6);
          reg38 <= wire25[(1'h0):(1'h0)];
        end
      else
        begin
          reg37 <= $unsigned((reg31[(3'h7):(1'h1)] ?
              $unsigned($unsigned(reg27)) : wire9));
          if (wire25[(1'h0):(1'h0)])
            begin
              reg38 <= $unsigned((8'ha2));
              reg39 <= $signed($unsigned((wire25 ? reg30 : {reg38})));
            end
          else
            begin
              reg38 <= (-{$unsigned($unsigned(reg34))});
              reg39 <= wire9[(1'h0):(1'h0)];
              reg40 <= ((~^{(reg29 ~^ reg28)}) + {wire35});
            end
        end
      reg41 <= $unsigned(($unsigned((reg38 ? wire8 : wire5)) ?
          wire9[(1'h0):(1'h0)] : {reg40}));
      if (({$signed($signed(reg28))} ?
          $unsigned((~^(wire25 != (8'ha4)))) : (^~$unsigned({reg30}))))
        begin
          if (reg32)
            begin
              reg42 <= reg37[(2'h2):(1'h0)];
              reg43 <= {(((reg40 > (8'hae)) <= (8'ha9)) < (8'had))};
            end
          else
            begin
              reg42 <= $signed((((~reg40) ? (~reg40) : (8'haa)) ?
                  (~&(reg42 ? (8'ha1) : reg29)) : $unsigned((reg32 ^~ reg43))));
              reg43 <= ({(reg27 >>> {(8'haf)})} ?
                  wire35[(4'h9):(3'h5)] : wire25);
            end
        end
      else
        begin
          if ($unsigned((8'h9d)))
            begin
              reg42 <= wire7;
              reg43 <= $signed($signed(((reg28 + wire7) >> (^reg39))));
            end
          else
            begin
              reg42 <= ((^~(wire8[(1'h1):(1'h1)] == (reg30 > reg32))) & $unsigned(wire25));
              reg43 <= reg43[(2'h2):(2'h2)];
            end
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10  (y, clk, wire14, wire13, wire12, wire11);
  output wire [(32'h32):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire14;
  input wire signed [(4'h8):(1'h0)] wire13;
  input wire signed [(3'h6):(1'h0)] wire12;
  input wire [(2'h2):(1'h0)] wire11;
  wire signed [(3'h5):(1'h0)] wire24;
  wire signed [(3'h6):(1'h0)] wire22;
  wire [(3'h4):(1'h0)] wire21;
  wire [(2'h2):(1'h0)] wire20;
  wire [(2'h3):(1'h0)] wire19;
  wire [(2'h3):(1'h0)] wire18;
  wire signed [(3'h7):(1'h0)] wire15;
  reg signed [(2'h2):(1'h0)] reg23 = (1'h0);
  reg [(4'ha):(1'h0)] reg17 = (1'h0);
  reg [(3'h7):(1'h0)] reg16 = (1'h0);
  assign y = {wire24,
                 wire22,
                 wire21,
                 wire20,
                 wire19,
                 wire18,
                 wire15,
                 reg23,
                 reg17,
                 reg16,
                 (1'h0)};
  assign wire15 = $unsigned($signed(wire11[(1'h1):(1'h1)]));
  always
    @(posedge clk) begin
      reg16 <= {(8'hb0)};
      reg17 <= $unsigned((~^(~&$unsigned(wire11))));
    end
  assign wire18 = (reg16[(3'h4):(1'h1)] ?
                      wire14 : ((+$unsigned(reg17)) ?
                          wire12[(1'h1):(1'h1)] : {$unsigned(wire13)}));
  assign wire19 = ($signed(reg17[(4'h8):(2'h2)]) ?
                      wire18[(1'h1):(1'h0)] : (~|(8'ha6)));
  assign wire20 = (wire18 << reg16);
  assign wire21 = wire13;
  assign wire22 = wire15[(3'h7):(2'h2)];
  always
    @(posedge clk) begin
      reg23 <= $unsigned((^~wire20[(2'h2):(1'h0)]));
    end
  assign wire24 = wire19[(1'h1):(1'h1)];
endmodule