(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param35 = (~|((((8'had) ? (8'had) : (8'had)) & ((8'h9d) ? (8'hb0) : (8'h9e))) ? ((8'haa) << (|(8'ha9))) : (((8'had) - (8'hae)) ? (~^(8'ha4)) : ((8'ha2) ? (8'ha5) : (8'ha7))))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h41):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire0;
  input wire [(4'hb):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire [(3'h4):(1'h0)] wire3;
  wire signed [(3'h7):(1'h0)] wire4;
  wire signed [(4'hb):(1'h0)] wire12;
  wire [(3'h6):(1'h0)] wire33;
  reg [(4'h9):(1'h0)] reg5 = (1'h0);
  reg [(4'h9):(1'h0)] reg6 = (1'h0);
  reg [(2'h3):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg8 = (1'h0);
  reg [(2'h2):(1'h0)] reg9 = (1'h0);
  reg [(4'h8):(1'h0)] reg10 = (1'h0);
  reg [(3'h4):(1'h0)] reg11 = (1'h0);
  assign y = {wire4,
                 wire12,
                 wire33,
                 reg5,
                 reg6,
                 reg7,
                 reg8,
                 reg9,
                 reg10,
                 reg11,
                 (1'h0)};
  assign wire4 = (wire2[(3'h7):(3'h4)] ? wire2 : (!wire2[(4'h9):(1'h1)]));
  always
    @(posedge clk) begin
      reg5 <= $unsigned($signed((~(wire3 <<< (8'hae)))));
      reg6 <= $signed($unsigned($signed((~wire2))));
      if ($signed(reg5[(2'h2):(1'h1)]))
        begin
          reg7 <= (~^(^{wire4[(1'h1):(1'h0)]}));
          reg8 <= ($signed(wire3[(3'h4):(2'h2)]) ? reg7[(1'h1):(1'h0)] : wire4);
          if (wire1[(4'h8):(1'h0)])
            begin
              reg9 <= $signed(reg8[(1'h0):(1'h0)]);
              reg10 <= (((8'ha0) ^~ (+$signed(reg7))) != wire1[(3'h6):(1'h0)]);
              reg11 <= (~^$unsigned((!$unsigned(wire1))));
            end
          else
            begin
              reg9 <= (~$unsigned(reg8));
              reg10 <= (~|($unsigned((wire2 ^ reg5)) << reg8));
            end
        end
      else
        begin
          reg7 <= $unsigned(($unsigned($unsigned(wire1)) * ((reg11 <<< reg7) <= $signed(reg9))));
          reg8 <= (~|(!(~&reg8[(2'h3):(1'h1)])));
        end
    end
  assign wire12 = (reg6 ? ($signed(reg5) == (8'h9e)) : (8'ha3));
  module13 #() modinst34 (.y(wire33), .clk(clk), .wire17(wire0), .wire14(wire12), .wire15(reg11), .wire16(wire4));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13
#(parameter param32 = (^{({(8'ha2)} || ((8'h9d) ? (8'hac) : (8'hab)))}))
(y, clk, wire17, wire16, wire15, wire14);
  output wire [(32'h58):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire17;
  input wire signed [(3'h7):(1'h0)] wire16;
  input wire signed [(3'h4):(1'h0)] wire15;
  input wire signed [(4'hb):(1'h0)] wire14;
  wire [(4'h8):(1'h0)] wire31;
  wire [(4'h9):(1'h0)] wire30;
  wire [(3'h6):(1'h0)] wire29;
  wire signed [(2'h3):(1'h0)] wire25;
  wire signed [(4'hb):(1'h0)] wire24;
  wire [(4'ha):(1'h0)] wire23;
  wire [(2'h2):(1'h0)] wire19;
  wire [(4'hb):(1'h0)] wire18;
  reg signed [(3'h4):(1'h0)] reg28 = (1'h0);
  reg [(3'h6):(1'h0)] reg27 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg26 = (1'h0);
  reg [(3'h5):(1'h0)] reg22 = (1'h0);
  reg [(2'h2):(1'h0)] reg21 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg20 = (1'h0);
  assign y = {wire31,
                 wire30,
                 wire29,
                 wire25,
                 wire24,
                 wire23,
                 wire19,
                 wire18,
                 reg28,
                 reg27,
                 reg26,
                 reg22,
                 reg21,
                 reg20,
                 (1'h0)};
  assign wire18 = wire14;
  assign wire19 = ((~(^~wire15)) - wire15[(2'h3):(1'h0)]);
  always
    @(posedge clk) begin
      if (wire14)
        begin
          reg20 <= ($unsigned((~(-wire15))) <= (~($unsigned(wire19) ?
              $unsigned(wire16) : wire15[(3'h4):(1'h0)])));
          reg21 <= {((-(wire19 ? (8'h9c) : (8'hae))) ?
                  $unsigned(wire17) : {(|(8'h9e))})};
        end
      else
        begin
          reg20 <= (wire15[(2'h2):(2'h2)] ?
              reg20 : (+$unsigned($signed(wire19))));
          reg21 <= wire18[(1'h1):(1'h1)];
          reg22 <= wire18[(1'h0):(1'h0)];
        end
    end
  assign wire23 = wire14;
  assign wire24 = ((|wire15[(2'h2):(2'h2)]) || (8'had));
  assign wire25 = wire14[(4'hb):(3'h6)];
  always
    @(posedge clk) begin
      reg26 <= ({{(reg21 ? wire23 : reg22)}} ?
          ($signed(wire15) ~^ wire25) : wire16);
      reg27 <= $signed({$signed($unsigned(reg22))});
      reg28 <= reg20;
    end
  assign wire29 = $signed((+reg26[(1'h1):(1'h0)]));
  assign wire30 = wire23[(3'h7):(3'h5)];
  assign wire31 = $signed(wire17);
endmodule