(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h84):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire3;
  input wire [(3'h7):(1'h0)] wire2;
  input wire [(4'h9):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire signed [(3'h7):(1'h0)] wire21;
  wire signed [(4'h8):(1'h0)] wire20;
  wire [(4'ha):(1'h0)] wire15;
  wire [(2'h3):(1'h0)] wire14;
  wire [(3'h7):(1'h0)] wire13;
  wire [(3'h7):(1'h0)] wire6;
  reg signed [(4'h8):(1'h0)] reg19 = (1'h0);
  reg [(4'h8):(1'h0)] reg18 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg17 = (1'h0);
  reg [(3'h6):(1'h0)] reg16 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg12 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg11 = (1'h0);
  reg [(4'hb):(1'h0)] reg10 = (1'h0);
  reg [(4'hb):(1'h0)] reg9 = (1'h0);
  reg [(2'h2):(1'h0)] reg8 = (1'h0);
  reg [(3'h5):(1'h0)] reg7 = (1'h0);
  reg [(4'hb):(1'h0)] reg5 = (1'h0);
  reg [(3'h4):(1'h0)] reg4 = (1'h0);
  assign y = {wire21,
                 wire20,
                 wire15,
                 wire14,
                 wire13,
                 wire6,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire1[(1'h0):(1'h0)];
      reg5 <= $signed((^$signed(wire0[(4'h9):(3'h4)])));
    end
  assign wire6 = (wire0[(3'h5):(1'h0)] ?
                     (({reg5} * (^~wire3)) >>> {$signed(wire1)}) : wire2);
  always
    @(posedge clk) begin
      if (wire3)
        begin
          reg7 <= $unsigned(wire0[(4'h9):(2'h3)]);
          reg8 <= (+(reg7 ? $signed(reg4[(1'h0):(1'h0)]) : $signed(wire0)));
          reg9 <= (~^reg8[(1'h0):(1'h0)]);
        end
      else
        begin
          reg7 <= wire2[(1'h0):(1'h0)];
        end
      reg10 <= (^(~&{{wire1}}));
      reg11 <= (8'haa);
    end
  always
    @(posedge clk) begin
      reg12 <= $signed((wire0[(1'h0):(1'h0)] ?
          $unsigned(((8'haf) ? reg7 : wire0)) : {$unsigned(reg5)}));
    end
  assign wire13 = (reg7 ?
                      (reg4 << ($unsigned(reg4) < wire0)) : {((wire2 ?
                              reg4 : (8'ha8)) ~^ $unsigned((8'hae)))});
  assign wire14 = wire13;
  assign wire15 = (($unsigned($unsigned((8'hae))) ?
                      $unsigned(reg10[(3'h6):(3'h4)]) : {reg11}) || $signed(({wire13} || wire6[(1'h0):(1'h0)])));
  always
    @(posedge clk) begin
      if (($unsigned(($unsigned(wire3) ? (wire15 < reg7) : reg12)) <= reg7))
        begin
          reg16 <= ((&{(reg7 <= (8'h9e))}) ?
              ((&reg12) < ($signed((8'ha2)) + (reg11 ?
                  wire6 : wire2))) : ((reg12 ? {wire0} : {wire2}) ?
                  (((8'ha7) ? reg10 : reg10) | $unsigned(reg4)) : wire3));
          reg17 <= {{(&$unsigned(wire15))}};
          reg18 <= $signed(reg9[(1'h1):(1'h1)]);
        end
      else
        begin
          reg16 <= ((8'hae) ? (~|reg5) : (&$unsigned((reg10 < (8'ha6)))));
          reg17 <= wire14[(1'h1):(1'h0)];
          reg18 <= (8'h9c);
        end
      reg19 <= wire2;
    end
  assign wire20 = $signed(({(~wire14)} >= $unsigned(reg11[(4'h9):(4'h8)])));
  assign wire21 = reg5;
endmodule