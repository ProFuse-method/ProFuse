(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param47 = {(({(8'ha7)} & ((8'ha7) ? (8'ha1) : (8'h9e))) ? (((8'ha6) & (8'ha2)) ? ((8'ha4) ? (8'haa) : (8'had)) : (&(8'had))) : (((8'had) != (8'hab)) ? ((8'ha0) ^ (8'h9d)) : ((8'had) == (8'hae))))})
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h5b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire3;
  input wire [(4'h9):(1'h0)] wire2;
  input wire signed [(3'h4):(1'h0)] wire1;
  input wire signed [(4'h8):(1'h0)] wire0;
  wire [(3'h7):(1'h0)] wire46;
  wire signed [(4'h9):(1'h0)] wire45;
  wire [(4'h8):(1'h0)] wire44;
  wire [(4'ha):(1'h0)] wire43;
  wire signed [(4'hb):(1'h0)] wire40;
  wire [(3'h5):(1'h0)] wire38;
  wire [(3'h6):(1'h0)] wire7;
  wire signed [(4'h8):(1'h0)] wire4;
  reg signed [(3'h6):(1'h0)] reg42 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg41 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg6 = (1'h0);
  reg [(3'h5):(1'h0)] reg5 = (1'h0);
  assign y = {wire46,
                 wire45,
                 wire44,
                 wire43,
                 wire40,
                 wire38,
                 wire7,
                 wire4,
                 reg42,
                 reg41,
                 reg6,
                 reg5,
                 (1'h0)};
  assign wire4 = $signed($unsigned($signed($signed((8'h9c)))));
  always
    @(posedge clk) begin
      reg5 <= (~|{($signed(wire1) ^ (wire3 && wire1))});
      reg6 <= {wire0};
    end
  assign wire7 = reg6[(2'h3):(1'h0)];
  module8 #() modinst39 (wire38, clk, wire1, wire0, wire4, wire2);
  assign wire40 = reg5;
  always
    @(posedge clk) begin
      reg41 <= $unsigned(({(wire7 ? wire1 : wire1)} ^ (+wire0[(1'h0):(1'h0)])));
      reg42 <= $unsigned(reg41[(1'h1):(1'h0)]);
    end
  assign wire43 = {reg42[(2'h3):(1'h0)]};
  assign wire44 = (reg41[(3'h4):(1'h0)] ?
                      wire2[(1'h0):(1'h0)] : ($unsigned((|(8'hac))) ?
                          (~|(8'h9c)) : $unsigned((-wire40))));
  assign wire45 = wire1;
  assign wire46 = $signed(wire1);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module8  (y, clk, wire12, wire11, wire10, wire9);
  output wire [(32'h3c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire12;
  input wire [(4'h8):(1'h0)] wire11;
  input wire [(3'h5):(1'h0)] wire10;
  input wire [(4'h9):(1'h0)] wire9;
  wire [(2'h2):(1'h0)] wire31;
  wire signed [(2'h2):(1'h0)] wire29;
  wire signed [(3'h5):(1'h0)] wire14;
  wire [(4'hb):(1'h0)] wire13;
  reg signed [(4'hb):(1'h0)] reg37 = (1'h0);
  reg [(2'h2):(1'h0)] reg36 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg35 = (1'h0);
  reg [(4'h9):(1'h0)] reg34 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg33 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg32 = (1'h0);
  assign y = {wire31,
                 wire29,
                 wire14,
                 wire13,
                 reg37,
                 reg36,
                 reg35,
                 reg34,
                 reg33,
                 reg32,
                 (1'h0)};
  assign wire13 = wire12[(2'h3):(2'h2)];
  assign wire14 = (({$unsigned(wire9)} ?
                      wire9 : wire10[(3'h4):(2'h3)]) - (~&wire11));
  module15 #() modinst30 (.clk(clk), .wire17(wire11), .wire16(wire12), .y(wire29), .wire18(wire9), .wire19(wire13));
  assign wire31 = ((-wire9) ^ (wire10[(2'h3):(2'h2)] * ((~|wire11) ?
                      (!wire11) : $signed(wire10))));
  always
    @(posedge clk) begin
      if ({wire13})
        begin
          if ((wire13[(4'hb):(1'h1)] ?
              (wire31[(1'h1):(1'h1)] >= wire9[(3'h5):(1'h1)]) : (((wire13 ^~ wire31) ?
                      {wire9} : wire29) ?
                  $signed((wire29 ~^ wire9)) : $unsigned(wire11))))
            begin
              reg32 <= ((8'ha5) ? (wire9 ? wire11 : wire29) : wire31);
              reg33 <= $unsigned(($signed({(8'ha3)}) > (wire31 ~^ (wire29 ?
                  wire10 : wire10))));
              reg34 <= $signed(((!reg32[(4'h9):(3'h5)]) ?
                  $signed({wire29}) : wire10));
            end
          else
            begin
              reg32 <= reg33;
              reg33 <= wire14[(1'h0):(1'h0)];
              reg34 <= {$signed((-$unsigned(wire13)))};
            end
          if (wire14[(3'h5):(2'h2)])
            begin
              reg35 <= (|(-(^(wire12 ? wire13 : reg34))));
              reg36 <= $unsigned(($signed((!wire10)) ?
                  {wire14} : ($signed((8'h9e)) ?
                      (wire13 ? reg32 : wire12) : (reg34 ? wire13 : wire13))));
              reg37 <= ($unsigned(reg36[(1'h0):(1'h0)]) ^~ (|$signed($unsigned(reg32))));
            end
          else
            begin
              reg35 <= $unsigned(wire9);
            end
        end
      else
        begin
          reg32 <= reg32[(2'h3):(1'h1)];
          reg33 <= (!(((reg37 ? (8'h9e) : (8'ha6)) | (wire29 + wire13)) ?
              (-{reg37}) : reg36));
          reg34 <= {$unsigned(({wire29} && reg32))};
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15
#(parameter param28 = ({(((8'hab) == (8'ha5)) ? ((8'h9f) == (8'ha3)) : ((8'ha4) >>> (8'hb0)))} ? (((|(8'ha7)) ? ((8'haa) ~^ (8'ha0)) : ((8'h9e) ? (8'ha3) : (8'ha7))) ? (((8'h9e) - (8'hb0)) ? ((8'ha4) ? (8'ha5) : (8'hb0)) : {(8'ha9)}) : (((8'ha4) >> (8'ha1)) >= (-(8'ha8)))) : ((((8'hb0) >> (8'h9d)) << ((8'ha0) & (8'had))) >> (8'h9c))))
(y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h3f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire19;
  input wire [(2'h2):(1'h0)] wire18;
  input wire [(4'h8):(1'h0)] wire17;
  input wire signed [(3'h4):(1'h0)] wire16;
  wire signed [(2'h3):(1'h0)] wire27;
  wire signed [(3'h5):(1'h0)] wire26;
  wire [(4'ha):(1'h0)] wire25;
  wire [(4'h9):(1'h0)] wire24;
  wire signed [(4'ha):(1'h0)] wire23;
  wire signed [(4'ha):(1'h0)] wire22;
  wire [(4'hb):(1'h0)] wire21;
  reg signed [(3'h4):(1'h0)] reg20 = (1'h0);
  assign y = {wire27,
                 wire26,
                 wire25,
                 wire24,
                 wire23,
                 wire22,
                 wire21,
                 reg20,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg20 <= (|(&{$signed(wire18)}));
    end
  assign wire21 = {(wire18 << wire16[(2'h3):(2'h2)])};
  assign wire22 = ((~|$unsigned((reg20 ? reg20 : wire16))) ?
                      $unsigned(reg20) : {(&$unsigned(wire19))});
  assign wire23 = $signed($unsigned((8'ha9)));
  assign wire24 = (((wire21[(3'h5):(2'h2)] ?
                      $signed(wire18) : (wire18 ?
                          wire17 : wire18)) <<< $signed($unsigned(wire22))) >>> ($signed($unsigned(reg20)) ?
                      {$signed(wire22)} : (!wire21[(2'h2):(1'h0)])));
  assign wire25 = $signed((($signed(wire23) * $signed(wire17)) ?
                      ((8'hb0) ?
                          reg20[(2'h2):(1'h1)] : $unsigned(wire16)) : (wire16 & (wire24 ^~ wire17))));
  assign wire26 = (8'h9d);
  assign wire27 = ((~&(-((8'h9d) ? wire18 : reg20))) > $signed((((8'ha9) ?
                          wire23 : wire18) ?
                      wire17[(3'h5):(2'h2)] : (wire19 ? wire24 : wire16))));
endmodule