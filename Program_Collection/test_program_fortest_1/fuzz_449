(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h49):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h2):(1'h0)] wire0;
  input wire [(3'h7):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire2;
  input wire [(3'h5):(1'h0)] wire3;
  wire [(2'h2):(1'h0)] wire4;
  wire signed [(4'h8):(1'h0)] wire13;
  wire signed [(3'h6):(1'h0)] wire52;
  reg signed [(4'h9):(1'h0)] reg5 = (1'h0);
  reg [(4'hb):(1'h0)] reg6 = (1'h0);
  reg [(4'h9):(1'h0)] reg7 = (1'h0);
  reg [(2'h2):(1'h0)] reg8 = (1'h0);
  reg [(4'ha):(1'h0)] reg9 = (1'h0);
  reg [(2'h2):(1'h0)] reg10 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg11 = (1'h0);
  reg [(4'ha):(1'h0)] reg12 = (1'h0);
  assign y = {wire4,
                 wire13,
                 wire52,
                 reg5,
                 reg6,
                 reg7,
                 reg8,
                 reg9,
                 reg10,
                 reg11,
                 reg12,
                 (1'h0)};
  assign wire4 = $unsigned((wire0 != wire1));
  always
    @(posedge clk) begin
      if (({wire2[(3'h6):(3'h6)]} ? wire4 : (wire2 == {wire0})))
        begin
          reg5 <= wire3[(3'h4):(2'h3)];
          reg6 <= (((+wire0[(2'h2):(2'h2)]) ?
                  $signed($signed(reg5)) : ((&wire0) ?
                      (wire1 ~^ reg5) : $signed(reg5))) ?
              (($signed(wire1) * (8'h9c)) ?
                  wire1 : wire2[(4'h9):(3'h5)]) : $unsigned(((wire2 < wire4) ^ $unsigned(wire3))));
          reg7 <= (~|$unsigned(wire4));
        end
      else
        begin
          if ((8'ha1))
            begin
              reg5 <= (wire1 ?
                  $signed($signed((wire3 ?
                      reg5 : wire2))) : (wire3[(2'h3):(1'h1)] ?
                      (^~$signed(wire0)) : $unsigned($unsigned(reg7))));
            end
          else
            begin
              reg5 <= (!(^~$unsigned({reg5})));
              reg6 <= (~&$unsigned($unsigned((|wire3))));
            end
        end
      if ($unsigned(((~|wire0[(1'h1):(1'h0)]) > reg5[(4'h9):(2'h2)])))
        begin
          if ((^~wire0))
            begin
              reg8 <= (^($unsigned({(8'h9c)}) ?
                  wire3[(1'h0):(1'h0)] : ((reg5 <= reg5) + $unsigned(wire4))));
              reg9 <= wire3[(1'h1):(1'h0)];
            end
          else
            begin
              reg8 <= (8'ha3);
              reg9 <= reg5[(4'h8):(1'h1)];
              reg10 <= wire2;
            end
        end
      else
        begin
          if ((~|((^$unsigned(reg6)) ^ reg8)))
            begin
              reg8 <= wire2[(3'h7):(3'h6)];
              reg9 <= wire3[(2'h2):(1'h1)];
              reg10 <= ((wire3 && (wire0[(2'h2):(2'h2)] ?
                  (wire1 ? wire2 : reg6) : wire2)) + (~reg5));
            end
          else
            begin
              reg8 <= ($signed((&wire1[(3'h4):(2'h2)])) <<< $unsigned((|reg5[(2'h2):(1'h1)])));
            end
          if ({wire2[(3'h4):(1'h1)]})
            begin
              reg11 <= $unsigned(wire4);
            end
          else
            begin
              reg11 <= reg9;
            end
          if ($signed((reg9 ? {(reg8 == reg6)} : reg8)))
            begin
              reg12 <= wire1[(2'h2):(1'h0)];
            end
          else
            begin
              reg12 <= reg12;
            end
        end
    end
  assign wire13 = ($signed($signed($signed(reg10))) == (reg12[(3'h7):(3'h7)] & {reg11[(1'h1):(1'h0)]}));
  module14 #() modinst53 (wire52, clk, reg12, reg7, reg9, wire2);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module14  (y, clk, wire18, wire17, wire16, wire15);
  output wire [(32'h35):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire18;
  input wire signed [(4'h9):(1'h0)] wire17;
  input wire signed [(4'ha):(1'h0)] wire16;
  input wire signed [(4'hb):(1'h0)] wire15;
  wire [(4'h8):(1'h0)] wire50;
  wire [(3'h6):(1'h0)] wire39;
  wire [(4'hb):(1'h0)] wire38;
  wire signed [(2'h3):(1'h0)] wire37;
  wire signed [(2'h2):(1'h0)] wire36;
  wire signed [(2'h3):(1'h0)] wire35;
  wire signed [(2'h3):(1'h0)] wire34;
  wire [(3'h5):(1'h0)] wire32;
  wire [(3'h4):(1'h0)] wire20;
  wire [(3'h7):(1'h0)] wire19;
  assign y = {wire50,
                 wire39,
                 wire38,
                 wire37,
                 wire36,
                 wire35,
                 wire34,
                 wire32,
                 wire20,
                 wire19,
                 (1'h0)};
  assign wire19 = $unsigned((((wire17 <= wire17) << wire17[(3'h5):(3'h5)]) ?
                      (+(-wire18)) : (!$unsigned(wire15))));
  assign wire20 = ((($unsigned(wire16) ? wire17[(4'h9):(3'h7)] : {wire16}) ?
                      $unsigned($unsigned(wire17)) : $signed((wire16 ?
                          wire15 : wire18))) <= $signed((~^wire15[(2'h2):(2'h2)])));
  module21 #() modinst33 (wire32, clk, wire19, wire17, wire15, wire18);
  assign wire34 = (~&(wire19[(2'h2):(1'h0)] ?
                      $signed((~^(8'h9e))) : wire18[(4'h8):(2'h3)]));
  assign wire35 = (8'ha4);
  assign wire36 = $signed(wire19[(1'h0):(1'h0)]);
  assign wire37 = $unsigned({wire18});
  assign wire38 = wire34;
  assign wire39 = (wire37 == (8'h9c));
  module40 #() modinst51 (.wire41(wire39), .wire43(wire19), .wire44(wire17), .wire42(wire15), .y(wire50), .clk(clk));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module40  (y, clk, wire44, wire43, wire42, wire41);
  output wire [(32'h27):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire44;
  input wire signed [(3'h5):(1'h0)] wire43;
  input wire signed [(3'h5):(1'h0)] wire42;
  input wire [(3'h4):(1'h0)] wire41;
  wire signed [(3'h6):(1'h0)] wire49;
  wire [(3'h4):(1'h0)] wire48;
  wire [(4'hb):(1'h0)] wire47;
  wire signed [(4'ha):(1'h0)] wire46;
  wire [(3'h7):(1'h0)] wire45;
  assign y = {wire49, wire48, wire47, wire46, wire45, (1'h0)};
  assign wire45 = $signed(wire42);
  assign wire46 = ($unsigned(wire44) * $signed(((-wire44) ?
                      wire44 : wire42[(1'h0):(1'h0)])));
  assign wire47 = wire41;
  assign wire48 = ($unsigned($signed($signed(wire41))) >> wire41[(2'h3):(1'h0)]);
  assign wire49 = {($signed((&wire47)) ? $signed(wire44) : {$signed(wire46)})};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module21
#(parameter param31 = (+{(~((8'ha8) == (8'ha0)))}))
(y, clk, wire25, wire24, wire23, wire22);
  output wire [(32'h23):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire25;
  input wire signed [(3'h6):(1'h0)] wire24;
  input wire signed [(4'hb):(1'h0)] wire23;
  input wire signed [(3'h7):(1'h0)] wire22;
  wire [(3'h5):(1'h0)] wire30;
  wire [(4'h8):(1'h0)] wire29;
  wire [(3'h4):(1'h0)] wire28;
  reg signed [(4'h9):(1'h0)] reg27 = (1'h0);
  reg [(4'h8):(1'h0)] reg26 = (1'h0);
  assign y = {wire30, wire29, wire28, reg27, reg26, (1'h0)};
  always
    @(posedge clk) begin
      reg26 <= (wire23[(1'h0):(1'h0)] ?
          {(~(-wire24))} : $unsigned({(wire22 - wire23)}));
    end
  always
    @(posedge clk) begin
      reg27 <= $signed(reg26[(1'h1):(1'h1)]);
    end
  assign wire28 = {wire22[(3'h7):(2'h3)]};
  assign wire29 = ((8'haa) ?
                      {wire24} : ({wire22} ? wire23 : wire24[(2'h3):(2'h3)]));
  assign wire30 = (!reg26[(3'h6):(3'h5)]);
endmodule