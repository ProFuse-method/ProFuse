(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h41):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire0;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire [(3'h4):(1'h0)] wire3;
  wire signed [(3'h7):(1'h0)] wire34;
  wire [(3'h4):(1'h0)] wire33;
  wire signed [(4'ha):(1'h0)] wire31;
  wire signed [(3'h7):(1'h0)] wire30;
  wire signed [(3'h4):(1'h0)] wire27;
  reg signed [(3'h4):(1'h0)] reg32 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg29 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg4 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg5 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg6 = (1'h0);
  assign y = {wire34,
                 wire33,
                 wire31,
                 wire30,
                 wire27,
                 reg32,
                 reg29,
                 reg4,
                 reg5,
                 reg6,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= $unsigned((~|(-(~|wire0))));
      reg5 <= reg4[(2'h3):(1'h0)];
      reg6 <= (8'ha6);
    end
  module7 #() modinst28 (.clk(clk), .wire10(reg5), .y(wire27), .wire11(reg4), .wire8(reg6), .wire9(wire2));
  always
    @(posedge clk) begin
      reg29 <= wire0;
    end
  assign wire30 = $signed({((wire1 ? reg29 : wire1) ?
                          (wire1 ~^ wire27) : (!wire2))});
  assign wire31 = $signed((~$unsigned(((8'ha1) ? reg4 : wire27))));
  always
    @(posedge clk) begin
      reg32 <= ($signed((8'ha8)) ?
          ((reg4[(2'h3):(1'h1)] >>> $signed(reg4)) < wire2) : $signed(wire0));
    end
  assign wire33 = reg29[(1'h0):(1'h0)];
  assign wire34 = (wire30 ?
                      (wire30[(2'h2):(1'h1)] < reg6) : ({(~^wire33)} ?
                          $unsigned({reg32}) : $signed((wire0 >>> wire0))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7  (y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h65):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire11;
  input wire signed [(4'hb):(1'h0)] wire10;
  input wire signed [(3'h6):(1'h0)] wire9;
  input wire [(4'ha):(1'h0)] wire8;
  wire [(4'h8):(1'h0)] wire26;
  wire signed [(4'hb):(1'h0)] wire20;
  wire signed [(4'h8):(1'h0)] wire19;
  wire signed [(3'h6):(1'h0)] wire13;
  wire signed [(4'h9):(1'h0)] wire12;
  reg signed [(2'h2):(1'h0)] reg25 = (1'h0);
  reg [(2'h3):(1'h0)] reg24 = (1'h0);
  reg [(4'h9):(1'h0)] reg23 = (1'h0);
  reg [(4'hb):(1'h0)] reg22 = (1'h0);
  reg [(2'h3):(1'h0)] reg21 = (1'h0);
  reg [(4'h8):(1'h0)] reg18 = (1'h0);
  reg [(3'h4):(1'h0)] reg17 = (1'h0);
  reg [(3'h6):(1'h0)] reg16 = (1'h0);
  reg [(2'h3):(1'h0)] reg15 = (1'h0);
  reg [(4'h9):(1'h0)] reg14 = (1'h0);
  assign y = {wire26,
                 wire20,
                 wire19,
                 wire13,
                 wire12,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 (1'h0)};
  assign wire12 = ((^~wire10) + wire9);
  assign wire13 = wire12[(1'h0):(1'h0)];
  always
    @(posedge clk) begin
      if (wire9)
        begin
          if ((&$signed(((~&(8'hae)) ? (wire11 ~^ wire9) : wire8))))
            begin
              reg14 <= ($unsigned(wire10) ?
                  wire12[(3'h5):(1'h1)] : $signed($unsigned({(8'hae)})));
              reg15 <= (wire12 ?
                  $signed(($signed(wire11) ?
                      (^wire9) : $signed(wire8))) : $signed(wire9));
            end
          else
            begin
              reg14 <= $unsigned($signed(wire13[(3'h6):(2'h3)]));
            end
          reg16 <= $signed(wire11[(3'h4):(3'h4)]);
          reg17 <= ((($signed(wire10) < (^wire9)) * $signed(wire8[(3'h7):(2'h3)])) >> ((reg15[(2'h3):(2'h2)] <<< (&reg14)) ?
              ((wire12 ? reg16 : reg16) ?
                  $unsigned(wire9) : {wire11}) : {$signed((8'haa))}));
        end
      else
        begin
          reg14 <= (&(~(8'hac)));
          if ({$signed(($signed(reg14) || (reg17 && reg14)))})
            begin
              reg15 <= ($unsigned(wire9[(3'h5):(1'h0)]) ?
                  (($unsigned((8'ha8)) ?
                      ((8'ha3) ?
                          wire11 : wire11) : $unsigned(wire8)) ~^ (~&reg16)) : reg15[(2'h2):(1'h1)]);
              reg16 <= (~^(($unsigned(wire10) ?
                      wire13[(3'h4):(2'h2)] : $signed(wire10)) ?
                  ($signed(wire11) ?
                      reg17[(1'h0):(1'h0)] : reg17) : {$unsigned(wire13)}));
            end
          else
            begin
              reg15 <= (^~reg14);
            end
          reg17 <= (((8'hac) || reg15[(1'h1):(1'h0)]) && wire10[(4'ha):(4'ha)]);
        end
      reg18 <= $unsigned($unsigned((~^reg16[(1'h1):(1'h1)])));
    end
  assign wire19 = ((^~reg17[(3'h4):(1'h1)]) && (((wire11 ? reg16 : reg16) ?
                          reg17 : wire11) ?
                      (~^(wire10 ? reg17 : wire13)) : $signed((reg14 ?
                          reg17 : reg15))));
  assign wire20 = (~&{(^$signed(wire19))});
  always
    @(posedge clk) begin
      reg21 <= (((~{wire11}) ?
          (reg14[(1'h0):(1'h0)] ?
              $signed(reg14) : $unsigned(reg18)) : reg17[(2'h2):(1'h0)]) ^~ wire11);
      reg22 <= reg15;
      if (wire9[(3'h6):(3'h5)])
        begin
          reg23 <= ($signed((~{reg18})) ^~ (-((reg22 <<< reg15) * (~|(8'h9f)))));
          reg24 <= ((wire10 ?
              wire12 : (&reg18[(3'h5):(3'h4)])) >> wire19[(3'h4):(1'h0)]);
          reg25 <= (((8'ha2) ?
              ($unsigned(reg17) ^ $signed(wire20)) : (((8'haf) >= reg17) ?
                  wire20 : (wire8 + wire11))) ^ wire11[(3'h4):(2'h2)]);
        end
      else
        begin
          reg23 <= $signed(wire20);
        end
    end
  assign wire26 = {$unsigned($unsigned({(8'haf)}))};
endmodule