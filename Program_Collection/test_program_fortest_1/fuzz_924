(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h2f4):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire3;
  input wire [(5'h12):(1'h0)] wire2;
  input wire [(4'h9):(1'h0)] wire1;
  input wire [(4'hd):(1'h0)] wire0;
  wire signed [(4'ha):(1'h0)] wire35;
  reg [(5'h10):(1'h0)] reg66 = (1'h0);
  reg [(5'h15):(1'h0)] reg62 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg61 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg57 = (1'h0);
  reg [(4'hb):(1'h0)] reg56 = (1'h0);
  reg [(4'hc):(1'h0)] reg53 = (1'h0);
  reg [(5'h11):(1'h0)] reg52 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg50 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg47 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg44 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg41 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg40 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg34 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg30 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg29 = (1'h0);
  reg [(4'hd):(1'h0)] reg22 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg21 = (1'h0);
  reg [(5'h12):(1'h0)] reg19 = (1'h0);
  reg [(3'h6):(1'h0)] reg18 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg14 = (1'h0);
  reg [(4'hd):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg10 = (1'h0);
  reg [(4'h8):(1'h0)] reg8 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg5 = (1'h0);
  reg [(5'h11):(1'h0)] reg67 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg65 = (1'h0);
  reg [(4'h8):(1'h0)] reg64 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg63 = (1'h0);
  reg signed [(4'he):(1'h0)] reg60 = (1'h0);
  reg [(4'ha):(1'h0)] reg59 = (1'h0);
  reg [(5'h15):(1'h0)] forvar58 = (1'h0);
  reg [(2'h2):(1'h0)] forvar55 = (1'h0);
  reg [(4'hc):(1'h0)] reg54 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar51 = (1'h0);
  reg [(5'h10):(1'h0)] forvar49 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg48 = (1'h0);
  reg [(5'h12):(1'h0)] reg46 = (1'h0);
  reg [(3'h4):(1'h0)] reg45 = (1'h0);
  reg [(5'h14):(1'h0)] forvar43 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar42 = (1'h0);
  reg [(4'hf):(1'h0)] reg39 = (1'h0);
  reg [(4'hc):(1'h0)] reg38 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar37 = (1'h0);
  reg [(3'h6):(1'h0)] forvar36 = (1'h0);
  reg [(4'hf):(1'h0)] reg33 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar32 = (1'h0);
  reg [(3'h7):(1'h0)] reg31 = (1'h0);
  reg [(5'h13):(1'h0)] reg28 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg27 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar26 = (1'h0);
  reg [(4'h9):(1'h0)] reg25 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar24 = (1'h0);
  reg [(3'h4):(1'h0)] reg23 = (1'h0);
  reg [(4'hb):(1'h0)] reg20 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar17 = (1'h0);
  reg [(5'h13):(1'h0)] reg16 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg15 = (1'h0);
  reg [(4'ha):(1'h0)] reg12 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar11 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg9 = (1'h0);
  reg [(4'he):(1'h0)] reg7 = (1'h0);
  reg [(4'hb):(1'h0)] reg6 = (1'h0);
  reg [(2'h2):(1'h0)] forvar4 = (1'h0);
  assign y = {wire35,
                 reg66,
                 reg62,
                 reg61,
                 reg57,
                 reg56,
                 reg53,
                 reg52,
                 reg50,
                 reg47,
                 reg44,
                 reg41,
                 reg40,
                 reg34,
                 reg30,
                 reg29,
                 reg22,
                 reg21,
                 reg19,
                 reg18,
                 reg14,
                 reg13,
                 reg10,
                 reg8,
                 reg5,
                 reg67,
                 reg65,
                 reg64,
                 reg63,
                 reg60,
                 reg59,
                 forvar58,
                 forvar55,
                 reg54,
                 forvar51,
                 forvar49,
                 reg48,
                 reg46,
                 reg45,
                 forvar43,
                 forvar42,
                 reg39,
                 reg38,
                 forvar37,
                 forvar36,
                 reg33,
                 forvar32,
                 reg31,
                 reg28,
                 reg27,
                 forvar26,
                 reg25,
                 forvar24,
                 reg23,
                 reg20,
                 forvar17,
                 reg16,
                 reg15,
                 reg12,
                 forvar11,
                 reg9,
                 reg7,
                 reg6,
                 forvar4,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar4 = (1'h0); (forvar4 < (1'h1)); forvar4 = (forvar4 + (1'h1)))
        begin
          if (((forvar4[(2'h2):(1'h1)] ~^ $unsigned(wire0[(1'h1):(1'h1)])) ?
              ((forvar4 ?
                  ({forvar4, wire1} ?
                      wire0 : $unsigned(wire3)) : (^(wire3 <<< wire2))) <<< $signed(wire3[(2'h2):(1'h1)])) : wire1))
            begin
              reg5 <= wire3[(3'h4):(2'h3)];
              reg6 = ({(forvar4[(1'h1):(1'h0)] ?
                      $unsigned({reg5, reg5}) : (!$unsigned(wire0))),
                  forvar4[(2'h2):(1'h1)]} & $unsigned($unsigned((+(wire1 || wire3)))));
              reg7 = reg5[(4'ha):(3'h5)];
              reg8 <= ($signed((wire1[(1'h1):(1'h1)] ?
                  (wire1[(3'h6):(1'h0)] ?
                      forvar4 : $unsigned(wire2)) : (~^(~reg7)))) ^~ $signed($unsigned({$signed(wire2),
                  wire3})));
            end
          else
            begin
              reg6 = $signed({(($signed(reg7) <= {wire1}) + ($signed(wire0) ?
                      wire3 : $unsigned(reg5)))});
              reg7 = $signed(($unsigned(((~^reg7) & forvar4[(1'h1):(1'h0)])) ?
                  (^(!(wire1 >>> (7'h41)))) : $unsigned($signed($signed(forvar4)))));
              reg9 = $signed(wire2);
              reg10 <= (reg5 ?
                  (reg5 ?
                      $signed({$unsigned((7'h44)),
                          $signed(wire1)}) : (^~reg7[(3'h4):(2'h3)])) : (($unsigned($unsigned(wire0)) ?
                          (+(|forvar4)) : ({reg8, reg9} ?
                              $unsigned(wire3) : {wire1})) ?
                      wire3[(1'h1):(1'h1)] : $signed((+((8'h9e) || (8'h9f))))));
            end
          for (forvar11 = (1'h0); (forvar11 < (1'h1)); forvar11 = (forvar11 + (1'h1)))
            begin
              reg12 = $unsigned((wire3[(3'h7):(1'h1)] || (8'hac)));
              reg13 <= (($unsigned(wire1[(1'h1):(1'h0)]) ?
                      (~wire1[(4'h9):(3'h5)]) : {(&(forvar4 ? reg9 : reg6))}) ?
                  reg12[(3'h5):(3'h4)] : (-{wire3,
                      ($signed(reg7) ^ (~&reg12))}));
              reg14 <= (!reg10[(3'h4):(2'h3)]);
            end
          reg15 = $unsigned(($unsigned($signed(wire3[(3'h6):(3'h4)])) ?
              {({wire2, reg12} ? (reg6 ? reg8 : reg9) : $unsigned(wire1)),
                  {$unsigned(reg7)}} : {(wire3[(4'h9):(1'h0)] ?
                      reg9 : ((8'ha7) ? reg14 : reg5)),
                  $unsigned(reg12)}));
          reg16 = $unsigned({(8'hba)});
          for (forvar17 = (1'h0); (forvar17 < (1'h1)); forvar17 = (forvar17 + (1'h1)))
            begin
              reg18 <= {{$unsigned((reg15[(1'h1):(1'h1)] <<< reg16))}};
              reg19 <= (($signed(((~&reg14) ?
                  $unsigned((8'haf)) : wire1[(2'h2):(1'h0)])) & $signed(forvar4[(1'h0):(1'h0)])) & $unsigned({{{(8'ha7),
                          (8'hb3)},
                      (forvar4 ^~ (7'h43))}}));
              reg20 = (~^reg8[(2'h3):(1'h1)]);
              reg21 <= reg10[(3'h6):(2'h2)];
              reg22 <= (reg15[(1'h1):(1'h0)] ?
                  ($unsigned($unsigned((~&reg14))) ^ {(8'hbb), reg20}) : reg5);
            end
        end
    end
  always
    @(posedge clk) begin
      reg23 = $unsigned(((^(8'hb8)) >> (~&wire3)));
      for (forvar24 = (1'h0); (forvar24 < (3'h4)); forvar24 = (forvar24 + (1'h1)))
        begin
          reg25 = {wire2,
              (~|{(reg5 >>> $signed(wire2)),
                  ($signed((8'haa)) ~^ $signed(reg8))})};
          for (forvar26 = (1'h0); (forvar26 < (1'h1)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 = ($unsigned($unsigned(({reg8,
                      reg21} == $unsigned((8'ha7))))) ?
                  {(!reg25),
                      {$unsigned($unsigned((8'hbc)))}} : reg23[(3'h4):(3'h4)]);
              reg28 = ($signed((^~(~reg10))) ?
                  $unsigned($unsigned(($signed(wire3) < $signed((7'h42))))) : {reg25[(3'h5):(2'h2)]});
              reg29 <= ((|(forvar26[(3'h5):(1'h0)] << $unsigned(reg22))) ?
                  (&{((^reg27) ?
                          (reg14 ^ reg25) : (+reg5))}) : $signed((reg13[(2'h2):(1'h0)] ?
                      reg10 : (^~$unsigned(reg10)))));
              reg30 <= $unsigned(wire0[(4'hb):(4'h9)]);
            end
        end
      reg31 = (({(~(reg10 + forvar26))} == reg10[(3'h6):(2'h3)]) ?
          reg19[(3'h5):(2'h2)] : ($unsigned($unsigned($unsigned(reg18))) ?
              ($signed((forvar24 ? reg30 : reg29)) ?
                  reg10[(1'h0):(1'h0)] : (reg22 ?
                      (reg27 ? reg30 : reg21) : {forvar26,
                          reg19})) : ($signed(reg21[(2'h2):(2'h2)]) | ((^~reg18) & (wire3 >>> wire2)))));
      for (forvar32 = (1'h0); (forvar32 < (2'h2)); forvar32 = (forvar32 + (1'h1)))
        begin
          reg33 = ($signed((~$unsigned((forvar26 && (7'h43))))) || (~&$signed({$signed(reg14)})));
        end
      reg34 <= wire1[(2'h3):(2'h3)];
    end
  assign wire35 = (8'hab);
  always
    @(posedge clk) begin
      for (forvar36 = (1'h0); (forvar36 < (1'h0)); forvar36 = (forvar36 + (1'h1)))
        begin
          for (forvar37 = (1'h0); (forvar37 < (2'h3)); forvar37 = (forvar37 + (1'h1)))
            begin
              reg38 = (~wire35[(3'h5):(3'h5)]);
              reg39 = ($unsigned((forvar37 >> wire0[(3'h4):(1'h1)])) != forvar37[(4'h9):(4'h8)]);
              reg40 <= (({wire1, wire1} ?
                  (((reg39 - reg8) ?
                      $unsigned(reg19) : reg5) && reg10[(2'h3):(1'h0)]) : $signed((reg22[(3'h7):(2'h2)] >= {wire0}))) * $signed($signed($unsigned((8'hbc)))));
              reg41 <= (reg30 ?
                  wire35[(4'h9):(3'h6)] : $unsigned($signed((~((8'hb3) ~^ reg5)))));
            end
        end
      for (forvar42 = (1'h0); (forvar42 < (2'h3)); forvar42 = (forvar42 + (1'h1)))
        begin
          for (forvar43 = (1'h0); (forvar43 < (2'h3)); forvar43 = (forvar43 + (1'h1)))
            begin
              reg44 <= $signed(((!((reg38 != reg29) ?
                      reg18[(1'h1):(1'h1)] : (8'hbb))) ?
                  (!$signed((reg41 < forvar42))) : $signed($signed(((8'ha5) ?
                      (8'hb6) : (8'ha0))))));
              reg45 = {$signed(({((8'haf) << reg10),
                      reg22} < forvar42[(1'h1):(1'h1)]))};
              reg46 = $unsigned($signed((reg19[(4'h8):(3'h5)] ~^ $signed((reg14 ^~ reg13)))));
              reg47 <= $unsigned({$unsigned({reg30[(5'h13):(3'h4)]})});
              reg48 = (~^(~&$unsigned($unsigned((reg8 >>> reg22)))));
            end
          for (forvar49 = (1'h0); (forvar49 < (1'h1)); forvar49 = (forvar49 + (1'h1)))
            begin
              reg50 <= (~&reg10[(3'h7):(1'h0)]);
            end
          for (forvar51 = (1'h0); (forvar51 < (1'h1)); forvar51 = (forvar51 + (1'h1)))
            begin
              reg52 <= (-(+(^~reg34)));
              reg53 <= $signed($signed((~^$unsigned(reg18))));
            end
          if (((reg48[(1'h0):(1'h0)] == $signed(($unsigned(reg8) ~^ $signed(reg10)))) || reg19))
            begin
              reg54 = ((({((8'hbe) ? reg39 : reg22)} ?
                      $unsigned($signed(wire3)) : $signed((~|(7'h41)))) ~^ ($unsigned((&(8'hb4))) - {(reg22 ?
                          reg53 : reg48),
                      $unsigned(reg34)})) ?
                  forvar51[(1'h0):(1'h0)] : $signed({(~|(!(8'h9c))),
                      ((reg48 ? reg45 : (8'ha6)) ~^ (~&wire2))}));
            end
          else
            begin
              reg54 = reg13[(1'h1):(1'h1)];
            end
          for (forvar55 = (1'h0); (forvar55 < (1'h1)); forvar55 = (forvar55 + (1'h1)))
            begin
              reg56 <= (reg18 ?
                  ((forvar42 ?
                      $unsigned({reg38,
                          reg46}) : ($signed(reg39) > (!(8'ha2)))) << (8'ha1)) : {{reg30[(4'hc):(3'h5)]}});
              reg57 <= ($unsigned(reg21[(1'h0):(1'h0)]) >= {{(^~$unsigned(wire35))},
                  (reg18 ?
                      ($unsigned(reg22) != reg56[(1'h1):(1'h0)]) : wire0)});
            end
        end
      for (forvar58 = (1'h0); (forvar58 < (2'h2)); forvar58 = (forvar58 + (1'h1)))
        begin
          if ($unsigned({(~^(~&$signed((8'had)))),
              (forvar55[(1'h1):(1'h1)] ~^ $signed(forvar43))}))
            begin
              reg59 = (~^$unsigned((~&$signed($signed(reg30)))));
              reg60 = ((-(reg40[(3'h7):(3'h6)] >> (reg46 && (&reg14)))) ?
                  {$unsigned((reg47[(2'h2):(2'h2)] || (reg45 >= reg5)))} : reg14[(2'h2):(2'h2)]);
              reg61 <= $unsigned($unsigned($unsigned($unsigned($unsigned(wire35)))));
              reg62 <= $unsigned(wire2[(4'hd):(3'h4)]);
            end
          else
            begin
              reg61 <= (+$unsigned({(((8'hac) ? forvar51 : reg56) ?
                      (~|reg47) : reg10)}));
              reg63 = reg56[(4'ha):(3'h4)];
              reg64 = (forvar49[(4'hf):(3'h7)] < reg48[(3'h7):(3'h5)]);
              reg65 = $signed(reg5);
              reg66 <= $signed($unsigned(reg41));
            end
          reg67 = reg44;
        end
    end
endmodule