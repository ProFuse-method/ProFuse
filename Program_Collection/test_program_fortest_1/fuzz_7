(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param53 = ({(((8'h9c) ? (8'ha6) : (8'haa)) >= {(8'ha8)})} & (((~|(8'ha8)) ^~ ((8'ha0) ? (8'ha9) : (8'h9d))) * ((~(8'ha0)) ? ((8'ha3) ? (8'hae) : (8'haa)) : ((8'ha2) ? (8'h9d) : (8'h9f))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h2a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire3;
  input wire signed [(4'ha):(1'h0)] wire2;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire signed [(3'h4):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire52;
  wire [(2'h2):(1'h0)] wire50;
  wire [(2'h3):(1'h0)] wire7;
  wire [(4'hb):(1'h0)] wire6;
  wire [(4'h9):(1'h0)] wire5;
  wire signed [(4'hb):(1'h0)] wire4;
  assign y = {wire52, wire50, wire7, wire6, wire5, wire4, (1'h0)};
  assign wire4 = ($signed((wire3 ? (^~wire3) : {wire0})) ?
                     (|wire3[(4'h8):(3'h4)]) : $signed({wire1}));
  assign wire5 = $signed(wire3);
  assign wire6 = (((((8'hab) >>> wire0) ? wire5 : $signed((8'h9c))) ?
                         ((wire2 ? wire3 : wire2) ?
                             {wire0} : wire0[(1'h1):(1'h1)]) : $signed(wire3[(2'h3):(2'h2)])) ?
                     (~|wire2[(4'h8):(1'h1)]) : $signed(wire4));
  assign wire7 = wire2;
  module8 #() modinst51 (.wire9(wire5), .wire10(wire4), .y(wire50), .wire12(wire3), .clk(clk), .wire11(wire6));
  assign wire52 = (8'hab);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module8  (y, clk, wire12, wire11, wire10, wire9);
  output wire [(32'h26):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire12;
  input wire [(4'hb):(1'h0)] wire11;
  input wire [(4'hb):(1'h0)] wire10;
  input wire [(4'h9):(1'h0)] wire9;
  wire [(3'h5):(1'h0)] wire49;
  wire [(2'h3):(1'h0)] wire47;
  wire [(4'h9):(1'h0)] wire46;
  wire signed [(4'hb):(1'h0)] wire44;
  wire [(4'h9):(1'h0)] wire25;
  assign y = {wire49, wire47, wire46, wire44, wire25, (1'h0)};
  module13 #() modinst26 (wire25, clk, wire12, wire9, wire11, wire10);
  module27 #() modinst45 (.wire30(wire12), .wire31(wire25), .clk(clk), .y(wire44), .wire29(wire11), .wire28(wire10));
  assign wire46 = ($unsigned(($signed((8'ha2)) << wire44)) ?
                      $unsigned({(~wire10)}) : (|wire10));
  module13 #() modinst48 (wire47, clk, wire12, wire11, wire10, wire44);
  assign wire49 = {$unsigned($signed(wire10))};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module27  (y, clk, wire31, wire30, wire29, wire28);
  output wire [(32'h50):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire31;
  input wire signed [(2'h3):(1'h0)] wire30;
  input wire [(4'h8):(1'h0)] wire29;
  input wire [(3'h6):(1'h0)] wire28;
  wire signed [(3'h7):(1'h0)] wire43;
  wire [(3'h5):(1'h0)] wire39;
  wire signed [(4'ha):(1'h0)] wire38;
  wire [(3'h7):(1'h0)] wire36;
  wire signed [(2'h3):(1'h0)] wire35;
  wire signed [(4'h9):(1'h0)] wire34;
  wire signed [(4'h9):(1'h0)] wire33;
  wire signed [(3'h5):(1'h0)] wire32;
  reg [(4'hb):(1'h0)] reg42 = (1'h0);
  reg [(2'h3):(1'h0)] reg41 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg40 = (1'h0);
  reg [(3'h5):(1'h0)] reg37 = (1'h0);
  assign y = {wire43,
                 wire39,
                 wire38,
                 wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire32,
                 reg42,
                 reg41,
                 reg40,
                 reg37,
                 (1'h0)};
  assign wire32 = (~|({wire30} ?
                      {wire29[(1'h1):(1'h1)]} : (|(wire30 && wire30))));
  assign wire33 = ({{wire31[(3'h7):(1'h0)]}} ?
                      {((wire30 | wire29) ?
                              $unsigned((8'ha8)) : wire30)} : wire28[(3'h4):(1'h1)]);
  assign wire34 = ((~wire31[(2'h2):(1'h0)]) | (~&wire30[(1'h0):(1'h0)]));
  assign wire35 = (~^{wire33});
  assign wire36 = wire29[(1'h1):(1'h0)];
  always
    @(posedge clk) begin
      reg37 <= wire35;
    end
  assign wire38 = {$unsigned(wire30[(2'h2):(1'h0)])};
  assign wire39 = ((8'ha5) ^~ $signed((^wire29[(4'h8):(1'h0)])));
  always
    @(posedge clk) begin
      reg40 <= wire32[(2'h2):(2'h2)];
      if (wire29[(2'h3):(1'h0)])
        begin
          reg41 <= (8'hb0);
        end
      else
        begin
          reg41 <= {wire39[(1'h1):(1'h0)]};
        end
      reg42 <= (8'had);
    end
  assign wire43 = $unsigned(wire31);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module13
#(parameter param24 = (^((&((8'had) ^ (8'hac))) ? (8'ha2) : (((8'hab) | (8'hae)) ? (8'haa) : {(8'haa)}))))
(y, clk, wire17, wire16, wire15, wire14);
  output wire [(32'h2e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire17;
  input wire signed [(4'h9):(1'h0)] wire16;
  input wire [(4'hb):(1'h0)] wire15;
  input wire [(4'hb):(1'h0)] wire14;
  wire [(3'h6):(1'h0)] wire23;
  wire signed [(4'hb):(1'h0)] wire22;
  wire signed [(4'ha):(1'h0)] wire21;
  wire [(2'h3):(1'h0)] wire20;
  wire signed [(3'h7):(1'h0)] wire19;
  wire signed [(4'h8):(1'h0)] wire18;
  assign y = {wire23, wire22, wire21, wire20, wire19, wire18, (1'h0)};
  assign wire18 = wire16;
  assign wire19 = $signed($unsigned(wire17[(1'h0):(1'h0)]));
  assign wire20 = $unsigned({wire15});
  assign wire21 = (&wire15);
  assign wire22 = wire20;
  assign wire23 = ($signed($signed(wire22)) ?
                      $signed(($unsigned(wire18) || wire14[(2'h2):(1'h1)])) : $signed((~|$signed((8'had)))));
endmodule