(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param36 = {((((8'hac) > (8'ha0)) - ((8'ha3) * (8'ha4))) < {((8'hac) <<< (8'h9f))})})
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h34):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire0;
  input wire [(4'ha):(1'h0)] wire1;
  input wire signed [(3'h5):(1'h0)] wire2;
  input wire signed [(4'h8):(1'h0)] wire3;
  wire [(2'h2):(1'h0)] wire35;
  wire signed [(4'hb):(1'h0)] wire34;
  wire signed [(3'h6):(1'h0)] wire33;
  wire [(3'h6):(1'h0)] wire6;
  wire signed [(3'h5):(1'h0)] wire7;
  wire [(2'h3):(1'h0)] wire8;
  wire [(3'h6):(1'h0)] wire9;
  wire [(2'h2):(1'h0)] wire31;
  reg signed [(2'h3):(1'h0)] reg4 = (1'h0);
  reg [(3'h7):(1'h0)] reg5 = (1'h0);
  assign y = {wire35,
                 wire34,
                 wire33,
                 wire6,
                 wire7,
                 wire8,
                 wire9,
                 wire31,
                 reg4,
                 reg5,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire0;
      reg5 <= wire1;
    end
  assign wire6 = (8'hab);
  assign wire7 = (reg5 - wire1);
  assign wire8 = $unsigned(reg5[(1'h1):(1'h0)]);
  assign wire9 = wire7;
  module10 #() modinst32 (.wire12(wire3), .clk(clk), .wire13(reg5), .wire11(wire0), .wire14(wire9), .y(wire31));
  assign wire33 = wire8;
  assign wire34 = (wire6[(2'h2):(2'h2)] * (~&(wire33[(3'h5):(2'h3)] == $unsigned(wire3))));
  assign wire35 = {(~^reg5[(3'h4):(1'h1)])};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10  (y, clk, wire14, wire13, wire12, wire11);
  output wire [(32'h2a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h5):(1'h0)] wire14;
  input wire [(3'h7):(1'h0)] wire13;
  input wire signed [(3'h5):(1'h0)] wire12;
  input wire signed [(3'h6):(1'h0)] wire11;
  wire signed [(4'h8):(1'h0)] wire29;
  wire [(3'h4):(1'h0)] wire28;
  wire [(4'ha):(1'h0)] wire26;
  wire signed [(2'h3):(1'h0)] wire16;
  wire signed [(4'hb):(1'h0)] wire15;
  reg [(3'h5):(1'h0)] reg30 = (1'h0);
  assign y = {wire29, wire28, wire26, wire16, wire15, reg30, (1'h0)};
  assign wire15 = wire14;
  assign wire16 = wire11;
  module17 #() modinst27 (wire26, clk, wire11, wire15, wire13, wire12);
  assign wire28 = ($unsigned($signed(wire14[(1'h0):(1'h0)])) > (8'hb0));
  assign wire29 = wire14;
  always
    @(posedge clk) begin
      reg30 <= ((wire12[(1'h1):(1'h0)] || wire11) ?
          $unsigned({$unsigned((8'hac))}) : $unsigned(((wire14 > wire11) & $signed((8'ha1)))));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module17  (y, clk, wire21, wire20, wire19, wire18);
  output wire [(32'h1c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h5):(1'h0)] wire21;
  input wire signed [(4'hb):(1'h0)] wire20;
  input wire [(3'h7):(1'h0)] wire19;
  input wire [(3'h5):(1'h0)] wire18;
  wire [(3'h5):(1'h0)] wire25;
  wire [(4'hb):(1'h0)] wire24;
  wire [(3'h5):(1'h0)] wire23;
  wire signed [(3'h6):(1'h0)] wire22;
  assign y = {wire25, wire24, wire23, wire22, (1'h0)};
  assign wire22 = wire19;
  assign wire23 = ($signed($unsigned({wire19})) << wire20);
  assign wire24 = wire21;
  assign wire25 = wire22[(1'h1):(1'h1)];
endmodule