(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param22 = (~^(~&(!((8'ha9) * (8'ha6))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h64):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire3;
  input wire [(4'h8):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire signed [(3'h7):(1'h0)] wire0;
  wire [(3'h6):(1'h0)] wire16;
  wire signed [(3'h4):(1'h0)] wire10;
  reg signed [(2'h2):(1'h0)] reg21 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg20 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg19 = (1'h0);
  reg [(4'h9):(1'h0)] reg18 = (1'h0);
  reg [(4'h8):(1'h0)] reg17 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg15 = (1'h0);
  reg [(4'h9):(1'h0)] reg14 = (1'h0);
  reg [(3'h7):(1'h0)] reg13 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg12 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg11 = (1'h0);
  reg [(3'h6):(1'h0)] reg9 = (1'h0);
  reg [(2'h2):(1'h0)] reg8 = (1'h0);
  reg [(4'h9):(1'h0)] reg7 = (1'h0);
  reg [(2'h2):(1'h0)] reg6 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg5 = (1'h0);
  reg [(4'ha):(1'h0)] reg4 = (1'h0);
  assign y = {wire16,
                 wire10,
                 reg21,
                 reg20,
                 reg19,
                 reg18,
                 reg17,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= {$signed((^(&wire1)))};
      reg5 <= reg4;
    end
  always
    @(posedge clk) begin
      if (wire2[(3'h4):(2'h3)])
        begin
          reg6 <= ($signed($unsigned($unsigned(wire1))) ^~ (~$signed((reg4 ?
              reg5 : (8'ha7)))));
          reg7 <= $unsigned(((wire2 - (&wire1)) && (((8'ha9) || (8'h9d)) & (8'hb0))));
          reg8 <= $signed((~|$signed($signed(reg4))));
        end
      else
        begin
          reg6 <= (!{reg4[(4'h8):(2'h3)]});
          reg7 <= $signed(((~$unsigned(wire1)) & wire0));
        end
      reg9 <= (~^$unsigned({$unsigned(wire1)}));
    end
  assign wire10 = (8'had);
  always
    @(posedge clk) begin
      reg11 <= (({{reg6}} - wire1[(4'h9):(2'h2)]) ?
          ((8'ha8) ? (8'haf) : $unsigned((8'ha4))) : reg6);
      reg12 <= wire2;
    end
  always
    @(posedge clk) begin
      reg13 <= reg4;
      reg14 <= (($unsigned($unsigned(reg8)) ?
          reg7 : ((+(8'hac)) ? (&(8'h9e)) : (8'ha6))) | {reg6[(1'h1):(1'h1)]});
      reg15 <= reg13;
    end
  assign wire16 = reg14;
  always
    @(posedge clk) begin
      reg17 <= $unsigned((reg11[(2'h2):(2'h2)] ?
          reg13[(1'h1):(1'h1)] : {$unsigned(wire1)}));
      if ((reg15[(1'h1):(1'h1)] ~^ ((((8'hb0) ? reg17 : reg13) ?
          reg12[(2'h2):(1'h0)] : $unsigned(reg12)) * $signed((reg7 ?
          reg5 : wire0)))))
        begin
          reg18 <= $unsigned($unsigned($unsigned($unsigned(reg9))));
        end
      else
        begin
          reg18 <= {$unsigned(({reg4} ? reg5 : reg11))};
          reg19 <= reg12[(1'h1):(1'h0)];
          reg20 <= ($signed(reg11) <= reg14);
        end
      if ((reg17[(3'h5):(2'h3)] <<< $unsigned(((-reg12) ^~ (~|reg4)))))
        begin
          reg21 <= (((^~reg12[(1'h1):(1'h0)]) ^~ {(wire16 == reg5)}) - (reg14[(3'h4):(3'h4)] != ($unsigned(wire10) ?
              ((8'hb0) ? wire3 : reg12) : {(8'hb0)})));
        end
      else
        begin
          if (reg20[(1'h1):(1'h1)])
            begin
              reg21 <= (~&reg17[(1'h1):(1'h1)]);
            end
          else
            begin
              reg21 <= reg5;
            end
        end
    end
endmodule