(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h3c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire3;
  input wire [(4'h8):(1'h0)] wire2;
  input wire [(3'h4):(1'h0)] wire1;
  input wire [(3'h4):(1'h0)] wire0;
  wire signed [(3'h7):(1'h0)] wire34;
  wire [(4'h8):(1'h0)] wire33;
  wire signed [(2'h2):(1'h0)] wire32;
  wire signed [(3'h6):(1'h0)] wire31;
  wire [(3'h5):(1'h0)] wire30;
  wire signed [(3'h5):(1'h0)] wire29;
  wire [(2'h3):(1'h0)] wire27;
  wire signed [(2'h3):(1'h0)] wire8;
  wire [(3'h6):(1'h0)] wire7;
  wire [(3'h6):(1'h0)] wire6;
  wire [(2'h3):(1'h0)] wire5;
  wire signed [(3'h5):(1'h0)] wire4;
  assign y = {wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire30,
                 wire29,
                 wire27,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 (1'h0)};
  assign wire4 = wire3[(1'h1):(1'h0)];
  assign wire5 = wire2;
  assign wire6 = $signed((8'ha3));
  assign wire7 = $signed(wire3);
  assign wire8 = wire3;
  module9 #() modinst28 (.y(wire27), .wire11(wire1), .wire10(wire0), .clk(clk), .wire13(wire5), .wire12(wire2));
  assign wire29 = (~wire4[(1'h1):(1'h0)]);
  assign wire30 = $signed(($unsigned($signed(wire29)) <= (^$unsigned(wire3))));
  assign wire31 = (8'h9f);
  assign wire32 = ((-wire1) || $unsigned(wire5));
  assign wire33 = $unsigned((~^wire2[(2'h3):(1'h1)]));
  assign wire34 = (^~$unsigned(wire30[(1'h1):(1'h1)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9  (y, clk, wire13, wire12, wire11, wire10);
  output wire [(32'h5c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire13;
  input wire [(4'h8):(1'h0)] wire12;
  input wire [(2'h3):(1'h0)] wire11;
  input wire [(3'h4):(1'h0)] wire10;
  wire [(3'h5):(1'h0)] wire18;
  wire [(3'h7):(1'h0)] wire17;
  wire signed [(2'h3):(1'h0)] wire14;
  reg [(2'h3):(1'h0)] reg26 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg25 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg24 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg22 = (1'h0);
  reg [(2'h2):(1'h0)] reg21 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg20 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg19 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg16 = (1'h0);
  reg [(4'h9):(1'h0)] reg15 = (1'h0);
  assign y = {wire18,
                 wire17,
                 wire14,
                 reg26,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 reg20,
                 reg19,
                 reg16,
                 reg15,
                 (1'h0)};
  assign wire14 = ($signed((8'hae)) ?
                      $unsigned($unsigned(wire12[(2'h2):(1'h1)])) : (wire13[(2'h2):(2'h2)] > ($unsigned(wire11) ?
                          (wire12 <= wire10) : $signed((8'haf)))));
  always
    @(posedge clk) begin
      reg15 <= wire11[(2'h2):(2'h2)];
      reg16 <= $unsigned(wire11);
    end
  assign wire17 = $unsigned((((reg16 << (8'ha5)) ?
                      ((8'hab) ? wire14 : reg16) : wire12) >> (-(~&(8'ha2)))));
  assign wire18 = wire12[(3'h7):(2'h3)];
  always
    @(posedge clk) begin
      if ((~reg15[(3'h7):(3'h6)]))
        begin
          reg19 <= reg16[(1'h0):(1'h0)];
        end
      else
        begin
          reg19 <= (~^wire10[(2'h3):(2'h3)]);
          reg20 <= $signed($unsigned({(^~wire17)}));
        end
      reg21 <= wire17[(3'h5):(3'h4)];
      if ((reg20[(3'h4):(1'h1)] != (wire17 ?
          ($signed(wire13) ? (~(8'hae)) : wire12[(1'h0):(1'h0)]) : wire13)))
        begin
          if ((-reg19))
            begin
              reg22 <= ({(^~$unsigned((8'h9d)))} * $unsigned($signed((wire17 ?
                  (8'ha4) : wire17))));
              reg23 <= $unsigned(reg16[(3'h4):(2'h3)]);
            end
          else
            begin
              reg22 <= wire10[(2'h3):(1'h1)];
              reg23 <= (~^wire10[(1'h1):(1'h0)]);
              reg24 <= (+reg23);
            end
        end
      else
        begin
          if (reg22[(3'h6):(3'h4)])
            begin
              reg22 <= ({($unsigned(reg19) - reg23)} ^~ (wire11 ?
                  ({reg24} == $signed(wire18)) : ((wire12 ~^ reg20) << (~&reg19))));
            end
          else
            begin
              reg22 <= reg19;
              reg23 <= $unsigned(((|(reg15 ?
                  reg24 : reg16)) >> $signed(reg24[(3'h5):(1'h0)])));
              reg24 <= (+$signed((8'hab)));
            end
          reg25 <= (reg20 ? reg16[(4'ha):(1'h1)] : reg16);
          reg26 <= $unsigned((|wire12));
        end
    end
endmodule