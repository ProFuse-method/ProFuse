(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h80):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire3;
  input wire signed [(4'h8):(1'h0)] wire2;
  input wire [(4'h8):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire0;
  wire [(4'ha):(1'h0)] wire43;
  wire [(3'h5):(1'h0)] wire42;
  wire signed [(4'h9):(1'h0)] wire34;
  wire [(4'h9):(1'h0)] wire10;
  wire [(3'h5):(1'h0)] wire9;
  wire signed [(4'h8):(1'h0)] wire8;
  wire signed [(4'hb):(1'h0)] wire7;
  wire signed [(4'hb):(1'h0)] wire6;
  wire signed [(4'h9):(1'h0)] wire38;
  wire [(3'h4):(1'h0)] wire39;
  wire signed [(4'hb):(1'h0)] wire40;
  reg [(4'hb):(1'h0)] reg5 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg4 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg36 = (1'h0);
  reg [(3'h5):(1'h0)] reg37 = (1'h0);
  assign y = {wire43,
                 wire42,
                 wire34,
                 wire10,
                 wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire38,
                 wire39,
                 wire40,
                 reg5,
                 reg4,
                 reg36,
                 reg37,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= (wire3 ?
          ($signed((wire0 <= (8'ha2))) >> (!(|wire3))) : $unsigned(($unsigned(wire3) ?
              $signed(wire1) : {(8'h9c)})));
      reg5 <= ($unsigned({(wire2 ^ wire3)}) == (~^$signed(wire2)));
    end
  assign wire6 = reg4;
  assign wire7 = reg4[(1'h1):(1'h0)];
  assign wire8 = $signed(wire6);
  assign wire9 = reg5[(3'h5):(1'h0)];
  assign wire10 = wire0[(3'h7):(1'h1)];
  module11 #() modinst35 (wire34, clk, reg4, wire7, wire10, wire0);
  always
    @(posedge clk) begin
      reg36 <= $signed(wire9);
      reg37 <= wire10;
    end
  assign wire38 = (wire8[(3'h4):(2'h3)] ?
                      wire10[(3'h6):(1'h0)] : $signed({$signed(wire34)}));
  assign wire39 = ($unsigned(($unsigned(wire38) >> reg37)) != (^((8'haf) < (wire1 ~^ wire0))));
  module11 #() modinst41 (.clk(clk), .wire12(wire0), .y(wire40), .wire14(reg5), .wire13(wire34), .wire15(wire6));
  assign wire42 = ({$unsigned((wire7 ? reg5 : wire38))} ?
                      ($signed($signed(wire7)) ?
                          (wire38[(3'h7):(2'h2)] ?
                              reg36 : ((8'had) ?
                                  wire39 : reg37)) : $signed({reg5})) : wire6[(4'h8):(3'h7)]);
  assign wire43 = {$signed((wire38 ^~ wire8[(2'h2):(2'h2)]))};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11  (y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h30):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire15;
  input wire signed [(4'hb):(1'h0)] wire14;
  input wire [(4'h9):(1'h0)] wire13;
  input wire [(4'hb):(1'h0)] wire12;
  wire signed [(2'h3):(1'h0)] wire33;
  wire [(3'h6):(1'h0)] wire31;
  wire signed [(3'h5):(1'h0)] wire20;
  wire [(4'ha):(1'h0)] wire17;
  wire [(4'hb):(1'h0)] wire16;
  reg [(4'h8):(1'h0)] reg19 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg18 = (1'h0);
  assign y = {wire33, wire31, wire20, wire17, wire16, reg19, reg18, (1'h0)};
  assign wire16 = (-wire12);
  assign wire17 = (|{wire14[(1'h0):(1'h0)]});
  always
    @(posedge clk) begin
      reg18 <= (^~(wire13[(2'h3):(1'h1)] ?
          ((+wire16) ^~ (wire17 << wire12)) : wire15[(3'h4):(3'h4)]));
      reg19 <= (-wire15[(1'h1):(1'h1)]);
    end
  assign wire20 = wire16[(3'h6):(1'h0)];
  module21 #() modinst32 (wire31, clk, wire16, reg18, wire13, reg19);
  assign wire33 = wire14[(4'ha):(2'h3)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module21  (y, clk, wire25, wire24, wire23, wire22);
  output wire [(32'h1c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire25;
  input wire signed [(2'h2):(1'h0)] wire24;
  input wire signed [(4'h9):(1'h0)] wire23;
  input wire [(4'h8):(1'h0)] wire22;
  wire [(4'h8):(1'h0)] wire29;
  wire [(3'h5):(1'h0)] wire28;
  wire signed [(3'h4):(1'h0)] wire27;
  wire signed [(3'h6):(1'h0)] wire26;
  reg [(3'h4):(1'h0)] reg30 = (1'h0);
  assign y = {wire29, wire28, wire27, wire26, reg30, (1'h0)};
  assign wire26 = ($unsigned(({wire25} ?
                      (|wire23) : $unsigned(wire22))) < ($unsigned((wire22 >>> wire24)) ~^ $unsigned((wire22 || wire24))));
  assign wire27 = wire25;
  assign wire28 = wire24;
  assign wire29 = $signed(wire25[(3'h6):(1'h1)]);
  always
    @(posedge clk) begin
      reg30 <= ((wire26 <= {(wire27 ? wire22 : (8'h9d))}) ?
          wire24[(2'h2):(2'h2)] : $unsigned({wire24}));
    end
endmodule