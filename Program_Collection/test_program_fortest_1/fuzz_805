(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param122 = (((8'haa) ? ((((8'ha9) ? (8'ha2) : (8'had)) * ((8'hb3) ? (8'hb7) : (8'hba))) ? {((8'hb7) << (7'h42)), ((8'ha5) ~^ (8'hbf))} : {((8'hb5) ? (8'ha6) : (8'hae))}) : ((8'hab) ? (((8'hbd) ? (8'hbd) : (8'hbb)) == {(7'h44), (7'h44)}) : ((-(8'h9f)) >>> ((8'hb3) ^ (8'hb7))))) || ((&(~|((8'ha7) << (7'h44)))) ? (!((8'haa) ? ((8'hb3) ^~ (8'ha0)) : ((8'h9d) ? (8'ha3) : (8'hb1)))) : ({{(7'h41)}} ? {((7'h43) >= (8'hb8))} : (((8'ha3) > (8'hb3)) ? (^(8'ha9)) : (^~(8'ha1)))))))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h55d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire4;
  input wire [(3'h7):(1'h0)] wire3;
  input wire signed [(5'h12):(1'h0)] wire2;
  input wire signed [(3'h6):(1'h0)] wire1;
  input wire signed [(4'hc):(1'h0)] wire0;
  wire [(4'hb):(1'h0)] wire91;
  wire [(4'hc):(1'h0)] wire90;
  wire [(4'he):(1'h0)] wire45;
  reg [(5'h10):(1'h0)] reg121 = (1'h0);
  reg [(3'h4):(1'h0)] reg120 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg119 = (1'h0);
  reg [(2'h3):(1'h0)] reg113 = (1'h0);
  reg [(4'hb):(1'h0)] reg110 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg109 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg105 = (1'h0);
  reg [(5'h14):(1'h0)] reg104 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg102 = (1'h0);
  reg [(3'h5):(1'h0)] reg101 = (1'h0);
  reg [(3'h6):(1'h0)] reg100 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg99 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg96 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg95 = (1'h0);
  reg [(5'h15):(1'h0)] reg89 = (1'h0);
  reg [(3'h5):(1'h0)] reg88 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg87 = (1'h0);
  reg [(4'h8):(1'h0)] reg84 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg83 = (1'h0);
  reg [(5'h14):(1'h0)] reg81 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg78 = (1'h0);
  reg [(4'hd):(1'h0)] reg74 = (1'h0);
  reg [(2'h3):(1'h0)] reg70 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg69 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg68 = (1'h0);
  reg signed [(4'he):(1'h0)] reg67 = (1'h0);
  reg [(3'h6):(1'h0)] reg65 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg64 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg63 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg62 = (1'h0);
  reg [(4'hc):(1'h0)] reg61 = (1'h0);
  reg [(4'hb):(1'h0)] reg57 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg55 = (1'h0);
  reg [(4'he):(1'h0)] reg54 = (1'h0);
  reg [(3'h7):(1'h0)] reg52 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg51 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg47 = (1'h0);
  reg [(4'h9):(1'h0)] reg44 = (1'h0);
  reg [(5'h11):(1'h0)] reg43 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg42 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg41 = (1'h0);
  reg [(2'h2):(1'h0)] reg40 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg38 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg35 = (1'h0);
  reg [(5'h10):(1'h0)] reg34 = (1'h0);
  reg [(5'h13):(1'h0)] reg32 = (1'h0);
  reg [(4'h8):(1'h0)] reg31 = (1'h0);
  reg [(3'h6):(1'h0)] reg30 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg28 = (1'h0);
  reg [(3'h4):(1'h0)] reg26 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg25 = (1'h0);
  reg [(2'h3):(1'h0)] reg22 = (1'h0);
  reg [(4'h9):(1'h0)] reg7 = (1'h0);
  reg [(5'h10):(1'h0)] reg5 = (1'h0);
  reg [(4'he):(1'h0)] forvar118 = (1'h0);
  reg [(2'h2):(1'h0)] reg117 = (1'h0);
  reg [(4'ha):(1'h0)] reg116 = (1'h0);
  reg [(3'h6):(1'h0)] forvar115 = (1'h0);
  reg [(4'ha):(1'h0)] reg114 = (1'h0);
  reg [(3'h5):(1'h0)] forvar112 = (1'h0);
  reg [(5'h11):(1'h0)] forvar111 = (1'h0);
  reg [(2'h2):(1'h0)] reg108 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg107 = (1'h0);
  reg [(5'h11):(1'h0)] reg106 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar103 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar98 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg97 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg94 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar93 = (1'h0);
  reg [(5'h11):(1'h0)] forvar92 = (1'h0);
  reg [(3'h5):(1'h0)] forvar86 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg85 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar82 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar80 = (1'h0);
  reg [(5'h11):(1'h0)] forvar79 = (1'h0);
  reg [(4'hf):(1'h0)] reg77 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg76 = (1'h0);
  reg [(2'h2):(1'h0)] reg75 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg73 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar72 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar71 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar66 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar60 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg59 = (1'h0);
  reg [(4'h9):(1'h0)] reg58 = (1'h0);
  reg [(4'hf):(1'h0)] forvar56 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar53 = (1'h0);
  reg [(3'h5):(1'h0)] reg50 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar49 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar48 = (1'h0);
  reg [(3'h6):(1'h0)] forvar46 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar39 = (1'h0);
  reg [(4'ha):(1'h0)] forvar37 = (1'h0);
  reg [(5'h10):(1'h0)] forvar36 = (1'h0);
  reg [(5'h13):(1'h0)] forvar33 = (1'h0);
  reg [(4'h9):(1'h0)] forvar29 = (1'h0);
  reg [(5'h13):(1'h0)] reg27 = (1'h0);
  reg [(5'h10):(1'h0)] forvar23 = (1'h0);
  reg [(4'hf):(1'h0)] reg24 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg23 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg21 = (1'h0);
  reg [(2'h2):(1'h0)] reg20 = (1'h0);
  reg [(3'h6):(1'h0)] forvar19 = (1'h0);
  reg [(5'h10):(1'h0)] reg18 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg17 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg16 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg15 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg14 = (1'h0);
  reg [(4'h8):(1'h0)] forvar13 = (1'h0);
  reg [(3'h6):(1'h0)] reg12 = (1'h0);
  reg [(3'h6):(1'h0)] reg11 = (1'h0);
  reg [(4'hf):(1'h0)] reg10 = (1'h0);
  reg [(4'h8):(1'h0)] reg9 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar8 = (1'h0);
  reg [(2'h3):(1'h0)] forvar6 = (1'h0);
  assign y = {wire91,
                 wire90,
                 wire45,
                 reg121,
                 reg120,
                 reg119,
                 reg113,
                 reg110,
                 reg109,
                 reg105,
                 reg104,
                 reg102,
                 reg101,
                 reg100,
                 reg99,
                 reg96,
                 reg95,
                 reg89,
                 reg88,
                 reg87,
                 reg84,
                 reg83,
                 reg81,
                 reg78,
                 reg74,
                 reg70,
                 reg69,
                 reg68,
                 reg67,
                 reg65,
                 reg64,
                 reg63,
                 reg62,
                 reg61,
                 reg57,
                 reg55,
                 reg54,
                 reg52,
                 reg51,
                 reg47,
                 reg44,
                 reg43,
                 reg42,
                 reg41,
                 reg40,
                 reg38,
                 reg35,
                 reg34,
                 reg32,
                 reg31,
                 reg30,
                 reg28,
                 reg26,
                 reg25,
                 reg22,
                 reg7,
                 reg5,
                 forvar118,
                 reg117,
                 reg116,
                 forvar115,
                 reg114,
                 forvar112,
                 forvar111,
                 reg108,
                 reg107,
                 reg106,
                 forvar103,
                 forvar98,
                 reg97,
                 reg94,
                 forvar93,
                 forvar92,
                 forvar86,
                 reg85,
                 forvar82,
                 forvar80,
                 forvar79,
                 reg77,
                 reg76,
                 reg75,
                 reg73,
                 forvar72,
                 forvar71,
                 forvar66,
                 forvar60,
                 reg59,
                 reg58,
                 forvar56,
                 forvar53,
                 reg50,
                 forvar49,
                 forvar48,
                 forvar46,
                 forvar39,
                 forvar37,
                 forvar36,
                 forvar33,
                 forvar29,
                 reg27,
                 forvar23,
                 reg24,
                 reg23,
                 reg21,
                 reg20,
                 forvar19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 forvar13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 forvar8,
                 forvar6,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg5 <= $signed((wire2[(4'h9):(3'h6)] ?
          {$signed(wire2),
              $signed(wire2[(4'hb):(1'h0)])} : wire0[(4'ha):(1'h1)]));
      for (forvar6 = (1'h0); (forvar6 < (2'h3)); forvar6 = (forvar6 + (1'h1)))
        begin
          reg7 <= wire4;
          for (forvar8 = (1'h0); (forvar8 < (3'h4)); forvar8 = (forvar8 + (1'h1)))
            begin
              reg9 = $signed((^wire0));
              reg10 = (!$unsigned((forvar8[(4'hc):(4'h8)] - ((^wire2) || wire1[(2'h3):(1'h1)]))));
              reg11 = forvar8;
              reg12 = $signed(wire3);
            end
          for (forvar13 = (1'h0); (forvar13 < (3'h4)); forvar13 = (forvar13 + (1'h1)))
            begin
              reg14 = (reg12[(1'h1):(1'h1)] ?
                  wire4 : (wire4[(3'h5):(2'h2)] + wire4[(4'h8):(3'h4)]));
              reg15 = $unsigned($signed(($unsigned((forvar13 ?
                  (8'ha0) : wire2)) & forvar6[(1'h1):(1'h0)])));
              reg16 = forvar13;
              reg17 = ($unsigned($signed($signed(wire4))) ?
                  $unsigned(wire3) : ((((~|wire0) ?
                          (!reg11) : $signed(wire4)) != $signed(reg11)) ?
                      $unsigned(reg7[(1'h1):(1'h0)]) : {$signed((reg16 < wire1))}));
              reg18 = $signed($signed((((reg14 ? reg14 : (8'h9f)) ?
                      (7'h44) : (forvar13 < reg14)) ?
                  ($signed(reg10) ?
                      reg9[(1'h0):(1'h0)] : $signed(reg14)) : $signed(reg5))));
            end
        end
      if ((((((&forvar8) ? (forvar13 ? reg7 : forvar13) : (8'ha7)) ?
              $signed((|reg9)) : reg11) | wire2[(3'h6):(1'h0)]) ?
          $signed(((8'hb5) ? reg9 : reg17[(2'h3):(1'h1)])) : wire2))
        begin
          for (forvar19 = (1'h0); (forvar19 < (2'h2)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 = (8'hb1);
            end
          if (($signed($signed($unsigned($signed(reg16)))) ?
              (-(reg18[(2'h3):(2'h2)] >= (8'h9e))) : reg15[(2'h2):(2'h2)]))
            begin
              reg21 = forvar13;
              reg22 <= ($unsigned({((~reg18) ?
                          forvar8[(4'he):(4'hb)] : $signed(forvar6)),
                      ((reg17 ? forvar19 : reg17) ? reg21 : $signed(reg16))}) ?
                  reg15[(2'h2):(1'h1)] : (~&(forvar13[(3'h6):(1'h0)] - (~|(wire2 < reg21)))));
              reg23 = ((forvar8 ?
                      reg9 : ((&(~&forvar8)) ?
                          (^(reg11 ?
                              wire0 : wire4)) : $signed(reg18[(4'h8):(3'h5)]))) ?
                  $signed(reg17) : ((((wire1 > wire0) < $unsigned(reg5)) ?
                      (|(forvar19 ?
                          (8'hab) : wire0)) : forvar13) ~^ $signed($unsigned((wire4 ?
                      (8'h9e) : reg10)))));
              reg24 = (forvar13[(3'h6):(1'h1)] ^~ wire0);
            end
          else
            begin
              reg22 <= {((~&reg21[(5'h14):(5'h14)]) ?
                      {{(wire0 >= reg22)},
                          $unsigned((~|wire0))} : $unsigned((wire3 ?
                          reg22[(1'h1):(1'h0)] : ((8'hb1) <= reg20)))),
                  forvar6[(1'h0):(1'h0)]};
              reg23 = {reg15};
            end
        end
      else
        begin
          for (forvar19 = (1'h0); (forvar19 < (3'h4)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg22 <= $unsigned($signed((reg12 ?
                  {(reg15 ? reg10 : reg15)} : $unsigned($unsigned(wire2)))));
            end
          for (forvar23 = (1'h0); (forvar23 < (3'h4)); forvar23 = (forvar23 + (1'h1)))
            begin
              reg25 <= $unsigned(reg5);
              reg26 <= (reg18[(3'h6):(3'h6)] ?
                  reg25 : $signed(({(reg18 ? forvar19 : reg16),
                      wire1} & wire2)));
              reg27 = ({(7'h42), reg11} >> (((reg18 ^ (forvar13 ?
                          wire1 : (8'h9d))) ?
                      ((reg14 ?
                          reg17 : reg21) <<< $signed(reg7)) : reg26[(2'h3):(1'h0)]) ?
                  wire4 : {({reg11, wire2} && ((7'h40) ? reg9 : reg20))}));
              reg28 <= ($unsigned(((~(|reg24)) ?
                  $unsigned($signed(reg11)) : ($signed((8'hbb)) >>> forvar23[(2'h2):(2'h2)]))) <= ({((reg7 || reg24) ?
                          $unsigned(forvar6) : reg16)} ?
                  ((forvar6[(2'h3):(1'h1)] ?
                          (reg24 ? reg9 : (8'hb1)) : reg15[(2'h3):(2'h3)]) ?
                      $signed({reg25, wire2}) : reg22[(1'h0):(1'h0)]) : reg18));
            end
          for (forvar29 = (1'h0); (forvar29 < (2'h3)); forvar29 = (forvar29 + (1'h1)))
            begin
              reg30 <= $signed($signed($unsigned(($unsigned(reg11) ?
                  (|(8'ha6)) : {reg25, reg25}))));
              reg31 <= ($unsigned($unsigned($signed($signed(wire3)))) ?
                  $unsigned((~{(&reg23)})) : ((~($unsigned(wire0) ~^ (reg23 ?
                      (8'hab) : reg15))) ^~ (~&{$unsigned(wire3)})));
              reg32 <= $signed(wire4);
            end
          for (forvar33 = (1'h0); (forvar33 < (3'h4)); forvar33 = (forvar33 + (1'h1)))
            begin
              reg34 <= ($signed(((-$signed(reg15)) ?
                  reg16[(3'h6):(3'h6)] : (8'had))) >> $unsigned(reg25[(2'h2):(1'h1)]));
              reg35 <= (|wire1);
            end
        end
      for (forvar36 = (1'h0); (forvar36 < (3'h4)); forvar36 = (forvar36 + (1'h1)))
        begin
          for (forvar37 = (1'h0); (forvar37 < (3'h4)); forvar37 = (forvar37 + (1'h1)))
            begin
              reg38 <= reg17;
            end
          for (forvar39 = (1'h0); (forvar39 < (2'h3)); forvar39 = (forvar39 + (1'h1)))
            begin
              reg40 <= (!($unsigned(reg18[(4'hc):(1'h1)]) >> (8'hba)));
              reg41 <= (!(&$signed(reg20[(1'h1):(1'h0)])));
              reg42 <= reg20;
              reg43 <= reg30[(1'h0):(1'h0)];
            end
          reg44 <= forvar29;
        end
    end
  assign wire45 = reg35;
  always
    @(posedge clk) begin
      for (forvar46 = (1'h0); (forvar46 < (2'h3)); forvar46 = (forvar46 + (1'h1)))
        begin
          reg47 <= $unsigned($signed((~^(8'hab))));
        end
      for (forvar48 = (1'h0); (forvar48 < (1'h0)); forvar48 = (forvar48 + (1'h1)))
        begin
          for (forvar49 = (1'h0); (forvar49 < (3'h4)); forvar49 = (forvar49 + (1'h1)))
            begin
              reg50 = {((wire2[(4'hc):(3'h5)] ?
                      (!$unsigned(reg44)) : reg43) <<< ($unsigned((reg7 ?
                          (8'ha4) : reg25)) ?
                      $unsigned($unsigned((8'hb9))) : $unsigned((^forvar46)))),
                  $unsigned($signed(reg30[(1'h0):(1'h0)]))};
              reg51 <= $signed($unsigned((|$unsigned(reg44[(1'h1):(1'h1)]))));
              reg52 <= (reg25 ~^ ((-$signed($signed(wire45))) ?
                  $signed($unsigned(wire2[(4'hf):(2'h2)])) : reg44));
            end
          for (forvar53 = (1'h0); (forvar53 < (2'h3)); forvar53 = (forvar53 + (1'h1)))
            begin
              reg54 <= {$signed(reg7)};
              reg55 <= $unsigned($unsigned((&(~&reg32[(5'h12):(3'h5)]))));
            end
          for (forvar56 = (1'h0); (forvar56 < (1'h0)); forvar56 = (forvar56 + (1'h1)))
            begin
              reg57 <= reg51[(3'h5):(3'h4)];
              reg58 = $unsigned($unsigned(reg51[(3'h6):(1'h1)]));
              reg59 = $signed(reg50[(1'h0):(1'h0)]);
            end
          for (forvar60 = (1'h0); (forvar60 < (2'h3)); forvar60 = (forvar60 + (1'h1)))
            begin
              reg61 <= (8'hb4);
              reg62 <= {(reg44[(1'h0):(1'h0)] ?
                      ((reg22[(2'h3):(2'h2)] + wire0[(2'h2):(2'h2)]) ?
                          ($signed(wire1) && reg28) : reg55) : (+$unsigned($unsigned((8'hb5))))),
                  $signed(reg57[(3'h7):(3'h6)])};
              reg63 <= (+$unsigned(reg32));
              reg64 <= $unsigned($signed((^~{reg31})));
              reg65 <= {(($unsigned((reg28 > reg32)) ^ reg22) >>> $signed((~&reg55))),
                  (&({(forvar60 <<< reg34), (wire0 * reg59)} ?
                      (-(~|forvar46)) : (&(reg61 ? reg35 : reg38))))};
            end
          for (forvar66 = (1'h0); (forvar66 < (3'h4)); forvar66 = (forvar66 + (1'h1)))
            begin
              reg67 <= $unsigned($unsigned({reg43[(2'h2):(1'h0)],
                  (~&(-reg31))}));
              reg68 <= $unsigned((!($signed($signed(reg22)) ?
                  (wire2[(1'h0):(1'h0)] ?
                      {reg58} : (wire4 + reg26)) : (|$unsigned(reg65)))));
              reg69 <= ($signed($unsigned($unsigned((reg26 ?
                  reg35 : reg34)))) ~^ {$signed(reg26)});
              reg70 <= (~|$signed({(~|wire3)}));
            end
        end
      for (forvar71 = (1'h0); (forvar71 < (3'h4)); forvar71 = (forvar71 + (1'h1)))
        begin
          for (forvar72 = (1'h0); (forvar72 < (3'h4)); forvar72 = (forvar72 + (1'h1)))
            begin
              reg73 = $signed(forvar46[(3'h6):(3'h4)]);
              reg74 <= wire45;
              reg75 = (+$unsigned({$unsigned(reg43[(1'h0):(1'h0)]), reg35}));
            end
          reg76 = $signed($unsigned((!wire1[(2'h3):(2'h3)])));
          reg77 = reg41[(2'h3):(1'h0)];
        end
      reg78 <= reg25[(1'h1):(1'h0)];
      for (forvar79 = (1'h0); (forvar79 < (1'h1)); forvar79 = (forvar79 + (1'h1)))
        begin
          for (forvar80 = (1'h0); (forvar80 < (1'h0)); forvar80 = (forvar80 + (1'h1)))
            begin
              reg81 <= reg62;
            end
          for (forvar82 = (1'h0); (forvar82 < (3'h4)); forvar82 = (forvar82 + (1'h1)))
            begin
              reg83 <= (~|reg58);
              reg84 <= ({reg47, reg65[(1'h1):(1'h0)]} ?
                  $unsigned(($unsigned((^(8'ha2))) > ((reg63 ? reg54 : reg64) ?
                      $unsigned(reg62) : $signed(wire45)))) : $signed((^(reg75[(2'h2):(2'h2)] <= {reg31}))));
              reg85 = ({reg43[(2'h3):(1'h0)],
                  (reg44 <<< $signed({(8'ha8), wire45}))} | $unsigned((&(reg25 ?
                  $signed(reg22) : $signed((8'ha2))))));
            end
          for (forvar86 = (1'h0); (forvar86 < (3'h4)); forvar86 = (forvar86 + (1'h1)))
            begin
              reg87 <= $unsigned(reg22[(2'h2):(1'h1)]);
              reg88 <= (-($signed((forvar66 & $signed(reg5))) >>> (forvar80 ?
                  $signed(reg59) : $signed(wire0))));
            end
          reg89 <= ($unsigned(reg40) ?
              reg50[(2'h3):(2'h3)] : ((reg67[(4'h8):(2'h3)] ^ ((forvar48 ?
                          reg77 : reg58) ?
                      {reg85, forvar60} : $unsigned(reg84))) ?
                  ((wire4[(3'h6):(1'h1)] || (wire3 - forvar66)) | $signed(reg77[(4'ha):(4'h9)])) : $signed((-reg41[(2'h3):(1'h0)]))));
        end
    end
  assign wire90 = ($signed(reg47) != reg78[(1'h0):(1'h0)]);
  assign wire91 = (wire90[(1'h1):(1'h0)] ?
                      $signed($signed(reg67[(2'h2):(1'h1)])) : $signed($unsigned({(~|wire2),
                          reg26[(3'h4):(2'h2)]})));
  always
    @(posedge clk) begin
      for (forvar92 = (1'h0); (forvar92 < (2'h2)); forvar92 = (forvar92 + (1'h1)))
        begin
          for (forvar93 = (1'h0); (forvar93 < (2'h3)); forvar93 = (forvar93 + (1'h1)))
            begin
              reg94 = ({$unsigned((reg64 ^~ $unsigned((8'hb0)))),
                      $unsigned($unsigned(((8'h9f) > (7'h42))))} ?
                  reg54 : (-wire1[(3'h5):(1'h0)]));
            end
          if (reg52[(3'h5):(3'h5)])
            begin
              reg95 <= reg25[(1'h1):(1'h1)];
              reg96 <= (~|(^reg7[(3'h4):(3'h4)]));
            end
          else
            begin
              reg97 = (^$unsigned(($unsigned((forvar92 ?
                  forvar92 : reg43)) ^ $signed(((8'ha4) ? reg52 : wire45)))));
            end
          for (forvar98 = (1'h0); (forvar98 < (1'h0)); forvar98 = (forvar98 + (1'h1)))
            begin
              reg99 <= $signed($unsigned(wire1[(1'h0):(1'h0)]));
              reg100 <= reg31[(1'h1):(1'h0)];
              reg101 <= {$unsigned($unsigned(reg42))};
              reg102 <= ($signed(reg28[(1'h0):(1'h0)]) ?
                  $unsigned(reg42) : $unsigned(reg7));
            end
          for (forvar103 = (1'h0); (forvar103 < (2'h3)); forvar103 = (forvar103 + (1'h1)))
            begin
              reg104 <= $signed(wire1);
              reg105 <= {(~^$signed(reg35)), wire4[(3'h4):(3'h4)]};
              reg106 = $signed(($unsigned(reg7[(4'h9):(1'h0)]) ?
                  $unsigned($unsigned(reg7)) : ($signed((|reg89)) ?
                      (&$signed(forvar98)) : reg102)));
              reg107 = $signed(((reg28 <= $unsigned($unsigned(reg64))) ?
                  $signed(reg104[(4'h9):(4'h8)]) : (8'ha8)));
              reg108 = $signed(reg105[(1'h1):(1'h0)]);
            end
          reg109 <= (reg81[(4'h8):(4'h8)] - (reg70 ?
              wire3[(1'h1):(1'h0)] : $signed(($signed(reg96) ?
                  $signed((8'hb1)) : $unsigned(forvar98)))));
        end
      reg110 <= $unsigned((^$signed((~$signed(reg96)))));
      for (forvar111 = (1'h0); (forvar111 < (2'h2)); forvar111 = (forvar111 + (1'h1)))
        begin
          for (forvar112 = (1'h0); (forvar112 < (2'h2)); forvar112 = (forvar112 + (1'h1)))
            begin
              reg113 <= $signed(($unsigned((^~$unsigned(reg106))) || ((8'ha1) ?
                  (+wire90) : (~$signed(reg67)))));
              reg114 = ($signed(forvar112) ?
                  (+reg74) : ($unsigned(((+reg35) ?
                          (reg67 ? reg95 : reg32) : ((8'hb0) & reg62))) ?
                      reg89 : (((reg89 ? reg34 : wire0) ?
                          $unsigned((8'hac)) : {(8'hb8)}) << ((reg40 ^ reg40) ?
                          {reg54} : reg63[(3'h6):(1'h1)]))));
            end
          for (forvar115 = (1'h0); (forvar115 < (2'h3)); forvar115 = (forvar115 + (1'h1)))
            begin
              reg116 = reg34;
            end
          reg117 = reg54;
          for (forvar118 = (1'h0); (forvar118 < (2'h3)); forvar118 = (forvar118 + (1'h1)))
            begin
              reg119 <= ($unsigned(forvar118) - reg52);
              reg120 <= (~&($signed({reg110}) * reg41[(3'h4):(1'h0)]));
              reg121 <= (wire91[(3'h5):(2'h3)] | $signed({((8'ha1) >= reg26[(2'h3):(2'h2)]),
                  ((wire3 >= (8'hb6)) == (forvar93 > reg108))}));
            end
        end
    end
endmodule