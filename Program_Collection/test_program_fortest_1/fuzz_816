(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param128 = (({(((8'ha0) == (7'h40)) ^~ ((8'ha3) > (8'ha3))), (((8'had) << (8'h9e)) ? ((8'h9f) * (8'ha1)) : ((8'ha1) ? (8'haa) : (8'h9c)))} ? (-(((8'h9c) ? (7'h43) : (8'hb4)) ? ((8'ha1) ? (8'h9c) : (8'ha0)) : (~|(8'hb9)))) : (8'h9c)) || (((7'h42) ? {(&(8'h9f)), {(8'ha0), (8'hba)}} : ((+(8'hbd)) ? {(8'hab)} : (~^(8'ha3)))) >= ((8'hbc) * (((8'ha4) & (8'had)) ? {(7'h41)} : ((8'hac) ^ (7'h41)))))), 
parameter param129 = ((param128 <<< {param128}) ? ({(-(param128 ~^ param128))} ? param128 : ((!(param128 ^~ param128)) <<< (~&(|(8'hbd))))) : ((!param128) ? {{param128, (param128 <= param128)}} : (param128 << (!(~^param128))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h40f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire3;
  input wire signed [(5'h15):(1'h0)] wire2;
  input wire [(5'h14):(1'h0)] wire1;
  input wire [(4'hc):(1'h0)] wire0;
  wire signed [(4'h8):(1'h0)] wire123;
  wire [(5'h10):(1'h0)] wire122;
  wire [(3'h5):(1'h0)] wire100;
  wire signed [(5'h13):(1'h0)] wire99;
  wire signed [(4'hc):(1'h0)] wire98;
  wire [(2'h3):(1'h0)] wire97;
  wire signed [(4'hd):(1'h0)] wire96;
  wire signed [(5'h10):(1'h0)] wire95;
  wire signed [(2'h3):(1'h0)] wire94;
  wire signed [(3'h5):(1'h0)] wire73;
  wire [(5'h11):(1'h0)] wire71;
  wire signed [(4'h9):(1'h0)] wire30;
  wire signed [(4'hc):(1'h0)] wire29;
  wire signed [(3'h7):(1'h0)] wire28;
  reg signed [(5'h14):(1'h0)] reg121 = (1'h0);
  reg [(5'h12):(1'h0)] reg119 = (1'h0);
  reg [(4'hd):(1'h0)] reg118 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg116 = (1'h0);
  reg [(4'he):(1'h0)] reg115 = (1'h0);
  reg [(2'h2):(1'h0)] reg114 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg110 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg109 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg107 = (1'h0);
  reg [(4'he):(1'h0)] reg104 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg93 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg92 = (1'h0);
  reg [(4'h8):(1'h0)] reg90 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg89 = (1'h0);
  reg [(4'hd):(1'h0)] reg88 = (1'h0);
  reg [(5'h13):(1'h0)] reg87 = (1'h0);
  reg [(3'h7):(1'h0)] reg85 = (1'h0);
  reg [(4'hc):(1'h0)] reg82 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg80 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg79 = (1'h0);
  reg [(4'hd):(1'h0)] reg78 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg6 = (1'h0);
  reg [(3'h7):(1'h0)] reg7 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg8 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg10 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg16 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg18 = (1'h0);
  reg [(5'h13):(1'h0)] reg19 = (1'h0);
  reg [(5'h14):(1'h0)] reg20 = (1'h0);
  reg [(4'hd):(1'h0)] reg21 = (1'h0);
  reg [(4'hf):(1'h0)] reg23 = (1'h0);
  reg [(4'hd):(1'h0)] reg26 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg27 = (1'h0);
  reg [(4'h9):(1'h0)] reg127 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg126 = (1'h0);
  reg [(3'h5):(1'h0)] reg125 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar124 = (1'h0);
  reg [(3'h7):(1'h0)] reg120 = (1'h0);
  reg [(5'h13):(1'h0)] forvar117 = (1'h0);
  reg [(5'h15):(1'h0)] reg113 = (1'h0);
  reg [(5'h11):(1'h0)] forvar112 = (1'h0);
  reg [(3'h5):(1'h0)] reg111 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg108 = (1'h0);
  reg [(5'h13):(1'h0)] forvar106 = (1'h0);
  reg [(3'h5):(1'h0)] forvar105 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar103 = (1'h0);
  reg [(5'h13):(1'h0)] forvar102 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg101 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg91 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg86 = (1'h0);
  reg [(5'h12):(1'h0)] forvar84 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar83 = (1'h0);
  reg [(3'h4):(1'h0)] reg81 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg77 = (1'h0);
  reg [(5'h15):(1'h0)] forvar76 = (1'h0);
  reg [(3'h7):(1'h0)] reg75 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar74 = (1'h0);
  reg [(5'h10):(1'h0)] reg25 = (1'h0);
  reg [(5'h13):(1'h0)] forvar24 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar22 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar17 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar15 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg14 = (1'h0);
  reg [(3'h7):(1'h0)] reg13 = (1'h0);
  reg [(4'ha):(1'h0)] reg12 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg11 = (1'h0);
  reg [(5'h14):(1'h0)] reg9 = (1'h0);
  reg [(3'h5):(1'h0)] forvar5 = (1'h0);
  reg [(3'h7):(1'h0)] forvar4 = (1'h0);
  assign y = {wire123,
                 wire122,
                 wire100,
                 wire99,
                 wire98,
                 wire97,
                 wire96,
                 wire95,
                 wire94,
                 wire73,
                 wire71,
                 wire30,
                 wire29,
                 wire28,
                 reg121,
                 reg119,
                 reg118,
                 reg116,
                 reg115,
                 reg114,
                 reg110,
                 reg109,
                 reg107,
                 reg104,
                 reg93,
                 reg92,
                 reg90,
                 reg89,
                 reg88,
                 reg87,
                 reg85,
                 reg82,
                 reg80,
                 reg79,
                 reg78,
                 reg6,
                 reg7,
                 reg8,
                 reg10,
                 reg16,
                 reg18,
                 reg19,
                 reg20,
                 reg21,
                 reg23,
                 reg26,
                 reg27,
                 reg127,
                 reg126,
                 reg125,
                 forvar124,
                 reg120,
                 forvar117,
                 reg113,
                 forvar112,
                 reg111,
                 reg108,
                 forvar106,
                 forvar105,
                 forvar103,
                 forvar102,
                 reg101,
                 reg91,
                 reg86,
                 forvar84,
                 forvar83,
                 reg81,
                 reg77,
                 forvar76,
                 reg75,
                 forvar74,
                 reg25,
                 forvar24,
                 forvar22,
                 forvar17,
                 forvar15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg9,
                 forvar5,
                 forvar4,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar4 = (1'h0); (forvar4 < (2'h3)); forvar4 = (forvar4 + (1'h1)))
        begin
          for (forvar5 = (1'h0); (forvar5 < (1'h0)); forvar5 = (forvar5 + (1'h1)))
            begin
              reg6 <= (~^wire2[(2'h2):(1'h0)]);
              reg7 <= wire0;
              reg8 <= reg7[(3'h6):(2'h2)];
              reg9 = (reg6 ~^ (~&($signed((8'hb8)) ?
                  ($signed(forvar5) <= (~&(8'ha0))) : $unsigned(wire1))));
            end
          if (reg6[(1'h0):(1'h0)])
            begin
              reg10 <= {((reg9 ?
                      $signed((|wire1)) : $signed(reg7[(1'h1):(1'h1)])) || reg8[(1'h0):(1'h0)]),
                  {reg7[(3'h4):(2'h3)],
                      ($unsigned($unsigned(wire0)) ?
                          $signed((!(8'ha6))) : (reg7 ^~ wire1[(4'h9):(1'h1)]))}};
              reg11 = $signed($unsigned(forvar5[(2'h2):(2'h2)]));
            end
          else
            begin
              reg11 = (-wire2[(1'h0):(1'h0)]);
              reg12 = $unsigned($unsigned(reg9));
              reg13 = $unsigned(($signed($signed(((8'ha6) ?
                  wire1 : reg9))) < ($unsigned((|reg8)) ?
                  ($unsigned(wire2) * $signed((8'hae))) : ((!forvar5) <<< {reg12}))));
              reg14 = reg9[(5'h14):(2'h3)];
            end
        end
      for (forvar15 = (1'h0); (forvar15 < (2'h3)); forvar15 = (forvar15 + (1'h1)))
        begin
          reg16 <= $signed(wire1[(4'hc):(3'h4)]);
          for (forvar17 = (1'h0); (forvar17 < (3'h4)); forvar17 = (forvar17 + (1'h1)))
            begin
              reg18 <= wire2;
              reg19 <= ((({wire1} + ($unsigned(forvar4) ?
                      (forvar5 ?
                          (8'hbb) : (8'ha4)) : (reg7 | reg7))) ~^ (reg10[(1'h0):(1'h0)] ?
                      ($signed((8'ha5)) <<< (reg8 * forvar15)) : reg18)) ?
                  (forvar4 ?
                      ($signed((reg6 ?
                          reg6 : reg8)) != $unsigned(((8'ha6) && (8'hac)))) : (forvar17[(1'h0):(1'h0)] ?
                          reg9[(5'h11):(4'hc)] : ($unsigned(reg16) ?
                              ((7'h40) >= (8'had)) : reg18))) : reg14);
              reg20 <= {{{wire1}}};
            end
          reg21 <= (wire0 >>> reg16[(3'h6):(2'h2)]);
        end
      for (forvar22 = (1'h0); (forvar22 < (2'h2)); forvar22 = (forvar22 + (1'h1)))
        begin
          reg23 <= (&$signed((^~(((8'hb5) ? forvar15 : forvar22) ?
              (reg16 ? wire3 : wire0) : (forvar22 <<< reg10)))));
          for (forvar24 = (1'h0); (forvar24 < (3'h4)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 = {$unsigned((~&reg16)), $unsigned((~&(^(+reg12))))};
            end
        end
      reg26 <= (($signed((reg25[(4'he):(3'h7)] ?
                  (reg25 * reg11) : reg25[(3'h7):(3'h4)])) ?
              reg7[(3'h5):(1'h0)] : $signed((8'hb2))) ?
          ($unsigned($unsigned((reg20 ?
              reg13 : forvar24))) >>> forvar17[(3'h4):(3'h4)]) : (forvar4[(3'h4):(3'h4)] ?
              ({$signed(reg6), {wire3, wire1}} ?
                  $signed((reg9 << (7'h41))) : reg19[(2'h3):(2'h3)]) : (reg19 >>> $unsigned($unsigned(reg13)))));
      reg27 <= (~^$unsigned({(~^(^(8'hbe))),
          $signed((reg25 ? reg26 : forvar4))}));
    end
  assign wire28 = (reg27[(1'h0):(1'h0)] < {reg18[(4'h8):(1'h0)]});
  assign wire29 = (~(8'ha0));
  assign wire30 = (($unsigned(($unsigned(reg18) ?
                      wire2[(3'h4):(2'h2)] : (wire29 == reg21))) * ($signed((wire2 ^ reg27)) ^ reg26)) ^~ $unsigned(reg10));
  module31 #() modinst72 (.wire33(reg19), .wire35(reg18), .y(wire71), .wire36(wire29), .wire32(reg21), .clk(clk), .wire34(wire2));
  assign wire73 = (~^(^(reg27[(4'h9):(4'h9)] ^ reg19[(5'h13):(4'hf)])));
  always
    @(posedge clk) begin
      for (forvar74 = (1'h0); (forvar74 < (1'h0)); forvar74 = (forvar74 + (1'h1)))
        begin
          reg75 = (wire30[(4'h9):(1'h1)] >>> (!(+(((8'ha7) ? wire30 : reg18) ?
              reg6 : {reg10}))));
          for (forvar76 = (1'h0); (forvar76 < (3'h4)); forvar76 = (forvar76 + (1'h1)))
            begin
              reg77 = $unsigned((reg10[(4'hf):(4'hf)] <= ($unsigned((8'ha1)) << $unsigned((^~(8'ha1))))));
              reg78 <= (wire73[(2'h3):(2'h3)] ?
                  $unsigned(reg27) : $unsigned((reg16[(1'h1):(1'h0)] ?
                      reg77[(1'h0):(1'h0)] : (8'hab))));
              reg79 <= $unsigned(wire29[(4'h8):(3'h7)]);
            end
        end
      reg80 <= (!(reg77 ^ (+{(^reg7), (~^wire30)})));
      reg81 = $signed((reg7 ?
          $signed(($unsigned(reg27) ?
              (-wire2) : (+reg77))) : {((!forvar74) & (wire29 > forvar74))}));
      reg82 <= ((($unsigned($signed(wire73)) * (~&(reg75 ?
              (8'hb9) : (8'hb0)))) ?
          (~^(~|{forvar74})) : $unsigned(($unsigned(wire73) ?
              {wire3, wire3} : reg20[(5'h14):(4'hd)]))) ^ $unsigned(((7'h43) ?
          ((wire3 - wire1) ? reg81 : (reg81 >= wire3)) : $signed((^~reg10)))));
      for (forvar83 = (1'h0); (forvar83 < (2'h2)); forvar83 = (forvar83 + (1'h1)))
        begin
          for (forvar84 = (1'h0); (forvar84 < (2'h2)); forvar84 = (forvar84 + (1'h1)))
            begin
              reg85 <= (^(~&{wire71, $signed(reg81[(3'h4):(3'h4)])}));
              reg86 = wire3;
            end
          if (wire28[(2'h2):(1'h1)])
            begin
              reg87 <= ($unsigned((^(^~(wire3 >>> (8'hae))))) >> ((-($signed(forvar76) & $unsigned(reg6))) ?
                  ({(wire2 ? (8'h9d) : reg6),
                      $unsigned(forvar83)} - (~^reg21)) : $unsigned(({reg85} || (reg82 ?
                      reg82 : reg75)))));
              reg88 <= ($unsigned($signed($signed($signed((8'hb4))))) << (8'haa));
              reg89 <= (({(^forvar74[(4'ha):(3'h5)]),
                  $signed($unsigned(reg85))} + ((wire0[(3'h6):(1'h1)] ~^ (wire73 << wire3)) ?
                  {(reg78 ? (8'ha6) : (8'hb4)),
                      $signed(wire30)} : ($signed(wire29) ?
                      (~^reg10) : $signed(reg77)))) > wire2[(3'h7):(3'h7)]);
              reg90 <= $signed(($signed(forvar83) < reg23));
              reg91 = (($signed(reg82[(2'h3):(1'h1)]) ?
                      $signed($unsigned(reg77)) : $signed(((8'ha1) ?
                          (!wire71) : (forvar84 ? reg86 : reg89)))) ?
                  (((wire1[(4'hf):(3'h6)] > reg7[(3'h5):(2'h3)]) ?
                          ($unsigned(reg80) >>> $signed(wire29)) : ((reg87 ?
                                  wire1 : reg80) ?
                              ((8'hb8) ? wire28 : reg16) : $signed(reg19))) ?
                      reg21 : wire71[(4'he):(4'hb)]) : ((((^~reg85) <= (reg90 <= reg6)) >>> ((~^reg86) + (wire3 ^~ (8'hb5)))) < wire73));
            end
          else
            begin
              reg87 <= $unsigned(($signed(reg21) ^ $unsigned(reg27)));
              reg91 = $signed((reg10[(4'he):(4'hb)] ?
                  reg8[(1'h0):(1'h0)] : $signed($signed({reg78}))));
              reg92 <= (~&{reg20, wire73});
              reg93 <= reg89;
            end
        end
    end
  assign wire94 = wire29[(4'ha):(2'h3)];
  assign wire95 = $unsigned($unsigned(($unsigned(reg16) == ($unsigned(reg89) ?
                      (reg82 ? reg80 : reg90) : wire73))));
  assign wire96 = (~$signed($unsigned(reg90)));
  assign wire97 = (~&wire94);
  assign wire98 = reg6;
  assign wire99 = wire98;
  assign wire100 = (($unsigned($unsigned(reg87)) < reg80[(4'h9):(3'h6)]) == (~reg78[(2'h2):(2'h2)]));
  always
    @(posedge clk) begin
      reg101 = $signed((&((8'h9f) ?
          reg79[(4'hc):(3'h7)] : ($unsigned(wire95) ?
              (reg90 || reg90) : (wire3 >> reg82)))));
      for (forvar102 = (1'h0); (forvar102 < (2'h2)); forvar102 = (forvar102 + (1'h1)))
        begin
          for (forvar103 = (1'h0); (forvar103 < (1'h1)); forvar103 = (forvar103 + (1'h1)))
            begin
              reg104 <= $unsigned((~^{(~&wire96[(3'h7):(2'h3)])}));
            end
        end
    end
  always
    @(posedge clk) begin
      for (forvar105 = (1'h0); (forvar105 < (2'h2)); forvar105 = (forvar105 + (1'h1)))
        begin
          for (forvar106 = (1'h0); (forvar106 < (3'h4)); forvar106 = (forvar106 + (1'h1)))
            begin
              reg107 <= wire97;
              reg108 = reg92[(4'hd):(3'h6)];
              reg109 <= wire96[(4'ha):(3'h4)];
              reg110 <= forvar105[(3'h4):(2'h3)];
            end
          reg111 = $unsigned((wire94 ?
              ((reg21[(4'hb):(2'h2)] | (~&reg82)) ^~ ((reg90 ?
                  wire94 : (8'ha9)) || reg8[(1'h1):(1'h1)])) : reg109));
          for (forvar112 = (1'h0); (forvar112 < (1'h1)); forvar112 = (forvar112 + (1'h1)))
            begin
              reg113 = (($signed(reg21[(4'hb):(1'h1)]) << ($unsigned((reg87 & (8'hbb))) ?
                      ((^(8'hbe)) <= (8'h9d)) : (^~$signed(wire94)))) ?
                  ({reg89, $unsigned($signed(reg10))} ?
                      $unsigned(reg78[(4'ha):(2'h3)]) : ($unsigned(reg80) ?
                          $unsigned({wire29,
                              reg78}) : (7'h43))) : $signed((~$unsigned($signed(wire29)))));
              reg114 <= wire71[(4'h9):(3'h7)];
              reg115 <= (~&reg107);
              reg116 <= $signed((({(8'hb2)} ?
                      wire96 : (reg109[(3'h6):(1'h0)] > reg20)) ?
                  $signed($signed($signed(forvar112))) : reg87[(3'h5):(3'h4)]));
            end
          for (forvar117 = (1'h0); (forvar117 < (2'h3)); forvar117 = (forvar117 + (1'h1)))
            begin
              reg118 <= ((!((~|((8'hb0) || reg85)) ?
                      reg110[(3'h7):(3'h6)] : $unsigned($signed(reg6)))) ?
                  reg79[(4'he):(2'h3)] : reg114[(1'h1):(1'h1)]);
              reg119 <= ((&({(wire96 ?
                      wire71 : forvar105)} >= forvar112)) - ((({reg88} - $unsigned(reg93)) ?
                  ((reg88 ? reg116 : wire30) ?
                      $unsigned(reg110) : (|reg113)) : ((reg90 & reg114) ?
                      reg90 : {(8'hbf)})) != reg108[(4'he):(3'h6)]));
              reg120 = reg118;
              reg121 <= (~^(wire94[(2'h3):(2'h3)] ?
                  (({(7'h40),
                      (8'ha6)} > $signed(wire2)) ^~ ($signed(reg79) < (+forvar105))) : $signed(((~|reg90) ?
                      (|wire96) : reg90[(2'h2):(1'h0)]))));
            end
        end
    end
  assign wire122 = reg116[(1'h0):(1'h0)];
  assign wire123 = (-(reg20[(3'h5):(2'h3)] ?
                       $unsigned(reg92) : (~$signed(wire94[(2'h3):(2'h2)]))));
  always
    @(posedge clk) begin
      for (forvar124 = (1'h0); (forvar124 < (1'h1)); forvar124 = (forvar124 + (1'h1)))
        begin
          reg125 = $signed(((((wire73 == (7'h41)) <= wire28) ~^ ($signed(wire100) ?
              (+reg23) : $unsigned(reg26))) <= reg121[(4'hb):(2'h3)]));
          reg126 = wire29[(1'h1):(1'h0)];
        end
      reg127 = $signed(forvar124);
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module31  (y, clk, wire36, wire35, wire34, wire33, wire32);
  output wire [(32'h15e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hc):(1'h0)] wire36;
  input wire [(4'hb):(1'h0)] wire35;
  input wire signed [(3'h7):(1'h0)] wire34;
  input wire [(5'h13):(1'h0)] wire33;
  input wire signed [(4'hb):(1'h0)] wire32;
  wire signed [(4'hd):(1'h0)] wire70;
  wire signed [(4'hc):(1'h0)] wire69;
  wire signed [(4'h9):(1'h0)] wire68;
  wire [(4'h8):(1'h0)] wire67;
  wire signed [(4'hb):(1'h0)] wire66;
  wire [(5'h15):(1'h0)] wire37;
  reg signed [(3'h4):(1'h0)] reg64 = (1'h0);
  reg [(2'h2):(1'h0)] reg63 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg62 = (1'h0);
  reg [(4'hc):(1'h0)] reg61 = (1'h0);
  reg [(3'h5):(1'h0)] reg59 = (1'h0);
  reg [(4'hb):(1'h0)] reg56 = (1'h0);
  reg [(2'h2):(1'h0)] reg53 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg52 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg49 = (1'h0);
  reg [(5'h12):(1'h0)] reg47 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg45 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg42 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg41 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg38 = (1'h0);
  reg [(5'h14):(1'h0)] reg65 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar60 = (1'h0);
  reg [(5'h14):(1'h0)] reg58 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg57 = (1'h0);
  reg [(2'h3):(1'h0)] reg55 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar54 = (1'h0);
  reg [(3'h6):(1'h0)] reg51 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg50 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar48 = (1'h0);
  reg [(3'h5):(1'h0)] reg46 = (1'h0);
  reg [(2'h2):(1'h0)] reg44 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar43 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg40 = (1'h0);
  reg [(4'hb):(1'h0)] forvar39 = (1'h0);
  assign y = {wire70,
                 wire69,
                 wire68,
                 wire67,
                 wire66,
                 wire37,
                 reg64,
                 reg63,
                 reg62,
                 reg61,
                 reg59,
                 reg56,
                 reg53,
                 reg52,
                 reg49,
                 reg47,
                 reg45,
                 reg42,
                 reg41,
                 reg38,
                 reg65,
                 forvar60,
                 reg58,
                 reg57,
                 reg55,
                 forvar54,
                 reg51,
                 reg50,
                 forvar48,
                 reg46,
                 reg44,
                 forvar43,
                 reg40,
                 forvar39,
                 (1'h0)};
  assign wire37 = wire35[(2'h2):(1'h1)];
  always
    @(posedge clk) begin
      reg38 <= wire33;
      for (forvar39 = (1'h0); (forvar39 < (3'h4)); forvar39 = (forvar39 + (1'h1)))
        begin
          if ($signed(wire33[(5'h11):(2'h2)]))
            begin
              reg40 = {(({$signed(wire36)} ?
                          ($unsigned(wire37) | (wire33 < wire34)) : wire36) ?
                      ($signed(wire35) < (wire33 ?
                          (~^wire36) : $signed(wire33))) : $unsigned((~wire35[(2'h2):(1'h1)])))};
            end
          else
            begin
              reg41 <= ((wire34[(3'h5):(2'h3)] ?
                  $signed((wire34[(3'h5):(1'h0)] ?
                      reg38 : (~reg38))) : ((wire36[(3'h5):(1'h1)] ~^ $unsigned((8'ha4))) >>> (~$unsigned(wire36)))) >>> wire35[(4'h9):(1'h1)]);
              reg42 <= wire37;
            end
          for (forvar43 = (1'h0); (forvar43 < (3'h4)); forvar43 = (forvar43 + (1'h1)))
            begin
              reg44 = wire35[(3'h4):(1'h0)];
              reg45 <= $unsigned($signed({$signed($unsigned(reg41)),
                  (-(reg44 ? forvar43 : wire34))}));
              reg46 = wire33;
              reg47 <= (-$signed((forvar43[(4'he):(3'h6)] + $signed((8'hb0)))));
            end
          for (forvar48 = (1'h0); (forvar48 < (1'h0)); forvar48 = (forvar48 + (1'h1)))
            begin
              reg49 <= $unsigned((forvar43 && (wire33 - (~^((8'h9e) >> forvar43)))));
              reg50 = ((!((8'ha0) ? $unsigned($signed((8'ha6))) : (8'hac))) ?
                  reg44 : (forvar43[(3'h5):(3'h4)] ?
                      $signed((~^$signed(reg40))) : $unsigned(reg45[(2'h3):(2'h3)])));
              reg51 = ((reg50[(4'h9):(1'h1)] || (~reg40[(4'h8):(3'h7)])) ?
                  $signed((((reg38 ? forvar43 : forvar39) ?
                      $unsigned(reg41) : (^wire33)) || $unsigned((+wire32)))) : wire33);
              reg52 <= ($unsigned($unsigned((-$unsigned((8'hb4))))) & (wire37[(4'hf):(3'h7)] ~^ (wire32 ?
                  $unsigned({reg42,
                      wire37}) : $unsigned($unsigned(forvar48)))));
              reg53 <= reg47[(2'h3):(2'h3)];
            end
          for (forvar54 = (1'h0); (forvar54 < (1'h0)); forvar54 = (forvar54 + (1'h1)))
            begin
              reg55 = $signed((wire33 ^ ($signed($unsigned(wire37)) ?
                  forvar54[(3'h6):(1'h1)] : (!(wire37 ? reg42 : reg45)))));
              reg56 <= wire35[(3'h7):(1'h0)];
              reg57 = (($unsigned(($unsigned(reg41) ?
                          (8'ha1) : $unsigned(reg49))) ?
                      reg52 : (7'h41)) ?
                  reg42 : $unsigned((!{(!forvar48)})));
              reg58 = $unsigned(({wire33, reg44[(1'h0):(1'h0)]} ?
                  {(&$signed(reg45))} : $signed(reg38[(3'h6):(3'h6)])));
              reg59 <= (reg58[(4'hd):(1'h1)] | (|$unsigned(reg42[(5'h10):(5'h10)])));
            end
          for (forvar60 = (1'h0); (forvar60 < (1'h1)); forvar60 = (forvar60 + (1'h1)))
            begin
              reg61 <= (7'h44);
              reg62 <= $unsigned(reg50);
              reg63 <= $unsigned(($unsigned((reg57[(1'h1):(1'h1)] ?
                      (~|reg38) : $signed(reg44))) ?
                  (wire34 ?
                      ({reg42, (8'haa)} >>> (reg57 ?
                          (8'ha9) : reg47)) : $signed(((8'hb8) - (7'h44)))) : reg59[(1'h1):(1'h0)]));
              reg64 <= ($unsigned($signed($unsigned(wire36[(4'ha):(2'h3)]))) ^ $unsigned($unsigned(wire32)));
            end
        end
      reg65 = $unsigned((($signed(reg44[(1'h0):(1'h0)]) <<< $signed($signed(reg59))) <<< reg53));
    end
  assign wire66 = wire36[(1'h1):(1'h0)];
  assign wire67 = (7'h42);
  assign wire68 = $unsigned($unsigned({$unsigned((~reg53)),
                      $signed((-reg47))}));
  assign wire69 = (reg38[(3'h5):(1'h1)] ? wire66 : $signed($signed(wire37)));
  assign wire70 = $unsigned($signed(((|(|reg59)) ?
                      $signed($signed((8'ha5))) : $signed((reg56 | (8'haa))))));
endmodule