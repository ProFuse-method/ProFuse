(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param62 = ({(((8'ha6) - (8'h9c)) > (^(8'h9e)))} || ((((8'ha4) ^ (8'ha2)) > ((8'h9d) * (8'ha1))) ? (^~((8'ha1) >= (8'h9c))) : (+((8'had) != (8'ha7))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h51):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire3;
  input wire [(4'hb):(1'h0)] wire2;
  input wire [(3'h6):(1'h0)] wire1;
  input wire signed [(4'h8):(1'h0)] wire0;
  wire signed [(4'hb):(1'h0)] wire59;
  wire signed [(3'h7):(1'h0)] wire58;
  wire [(3'h7):(1'h0)] wire56;
  wire [(3'h6):(1'h0)] wire9;
  wire [(4'h9):(1'h0)] wire8;
  wire [(2'h2):(1'h0)] wire7;
  wire signed [(4'ha):(1'h0)] wire6;
  wire signed [(4'ha):(1'h0)] wire5;
  wire signed [(4'h9):(1'h0)] wire4;
  reg [(3'h4):(1'h0)] reg61 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg60 = (1'h0);
  assign y = {wire59,
                 wire58,
                 wire56,
                 wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 reg61,
                 reg60,
                 (1'h0)};
  assign wire4 = ((wire2 ?
                         (!(~^wire1)) : (((8'haf) >>> wire0) ?
                             $unsigned(wire2) : $signed(wire0))) ?
                     {((+wire2) >> wire2[(3'h5):(2'h2)])} : $signed($signed({wire2})));
  assign wire5 = wire1[(3'h4):(1'h0)];
  assign wire6 = (wire1[(2'h3):(1'h0)] >> wire4[(3'h7):(1'h0)]);
  assign wire7 = ($unsigned((+(wire0 > (8'ha8)))) ?
                     (&wire4[(2'h3):(2'h2)]) : $signed(((!wire4) ?
                         wire0[(3'h5):(1'h0)] : ((8'ha1) * (8'h9c)))));
  assign wire8 = {wire1[(1'h1):(1'h0)]};
  assign wire9 = $signed($signed(wire5));
  module10 #() modinst57 (.clk(clk), .wire13(wire5), .y(wire56), .wire14(wire2), .wire12(wire4), .wire11(wire0));
  assign wire58 = ($signed($unsigned(((8'h9f) ?
                      wire3 : wire56))) != (~|{((8'ha5) == wire6)}));
  assign wire59 = $signed((+(^~$signed((8'h9d)))));
  always
    @(posedge clk) begin
      reg60 <= ((wire6 << wire0) << wire3[(2'h3):(2'h2)]);
      reg61 <= (~(&($unsigned(wire8) ? wire9 : (wire0 ? wire58 : wire3))));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10
#(parameter param55 = (^~(({(8'ha0)} ? {(8'hae)} : (^(8'ha8))) >>> (!((8'h9c) >>> (8'h9d))))))
(y, clk, wire14, wire13, wire12, wire11);
  output wire [(32'h68):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire14;
  input wire signed [(4'ha):(1'h0)] wire13;
  input wire [(3'h7):(1'h0)] wire12;
  input wire signed [(4'h8):(1'h0)] wire11;
  wire [(3'h6):(1'h0)] wire54;
  wire signed [(4'h8):(1'h0)] wire50;
  wire [(3'h5):(1'h0)] wire49;
  wire signed [(4'h9):(1'h0)] wire48;
  wire [(3'h4):(1'h0)] wire46;
  wire [(2'h2):(1'h0)] wire44;
  wire signed [(4'hb):(1'h0)] wire18;
  wire signed [(4'h8):(1'h0)] wire17;
  wire signed [(4'h8):(1'h0)] wire16;
  wire [(4'hb):(1'h0)] wire15;
  reg signed [(3'h6):(1'h0)] reg53 = (1'h0);
  reg [(4'h9):(1'h0)] reg52 = (1'h0);
  reg [(3'h5):(1'h0)] reg51 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg47 = (1'h0);
  assign y = {wire54,
                 wire50,
                 wire49,
                 wire48,
                 wire46,
                 wire44,
                 wire18,
                 wire17,
                 wire16,
                 wire15,
                 reg53,
                 reg52,
                 reg51,
                 reg47,
                 (1'h0)};
  assign wire15 = (^(8'h9d));
  assign wire16 = wire13[(3'h6):(3'h4)];
  assign wire17 = $signed(((!$signed(wire15)) ? $unsigned((&wire16)) : wire13));
  assign wire18 = (wire11 ?
                      ({{wire16}} ?
                          wire14[(3'h4):(2'h3)] : (~&wire11[(1'h1):(1'h0)])) : wire14);
  module19 #() modinst45 (.wire21(wire16), .y(wire44), .wire23(wire11), .wire22(wire13), .wire20(wire14), .clk(clk));
  assign wire46 = {wire12};
  always
    @(posedge clk) begin
      reg47 <= {(((8'ha9) ? (-wire13) : $unsigned(wire17)) >= wire46)};
    end
  assign wire48 = (^wire14);
  assign wire49 = (^~(((reg47 ? wire17 : wire14) || {(8'haa)}) ?
                      ($signed(wire16) ? (^reg47) : wire46) : $signed(wire18)));
  assign wire50 = wire14[(1'h1):(1'h1)];
  always
    @(posedge clk) begin
      if ((wire17[(3'h6):(2'h3)] ?
          (~|$unsigned($unsigned(wire44))) : {(wire14 ~^ $unsigned((8'haf)))}))
        begin
          if ($unsigned(reg47[(3'h7):(1'h1)]))
            begin
              reg51 <= ((~&$signed(wire49)) ~^ ($unsigned(wire44[(2'h2):(1'h0)]) ?
                  $unsigned(wire11) : ($unsigned(wire46) ?
                      $unsigned(wire13) : wire48)));
            end
          else
            begin
              reg51 <= $signed($signed((wire48[(3'h6):(2'h3)] ?
                  $signed(wire48) : (8'ha0))));
              reg52 <= {$unsigned(((~^wire18) ?
                      (wire15 ? reg47 : reg51) : $unsigned((8'h9d))))};
            end
        end
      else
        begin
          reg51 <= wire12[(1'h0):(1'h0)];
        end
      reg53 <= ($signed($unsigned($unsigned(wire16))) == (~&wire11));
    end
  assign wire54 = (wire17[(2'h3):(2'h3)] != reg51);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module19
#(parameter param43 = (((^((8'h9c) >> (8'ha7))) >> ((!(8'hac)) >= ((8'haf) ? (8'ha4) : (8'ha0)))) >= ((((8'haf) == (8'h9e)) ? {(8'ha2)} : ((8'haf) ? (8'had) : (8'hae))) ? {(+(8'h9f))} : {((8'haa) ? (8'h9f) : (8'haa))})))
(y, clk, wire23, wire22, wire21, wire20);
  output wire [(32'h7c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire23;
  input wire [(3'h7):(1'h0)] wire22;
  input wire signed [(2'h2):(1'h0)] wire21;
  input wire signed [(4'hb):(1'h0)] wire20;
  wire signed [(3'h6):(1'h0)] wire42;
  wire [(3'h5):(1'h0)] wire39;
  wire signed [(3'h5):(1'h0)] wire34;
  wire signed [(4'h8):(1'h0)] wire33;
  wire [(3'h7):(1'h0)] wire32;
  wire [(3'h6):(1'h0)] wire30;
  reg [(2'h3):(1'h0)] reg41 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg40 = (1'h0);
  reg [(4'ha):(1'h0)] reg38 = (1'h0);
  reg [(4'hb):(1'h0)] reg37 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg36 = (1'h0);
  reg [(4'h9):(1'h0)] reg35 = (1'h0);
  reg [(3'h7):(1'h0)] reg31 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg29 = (1'h0);
  reg [(3'h6):(1'h0)] reg28 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg27 = (1'h0);
  reg [(4'ha):(1'h0)] reg26 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg25 = (1'h0);
  reg [(3'h5):(1'h0)] reg24 = (1'h0);
  assign y = {wire42,
                 wire39,
                 wire34,
                 wire33,
                 wire32,
                 wire30,
                 reg41,
                 reg40,
                 reg38,
                 reg37,
                 reg36,
                 reg35,
                 reg31,
                 reg29,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 reg24,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (((~^{$signed(wire23)}) <<< $signed((8'ha0))))
        begin
          if ((wire20 ? (!wire20[(4'h9):(1'h1)]) : wire23[(2'h3):(1'h1)]))
            begin
              reg24 <= $signed($unsigned(({wire23} ? {(8'ha5)} : {wire20})));
              reg25 <= $signed($signed(wire20[(3'h5):(1'h1)]));
            end
          else
            begin
              reg24 <= $unsigned((($signed(wire21) | (wire22 ? reg24 : reg25)) ?
                  $unsigned($signed(wire23)) : ((reg25 ?
                      (8'hac) : reg25) ^~ wire23)));
              reg25 <= wire20[(4'hb):(3'h5)];
              reg26 <= ((8'h9f) ?
                  wire22 : {($unsigned(wire21) ?
                          (wire20 <= (8'ha0)) : $signed(reg25))});
            end
        end
      else
        begin
          reg24 <= wire23[(3'h5):(1'h1)];
        end
      if ((wire23 && (+$signed((reg25 << reg25)))))
        begin
          reg27 <= (8'hab);
        end
      else
        begin
          reg27 <= {$signed($unsigned((wire23 ? reg25 : wire21)))};
          reg28 <= $unsigned((~{$signed(reg27)}));
          reg29 <= reg26[(3'h7):(1'h1)];
        end
    end
  assign wire30 = reg26[(4'h8):(1'h0)];
  always
    @(posedge clk) begin
      reg31 <= $signed(wire21);
    end
  assign wire32 = $unsigned($signed($unsigned((reg27 > wire20))));
  assign wire33 = ((~^(+(reg26 ? (8'hab) : wire30))) ?
                      $signed(wire21) : (8'had));
  assign wire34 = (!(^(|{reg27})));
  always
    @(posedge clk) begin
      reg35 <= (~^wire22[(1'h1):(1'h0)]);
      if ({$unsigned(((&wire33) < $signed(wire34)))})
        begin
          reg36 <= $unsigned($unsigned(wire33));
        end
      else
        begin
          reg36 <= ({(wire34 >= $signed(wire34))} + wire21);
          if ($signed(reg36[(4'h9):(4'h9)]))
            begin
              reg37 <= {reg25};
            end
          else
            begin
              reg37 <= (-reg31[(3'h6):(2'h3)]);
              reg38 <= (8'ha8);
            end
        end
    end
  assign wire39 = (wire34[(2'h3):(2'h2)] ?
                      (^~$unsigned(reg36)) : $unsigned((8'ha1)));
  always
    @(posedge clk) begin
      reg40 <= $signed($signed(($signed(reg25) || $signed(wire23))));
      reg41 <= (($unsigned((reg36 ^ wire23)) ^ (|(8'ha3))) * (^((^reg29) ?
          (8'ha8) : (reg26 | wire39))));
    end
  assign wire42 = reg26[(3'h6):(3'h4)];
endmodule