(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param28 = (^{(~|((8'ha0) != (8'ha9)))}))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h3a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h8):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire signed [(4'h9):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire signed [(4'ha):(1'h0)] wire27;
  wire [(4'hb):(1'h0)] wire26;
  wire [(3'h7):(1'h0)] wire25;
  wire signed [(3'h5):(1'h0)] wire23;
  wire signed [(4'h8):(1'h0)] wire6;
  wire [(4'h8):(1'h0)] wire5;
  wire signed [(4'h8):(1'h0)] wire4;
  assign y = {wire27, wire26, wire25, wire23, wire6, wire5, wire4, (1'h0)};
  assign wire4 = wire3;
  assign wire5 = $unsigned(wire4[(2'h3):(1'h0)]);
  assign wire6 = (8'ha2);
  module7 #() modinst24 (.wire9(wire0), .wire8(wire3), .y(wire23), .clk(clk), .wire10(wire5), .wire11(wire2));
  assign wire25 = wire3[(3'h5):(2'h3)];
  assign wire26 = wire6;
  assign wire27 = (8'h9c);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7
#(parameter param22 = (|(((8'had) * ((8'ha3) ? (8'ha2) : (8'ha4))) ? (((8'haa) ? (8'ha4) : (8'ha6)) ? (8'ha9) : ((8'ha8) <<< (8'ha8))) : ({(8'haf)} ? {(8'h9f)} : ((8'hab) ? (8'h9e) : (8'h9e))))))
(y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h46):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'h9):(1'h0)] wire11;
  input wire [(3'h6):(1'h0)] wire10;
  input wire signed [(4'ha):(1'h0)] wire9;
  input wire [(2'h3):(1'h0)] wire8;
  wire [(4'h8):(1'h0)] wire21;
  wire signed [(2'h2):(1'h0)] wire20;
  wire [(4'h8):(1'h0)] wire12;
  reg signed [(2'h2):(1'h0)] reg19 = (1'h0);
  reg [(4'hb):(1'h0)] reg18 = (1'h0);
  reg [(3'h6):(1'h0)] reg17 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg16 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg15 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg14 = (1'h0);
  reg [(3'h7):(1'h0)] reg13 = (1'h0);
  assign y = {wire21,
                 wire20,
                 wire12,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 (1'h0)};
  assign wire12 = (wire10 ?
                      ($unsigned((wire9 && wire10)) ?
                          $signed(wire10[(1'h1):(1'h1)]) : (~|(wire9 ?
                              wire9 : wire8))) : ((-(wire8 >> wire10)) == wire8));
  always
    @(posedge clk) begin
      reg13 <= (+$signed((wire8[(1'h0):(1'h0)] ?
          $signed((8'hb0)) : wire11[(2'h2):(2'h2)])));
      reg14 <= ($signed((+wire9[(4'ha):(1'h1)])) ^~ ($signed(wire12[(1'h0):(1'h0)]) ?
          (8'haf) : wire8));
    end
  always
    @(posedge clk) begin
      reg15 <= {((+(!wire11)) | reg13[(2'h2):(1'h1)])};
    end
  always
    @(posedge clk) begin
      reg16 <= $unsigned(wire8);
      if (wire9)
        begin
          reg17 <= $signed(reg15[(1'h0):(1'h0)]);
          reg18 <= (wire11[(4'h8):(3'h5)] ? reg16 : wire9);
          reg19 <= $unsigned($unsigned(wire8));
        end
      else
        begin
          reg17 <= {$signed(wire10[(2'h2):(2'h2)])};
          reg18 <= $signed((8'ha2));
        end
    end
  assign wire20 = ((reg13[(3'h6):(3'h6)] ?
                          $unsigned((+wire10)) : ($unsigned((8'had)) | $unsigned(reg17))) ?
                      {{$signed(reg16)}} : reg14[(3'h6):(2'h2)]);
  assign wire21 = $unsigned((~(&(wire8 * wire12))));
endmodule