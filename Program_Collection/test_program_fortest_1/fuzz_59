(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param70 = {(&(~^((8'ha0) ? (8'ha2) : (8'ha1))))})
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'he5):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire3;
  input wire [(4'hb):(1'h0)] wire2;
  input wire [(4'h8):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire [(3'h4):(1'h0)] wire63;
  wire [(3'h7):(1'h0)] wire62;
  wire [(2'h3):(1'h0)] wire61;
  wire [(4'h8):(1'h0)] wire60;
  wire signed [(4'h9):(1'h0)] wire53;
  wire [(4'h9):(1'h0)] wire20;
  wire [(3'h6):(1'h0)] wire65;
  wire [(3'h4):(1'h0)] wire66;
  wire signed [(4'hb):(1'h0)] wire68;
  reg signed [(4'h8):(1'h0)] reg59 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg58 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg57 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg56 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg55 = (1'h0);
  reg [(4'h8):(1'h0)] reg19 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg18 = (1'h0);
  reg [(3'h4):(1'h0)] reg17 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg16 = (1'h0);
  reg [(4'hb):(1'h0)] reg15 = (1'h0);
  reg [(4'h8):(1'h0)] reg14 = (1'h0);
  reg [(4'h8):(1'h0)] reg13 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg12 = (1'h0);
  reg [(4'hb):(1'h0)] reg11 = (1'h0);
  reg [(4'ha):(1'h0)] reg10 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg9 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg8 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg7 = (1'h0);
  reg [(4'hb):(1'h0)] reg6 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg5 = (1'h0);
  reg [(3'h6):(1'h0)] reg4 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg67 = (1'h0);
  assign y = {wire63,
                 wire62,
                 wire61,
                 wire60,
                 wire53,
                 wire20,
                 wire65,
                 wire66,
                 wire68,
                 reg59,
                 reg58,
                 reg57,
                 reg56,
                 reg55,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg6,
                 reg5,
                 reg4,
                 reg67,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ($signed(wire2))
        begin
          if ($signed(((^wire0[(3'h6):(3'h5)]) ? {{wire1}} : (^(~|wire0)))))
            begin
              reg4 <= $signed((8'ha2));
              reg5 <= (+(|$unsigned((wire3 ? wire2 : wire1))));
              reg6 <= ($signed({((8'had) ?
                      (8'ha8) : reg5)}) >> wire1[(1'h0):(1'h0)]);
            end
          else
            begin
              reg4 <= ((reg4 * wire0) ? wire2 : wire2[(3'h4):(3'h4)]);
            end
          if ($unsigned($signed($signed({(8'h9c)}))))
            begin
              reg7 <= (reg4[(3'h6):(2'h3)] >= ((^((8'h9e) >> reg4)) ?
                  (~&{reg4}) : {$unsigned(reg5)}));
            end
          else
            begin
              reg7 <= {(^~((reg7 >= wire3) + (reg5 || reg4)))};
              reg8 <= $signed(wire0[(1'h1):(1'h1)]);
              reg9 <= ({$signed({reg8})} ?
                  {((wire1 ? reg8 : wire1) || ((8'ha5) ?
                          (8'hab) : reg5))} : (~reg5));
            end
        end
      else
        begin
          reg4 <= (~&((~&$signed(reg7)) ^~ wire2[(1'h1):(1'h1)]));
          reg5 <= ($signed(((wire2 ~^ reg4) << $signed(reg5))) ?
              reg8[(3'h6):(1'h0)] : (reg7 ?
                  (&(reg5 ? reg7 : reg8)) : wire1[(2'h3):(2'h3)]));
        end
      if ($unsigned((reg4 ?
          ($signed(reg5) != (wire1 ? wire0 : wire0)) : ((reg4 ?
                  reg8 : (8'haa)) ?
              (~&(8'haa)) : ((8'hac) + wire2)))))
        begin
          reg10 <= (wire3[(3'h4):(1'h1)] ?
              (reg5[(2'h3):(1'h0)] ?
                  (wire2[(3'h5):(2'h3)] >= reg5) : $signed($signed(reg5))) : reg7[(2'h3):(2'h2)]);
          reg11 <= reg7;
        end
      else
        begin
          reg10 <= ($signed(wire3[(3'h4):(3'h4)]) ?
              $unsigned($signed($signed(reg11))) : $signed($unsigned(reg6)));
          reg11 <= {(reg7[(2'h2):(1'h1)] ?
                  reg6[(1'h0):(1'h0)] : $signed((reg9 + wire2)))};
        end
      if (($unsigned($unsigned($signed((8'ha1)))) ?
          wire3 : reg5[(2'h3):(1'h0)]))
        begin
          reg12 <= $signed((|(reg6[(1'h1):(1'h1)] | wire3[(3'h4):(1'h0)])));
          if (reg11)
            begin
              reg13 <= reg7;
            end
          else
            begin
              reg13 <= (+(~&((reg6 ? reg13 : reg13) ? $signed(reg13) : reg5)));
              reg14 <= {((8'ha7) >> ((reg13 ? reg12 : reg9) >> (|wire2)))};
            end
        end
      else
        begin
          reg12 <= (($unsigned(reg6[(2'h2):(2'h2)]) ?
              (~$unsigned(wire0)) : ($unsigned((8'hac)) * reg6[(1'h0):(1'h0)])) + wire2);
          reg13 <= (($signed($unsigned(wire3)) || reg10) ?
              (({wire1} ? $unsigned(reg12) : $unsigned((8'hac))) ?
                  ((~^reg4) ?
                      $signed(reg6) : (reg4 ?
                          reg9 : (8'hb0))) : ($signed(reg5) > $signed(reg11))) : ({reg4[(2'h3):(2'h2)]} + ($signed(wire2) ~^ $signed(reg11))));
        end
    end
  always
    @(posedge clk) begin
      if (reg13[(4'h8):(2'h3)])
        begin
          if ($unsigned(reg13))
            begin
              reg15 <= reg5[(3'h6):(3'h5)];
              reg16 <= ($unsigned({$unsigned(wire1)}) ?
                  $signed(reg4) : $signed(wire3));
            end
          else
            begin
              reg15 <= (({{wire0}} * $unsigned($unsigned(reg8))) ?
                  reg6 : ((~&(8'ha0)) ~^ (&(8'h9c))));
              reg16 <= reg6;
              reg17 <= reg11[(2'h3):(2'h3)];
            end
          reg18 <= (~reg7);
        end
      else
        begin
          reg15 <= ((reg16[(2'h3):(2'h2)] ~^ $unsigned((wire0 ? reg7 : reg6))) ?
              (reg11[(3'h5):(2'h2)] & $unsigned((wire2 ?
                  reg14 : reg18))) : ($signed((-reg14)) ?
                  ($signed(reg9) ?
                      (wire3 ?
                          reg7 : wire1) : (reg12 >>> reg18)) : $unsigned((8'h9f))));
          reg16 <= $unsigned({{(8'ha7)}});
        end
      reg19 <= $signed($signed($unsigned((reg9 ? reg8 : (8'h9d)))));
    end
  assign wire20 = reg8;
  module21 #() modinst54 (.wire23(reg14), .wire25(reg7), .wire22(reg5), .wire24(reg15), .clk(clk), .y(wire53));
  always
    @(posedge clk) begin
      if ((wire2[(3'h4):(2'h2)] || {reg14[(4'h8):(1'h0)]}))
        begin
          if (($unsigned((^reg11)) ?
              reg9[(2'h3):(2'h3)] : $unsigned(reg5[(4'h8):(1'h0)])))
            begin
              reg55 <= ((((reg16 ? (8'hab) : wire53) ^ reg9) ?
                      (~^$signed(reg19)) : wire0[(1'h0):(1'h0)]) ?
                  {{(|reg17)}} : ({$unsigned(wire20)} ?
                      reg14 : $signed((wire2 ? reg14 : wire1))));
              reg56 <= (reg7[(3'h4):(1'h0)] ?
                  {$unsigned(((8'hac) ? reg9 : reg14))} : (((reg5 ?
                          (8'hb0) : reg5) ?
                      ((8'h9d) && reg6) : reg6) ^~ reg8[(3'h7):(3'h6)]));
            end
          else
            begin
              reg55 <= {(~^(8'hab))};
              reg56 <= reg16[(2'h2):(2'h2)];
              reg57 <= reg55[(1'h1):(1'h1)];
            end
          if ((|$unsigned(reg15)))
            begin
              reg58 <= ($unsigned(({(8'hac)} ?
                      $signed(reg4) : reg11[(1'h0):(1'h0)])) ?
                  (+((^~reg57) | (~reg17))) : $signed($unsigned($unsigned((8'had)))));
            end
          else
            begin
              reg58 <= (reg11[(3'h7):(3'h7)] ? $signed({(&reg15)}) : (8'haf));
            end
          reg59 <= reg14[(3'h6):(1'h1)];
        end
      else
        begin
          reg55 <= (|(reg4[(1'h0):(1'h0)] ?
              wire53 : (reg5 - $unsigned(reg59))));
          if (((-$signed($unsigned((8'ha3)))) & (({reg13} ?
              (reg4 | reg58) : $signed(reg4)) < reg4)))
            begin
              reg56 <= ({reg10} << $unsigned((+{reg15})));
              reg57 <= reg16;
            end
          else
            begin
              reg56 <= $unsigned((8'haa));
              reg57 <= $signed(reg16);
            end
        end
    end
  assign wire60 = $unsigned((^~({reg16} ? {reg14} : (reg5 >= reg9))));
  assign wire61 = {(($signed(wire3) ? (~(8'h9f)) : (reg10 ? (8'ha4) : reg9)) ?
                          (8'ha9) : (~|(~(8'haf))))};
  assign wire62 = reg8;
  module21 #() modinst64 (.wire22(reg15), .wire24(reg6), .wire25(reg56), .wire23(wire60), .clk(clk), .y(wire63));
  assign wire65 = (^~({wire20[(3'h7):(3'h7)]} >>> ((reg12 ? reg15 : reg58) ?
                      {wire61} : (reg13 || reg8))));
  assign wire66 = $unsigned(reg4[(3'h6):(3'h5)]);
  always
    @(posedge clk) begin
      reg67 <= wire53[(4'h9):(4'h9)];
    end
  module29 #() modinst69 (.wire31(reg56), .y(wire68), .clk(clk), .wire32(wire66), .wire30(wire62), .wire33(wire65));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module21
#(parameter param52 = ((({(8'had)} ? ((8'h9d) ? (8'ha2) : (8'h9e)) : ((8'ha1) || (8'had))) + {((8'h9f) >> (8'ha6))}) - (^~(&((8'h9f) & (8'ha7))))))
(y, clk, wire25, wire24, wire23, wire22);
  output wire [(32'h22):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire25;
  input wire [(4'hb):(1'h0)] wire24;
  input wire [(4'h8):(1'h0)] wire23;
  input wire signed [(4'hb):(1'h0)] wire22;
  wire [(4'ha):(1'h0)] wire50;
  wire signed [(4'h8):(1'h0)] wire28;
  wire [(4'ha):(1'h0)] wire27;
  wire [(3'h5):(1'h0)] wire26;
  assign y = {wire50, wire28, wire27, wire26, (1'h0)};
  assign wire26 = $signed(((^wire24) ? (^~{wire25}) : wire24));
  assign wire27 = (~&$signed(wire26));
  assign wire28 = ((8'ha3) ?
                      wire24[(4'h9):(1'h0)] : (^{(wire26 ? wire25 : wire27)}));
  module29 #() modinst51 (wire50, clk, wire27, wire23, wire25, wire22);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module29  (y, clk, wire33, wire32, wire31, wire30);
  output wire [(32'h5f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire33;
  input wire [(2'h2):(1'h0)] wire32;
  input wire [(3'h4):(1'h0)] wire31;
  input wire signed [(3'h7):(1'h0)] wire30;
  wire signed [(3'h5):(1'h0)] wire49;
  wire signed [(4'h8):(1'h0)] wire48;
  wire signed [(3'h4):(1'h0)] wire47;
  wire [(3'h5):(1'h0)] wire46;
  wire [(4'ha):(1'h0)] wire45;
  wire [(4'h8):(1'h0)] wire44;
  wire signed [(4'hb):(1'h0)] wire43;
  wire signed [(4'ha):(1'h0)] wire42;
  wire [(3'h7):(1'h0)] wire41;
  reg [(2'h3):(1'h0)] reg40 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg39 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg38 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg37 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg36 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg35 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg34 = (1'h0);
  assign y = {wire49,
                 wire48,
                 wire47,
                 wire46,
                 wire45,
                 wire44,
                 wire43,
                 wire42,
                 wire41,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 reg36,
                 reg35,
                 reg34,
                 (1'h0)};
  always
    @(posedge clk) begin
      if (wire32[(1'h1):(1'h1)])
        begin
          if (wire31)
            begin
              reg34 <= wire33[(3'h6):(3'h6)];
            end
          else
            begin
              reg34 <= ((($signed(wire32) ?
                  wire30 : $unsigned(reg34)) ^~ (8'ha7)) >= wire33);
              reg35 <= ($unsigned($signed((wire30 >= wire30))) ?
                  ((wire30 ?
                      {wire30} : wire33) == (!$signed(reg34))) : (+$signed((~|wire33))));
              reg36 <= $signed(wire33[(3'h4):(1'h0)]);
            end
        end
      else
        begin
          reg34 <= $signed(reg34);
        end
      reg37 <= ((wire33[(1'h1):(1'h1)] ?
          {((8'ha5) > wire33)} : $signed($unsigned(reg36))) && reg34[(2'h2):(1'h0)]);
      if ({reg35[(3'h6):(3'h6)]})
        begin
          if ((8'ha0))
            begin
              reg38 <= $signed((((^~wire32) ^ $signed((8'hae))) ?
                  {$unsigned(wire32)} : (8'h9f)));
              reg39 <= ({(^~(reg34 <<< wire31))} && wire30);
              reg40 <= wire30;
            end
          else
            begin
              reg38 <= {(reg36[(1'h1):(1'h0)] > (~^{reg40}))};
              reg39 <= ({($unsigned(reg40) ?
                      (wire33 ? reg37 : reg39) : (~^reg40))} < reg36);
            end
        end
      else
        begin
          reg38 <= {(&wire32)};
          reg39 <= reg39;
          reg40 <= {(wire31 <= ($signed(reg39) < $unsigned(reg34)))};
        end
    end
  assign wire41 = (wire32[(1'h1):(1'h0)] - wire30);
  assign wire42 = $signed($unsigned((~&((8'ha8) ? wire30 : reg36))));
  assign wire43 = $signed(reg40);
  assign wire44 = {(reg36[(2'h3):(2'h2)] <<< (&$signed(reg40)))};
  assign wire45 = ($signed($unsigned(wire42[(3'h5):(3'h5)])) >> (~wire41));
  assign wire46 = wire31[(1'h0):(1'h0)];
  assign wire47 = $signed($signed(({wire33} < (+wire31))));
  assign wire48 = (($signed({reg39}) == $unsigned($unsigned(wire43))) ^~ reg35);
  assign wire49 = ($unsigned(((8'haf) << (wire44 ? wire48 : wire31))) ?
                      (~reg38[(1'h1):(1'h1)]) : $unsigned(((wire32 ?
                              wire46 : wire48) ?
                          (wire33 ? wire33 : wire48) : wire30[(2'h2):(1'h0)])));
endmodule