(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param41 = ((({((8'hae) ? (8'ha3) : (8'hb5))} << (+((8'hbe) ? (8'ha7) : (8'hab)))) | (~^({(8'had), (8'ha6)} ? (!(8'hb7)) : {(8'hb6), (8'ha7)}))) * ((~|((|(8'hb0)) ? ((8'h9e) ? (8'h9f) : (8'hb7)) : ((8'hac) ? (8'hb4) : (8'had)))) != ((^~((8'ha0) ? (8'hae) : (8'hb6))) > {((8'ha4) ? (7'h42) : (8'h9c)), ((8'ha1) ? (8'hae) : (7'h41))}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h1b0):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hf):(1'h0)] wire3;
  input wire [(3'h7):(1'h0)] wire2;
  input wire signed [(4'hd):(1'h0)] wire1;
  input wire signed [(4'h8):(1'h0)] wire0;
  wire signed [(4'hd):(1'h0)] wire35;
  wire [(2'h3):(1'h0)] wire34;
  wire signed [(3'h4):(1'h0)] wire6;
  wire [(5'h11):(1'h0)] wire5;
  wire signed [(3'h6):(1'h0)] wire4;
  reg [(5'h14):(1'h0)] reg39 = (1'h0);
  reg [(5'h12):(1'h0)] reg37 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg28 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg25 = (1'h0);
  reg [(5'h11):(1'h0)] reg24 = (1'h0);
  reg [(2'h3):(1'h0)] reg23 = (1'h0);
  reg [(4'ha):(1'h0)] reg19 = (1'h0);
  reg signed [(4'he):(1'h0)] reg17 = (1'h0);
  reg [(4'ha):(1'h0)] reg15 = (1'h0);
  reg [(2'h2):(1'h0)] reg13 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg9 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg7 = (1'h0);
  reg [(5'h13):(1'h0)] reg40 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar38 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar36 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg33 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar32 = (1'h0);
  reg [(4'he):(1'h0)] reg31 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar30 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg29 = (1'h0);
  reg [(4'h8):(1'h0)] forvar27 = (1'h0);
  reg [(3'h4):(1'h0)] forvar26 = (1'h0);
  reg [(4'he):(1'h0)] reg22 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg21 = (1'h0);
  reg [(5'h10):(1'h0)] reg20 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar18 = (1'h0);
  reg [(3'h5):(1'h0)] reg16 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg14 = (1'h0);
  reg [(5'h15):(1'h0)] forvar12 = (1'h0);
  reg [(4'hc):(1'h0)] forvar11 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg10 = (1'h0);
  reg [(4'hc):(1'h0)] forvar8 = (1'h0);
  assign y = {wire35,
                 wire34,
                 wire6,
                 wire5,
                 wire4,
                 reg39,
                 reg37,
                 reg28,
                 reg25,
                 reg24,
                 reg23,
                 reg19,
                 reg17,
                 reg15,
                 reg13,
                 reg9,
                 reg7,
                 reg40,
                 forvar38,
                 forvar36,
                 reg33,
                 forvar32,
                 reg31,
                 forvar30,
                 reg29,
                 forvar27,
                 forvar26,
                 reg22,
                 reg21,
                 reg20,
                 forvar18,
                 reg16,
                 reg14,
                 forvar12,
                 forvar11,
                 reg10,
                 forvar8,
                 (1'h0)};
  assign wire4 = (wire2[(3'h7):(2'h2)] * (^$signed($unsigned((!(7'h43))))));
  assign wire5 = wire2[(3'h4):(3'h4)];
  assign wire6 = wire5;
  always
    @(posedge clk) begin
      reg7 <= ($signed(({(-wire0)} - wire3)) ?
          $signed(wire0[(3'h7):(1'h1)]) : (!(($unsigned(wire3) ^~ {wire0}) >>> (8'hb8))));
      for (forvar8 = (1'h0); (forvar8 < (1'h0)); forvar8 = (forvar8 + (1'h1)))
        begin
          reg9 <= wire6;
          reg10 = $signed((|((wire5[(4'h9):(2'h3)] <<< ((8'hb2) < (8'had))) >>> (reg9[(1'h1):(1'h0)] >= (|wire6)))));
        end
      for (forvar11 = (1'h0); (forvar11 < (2'h2)); forvar11 = (forvar11 + (1'h1)))
        begin
          for (forvar12 = (1'h0); (forvar12 < (2'h3)); forvar12 = (forvar12 + (1'h1)))
            begin
              reg13 <= ((^$signed($unsigned(wire3[(4'hb):(4'h9)]))) ?
                  (wire1 >>> wire3) : reg10[(4'he):(2'h3)]);
              reg14 = $signed((((^~(forvar11 ? wire2 : forvar12)) ?
                  $signed({wire3, wire6}) : ($signed(wire6) ?
                      (reg7 < reg13) : ((8'hb3) << reg13))) == $signed(reg7[(2'h2):(2'h2)])));
              reg15 <= wire5[(4'h8):(1'h0)];
              reg16 = reg13[(1'h0):(1'h0)];
              reg17 <= $unsigned(forvar11);
            end
          for (forvar18 = (1'h0); (forvar18 < (3'h4)); forvar18 = (forvar18 + (1'h1)))
            begin
              reg19 <= (wire2[(1'h0):(1'h0)] ~^ wire6[(1'h1):(1'h0)]);
              reg20 = $unsigned($signed((~|(8'ha5))));
            end
          reg21 = $unsigned(wire5[(1'h0):(1'h0)]);
          if ((8'hb0))
            begin
              reg22 = (forvar11 ?
                  ((((reg10 ? reg17 : reg14) ?
                      $signed(reg14) : {reg7,
                          reg20}) <<< $signed((+wire2))) == (((+reg20) == ((8'hac) ?
                      wire1 : reg20)) << $signed(reg7))) : wire2);
              reg23 <= (&$unsigned((((reg7 != reg13) ?
                      (-(8'ha7)) : (reg22 || reg19)) ?
                  reg7[(2'h3):(1'h1)] : $signed(reg10))));
            end
          else
            begin
              reg22 = ({{$unsigned(reg13[(1'h0):(1'h0)])},
                  $signed(((reg7 ? forvar12 : reg9) && reg17))} <= (+reg15));
              reg23 <= reg23;
              reg24 <= $signed($signed((reg16[(1'h0):(1'h0)] ?
                  $signed((reg22 ? wire5 : reg16)) : {(wire6 < wire4),
                      (forvar12 ? reg16 : wire3)})));
            end
        end
      reg25 <= (-forvar12);
    end
  always
    @(posedge clk) begin
      for (forvar26 = (1'h0); (forvar26 < (3'h4)); forvar26 = (forvar26 + (1'h1)))
        begin
          for (forvar27 = (1'h0); (forvar27 < (3'h4)); forvar27 = (forvar27 + (1'h1)))
            begin
              reg28 <= (|wire6[(3'h4):(1'h1)]);
              reg29 = {$signed($signed(reg7))};
            end
          for (forvar30 = (1'h0); (forvar30 < (1'h1)); forvar30 = (forvar30 + (1'h1)))
            begin
              reg31 = $unsigned(((~((forvar27 <= reg13) - $unsigned(wire0))) ^ (reg25[(3'h4):(2'h3)] ?
                  ((wire4 ? reg17 : reg17) ?
                      $unsigned(wire6) : (reg13 >>> wire2)) : $unsigned(((8'ha5) ?
                      (8'ha1) : forvar27)))));
            end
          for (forvar32 = (1'h0); (forvar32 < (2'h3)); forvar32 = (forvar32 + (1'h1)))
            begin
              reg33 = wire6;
            end
        end
    end
  assign wire34 = wire0;
  assign wire35 = (($unsigned(wire34[(2'h3):(1'h0)]) + ($signed((wire6 && reg15)) ?
                          $signed(((7'h44) ?
                              reg13 : wire4)) : $unsigned((wire6 ?
                              wire5 : reg23)))) ?
                      wire3[(2'h2):(1'h0)] : $unsigned(($unsigned(wire34) ?
                          (&reg24[(3'h4):(1'h1)]) : ((-reg28) && ((8'ha2) ?
                              (8'hb5) : wire3)))));
  always
    @(posedge clk) begin
      for (forvar36 = (1'h0); (forvar36 < (2'h2)); forvar36 = (forvar36 + (1'h1)))
        begin
          reg37 <= {$signed(reg17),
              $signed((^((wire6 || wire5) ?
                  $unsigned(wire34) : $signed(reg13))))};
          for (forvar38 = (1'h0); (forvar38 < (2'h3)); forvar38 = (forvar38 + (1'h1)))
            begin
              reg39 <= reg13[(2'h2):(2'h2)];
            end
        end
      reg40 = wire4[(1'h1):(1'h1)];
    end
endmodule