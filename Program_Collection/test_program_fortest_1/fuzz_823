(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param112 = ((((((8'had) & (8'hb2)) & {(8'hb0)}) > ((7'h41) ? (-(7'h40)) : ((8'ha2) || (8'ha5)))) >>> ((~(8'hbc)) & (((8'hb0) ? (8'hb6) : (8'ha1)) ? (8'hba) : (~&(8'hbd))))) * (~(~&{((8'h9c) << (8'hb8))}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h1e3):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h11):(1'h0)] wire3;
  input wire signed [(2'h3):(1'h0)] wire2;
  input wire [(4'hd):(1'h0)] wire1;
  input wire [(5'h12):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire110;
  wire signed [(4'h8):(1'h0)] wire45;
  wire signed [(4'hc):(1'h0)] wire44;
  wire signed [(5'h11):(1'h0)] wire16;
  wire signed [(4'ha):(1'h0)] wire15;
  wire [(4'hb):(1'h0)] wire14;
  reg signed [(3'h5):(1'h0)] reg4 = (1'h0);
  reg [(4'he):(1'h0)] reg8 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg9 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg11 = (1'h0);
  reg [(4'ha):(1'h0)] reg12 = (1'h0);
  reg [(4'hf):(1'h0)] reg13 = (1'h0);
  reg [(4'hd):(1'h0)] reg19 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg21 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg22 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg26 = (1'h0);
  reg [(2'h3):(1'h0)] reg27 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg31 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg32 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg35 = (1'h0);
  reg [(5'h11):(1'h0)] reg39 = (1'h0);
  reg [(4'hf):(1'h0)] reg40 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg43 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg42 = (1'h0);
  reg [(4'hc):(1'h0)] forvar41 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg38 = (1'h0);
  reg [(3'h5):(1'h0)] reg37 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg36 = (1'h0);
  reg [(4'ha):(1'h0)] forvar34 = (1'h0);
  reg [(5'h13):(1'h0)] reg33 = (1'h0);
  reg [(3'h7):(1'h0)] reg30 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar29 = (1'h0);
  reg [(3'h5):(1'h0)] forvar28 = (1'h0);
  reg [(5'h11):(1'h0)] reg25 = (1'h0);
  reg [(4'hb):(1'h0)] forvar24 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg23 = (1'h0);
  reg [(5'h11):(1'h0)] reg20 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar18 = (1'h0);
  reg [(4'ha):(1'h0)] forvar17 = (1'h0);
  reg [(2'h2):(1'h0)] reg10 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar6 = (1'h0);
  reg [(3'h6):(1'h0)] forvar5 = (1'h0);
  assign y = {wire110,
                 wire45,
                 wire44,
                 wire16,
                 wire15,
                 wire14,
                 reg4,
                 reg8,
                 reg9,
                 reg11,
                 reg12,
                 reg13,
                 reg19,
                 reg21,
                 reg22,
                 reg26,
                 reg27,
                 reg31,
                 reg32,
                 reg35,
                 reg39,
                 reg40,
                 reg43,
                 reg42,
                 forvar41,
                 reg38,
                 reg37,
                 reg36,
                 forvar34,
                 reg33,
                 reg30,
                 forvar29,
                 forvar28,
                 reg25,
                 forvar24,
                 reg23,
                 reg20,
                 forvar18,
                 forvar17,
                 reg10,
                 reg7,
                 forvar6,
                 forvar5,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire3[(3'h4):(1'h0)];
      for (forvar5 = (1'h0); (forvar5 < (2'h2)); forvar5 = (forvar5 + (1'h1)))
        begin
          for (forvar6 = (1'h0); (forvar6 < (3'h4)); forvar6 = (forvar6 + (1'h1)))
            begin
              reg7 = (forvar6 ? forvar5[(2'h3):(2'h2)] : reg4[(1'h0):(1'h0)]);
              reg8 <= $signed(({($unsigned((8'haa)) ? (~^forvar5) : (^wire1)),
                  $signed($unsigned(wire1))} ^ wire1));
              reg9 <= {forvar5[(1'h0):(1'h0)]};
              reg10 = (^($unsigned((~&wire2)) ^ forvar6[(3'h7):(3'h4)]));
              reg11 <= (!$signed(((forvar5[(2'h3):(1'h0)] ?
                      (~&(8'ha2)) : $signed((8'hb9))) ?
                  wire1[(3'h5):(3'h5)] : wire0)));
            end
          reg12 <= forvar6[(3'h7):(3'h5)];
        end
    end
  always
    @(posedge clk) begin
      reg13 <= reg8[(4'h9):(2'h3)];
    end
  assign wire14 = reg12[(4'h8):(2'h2)];
  assign wire15 = (~|{$unsigned((|reg8))});
  assign wire16 = {($unsigned(((!wire15) ^~ reg8[(4'h9):(1'h1)])) & reg9[(3'h5):(3'h4)]),
                      $signed((^~(-(reg12 ? (8'ha6) : wire2))))};
  always
    @(posedge clk) begin
      for (forvar17 = (1'h0); (forvar17 < (2'h3)); forvar17 = (forvar17 + (1'h1)))
        begin
          for (forvar18 = (1'h0); (forvar18 < (3'h4)); forvar18 = (forvar18 + (1'h1)))
            begin
              reg19 <= reg9[(2'h3):(1'h0)];
              reg20 = (-reg4[(3'h4):(1'h1)]);
              reg21 <= $unsigned($unsigned({$unsigned(wire14), (-reg12)}));
              reg22 <= (&($signed({(wire14 ?
                      reg11 : (8'hbe))}) & {(forvar17 <<< reg9[(5'h10):(4'hd)]),
                  wire15[(3'h5):(1'h1)]}));
              reg23 = $unsigned(forvar17[(4'h9):(3'h6)]);
            end
          for (forvar24 = (1'h0); (forvar24 < (2'h2)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 = {forvar24};
              reg26 <= reg4[(2'h2):(1'h0)];
            end
        end
      reg27 <= (&(+wire0));
      for (forvar28 = (1'h0); (forvar28 < (2'h3)); forvar28 = (forvar28 + (1'h1)))
        begin
          for (forvar29 = (1'h0); (forvar29 < (3'h4)); forvar29 = (forvar29 + (1'h1)))
            begin
              reg30 = $unsigned((+{(~$signed(wire14)), (~((8'hb4) ^ reg19))}));
              reg31 <= (~(+forvar28[(2'h2):(1'h1)]));
              reg32 <= ($signed(reg13[(3'h7):(1'h0)]) < (($signed((forvar29 ?
                  wire14 : reg20)) < ((reg21 <<< wire3) ?
                  (8'had) : reg4)) >= ($signed((~^forvar24)) != {(forvar29 >>> reg11),
                  ((8'hb6) == reg31)})));
              reg33 = (~(8'hbd));
            end
          for (forvar34 = (1'h0); (forvar34 < (3'h4)); forvar34 = (forvar34 + (1'h1)))
            begin
              reg35 <= ((+reg21[(4'hb):(3'h7)]) * (($unsigned((wire3 ?
                  reg32 : (7'h43))) << $signed((reg23 ?
                  forvar29 : wire14))) || ((~|reg19) ?
                  ($unsigned(wire1) ?
                      wire3[(3'h6):(3'h6)] : reg32) : $unsigned($unsigned(reg31)))));
              reg36 = $signed($signed((((+forvar18) ~^ $signed(reg35)) ^ $signed({wire16}))));
              reg37 = (!(($signed((8'haa)) ?
                  (~|$unsigned(reg4)) : $signed((forvar18 ^ wire16))) >> $signed(reg9[(1'h0):(1'h0)])));
              reg38 = wire14[(1'h0):(1'h0)];
              reg39 <= ({reg23} ^~ {{forvar29,
                      {(~reg36), ((8'hb7) ? wire14 : reg23)}},
                  ($unsigned($unsigned(reg8)) | ((wire1 ? reg37 : wire15) ?
                      $unsigned(reg31) : wire0[(4'h9):(3'h7)]))});
            end
          reg40 <= (($signed({wire0}) ?
                  (reg27 | ((reg22 ? reg11 : reg23) ?
                      (&forvar34) : (reg13 ?
                          (8'haa) : reg33))) : {($unsigned(wire3) ?
                          wire16 : (reg12 ? reg39 : forvar17)),
                      (~(reg25 | (7'h40)))}) ?
              reg19 : ((forvar28[(1'h1):(1'h1)] * $unsigned(reg13[(3'h6):(1'h0)])) <<< $unsigned($signed((~|reg25)))));
          for (forvar41 = (1'h0); (forvar41 < (3'h4)); forvar41 = (forvar41 + (1'h1)))
            begin
              reg42 = (({(+(8'hab))} ?
                  (!(~&(^reg33))) : reg27) | (forvar28 | {(reg20[(4'ha):(2'h3)] ~^ $signed(reg37)),
                  $signed({(8'hb5), wire0})}));
              reg43 = (((-$signed(reg32[(3'h7):(3'h6)])) <= ($signed($unsigned(forvar29)) <<< (-wire3))) ^~ $unsigned(({{reg4}} ~^ reg30[(3'h4):(1'h1)])));
            end
        end
    end
  assign wire44 = (wire0 ? $signed({(8'hb4), wire3[(3'h6):(3'h6)]}) : reg22);
  assign wire45 = (|reg22[(3'h7):(1'h1)]);
  module46 #() modinst111 (.y(wire110), .wire48(reg26), .clk(clk), .wire51(reg4), .wire49(reg35), .wire47(reg31), .wire50(reg8));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module46
#(parameter param109 = ({((-((8'ha0) <= (8'hb3))) ? ({(8'h9c)} ^ ((8'ha5) <= (8'h9c))) : (&((8'hb6) >>> (8'hbc))))} ~^ ((((~^(8'haf)) & ((7'h40) | (8'hbc))) ? (~((8'haa) >> (7'h40))) : ((+(8'hb3)) ? ((7'h40) <= (8'hb9)) : ((8'ha3) ? (8'ha4) : (7'h41)))) >>> (((!(8'ha0)) ? ((8'hbd) || (7'h44)) : ((8'ha2) ? (7'h44) : (7'h41))) ? (((8'hba) ? (8'hbd) : (8'hae)) ? {(7'h40)} : (|(8'hb8))) : ((8'hba) ? {(8'ha2), (7'h42)} : (~^(8'hab)))))))
(y, clk, wire51, wire50, wire49, wire48, wire47);
  output wire [(32'h2fb):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire51;
  input wire [(4'h9):(1'h0)] wire50;
  input wire [(5'h11):(1'h0)] wire49;
  input wire [(3'h5):(1'h0)] wire48;
  input wire signed [(3'h6):(1'h0)] wire47;
  wire [(4'hb):(1'h0)] wire108;
  wire signed [(3'h7):(1'h0)] wire107;
  wire [(3'h7):(1'h0)] wire106;
  wire signed [(5'h12):(1'h0)] wire100;
  wire signed [(5'h11):(1'h0)] wire70;
  wire signed [(4'ha):(1'h0)] wire69;
  wire [(5'h14):(1'h0)] wire68;
  wire signed [(4'hc):(1'h0)] wire67;
  wire [(5'h14):(1'h0)] wire66;
  wire signed [(4'hc):(1'h0)] wire65;
  wire [(3'h5):(1'h0)] wire56;
  wire [(5'h11):(1'h0)] wire55;
  wire [(5'h12):(1'h0)] wire54;
  wire signed [(4'h8):(1'h0)] wire53;
  wire [(5'h15):(1'h0)] wire52;
  reg [(4'h9):(1'h0)] reg105 = (1'h0);
  reg signed [(4'he):(1'h0)] reg103 = (1'h0);
  reg [(2'h2):(1'h0)] reg101 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg99 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg97 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg93 = (1'h0);
  reg [(2'h2):(1'h0)] reg92 = (1'h0);
  reg [(5'h11):(1'h0)] reg90 = (1'h0);
  reg signed [(4'he):(1'h0)] reg89 = (1'h0);
  reg [(5'h14):(1'h0)] reg87 = (1'h0);
  reg [(5'h13):(1'h0)] reg84 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg83 = (1'h0);
  reg [(5'h10):(1'h0)] reg80 = (1'h0);
  reg [(5'h12):(1'h0)] reg78 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg77 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg76 = (1'h0);
  reg [(4'hb):(1'h0)] reg74 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg64 = (1'h0);
  reg signed [(4'he):(1'h0)] reg63 = (1'h0);
  reg signed [(4'he):(1'h0)] reg62 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg61 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg60 = (1'h0);
  reg [(5'h10):(1'h0)] reg59 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar104 = (1'h0);
  reg [(5'h15):(1'h0)] reg104 = (1'h0);
  reg [(3'h6):(1'h0)] reg102 = (1'h0);
  reg [(3'h7):(1'h0)] reg98 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg96 = (1'h0);
  reg [(5'h15):(1'h0)] forvar95 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg94 = (1'h0);
  reg [(3'h7):(1'h0)] reg91 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar88 = (1'h0);
  reg [(5'h11):(1'h0)] reg86 = (1'h0);
  reg [(3'h7):(1'h0)] reg85 = (1'h0);
  reg [(3'h6):(1'h0)] reg82 = (1'h0);
  reg [(5'h14):(1'h0)] forvar81 = (1'h0);
  reg [(4'hc):(1'h0)] reg79 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg75 = (1'h0);
  reg [(5'h13):(1'h0)] reg73 = (1'h0);
  reg [(5'h15):(1'h0)] forvar72 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar71 = (1'h0);
  reg [(5'h15):(1'h0)] forvar58 = (1'h0);
  reg [(5'h12):(1'h0)] forvar57 = (1'h0);
  assign y = {wire108,
                 wire107,
                 wire106,
                 wire100,
                 wire70,
                 wire69,
                 wire68,
                 wire67,
                 wire66,
                 wire65,
                 wire56,
                 wire55,
                 wire54,
                 wire53,
                 wire52,
                 reg105,
                 reg103,
                 reg101,
                 reg99,
                 reg97,
                 reg93,
                 reg92,
                 reg90,
                 reg89,
                 reg87,
                 reg84,
                 reg83,
                 reg80,
                 reg78,
                 reg77,
                 reg76,
                 reg74,
                 reg64,
                 reg63,
                 reg62,
                 reg61,
                 reg60,
                 reg59,
                 forvar104,
                 reg104,
                 reg102,
                 reg98,
                 reg96,
                 forvar95,
                 reg94,
                 reg91,
                 forvar88,
                 reg86,
                 reg85,
                 reg82,
                 forvar81,
                 reg79,
                 reg75,
                 reg73,
                 forvar72,
                 forvar71,
                 forvar58,
                 forvar57,
                 (1'h0)};
  assign wire52 = (wire47 >> (-{((-wire51) ^~ (wire51 + wire47))}));
  assign wire53 = (((-($signed(wire48) * $signed(wire52))) ?
                      $unsigned((|(!wire49))) : ((!$signed(wire52)) ?
                          ((wire49 ?
                              (8'hb7) : wire47) <<< (wire50 & wire49)) : (~^(wire50 | (8'hbe))))) << $unsigned((((~&wire52) ?
                      (-wire50) : (wire49 & (8'hb1))) >= $unsigned(wire47))));
  assign wire54 = ($signed(wire51[(1'h0):(1'h0)]) - $unsigned((~|wire49)));
  assign wire55 = $unsigned((+wire49[(5'h11):(2'h2)]));
  assign wire56 = wire49;
  always
    @(posedge clk) begin
      for (forvar57 = (1'h0); (forvar57 < (1'h1)); forvar57 = (forvar57 + (1'h1)))
        begin
          for (forvar58 = (1'h0); (forvar58 < (3'h4)); forvar58 = (forvar58 + (1'h1)))
            begin
              reg59 <= ($signed({forvar58}) > wire54[(4'h9):(1'h1)]);
              reg60 <= (-((8'hb5) >>> $unsigned(wire53)));
              reg61 <= $signed(((^~forvar58) ?
                  (-wire56) : $unsigned({wire48, $signed(wire47)})));
              reg62 <= $signed(((((wire52 ? (8'hb9) : reg60) ?
                          (wire56 ~^ (8'ha5)) : (wire48 ? wire56 : wire56)) ?
                      wire56[(3'h5):(1'h1)] : ((wire51 ?
                          wire55 : wire51) >> $unsigned(wire55))) ?
                  forvar57[(4'h8):(3'h5)] : reg60[(3'h5):(3'h5)]));
            end
        end
      reg63 <= (8'h9d);
      reg64 <= $signed($signed(reg62));
    end
  assign wire65 = (|(~^($signed((wire47 + wire49)) ?
                      (wire48 >= $signed(wire51)) : ((reg60 ~^ wire51) ?
                          $signed((8'ha3)) : (-wire53)))));
  assign wire66 = $signed(reg60);
  assign wire67 = (~&(~|(((8'h9c) != wire51) ?
                      ($signed(wire52) ?
                          (-wire65) : (8'h9f)) : $unsigned($unsigned(reg62)))));
  assign wire68 = (^~wire56[(3'h4):(1'h0)]);
  assign wire69 = {wire68, wire67[(3'h7):(2'h2)]};
  assign wire70 = $signed(($unsigned((reg60[(3'h4):(1'h0)] >> $signed(reg61))) != (~|wire51)));
  always
    @(posedge clk) begin
      for (forvar71 = (1'h0); (forvar71 < (1'h1)); forvar71 = (forvar71 + (1'h1)))
        begin
          for (forvar72 = (1'h0); (forvar72 < (2'h2)); forvar72 = (forvar72 + (1'h1)))
            begin
              reg73 = $unsigned((+$signed({wire48[(3'h4):(2'h3)]})));
              reg74 <= $unsigned({wire56, (~|wire68)});
            end
          if (wire47[(3'h5):(3'h5)])
            begin
              reg75 = (|($signed(wire51[(1'h0):(1'h0)]) ?
                  wire68 : (~^$unsigned((8'hbb)))));
              reg76 <= wire53[(3'h6):(1'h0)];
              reg77 <= $signed(wire65[(3'h7):(3'h4)]);
            end
          else
            begin
              reg76 <= $unsigned($unsigned($unsigned($signed($signed(wire69)))));
              reg77 <= wire51[(2'h3):(2'h2)];
              reg78 <= wire47[(2'h3):(1'h1)];
              reg79 = {((+wire53[(1'h1):(1'h1)]) < {($signed(wire49) < (8'ha8))})};
              reg80 <= $signed(($signed(wire65[(4'ha):(1'h0)]) ?
                  ({(wire66 ? reg64 : wire54), (reg63 ? reg76 : wire51)} ?
                      (8'ha9) : {((8'hac) + reg75)}) : $signed((wire54 ?
                      (-wire47) : (reg59 ^ wire50)))));
            end
          for (forvar81 = (1'h0); (forvar81 < (2'h2)); forvar81 = (forvar81 + (1'h1)))
            begin
              reg82 = ((((&wire48[(1'h1):(1'h1)]) ?
                      ((|forvar81) ^ {wire56}) : $signed(((8'hb2) | wire53))) >>> $signed($signed((wire50 ?
                      forvar71 : reg73)))) ?
                  (((~&reg63[(4'h8):(3'h7)]) ?
                          wire67[(3'h5):(2'h2)] : $unsigned($signed(reg79))) ?
                      $signed(reg59[(3'h5):(1'h0)]) : (reg80 && (^forvar71))) : wire70[(1'h1):(1'h0)]);
              reg83 <= $signed($signed((reg62[(2'h3):(2'h2)] ~^ ((reg63 <<< reg80) ?
                  (wire48 | reg73) : $unsigned(wire66)))));
              reg84 <= (wire49[(2'h3):(2'h2)] * wire55);
              reg85 = $signed($unsigned(reg75[(4'h8):(4'h8)]));
            end
          reg86 = reg59;
          reg87 <= wire50[(3'h6):(2'h3)];
        end
      for (forvar88 = (1'h0); (forvar88 < (1'h0)); forvar88 = (forvar88 + (1'h1)))
        begin
          reg89 <= wire66[(3'h5):(2'h3)];
          if ((8'ha8))
            begin
              reg90 <= reg82[(3'h4):(3'h4)];
            end
          else
            begin
              reg90 <= $unsigned($unsigned({({(8'hbe)} ? reg63 : reg80)}));
              reg91 = (^~(^$signed($unsigned(reg84))));
              reg92 <= ((wire52[(4'hf):(3'h6)] ?
                      reg59 : (~&{{wire67, forvar71}})) ?
                  (+{$unsigned((reg77 * reg79))}) : (reg78[(4'he):(2'h3)] ?
                      $unsigned({reg64[(1'h1):(1'h1)],
                          forvar72}) : (wire50[(3'h5):(1'h0)] << $signed((~&wire69)))));
            end
          reg93 <= (~wire69);
          reg94 = reg79;
          for (forvar95 = (1'h0); (forvar95 < (3'h4)); forvar95 = (forvar95 + (1'h1)))
            begin
              reg96 = ({{{wire56[(2'h2):(2'h2)],
                          wire65}}} >>> reg84[(3'h4):(1'h1)]);
              reg97 <= reg80;
              reg98 = (-(7'h43));
              reg99 <= {{{reg78[(5'h11):(3'h6)]}, {(~^$unsigned((7'h42)))}},
                  ($unsigned($unsigned((+wire47))) ~^ wire47[(3'h4):(3'h4)])};
            end
        end
    end
  assign wire100 = $unsigned(reg80);
  always
    @(posedge clk) begin
      reg101 <= $signed((reg59 ?
          $signed(wire47[(3'h5):(3'h4)]) : reg64[(5'h12):(4'h9)]));
      reg102 = wire70[(1'h0):(1'h0)];
      reg103 <= (-($signed($signed((reg97 - wire69))) < $signed($signed($unsigned((7'h40))))));
      if ($signed(reg93))
        begin
          reg104 = $signed({{((8'h9f) != $signed(wire56))},
              $signed(((8'hbb) ~^ (8'hb3)))});
        end
      else
        begin
          for (forvar104 = (1'h0); (forvar104 < (2'h2)); forvar104 = (forvar104 + (1'h1)))
            begin
              reg105 <= $signed(reg102);
            end
        end
    end
  assign wire106 = $unsigned(wire53);
  assign wire107 = {$signed($unsigned(reg64))};
  assign wire108 = ((wire52 << reg76[(4'hd):(3'h4)]) ?
                       ((8'hba) || wire52[(4'hc):(3'h4)]) : (~^{reg77[(3'h6):(1'h0)]}));
endmodule