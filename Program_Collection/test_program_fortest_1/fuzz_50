(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param38 = {(8'ha7)})
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h22):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h6):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire [(3'h7):(1'h0)] wire1;
  input wire signed [(4'ha):(1'h0)] wire0;
  wire signed [(4'hb):(1'h0)] wire37;
  wire signed [(3'h5):(1'h0)] wire35;
  wire [(3'h7):(1'h0)] wire6;
  wire signed [(3'h6):(1'h0)] wire5;
  wire [(3'h4):(1'h0)] wire4;
  assign y = {wire37, wire35, wire6, wire5, wire4, (1'h0)};
  assign wire4 = $unsigned($signed((^~((8'h9d) ? wire1 : wire1))));
  assign wire5 = ($unsigned((^~(wire4 == (8'haa)))) >>> $signed($signed(wire0)));
  assign wire6 = {wire5};
  module7 #() modinst36 (.clk(clk), .wire11(wire6), .wire9(wire5), .wire10(wire3), .y(wire35), .wire8(wire1));
  assign wire37 = $signed(wire6[(2'h2):(2'h2)]);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module7  (y, clk, wire11, wire10, wire9, wire8);
  output wire [(32'h27):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire11;
  input wire signed [(3'h6):(1'h0)] wire10;
  input wire [(3'h6):(1'h0)] wire9;
  input wire [(3'h6):(1'h0)] wire8;
  wire signed [(4'h9):(1'h0)] wire34;
  wire [(3'h7):(1'h0)] wire32;
  wire signed [(4'h8):(1'h0)] wire14;
  wire [(4'h9):(1'h0)] wire13;
  wire [(3'h5):(1'h0)] wire12;
  assign y = {wire34, wire32, wire14, wire13, wire12, (1'h0)};
  assign wire12 = $signed({{(wire10 || wire10)}});
  assign wire13 = (((&(+(8'ha2))) && wire10[(3'h6):(2'h2)]) < (wire12 ?
                      {(8'hb0)} : (8'had)));
  assign wire14 = $unsigned({wire12});
  module15 #() modinst33 (wire32, clk, wire8, wire13, wire12, wire14);
  assign wire34 = wire8;
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15  (y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h4e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire19;
  input wire [(4'h9):(1'h0)] wire18;
  input wire signed [(3'h4):(1'h0)] wire17;
  input wire signed [(4'h8):(1'h0)] wire16;
  wire signed [(2'h3):(1'h0)] wire30;
  wire [(4'ha):(1'h0)] wire29;
  wire signed [(4'hb):(1'h0)] wire26;
  wire signed [(3'h4):(1'h0)] wire20;
  reg [(3'h5):(1'h0)] reg31 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg28 = (1'h0);
  reg [(3'h7):(1'h0)] reg27 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg25 = (1'h0);
  reg [(4'h9):(1'h0)] reg24 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg23 = (1'h0);
  reg [(2'h2):(1'h0)] reg22 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg21 = (1'h0);
  assign y = {wire30,
                 wire29,
                 wire26,
                 wire20,
                 reg31,
                 reg28,
                 reg27,
                 reg25,
                 reg24,
                 reg23,
                 reg22,
                 reg21,
                 (1'h0)};
  assign wire20 = wire19;
  always
    @(posedge clk) begin
      if ((wire16 ?
          $signed(((wire19 && wire20) & {wire18})) : {$signed((wire17 < (8'haa)))}))
        begin
          reg21 <= (8'ha1);
          reg22 <= wire17;
          reg23 <= $unsigned(reg22);
        end
      else
        begin
          reg21 <= reg23[(3'h7):(3'h5)];
          reg22 <= $signed(reg23[(1'h0):(1'h0)]);
          reg23 <= ((~|(~(wire18 + wire17))) >= $signed(((wire17 ?
                  wire17 : wire20) ?
              wire16[(4'h8):(3'h5)] : {wire19})));
        end
      reg24 <= ({({wire19} ?
              ((8'ha4) ~^ wire16) : wire16[(3'h4):(3'h4)])} && (wire20[(1'h1):(1'h0)] <<< (!(wire17 ?
          wire19 : (8'hac)))));
    end
  always
    @(posedge clk) begin
      reg25 <= (8'ha0);
    end
  assign wire26 = {((-(~wire16)) > ((~wire17) != (wire17 ? reg25 : reg25)))};
  always
    @(posedge clk) begin
      reg27 <= ((((wire18 * reg25) >= (~(8'ha6))) ?
          $signed((reg22 * (8'haf))) : (8'ha6)) && (((wire16 ?
              reg21 : reg23) && reg22[(1'h0):(1'h0)]) ?
          $signed($unsigned(wire19)) : reg25));
      reg28 <= $unsigned((~(reg25 <<< {wire19})));
    end
  assign wire29 = $signed($signed({$signed(reg21)}));
  assign wire30 = (~|$signed($unsigned((wire18 ? reg27 : wire26))));
  always
    @(posedge clk) begin
      reg31 <= ({((-wire18) ?
                  (reg24 ? wire17 : reg24) : reg21[(3'h5):(1'h0)])} ?
          $unsigned($signed((&reg27))) : reg21);
    end
endmodule