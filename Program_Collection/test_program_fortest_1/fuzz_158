(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param48 = ((((~(8'ha0)) ? (~^(8'h9f)) : ((8'haf) - (8'hac))) ? ((8'h9d) ? ((8'h9e) ? (8'ha7) : (8'haa)) : ((8'ha4) * (8'h9f))) : {((8'haf) ? (8'ha2) : (8'haf))}) >>> (~^{((8'ha6) ? (8'ha7) : (8'ha5))})))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h25):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire3;
  input wire [(4'hb):(1'h0)] wire2;
  input wire [(4'hb):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire46;
  wire [(4'ha):(1'h0)] wire44;
  wire signed [(3'h6):(1'h0)] wire42;
  wire signed [(4'hb):(1'h0)] wire40;
  reg [(3'h4):(1'h0)] reg45 = (1'h0);
  assign y = {wire46, wire44, wire42, wire40, reg45, (1'h0)};
  module4 #() modinst41 (.wire8(wire2), .wire6(wire0), .wire5(wire3), .wire7(wire1), .y(wire40), .clk(clk));
  module9 #() modinst43 (wire42, clk, wire40, wire3, wire0, wire2);
  assign wire44 = ((($signed(wire40) & wire0) && ($signed(wire1) ~^ (^~wire40))) <<< wire40[(1'h0):(1'h0)]);
  always
    @(posedge clk) begin
      reg45 <= wire1;
    end
  module4 #() modinst47 (wire46, clk, wire0, wire44, wire42, wire1);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module4  (y, clk, wire8, wire7, wire6, wire5);
  output wire [(32'h44):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire8;
  input wire signed [(4'ha):(1'h0)] wire7;
  input wire signed [(3'h5):(1'h0)] wire6;
  input wire signed [(4'hb):(1'h0)] wire5;
  wire signed [(3'h4):(1'h0)] wire36;
  wire signed [(2'h2):(1'h0)] wire35;
  wire [(4'h9):(1'h0)] wire34;
  wire signed [(4'h8):(1'h0)] wire33;
  wire signed [(3'h6):(1'h0)] wire32;
  wire signed [(3'h6):(1'h0)] wire31;
  wire signed [(2'h3):(1'h0)] wire30;
  wire signed [(3'h5):(1'h0)] wire29;
  wire [(4'h9):(1'h0)] wire28;
  wire signed [(2'h3):(1'h0)] wire26;
  reg [(4'h8):(1'h0)] reg39 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg38 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg37 = (1'h0);
  assign y = {wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire32,
                 wire31,
                 wire30,
                 wire29,
                 wire28,
                 wire26,
                 reg39,
                 reg38,
                 reg37,
                 (1'h0)};
  module9 #() modinst27 (.wire13(wire7), .wire10(wire6), .wire11(wire8), .wire12(wire5), .clk(clk), .y(wire26));
  assign wire28 = (~((wire7 != $signed((8'h9e))) ? {(wire7 ^~ wire6)} : wire5));
  assign wire29 = $signed($signed((!wire6)));
  assign wire30 = wire8;
  assign wire31 = ($signed((!(wire30 ? wire8 : wire8))) ? wire26 : wire6);
  assign wire32 = $signed($unsigned((~(^wire28))));
  assign wire33 = $unsigned($signed($signed((wire26 ? wire30 : wire6))));
  assign wire34 = ($unsigned(($unsigned(wire26) | $unsigned(wire33))) ?
                      ($unsigned((wire26 >= wire5)) ?
                          wire30[(1'h1):(1'h0)] : wire7) : {(wire32 | wire8)});
  assign wire35 = ($signed((((8'ha6) ? (8'ha1) : (8'h9e)) ?
                          (wire32 && wire26) : $unsigned(wire7))) ?
                      $unsigned((wire31[(3'h5):(1'h1)] ?
                          {wire34} : wire33)) : $signed((|$unsigned(wire29))));
  assign wire36 = wire32[(2'h3):(2'h2)];
  always
    @(posedge clk) begin
      reg37 <= $unsigned((wire34[(3'h4):(1'h0)] ? (~|wire36) : (8'h9c)));
      reg38 <= $signed((~&wire6));
      reg39 <= {$signed(((|(8'hac)) >> wire30[(1'h0):(1'h0)]))};
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module9
#(parameter param25 = ((&(((8'ha4) <<< (8'ha2)) | ((8'hac) < (8'haf)))) ? ((((8'haa) ? (8'ha8) : (8'hac)) ? (+(8'hac)) : ((8'ha3) >> (8'hac))) ? {{(8'hae)}} : (~^(~&(8'h9c)))) : (~|(~|((8'ha6) ? (8'h9d) : (8'had))))))
(y, clk, wire13, wire12, wire11, wire10);
  output wire [(32'h2f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire13;
  input wire [(3'h7):(1'h0)] wire12;
  input wire signed [(4'hb):(1'h0)] wire11;
  input wire signed [(2'h3):(1'h0)] wire10;
  wire signed [(2'h3):(1'h0)] wire24;
  wire signed [(2'h3):(1'h0)] wire23;
  wire [(2'h2):(1'h0)] wire22;
  wire signed [(4'h9):(1'h0)] wire19;
  wire signed [(3'h5):(1'h0)] wire18;
  wire [(3'h5):(1'h0)] wire17;
  wire [(3'h4):(1'h0)] wire16;
  wire signed [(2'h3):(1'h0)] wire15;
  wire [(3'h4):(1'h0)] wire14;
  reg [(3'h4):(1'h0)] reg21 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg20 = (1'h0);
  assign y = {wire24,
                 wire23,
                 wire22,
                 wire19,
                 wire18,
                 wire17,
                 wire16,
                 wire15,
                 wire14,
                 reg21,
                 reg20,
                 (1'h0)};
  assign wire14 = (~|{wire12[(1'h0):(1'h0)]});
  assign wire15 = wire11[(4'h8):(2'h3)];
  assign wire16 = wire14[(3'h4):(3'h4)];
  assign wire17 = wire15;
  assign wire18 = (wire14 ?
                      $unsigned(((wire13 ? wire14 : wire12) ?
                          wire15 : wire15)) : $signed(wire10[(2'h2):(1'h0)]));
  assign wire19 = $signed({$signed(wire13[(2'h2):(1'h1)])});
  always
    @(posedge clk) begin
      reg20 <= $signed(($signed($unsigned(wire18)) ?
          (~|$signed(wire15)) : ((~&wire11) ?
              $unsigned((8'ha4)) : $signed((8'ha9)))));
      reg21 <= ((~((wire16 ? reg20 : (8'ha1)) >> {wire14})) ?
          ($unsigned((wire11 ? reg20 : wire12)) ?
              $unsigned($signed((8'ha3))) : {(wire14 >= wire13)}) : {wire16});
    end
  assign wire22 = {(|((&reg20) ^ (reg20 < wire13)))};
  assign wire23 = $signed((wire16 ? {(wire17 && wire13)} : (~&wire19)));
  assign wire24 = wire14[(1'h1):(1'h1)];
endmodule