(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h72):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire0;
  input wire [(4'h8):(1'h0)] wire1;
  input wire [(4'hb):(1'h0)] wire2;
  input wire signed [(3'h7):(1'h0)] wire3;
  wire signed [(3'h5):(1'h0)] wire45;
  wire signed [(3'h5):(1'h0)] wire4;
  wire [(3'h7):(1'h0)] wire5;
  wire [(2'h3):(1'h0)] wire38;
  wire signed [(2'h3):(1'h0)] wire43;
  reg [(2'h2):(1'h0)] reg47 = (1'h0);
  reg [(4'h9):(1'h0)] reg46 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg6 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg7 = (1'h0);
  reg [(4'ha):(1'h0)] reg8 = (1'h0);
  reg [(4'h8):(1'h0)] reg9 = (1'h0);
  reg [(4'hb):(1'h0)] reg10 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg11 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg40 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg41 = (1'h0);
  reg [(4'ha):(1'h0)] reg42 = (1'h0);
  assign y = {wire45,
                 wire4,
                 wire5,
                 wire38,
                 wire43,
                 reg47,
                 reg46,
                 reg6,
                 reg7,
                 reg8,
                 reg9,
                 reg10,
                 reg11,
                 reg40,
                 reg41,
                 reg42,
                 (1'h0)};
  assign wire4 = {$unsigned(wire2)};
  assign wire5 = $unsigned({(wire4 != (wire4 ? wire0 : wire3))});
  always
    @(posedge clk) begin
      reg6 <= ($unsigned(wire0[(4'h9):(3'h7)]) ?
          $unsigned(wire2) : wire4[(1'h1):(1'h1)]);
      if ((~&(wire1 >= ($signed((8'ha9)) != $unsigned(wire3)))))
        begin
          if ($unsigned((~^($signed(wire3) >>> wire3))))
            begin
              reg7 <= (~^reg6[(1'h0):(1'h0)]);
              reg8 <= wire1;
            end
          else
            begin
              reg7 <= (wire5[(2'h2):(2'h2)] + $unsigned((-(reg7 ?
                  reg7 : (8'hb0)))));
            end
          reg9 <= ($signed($unsigned(wire5[(1'h0):(1'h0)])) > wire5);
          reg10 <= (^(wire1[(3'h5):(3'h4)] ~^ wire4[(2'h3):(1'h1)]));
        end
      else
        begin
          reg7 <= wire4;
          if (wire2[(2'h3):(1'h0)])
            begin
              reg8 <= wire3;
            end
          else
            begin
              reg8 <= {($signed((reg9 ? wire2 : wire2)) ?
                      wire0 : $signed((wire3 == (8'ha2))))};
              reg9 <= (|$unsigned((wire5 ~^ wire2[(2'h2):(1'h0)])));
            end
          reg10 <= wire2;
        end
      reg11 <= $signed((|(-{wire0})));
    end
  module12 #() modinst39 (.y(wire38), .wire16(wire2), .wire14(reg11), .wire13(wire3), .clk(clk), .wire15(reg8));
  always
    @(posedge clk) begin
      reg40 <= (~|{$unsigned($unsigned(wire4))});
      reg41 <= (|reg11[(2'h3):(2'h3)]);
      reg42 <= $signed(reg40[(1'h1):(1'h0)]);
    end
  module12 #() modinst44 (.clk(clk), .wire13(wire5), .wire16(reg6), .y(wire43), .wire15(reg42), .wire14(reg40));
  assign wire45 = ({(wire43 ? wire43 : ((8'had) && reg42))} ?
                      reg9 : $unsigned((&wire5[(3'h7):(1'h1)])));
  always
    @(posedge clk) begin
      if ($signed($signed($unsigned((reg11 ? wire3 : wire0)))))
        begin
          if ($unsigned($unsigned($signed((~^wire45)))))
            begin
              reg46 <= (8'ha9);
              reg47 <= (~^(~|(|$signed((8'h9d)))));
            end
          else
            begin
              reg46 <= (|(^~{$unsigned(wire5)}));
            end
        end
      else
        begin
          reg46 <= wire2[(4'h8):(3'h6)];
          reg47 <= (!$unsigned({$unsigned(wire0)}));
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module12  (y, clk, wire13, wire14, wire15, wire16);
  output wire [(32'h41):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h7):(1'h0)] wire13;
  input wire signed [(4'ha):(1'h0)] wire14;
  input wire signed [(4'ha):(1'h0)] wire15;
  input wire [(4'hb):(1'h0)] wire16;
  wire [(2'h3):(1'h0)] wire37;
  wire [(3'h7):(1'h0)] wire36;
  wire [(3'h5):(1'h0)] wire35;
  wire [(3'h4):(1'h0)] wire34;
  wire signed [(2'h2):(1'h0)] wire33;
  wire [(4'ha):(1'h0)] wire17;
  wire [(4'h9):(1'h0)] wire31;
  reg signed [(4'h8):(1'h0)] reg18 = (1'h0);
  reg [(4'h8):(1'h0)] reg19 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg20 = (1'h0);
  assign y = {wire37,
                 wire36,
                 wire35,
                 wire34,
                 wire33,
                 wire17,
                 wire31,
                 reg18,
                 reg19,
                 reg20,
                 (1'h0)};
  assign wire17 = $unsigned((wire13[(2'h3):(1'h0)] >= wire15[(1'h1):(1'h0)]));
  always
    @(posedge clk) begin
      reg18 <= ((8'h9f) * wire16[(4'h9):(1'h1)]);
      reg19 <= wire15;
      reg20 <= {$unsigned((wire15 ?
              reg18[(1'h1):(1'h1)] : (wire13 ~^ wire13)))};
    end
  module21 #() modinst32 (.wire23(reg20), .wire24(wire16), .y(wire31), .clk(clk), .wire22(wire14), .wire25(wire15));
  assign wire33 = $signed(($unsigned((wire15 ~^ wire16)) || wire13));
  assign wire34 = wire13[(1'h1):(1'h1)];
  assign wire35 = wire16[(3'h7):(3'h5)];
  assign wire36 = $unsigned((~|reg18));
  assign wire37 = (^{{wire16}});
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module21  (y, clk, wire25, wire24, wire23, wire22);
  output wire [(32'h1e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire25;
  input wire signed [(2'h2):(1'h0)] wire24;
  input wire signed [(4'h8):(1'h0)] wire23;
  input wire signed [(4'ha):(1'h0)] wire22;
  wire [(2'h2):(1'h0)] wire30;
  wire signed [(2'h3):(1'h0)] wire29;
  wire [(4'ha):(1'h0)] wire28;
  wire [(4'ha):(1'h0)] wire27;
  wire [(3'h4):(1'h0)] wire26;
  assign y = {wire30, wire29, wire28, wire27, wire26, (1'h0)};
  assign wire26 = (~&{wire23});
  assign wire27 = wire26;
  assign wire28 = {wire24};
  assign wire29 = wire24;
  assign wire30 = ($unsigned(wire22[(2'h3):(2'h3)]) ?
                      wire26 : (!((wire22 > wire25) ^ $signed((8'ha4)))));
endmodule