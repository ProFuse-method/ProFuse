(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param40 = (^~{((^(8'hae)) * (~^(8'h9f)))}))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h66):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire3;
  input wire [(2'h3):(1'h0)] wire2;
  input wire signed [(4'h9):(1'h0)] wire1;
  input wire [(3'h7):(1'h0)] wire0;
  wire [(3'h7):(1'h0)] wire39;
  wire signed [(2'h2):(1'h0)] wire25;
  wire [(3'h5):(1'h0)] wire14;
  wire signed [(3'h5):(1'h0)] wire9;
  wire [(4'h8):(1'h0)] wire8;
  wire [(4'hb):(1'h0)] wire7;
  wire signed [(4'ha):(1'h0)] wire6;
  wire [(3'h4):(1'h0)] wire5;
  wire [(3'h5):(1'h0)] wire4;
  wire signed [(4'h8):(1'h0)] wire37;
  reg [(4'ha):(1'h0)] reg13 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg12 = (1'h0);
  reg [(4'ha):(1'h0)] reg11 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg10 = (1'h0);
  assign y = {wire39,
                 wire25,
                 wire14,
                 wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 wire37,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 (1'h0)};
  assign wire4 = ((8'ha4) ? wire0[(3'h6):(1'h0)] : {$signed(wire3)});
  assign wire5 = (~^(wire0 ^ wire0[(3'h5):(1'h0)]));
  assign wire6 = wire0;
  assign wire7 = (^(&$signed((wire1 ? wire6 : wire0))));
  assign wire8 = $signed((8'hab));
  assign wire9 = $unsigned(((wire3 >> (wire7 ?
                     wire2 : wire0)) | $signed((^~wire6))));
  always
    @(posedge clk) begin
      if ({(8'hac)})
        begin
          reg10 <= (($unsigned(((8'ha2) ? wire7 : wire0)) ?
              ((8'haa) ?
                  $unsigned(wire3) : (wire3 ?
                      wire6 : wire4)) : (8'hab)) <= $signed($signed(wire2[(2'h3):(1'h1)])));
        end
      else
        begin
          reg10 <= ({wire8} ?
              (({wire7} ? (-(8'hac)) : $unsigned(wire4)) ?
                  $signed((~&wire5)) : wire1[(3'h7):(2'h2)]) : (($signed((8'ha9)) ?
                      (wire3 > wire2) : wire5) ?
                  $unsigned($signed(wire0)) : wire0[(3'h5):(2'h2)]));
          reg11 <= wire7;
          reg12 <= (~&$unsigned((wire5[(3'h4):(3'h4)] >>> $signed((8'haf)))));
        end
      reg13 <= $unsigned(wire7[(4'h9):(3'h4)]);
    end
  assign wire14 = $unsigned((!(~(~&wire3))));
  module15 #() modinst26 (.wire17(wire0), .wire16(wire5), .clk(clk), .wire18(reg10), .wire19(wire1), .y(wire25));
  module27 #() modinst38 (wire37, clk, wire7, reg13, wire6, wire1);
  assign wire39 = ((wire3[(3'h4):(1'h0)] ?
                          $signed(wire6[(4'ha):(4'h8)]) : $unsigned(wire8[(3'h6):(1'h0)])) ?
                      $signed($signed(wire4)) : ((~|$unsigned(wire37)) ?
                          (~&((8'hb0) ?
                              reg12 : wire9)) : wire4[(1'h0):(1'h0)]));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module27
#(parameter param36 = ((~|(((8'hae) || (8'hb0)) ? ((8'hab) ? (8'hae) : (8'h9e)) : (&(8'ha2)))) >> ((((8'ha2) ? (8'ha7) : (8'haa)) - ((8'hae) ? (8'ha8) : (8'haa))) ? (^((8'ha1) >> (8'haa))) : (~{(8'ha7)}))))
(y, clk, wire31, wire30, wire29, wire28);
  output wire [(32'h1a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire31;
  input wire [(3'h6):(1'h0)] wire30;
  input wire [(4'ha):(1'h0)] wire29;
  input wire signed [(3'h4):(1'h0)] wire28;
  wire [(4'hb):(1'h0)] wire35;
  wire [(2'h3):(1'h0)] wire34;
  wire [(3'h7):(1'h0)] wire33;
  wire [(3'h4):(1'h0)] wire32;
  assign y = {wire35, wire34, wire33, wire32, (1'h0)};
  assign wire32 = ($unsigned($signed((wire31 <= (8'hac)))) < (^~wire30[(2'h3):(1'h0)]));
  assign wire33 = $unsigned({(wire29[(1'h1):(1'h1)] | (|wire30))});
  assign wire34 = wire31[(1'h1):(1'h1)];
  assign wire35 = ((-((wire29 ?
                      wire34 : wire32) << (wire32 || wire34))) * $unsigned($unsigned((wire34 ?
                      wire28 : (8'ha5)))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module15
#(parameter param24 = ((((&(8'hab)) ? (~&(8'haf)) : (8'haf)) < ((+(8'ha0)) ? ((8'haa) >> (8'haf)) : (~|(8'h9f)))) + {((-(8'hac)) ? ((8'ha2) ? (8'hae) : (8'ha2)) : ((8'had) - (8'ha5)))}))
(y, clk, wire19, wire18, wire17, wire16);
  output wire [(32'h17):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire19;
  input wire [(2'h2):(1'h0)] wire18;
  input wire signed [(3'h5):(1'h0)] wire17;
  input wire [(2'h3):(1'h0)] wire16;
  wire signed [(4'h8):(1'h0)] wire23;
  wire signed [(2'h2):(1'h0)] wire21;
  wire signed [(3'h7):(1'h0)] wire20;
  reg [(3'h5):(1'h0)] reg22 = (1'h0);
  assign y = {wire23, wire21, wire20, reg22, (1'h0)};
  assign wire20 = $signed($unsigned(((wire17 <<< wire17) <<< (~wire17))));
  assign wire21 = $unsigned((((!wire19) ?
                      wire20 : $unsigned(wire18)) >>> (wire18 << (|wire20))));
  always
    @(posedge clk) begin
      reg22 <= (^~wire19);
    end
  assign wire23 = {(((!reg22) ? $signed((8'ha1)) : (&wire17)) ?
                          $unsigned($unsigned(wire20)) : $signed(reg22[(1'h0):(1'h0)]))};
endmodule