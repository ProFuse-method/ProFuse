(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param71 = ((((+((8'hb1) ? (8'had) : (8'hbf))) && (|((8'hb8) == (8'hba)))) ? {({(8'hbb)} & ((8'hb4) == (8'ha1))), (~((8'hba) > (8'hab)))} : {((~(8'hbf)) && ((8'hbb) ? (8'hbb) : (8'h9e)))}) ? ((({(8'hbb)} ? ((7'h44) ? (7'h40) : (8'haa)) : {(7'h40), (8'hbc)}) ? (~|(~(8'hae))) : {(+(7'h43)), ((8'hac) * (8'hb4))}) ? (8'hbd) : ((((8'hb2) - (8'h9e)) ? ((8'ha6) ~^ (8'h9f)) : {(8'ha2), (8'hb3)}) ? ((^~(8'hae)) <<< ((7'h41) ? (8'hbe) : (8'hb1))) : (^~(~(7'h41))))) : (^((((8'ha3) != (8'hbc)) | (&(8'h9d))) ? (((8'ha8) ~^ (8'hb8)) > (|(8'hbb))) : ((~^(8'h9f)) * ((8'ha3) ? (8'ha1) : (8'ha7)))))))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h2e3):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire4;
  input wire [(5'h11):(1'h0)] wire3;
  input wire signed [(4'h9):(1'h0)] wire2;
  input wire [(5'h15):(1'h0)] wire1;
  input wire signed [(4'hf):(1'h0)] wire0;
  wire signed [(5'h11):(1'h0)] wire70;
  wire [(4'h8):(1'h0)] wire69;
  wire [(4'hb):(1'h0)] wire68;
  wire [(4'hc):(1'h0)] wire36;
  wire signed [(3'h5):(1'h0)] wire35;
  wire signed [(2'h2):(1'h0)] wire34;
  wire signed [(5'h13):(1'h0)] wire5;
  reg signed [(4'hb):(1'h0)] reg67 = (1'h0);
  reg [(4'hc):(1'h0)] reg66 = (1'h0);
  reg [(5'h14):(1'h0)] reg65 = (1'h0);
  reg signed [(4'he):(1'h0)] reg59 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg55 = (1'h0);
  reg [(5'h11):(1'h0)] reg54 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg53 = (1'h0);
  reg [(3'h6):(1'h0)] reg52 = (1'h0);
  reg signed [(4'he):(1'h0)] reg49 = (1'h0);
  reg [(4'hf):(1'h0)] reg47 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg46 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg44 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg43 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg41 = (1'h0);
  reg [(4'hb):(1'h0)] reg40 = (1'h0);
  reg [(2'h3):(1'h0)] reg29 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg27 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg25 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg20 = (1'h0);
  reg [(2'h3):(1'h0)] reg18 = (1'h0);
  reg [(4'hc):(1'h0)] reg17 = (1'h0);
  reg signed [(4'he):(1'h0)] reg16 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg15 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg13 = (1'h0);
  reg [(3'h6):(1'h0)] reg12 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg11 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg8 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg64 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar63 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg62 = (1'h0);
  reg signed [(4'he):(1'h0)] reg61 = (1'h0);
  reg [(4'he):(1'h0)] reg60 = (1'h0);
  reg [(4'ha):(1'h0)] forvar58 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar57 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg56 = (1'h0);
  reg [(2'h2):(1'h0)] forvar51 = (1'h0);
  reg [(3'h5):(1'h0)] reg50 = (1'h0);
  reg [(4'hc):(1'h0)] forvar48 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg45 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar42 = (1'h0);
  reg [(5'h10):(1'h0)] reg39 = (1'h0);
  reg [(5'h10):(1'h0)] forvar38 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar37 = (1'h0);
  reg [(4'h8):(1'h0)] reg33 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar32 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg31 = (1'h0);
  reg [(5'h11):(1'h0)] reg30 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar28 = (1'h0);
  reg [(4'h8):(1'h0)] forvar26 = (1'h0);
  reg [(4'hd):(1'h0)] reg24 = (1'h0);
  reg [(4'hb):(1'h0)] reg23 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar22 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar21 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar19 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar14 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg10 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg9 = (1'h0);
  reg [(4'hb):(1'h0)] forvar7 = (1'h0);
  reg [(4'hb):(1'h0)] forvar6 = (1'h0);
  assign y = {wire70,
                 wire69,
                 wire68,
                 wire36,
                 wire35,
                 wire34,
                 wire5,
                 reg67,
                 reg66,
                 reg65,
                 reg59,
                 reg55,
                 reg54,
                 reg53,
                 reg52,
                 reg49,
                 reg47,
                 reg46,
                 reg44,
                 reg43,
                 reg41,
                 reg40,
                 reg29,
                 reg27,
                 reg25,
                 reg20,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg13,
                 reg12,
                 reg11,
                 reg8,
                 reg64,
                 forvar63,
                 reg62,
                 reg61,
                 reg60,
                 forvar58,
                 forvar57,
                 reg56,
                 forvar51,
                 reg50,
                 forvar48,
                 reg45,
                 forvar42,
                 reg39,
                 forvar38,
                 forvar37,
                 reg33,
                 forvar32,
                 reg31,
                 reg30,
                 forvar28,
                 forvar26,
                 reg24,
                 reg23,
                 forvar22,
                 forvar21,
                 forvar19,
                 forvar14,
                 reg10,
                 reg9,
                 forvar7,
                 forvar6,
                 (1'h0)};
  assign wire5 = (!(wire3[(3'h6):(2'h2)] > (-$unsigned((~^wire2)))));
  always
    @(posedge clk) begin
      for (forvar6 = (1'h0); (forvar6 < (1'h0)); forvar6 = (forvar6 + (1'h1)))
        begin
          for (forvar7 = (1'h0); (forvar7 < (2'h2)); forvar7 = (forvar7 + (1'h1)))
            begin
              reg8 <= $unsigned(((wire4[(1'h1):(1'h1)] >= (wire0 ?
                  forvar6[(3'h4):(2'h3)] : $unsigned(wire3))) >>> $signed(wire3)));
              reg9 = (~$signed((({wire1} ?
                  (wire3 ?
                      wire5 : reg8) : (8'had)) ~^ $unsigned($unsigned(wire5)))));
            end
          if ($unsigned(reg9[(4'h9):(2'h2)]))
            begin
              reg10 = wire3;
            end
          else
            begin
              reg11 <= $signed(($unsigned({wire3, $unsigned(wire2)}) ?
                  (forvar6[(4'ha):(3'h5)] ^~ forvar7[(4'h9):(1'h0)]) : wire1[(4'h9):(3'h5)]));
              reg12 <= (~|(&$unsigned({$unsigned(reg8)})));
              reg13 <= $signed(($signed($unsigned({wire1, wire2})) ?
                  forvar6 : forvar7[(4'h9):(3'h5)]));
            end
          for (forvar14 = (1'h0); (forvar14 < (2'h2)); forvar14 = (forvar14 + (1'h1)))
            begin
              reg15 <= $signed((8'h9c));
              reg16 <= reg8;
              reg17 <= (-$signed((wire1[(5'h10):(1'h1)] ?
                  (^~{forvar7}) : (!wire5[(3'h6):(1'h0)]))));
            end
          reg18 <= reg13[(2'h2):(1'h0)];
          for (forvar19 = (1'h0); (forvar19 < (2'h2)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 <= ((wire2[(3'h4):(1'h1)] > forvar6[(3'h7):(1'h0)]) ?
                  $unsigned($unsigned(((8'haf) ?
                      wire0[(4'hf):(4'he)] : (reg18 < wire0)))) : (!reg9));
            end
        end
      for (forvar21 = (1'h0); (forvar21 < (1'h1)); forvar21 = (forvar21 + (1'h1)))
        begin
          for (forvar22 = (1'h0); (forvar22 < (1'h1)); forvar22 = (forvar22 + (1'h1)))
            begin
              reg23 = ((^$signed($unsigned($unsigned(reg11)))) != forvar6[(4'hb):(3'h6)]);
              reg24 = $unsigned((-($unsigned((reg10 ?
                  forvar14 : reg16)) < reg12)));
              reg25 <= (+$signed(wire1));
            end
          for (forvar26 = (1'h0); (forvar26 < (2'h2)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 <= ((wire5[(4'he):(1'h0)] ?
                      $unsigned((-(reg24 ?
                          reg18 : forvar21))) : reg9[(2'h3):(2'h2)]) ?
                  $unsigned((&$unsigned((-wire1)))) : $signed({$signed((&reg18)),
                      (~{wire4})}));
            end
          for (forvar28 = (1'h0); (forvar28 < (2'h3)); forvar28 = (forvar28 + (1'h1)))
            begin
              reg29 <= wire5;
              reg30 = (reg13 != reg16);
              reg31 = (^~reg25);
            end
          for (forvar32 = (1'h0); (forvar32 < (1'h0)); forvar32 = (forvar32 + (1'h1)))
            begin
              reg33 = reg18;
            end
        end
    end
  assign wire34 = (wire2 ?
                      wire4 : ($unsigned($unsigned(reg12)) >> ((reg29 - reg12) ?
                          (-(reg16 ? reg20 : (7'h42))) : reg27)));
  assign wire35 = $unsigned($unsigned(reg13[(1'h0):(1'h0)]));
  assign wire36 = $unsigned($signed($unsigned(((&reg25) ?
                      (wire5 ^ reg18) : reg18[(1'h0):(1'h0)]))));
  always
    @(posedge clk) begin
      for (forvar37 = (1'h0); (forvar37 < (2'h3)); forvar37 = (forvar37 + (1'h1)))
        begin
          for (forvar38 = (1'h0); (forvar38 < (3'h4)); forvar38 = (forvar38 + (1'h1)))
            begin
              reg39 = (wire36 ?
                  (|reg13) : $signed(((&wire3) ?
                      {(-reg16), $unsigned((8'h9f))} : wire4)));
              reg40 <= (+$unsigned($signed((~&{reg13}))));
              reg41 <= $signed($unsigned({reg40}));
            end
          for (forvar42 = (1'h0); (forvar42 < (2'h2)); forvar42 = (forvar42 + (1'h1)))
            begin
              reg43 <= $unsigned((8'hbc));
              reg44 <= (({({wire3} ? (8'hb3) : ((8'ha1) ? wire4 : (8'hbc))),
                  $unsigned({wire36,
                      (8'hbb)})} ~^ reg12[(2'h3):(2'h3)]) ~^ wire1[(2'h2):(2'h2)]);
              reg45 = forvar42[(3'h4):(2'h3)];
              reg46 <= $signed($signed(($unsigned($signed(wire3)) ?
                  ($unsigned(wire36) ?
                      reg39[(3'h5):(2'h2)] : {reg44}) : $unsigned(reg11))));
              reg47 <= (^~reg16);
            end
        end
      for (forvar48 = (1'h0); (forvar48 < (3'h4)); forvar48 = (forvar48 + (1'h1)))
        begin
          reg49 <= (^$signed((wire35[(2'h3):(1'h0)] || wire1)));
          reg50 = ((wire3[(5'h11):(1'h1)] ?
              ((~^(wire3 ~^ wire4)) ?
                  (8'ha7) : $signed((^~reg13))) : forvar42[(3'h7):(1'h1)]) ^ reg16[(4'ha):(3'h6)]);
          for (forvar51 = (1'h0); (forvar51 < (2'h2)); forvar51 = (forvar51 + (1'h1)))
            begin
              reg52 <= (&(!(^~((~wire4) ?
                  (reg40 - reg50) : reg27[(4'hc):(1'h0)]))));
              reg53 <= {$signed($unsigned($unsigned((+reg20)))),
                  reg29[(2'h3):(2'h3)]};
              reg54 <= ((+{reg13[(2'h2):(1'h1)]}) | ((reg29[(2'h2):(1'h1)] ?
                  $signed((wire36 ^ wire36)) : $unsigned($signed(reg16))) + reg39[(3'h4):(1'h0)]));
              reg55 <= (((((reg12 ? reg45 : wire3) - (forvar37 ?
                          (8'hab) : reg54)) <= reg13[(2'h3):(1'h0)]) ?
                      ($signed((reg47 ? reg29 : wire1)) ?
                          ((wire1 || reg29) || $unsigned(wire0)) : $signed((reg25 == forvar48))) : $unsigned(wire5)) ?
                  reg47 : {((~&$signed(reg18)) + {reg47}),
                      (reg39[(5'h10):(4'he)] * $unsigned((reg39 ?
                          wire35 : reg49)))});
            end
          reg56 = $signed($unsigned($unsigned($unsigned({wire35}))));
        end
      for (forvar57 = (1'h0); (forvar57 < (1'h1)); forvar57 = (forvar57 + (1'h1)))
        begin
          for (forvar58 = (1'h0); (forvar58 < (2'h3)); forvar58 = (forvar58 + (1'h1)))
            begin
              reg59 <= reg16[(4'ha):(1'h0)];
              reg60 = $unsigned($signed($signed(((reg44 < wire34) ?
                  (reg56 ? wire3 : forvar38) : (wire3 >>> reg56)))));
              reg61 = ($signed($signed((^~(reg20 < reg41)))) + $unsigned((-((reg20 <<< reg41) <<< $signed((8'h9c))))));
              reg62 = reg25;
            end
          for (forvar63 = (1'h0); (forvar63 < (3'h4)); forvar63 = (forvar63 + (1'h1)))
            begin
              reg64 = $unsigned(wire1[(3'h4):(1'h0)]);
              reg65 <= (({forvar42[(1'h1):(1'h0)]} == (8'haa)) + ({$unsigned((8'ha0)),
                      $signed(reg45[(4'hc):(1'h0)])} ?
                  (reg62 & reg44[(4'h8):(3'h4)]) : $unsigned(reg55)));
              reg66 <= ({wire34[(1'h0):(1'h0)]} ?
                  (+{reg60[(1'h1):(1'h0)]}) : forvar38[(1'h0):(1'h0)]);
            end
          reg67 <= $unsigned($unsigned((wire36[(3'h4):(3'h4)] >>> forvar38[(4'he):(4'h8)])));
        end
    end
  assign wire68 = ($unsigned(((wire36 ?
                      $signed(reg41) : reg8) ^ (8'hbf))) < (~&$signed(((~reg17) < $unsigned(reg67)))));
  assign wire69 = reg11;
  assign wire70 = {({(8'hbc)} ? $signed({$unsigned(reg16)}) : (!{{reg15}}))};
endmodule