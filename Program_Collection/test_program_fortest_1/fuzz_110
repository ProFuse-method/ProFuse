(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param67 = (+((((8'ha8) ~^ (8'h9c)) != (+(8'h9d))) ? ({(8'ha9)} >= ((8'hac) ? (8'hb0) : (8'ha6))) : (((8'haa) ? (8'hb0) : (8'ha2)) >= ((8'hae) ? (8'ha7) : (8'hb0))))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h87):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h2):(1'h0)] wire3;
  input wire signed [(2'h3):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire [(2'h3):(1'h0)] wire0;
  wire [(3'h6):(1'h0)] wire66;
  wire [(2'h3):(1'h0)] wire65;
  wire signed [(2'h2):(1'h0)] wire64;
  wire signed [(4'h8):(1'h0)] wire63;
  wire signed [(2'h3):(1'h0)] wire61;
  wire [(3'h7):(1'h0)] wire9;
  wire [(4'hb):(1'h0)] wire8;
  wire [(3'h6):(1'h0)] wire7;
  wire signed [(3'h7):(1'h0)] wire5;
  reg [(4'ha):(1'h0)] reg19 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg18 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg17 = (1'h0);
  reg [(3'h4):(1'h0)] reg16 = (1'h0);
  reg [(3'h4):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg14 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg13 = (1'h0);
  reg [(4'ha):(1'h0)] reg12 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg11 = (1'h0);
  reg [(4'hb):(1'h0)] reg10 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg6 = (1'h0);
  reg [(4'ha):(1'h0)] reg4 = (1'h0);
  assign y = {wire66,
                 wire65,
                 wire64,
                 wire63,
                 wire61,
                 wire9,
                 wire8,
                 wire7,
                 wire5,
                 reg19,
                 reg18,
                 reg17,
                 reg16,
                 reg15,
                 reg14,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg6,
                 reg4,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= $signed(($signed($unsigned(wire2)) << ($unsigned(wire1) ?
          (|wire1) : (wire0 <= wire1))));
    end
  assign wire5 = $signed((~&((wire1 ? wire2 : wire2) >= (wire1 & wire0))));
  always
    @(posedge clk) begin
      reg6 <= $signed(wire0);
    end
  assign wire7 = $signed($unsigned({wire1[(2'h3):(1'h1)]}));
  assign wire8 = (^wire0);
  assign wire9 = ((($unsigned(wire5) ? (wire2 == (8'h9c)) : (+wire0)) ?
                     $unsigned({(8'hb0)}) : wire1[(2'h2):(1'h1)]) ^~ reg6[(1'h1):(1'h0)]);
  always
    @(posedge clk) begin
      reg10 <= (-wire5);
    end
  always
    @(posedge clk) begin
      reg11 <= (wire1 ?
          ($signed(wire9) ?
              $signed(wire2[(1'h1):(1'h1)]) : wire7[(2'h3):(1'h1)]) : $unsigned(wire0[(1'h1):(1'h1)]));
      reg12 <= ((&wire2[(2'h3):(2'h2)]) ?
          {($unsigned(wire9) ? $signed(wire8) : ((8'ha4) && reg10))} : reg4);
      if ({(~^$unsigned((^(8'ha4))))})
        begin
          reg13 <= reg11;
          if ((wire3[(1'h0):(1'h0)] && (^{(~&reg12)})))
            begin
              reg14 <= $signed((!((!reg11) ? {reg4} : $signed(wire1))));
              reg15 <= $unsigned((^wire0));
            end
          else
            begin
              reg14 <= reg10[(1'h0):(1'h0)];
              reg15 <= wire1[(4'hb):(4'ha)];
              reg16 <= ($unsigned(wire2[(2'h2):(1'h0)]) ^ ({wire8[(3'h7):(3'h7)]} ?
                  wire9 : $signed({reg15})));
            end
          if (wire2[(1'h0):(1'h0)])
            begin
              reg17 <= reg13;
              reg18 <= $unsigned(reg15);
              reg19 <= (reg10[(3'h7):(3'h5)] ?
                  ($unsigned($signed(wire8)) ?
                      (8'ha2) : (reg6 ?
                          reg11 : $signed(reg16))) : (~|{wire7[(1'h0):(1'h0)]}));
            end
          else
            begin
              reg17 <= $signed((&(reg17[(2'h3):(2'h2)] ?
                  $unsigned(wire2) : $unsigned(reg17))));
              reg18 <= {{(!(wire5 ? (8'had) : wire9))}};
              reg19 <= ($signed(((!reg12) >>> $signed(reg14))) << (wire2 ?
                  (~(wire1 & reg6)) : {reg4}));
            end
        end
      else
        begin
          if (reg13[(1'h0):(1'h0)])
            begin
              reg13 <= $signed((reg6 ~^ $signed((reg16 ? (8'hac) : reg4))));
              reg14 <= ($unsigned($signed(reg11[(2'h2):(1'h0)])) >>> reg12);
              reg15 <= ((($unsigned(reg6) ? ((8'h9c) & wire3) : reg4) ?
                      (reg4 ?
                          reg16[(1'h0):(1'h0)] : wire7[(3'h4):(1'h1)]) : (|(~&wire8))) ?
                  (^~$unsigned($unsigned(reg11))) : {((wire9 ~^ reg4) <<< $unsigned(reg10))});
            end
          else
            begin
              reg13 <= ($signed((~|wire3)) ?
                  $unsigned({{wire0}}) : $signed(($signed(wire9) <<< wire2[(2'h2):(1'h0)])));
              reg14 <= $unsigned(reg17);
            end
          reg16 <= wire3;
        end
    end
  module20 #() modinst62 (wire61, clk, wire5, wire8, wire1, wire7);
  assign wire63 = (($unsigned((reg11 ? reg12 : reg11)) >= (reg10 - {(8'ha1)})) ?
                      wire8[(1'h0):(1'h0)] : $unsigned($unsigned($signed(reg14))));
  assign wire64 = wire8;
  assign wire65 = ((~&(8'h9c)) ^ reg16[(3'h4):(1'h1)]);
  assign wire66 = $unsigned(($signed($signed(reg10)) >>> ($signed(reg6) ?
                      ((8'h9f) > (8'ha2)) : ((8'h9d) && wire0))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module20  (y, clk, wire24, wire23, wire22, wire21);
  output wire [(32'h6d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire24;
  input wire [(4'h8):(1'h0)] wire23;
  input wire signed [(4'hb):(1'h0)] wire22;
  input wire [(3'h6):(1'h0)] wire21;
  wire signed [(4'h8):(1'h0)] wire51;
  wire signed [(2'h3):(1'h0)] wire50;
  wire signed [(3'h7):(1'h0)] wire48;
  wire [(4'h8):(1'h0)] wire29;
  reg signed [(3'h4):(1'h0)] reg60 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg59 = (1'h0);
  reg [(4'ha):(1'h0)] reg58 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg57 = (1'h0);
  reg [(3'h4):(1'h0)] reg56 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg55 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg54 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg53 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg52 = (1'h0);
  reg [(4'h9):(1'h0)] reg28 = (1'h0);
  reg [(3'h4):(1'h0)] reg27 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg26 = (1'h0);
  reg [(3'h7):(1'h0)] reg25 = (1'h0);
  assign y = {wire51,
                 wire50,
                 wire48,
                 wire29,
                 reg60,
                 reg59,
                 reg58,
                 reg57,
                 reg56,
                 reg55,
                 reg54,
                 reg53,
                 reg52,
                 reg28,
                 reg27,
                 reg26,
                 reg25,
                 (1'h0)};
  always
    @(posedge clk) begin
      if ((((wire22[(1'h0):(1'h0)] ?
              (~^wire23) : $unsigned(wire22)) < $unsigned($signed(wire21))) ?
          (&(8'hae)) : wire24[(2'h2):(1'h0)]))
        begin
          reg25 <= (8'ha8);
          reg26 <= wire22;
        end
      else
        begin
          reg25 <= ((~^$unsigned(wire21)) & (wire23[(2'h2):(1'h1)] ^~ wire24[(2'h3):(1'h1)]));
          reg26 <= $signed((8'ha9));
          reg27 <= wire24[(2'h3):(2'h2)];
        end
      reg28 <= reg27[(2'h2):(2'h2)];
    end
  assign wire29 = ((wire21[(2'h3):(2'h2)] ?
                          $unsigned(wire22) : ($unsigned((8'ha4)) ?
                              reg28 : $signed((8'haa)))) ?
                      {{(&wire23)}} : ((~|wire22) ?
                          $unsigned((wire23 ?
                              (8'had) : wire21)) : (wire23[(4'h8):(3'h7)] || $signed(wire24))));
  module30 #() modinst49 (.wire33(wire22), .clk(clk), .wire34(reg25), .y(wire48), .wire32(reg27), .wire31(wire23));
  assign wire50 = $unsigned(wire24[(1'h0):(1'h0)]);
  assign wire51 = $signed(wire50[(1'h0):(1'h0)]);
  always
    @(posedge clk) begin
      if (reg25[(1'h1):(1'h0)])
        begin
          if ((wire51[(3'h5):(2'h2)] ?
              (wire50[(1'h0):(1'h0)] ?
                  (8'hab) : (~(wire51 ? wire23 : wire50))) : $signed((+(reg25 ?
                  reg28 : wire21)))))
            begin
              reg52 <= (~wire51);
              reg53 <= wire51;
              reg54 <= $unsigned(((wire50 ? reg27 : wire48) ?
                  $signed($unsigned(wire22)) : (8'ha3)));
            end
          else
            begin
              reg52 <= ($signed(({wire48} ?
                  $unsigned(wire23) : (reg53 << reg27))) - wire24);
              reg53 <= $signed($unsigned(({wire48} ? wire21 : reg28)));
            end
          if (wire24)
            begin
              reg55 <= wire51;
            end
          else
            begin
              reg55 <= (+((((8'h9d) ? reg53 : wire21) ?
                  $signed(wire22) : (reg55 << (8'hac))) & ((~&reg25) * $signed((8'ha8)))));
              reg56 <= (+(({(8'ha5)} ? (&reg26) : (+(8'ha2))) ?
                  wire48[(1'h1):(1'h0)] : (~^(reg26 ^~ reg55))));
            end
        end
      else
        begin
          reg52 <= (+$signed(($unsigned(wire50) ? {wire29} : (reg27 * reg52))));
        end
      reg57 <= reg53[(3'h7):(2'h3)];
      if (reg26)
        begin
          if (wire48)
            begin
              reg58 <= $unsigned(reg52);
              reg59 <= ($unsigned(wire50) & $unsigned($signed((wire48 < wire48))));
            end
          else
            begin
              reg58 <= wire22;
            end
          reg60 <= ((^reg56[(1'h0):(1'h0)]) ?
              (^{((8'h9f) || (8'ha6))}) : $unsigned($unsigned((reg53 <<< reg26))));
        end
      else
        begin
          if ($unsigned(reg59))
            begin
              reg58 <= (~^{$unsigned((|reg57))});
              reg59 <= (({$unsigned(wire48)} ?
                  $signed((~^reg58)) : $signed((reg25 ?
                      (8'ha2) : reg28))) < {(~^$signed(reg52))});
            end
          else
            begin
              reg58 <= {$unsigned(reg26)};
              reg59 <= wire51;
              reg60 <= (reg53[(1'h1):(1'h0)] >>> ($signed(wire24[(1'h0):(1'h0)]) | ((^(8'ha3)) * (reg26 ?
                  wire51 : reg25))));
            end
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module30  (y, clk, wire34, wire33, wire32, wire31);
  output wire [(32'h4b):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire34;
  input wire [(4'hb):(1'h0)] wire33;
  input wire [(2'h3):(1'h0)] wire32;
  input wire signed [(3'h4):(1'h0)] wire31;
  wire signed [(4'ha):(1'h0)] wire47;
  wire [(4'hb):(1'h0)] wire38;
  wire signed [(3'h5):(1'h0)] wire37;
  wire [(4'ha):(1'h0)] wire36;
  wire signed [(2'h2):(1'h0)] wire35;
  reg [(3'h4):(1'h0)] reg46 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg45 = (1'h0);
  reg [(4'h8):(1'h0)] reg44 = (1'h0);
  reg [(2'h2):(1'h0)] reg43 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg42 = (1'h0);
  reg [(2'h2):(1'h0)] reg41 = (1'h0);
  reg [(2'h2):(1'h0)] reg40 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg39 = (1'h0);
  assign y = {wire47,
                 wire38,
                 wire37,
                 wire36,
                 wire35,
                 reg46,
                 reg45,
                 reg44,
                 reg43,
                 reg42,
                 reg41,
                 reg40,
                 reg39,
                 (1'h0)};
  assign wire35 = (8'h9c);
  assign wire36 = $unsigned((~^$unsigned((&(8'h9d)))));
  assign wire37 = wire33[(2'h3):(1'h1)];
  assign wire38 = {{(^~(^~wire35))}};
  always
    @(posedge clk) begin
      if ((wire32 ?
          ($unsigned({wire33}) <<< ((wire38 >= wire36) ?
              wire35 : wire37)) : ({wire33} != {{wire36}})))
        begin
          reg39 <= $signed($signed((wire37[(3'h4):(1'h1)] == $unsigned((8'ha8)))));
          reg40 <= $unsigned($unsigned(wire38[(3'h5):(3'h5)]));
          reg41 <= (($unsigned(wire33[(3'h7):(1'h1)]) ^ (8'ha0)) ?
              (reg40 & wire33[(2'h3):(1'h1)]) : $unsigned((wire34 + (+(8'hab)))));
        end
      else
        begin
          if ((wire34 && reg39))
            begin
              reg39 <= wire36[(1'h0):(1'h0)];
              reg40 <= $unsigned($unsigned($signed((reg40 <= (8'hab)))));
              reg41 <= $unsigned(({(wire32 ~^ wire35)} != (^$signed((8'ha1)))));
            end
          else
            begin
              reg39 <= ((^reg39) ?
                  $signed(wire35[(1'h1):(1'h1)]) : (~^wire33[(1'h0):(1'h0)]));
            end
        end
      reg42 <= $unsigned((wire37 ?
          ((reg40 ^ wire38) ?
              reg41 : reg41) : $unsigned(wire31[(2'h3):(2'h3)])));
      reg43 <= wire34[(1'h1):(1'h1)];
    end
  always
    @(posedge clk) begin
      reg44 <= (wire36[(4'h9):(3'h5)] ?
          $unsigned($unsigned((reg39 ?
              wire37 : wire33))) : $unsigned($signed({wire34})));
    end
  always
    @(posedge clk) begin
      reg45 <= ($unsigned(((~^wire35) <= reg42)) <<< (({wire33} <<< {reg39}) == (~(wire35 ?
          wire34 : wire33))));
      reg46 <= ($signed((^~reg40[(1'h0):(1'h0)])) ?
          $signed(((&reg44) > (reg41 | reg39))) : $unsigned({(+reg42)}));
    end
  assign wire47 = reg39;
endmodule