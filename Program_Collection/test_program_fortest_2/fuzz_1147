(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param69 = (&({(&((7'h43) != (8'hb6))), (8'ha3)} & (~^(((8'hb2) == (8'ha1)) ? ((8'hb5) == (8'ha9)) : ((8'h9c) ^~ (8'hb8)))))), 
parameter param70 = ((!(((param69 ? param69 : (8'hb0)) ? {param69, param69} : {param69, param69}) ? param69 : (((8'hb9) ? param69 : param69) ? param69 : (param69 ? (8'hab) : param69)))) != param69))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h2fd):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'h9):(1'h0)] wire3;
  input wire signed [(3'h5):(1'h0)] wire2;
  input wire signed [(4'ha):(1'h0)] wire1;
  input wire [(4'hc):(1'h0)] wire0;
  wire [(5'h15):(1'h0)] wire68;
  wire signed [(5'h15):(1'h0)] wire60;
  wire signed [(2'h3):(1'h0)] wire59;
  wire signed [(4'hf):(1'h0)] wire58;
  wire signed [(3'h7):(1'h0)] wire57;
  wire [(3'h6):(1'h0)] wire51;
  wire [(5'h13):(1'h0)] wire43;
  wire signed [(5'h10):(1'h0)] wire42;
  wire signed [(4'hc):(1'h0)] wire41;
  wire signed [(5'h14):(1'h0)] wire5;
  wire [(3'h4):(1'h0)] wire4;
  reg [(4'hb):(1'h0)] reg66 = (1'h0);
  reg [(4'he):(1'h0)] reg65 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg63 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg55 = (1'h0);
  reg [(5'h12):(1'h0)] reg54 = (1'h0);
  reg [(5'h11):(1'h0)] reg53 = (1'h0);
  reg [(2'h2):(1'h0)] reg50 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg47 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg46 = (1'h0);
  reg [(4'ha):(1'h0)] reg40 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg35 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg33 = (1'h0);
  reg [(2'h3):(1'h0)] reg30 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg28 = (1'h0);
  reg [(4'he):(1'h0)] reg27 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg24 = (1'h0);
  reg [(4'hf):(1'h0)] reg23 = (1'h0);
  reg [(4'hd):(1'h0)] reg22 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg20 = (1'h0);
  reg [(5'h15):(1'h0)] reg19 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg17 = (1'h0);
  reg [(5'h13):(1'h0)] reg13 = (1'h0);
  reg [(5'h11):(1'h0)] reg12 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg11 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg10 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg7 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg67 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg64 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar62 = (1'h0);
  reg [(5'h14):(1'h0)] forvar61 = (1'h0);
  reg [(3'h7):(1'h0)] reg56 = (1'h0);
  reg [(5'h13):(1'h0)] forvar52 = (1'h0);
  reg [(5'h15):(1'h0)] reg49 = (1'h0);
  reg [(4'h8):(1'h0)] forvar48 = (1'h0);
  reg [(5'h15):(1'h0)] forvar45 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar44 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg39 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar38 = (1'h0);
  reg [(3'h4):(1'h0)] reg37 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg36 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg34 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar32 = (1'h0);
  reg [(5'h10):(1'h0)] forvar31 = (1'h0);
  reg [(3'h4):(1'h0)] forvar29 = (1'h0);
  reg [(3'h4):(1'h0)] forvar26 = (1'h0);
  reg [(4'hd):(1'h0)] reg25 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar21 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg18 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar16 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar15 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg14 = (1'h0);
  reg [(2'h3):(1'h0)] reg9 = (1'h0);
  reg [(4'h9):(1'h0)] forvar8 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar6 = (1'h0);
  assign y = {wire68,
                 wire60,
                 wire59,
                 wire58,
                 wire57,
                 wire51,
                 wire43,
                 wire42,
                 wire41,
                 wire5,
                 wire4,
                 reg66,
                 reg65,
                 reg63,
                 reg55,
                 reg54,
                 reg53,
                 reg50,
                 reg47,
                 reg46,
                 reg40,
                 reg35,
                 reg33,
                 reg30,
                 reg28,
                 reg27,
                 reg24,
                 reg23,
                 reg22,
                 reg20,
                 reg19,
                 reg17,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg7,
                 reg67,
                 reg64,
                 forvar62,
                 forvar61,
                 reg56,
                 forvar52,
                 reg49,
                 forvar48,
                 forvar45,
                 forvar44,
                 reg39,
                 forvar38,
                 reg37,
                 reg36,
                 reg34,
                 forvar32,
                 forvar31,
                 forvar29,
                 forvar26,
                 reg25,
                 forvar21,
                 reg18,
                 forvar16,
                 forvar15,
                 reg14,
                 reg9,
                 forvar8,
                 forvar6,
                 (1'h0)};
  assign wire4 = $signed((7'h43));
  assign wire5 = $unsigned(($signed((~&(wire0 ? wire1 : wire3))) | wire4));
  always
    @(posedge clk) begin
      for (forvar6 = (1'h0); (forvar6 < (1'h1)); forvar6 = (forvar6 + (1'h1)))
        begin
          reg7 <= $signed((forvar6[(4'h9):(4'h9)] ^ $signed(((^~wire0) ?
              wire2 : $signed(wire1)))));
          for (forvar8 = (1'h0); (forvar8 < (3'h4)); forvar8 = (forvar8 + (1'h1)))
            begin
              reg9 = $unsigned(wire3);
              reg10 <= (wire5[(4'hd):(1'h0)] ?
                  wire4[(2'h3):(1'h0)] : (wire2 ?
                      $signed(forvar8[(1'h0):(1'h0)]) : wire3));
              reg11 <= wire0[(2'h3):(1'h0)];
              reg12 <= ((($unsigned({wire0, wire2}) & forvar8) ?
                  {((wire1 > forvar8) ?
                          (8'haf) : reg9)} : wire4[(1'h0):(1'h0)]) != $signed($signed(((forvar6 ?
                      wire5 : forvar6) ?
                  reg11 : wire3))));
            end
          reg13 <= $unsigned((wire2[(3'h4):(3'h4)] ?
              wire2[(1'h1):(1'h0)] : $signed($unsigned((reg12 ?
                  wire2 : wire4)))));
        end
      reg14 = reg11;
      for (forvar15 = (1'h0); (forvar15 < (3'h4)); forvar15 = (forvar15 + (1'h1)))
        begin
          for (forvar16 = (1'h0); (forvar16 < (3'h4)); forvar16 = (forvar16 + (1'h1)))
            begin
              reg17 <= $unsigned(reg12);
              reg18 = ($signed((+forvar15)) - $signed($unsigned((~&reg11))));
              reg19 <= wire0[(1'h0):(1'h0)];
              reg20 <= (8'ha2);
            end
          for (forvar21 = (1'h0); (forvar21 < (1'h1)); forvar21 = (forvar21 + (1'h1)))
            begin
              reg22 <= $signed(((forvar8 | reg20) ?
                  reg14 : reg20[(3'h6):(3'h6)]));
              reg23 <= {{$signed($signed(((8'hb9) == (8'hbf)))),
                      (forvar8 ?
                          {reg7} : ((~reg22) ?
                              reg12[(4'hc):(2'h2)] : $unsigned(reg7)))}};
              reg24 <= $signed($unsigned(reg7));
            end
          reg25 = $unsigned({(~^$unsigned(reg23))});
          for (forvar26 = (1'h0); (forvar26 < (1'h1)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 <= ((($unsigned(forvar6) ?
                      $unsigned((reg19 | (8'hab))) : $signed((reg24 ?
                          wire3 : wire4))) ?
                  (~|(8'hb0)) : (~&{(reg23 <= (7'h43)),
                      (forvar16 ?
                          reg24 : reg24)})) | {(^~(~^(forvar8 >> reg7)))});
              reg28 <= ($signed($unsigned(forvar6[(4'h9):(4'h8)])) >> wire0[(2'h2):(1'h1)]);
            end
          for (forvar29 = (1'h0); (forvar29 < (1'h0)); forvar29 = (forvar29 + (1'h1)))
            begin
              reg30 <= (-(|{$unsigned(reg11[(1'h0):(1'h0)]),
                  $signed((reg27 ? forvar16 : reg25))}));
            end
        end
      for (forvar31 = (1'h0); (forvar31 < (2'h2)); forvar31 = (forvar31 + (1'h1)))
        begin
          for (forvar32 = (1'h0); (forvar32 < (1'h0)); forvar32 = (forvar32 + (1'h1)))
            begin
              reg33 <= (reg27[(1'h1):(1'h1)] ?
                  {(~|forvar21), reg9} : (((-$signed(wire3)) - $signed({reg19,
                          reg13})) ?
                      $signed($unsigned($unsigned(reg17))) : reg23[(2'h2):(2'h2)]));
              reg34 = (&($signed(($signed(reg17) ?
                      (~wire2) : $unsigned(reg25))) ?
                  (-(~|(^~(8'hbb)))) : (reg12[(4'h8):(3'h6)] ^ ($signed(reg17) + (|wire0)))));
              reg35 <= (&$unsigned((~|{(+forvar21)})));
              reg36 = (reg33[(3'h5):(1'h1)] ?
                  reg24[(3'h6):(3'h4)] : (^forvar32[(3'h4):(3'h4)]));
            end
          reg37 = (&$unsigned(($signed({reg20}) & reg17[(1'h0):(1'h0)])));
          for (forvar38 = (1'h0); (forvar38 < (3'h4)); forvar38 = (forvar38 + (1'h1)))
            begin
              reg39 = $signed(((reg7[(1'h0):(1'h0)] + ({(8'ha8),
                  reg30} - $unsigned(reg19))) ^~ ((reg12[(4'hb):(4'h8)] >> reg23[(3'h5):(1'h1)]) ?
                  $unsigned({reg18}) : ($unsigned(reg18) && $signed((8'had))))));
              reg40 <= ((|reg10[(4'hc):(1'h1)]) ?
                  (~|((((8'ha7) ? reg35 : forvar26) | (~|reg39)) ?
                      ($signed(reg39) >>> wire0) : reg10[(3'h7):(2'h2)])) : (reg12 - reg12[(1'h1):(1'h1)]));
            end
        end
    end
  assign wire41 = (8'ha2);
  assign wire42 = (~&(reg33[(2'h3):(1'h0)] == reg40));
  assign wire43 = (8'hb1);
  always
    @(posedge clk) begin
      for (forvar44 = (1'h0); (forvar44 < (1'h1)); forvar44 = (forvar44 + (1'h1)))
        begin
          for (forvar45 = (1'h0); (forvar45 < (2'h3)); forvar45 = (forvar45 + (1'h1)))
            begin
              reg46 <= (|(~|{{{reg19}}}));
            end
          reg47 <= reg17[(3'h4):(2'h2)];
          for (forvar48 = (1'h0); (forvar48 < (1'h0)); forvar48 = (forvar48 + (1'h1)))
            begin
              reg49 = {$unsigned((~^$signed($unsigned(wire41)))),
                  (((+$unsigned((8'hbe))) ?
                          (reg27[(1'h0):(1'h0)] ?
                              (^reg17) : forvar48) : (|(wire3 ?
                              forvar45 : wire2))) ?
                      $signed($signed($signed(reg20))) : (&$signed((~|reg7))))};
              reg50 <= $unsigned($unsigned(reg11[(1'h0):(1'h0)]));
            end
        end
    end
  assign wire51 = $unsigned(reg50[(1'h1):(1'h0)]);
  always
    @(posedge clk) begin
      if ($signed(reg11[(1'h0):(1'h0)]))
        begin
          for (forvar52 = (1'h0); (forvar52 < (1'h0)); forvar52 = (forvar52 + (1'h1)))
            begin
              reg53 <= ($unsigned(reg50) < (8'hb6));
              reg54 <= ($unsigned(reg20[(1'h0):(1'h0)]) ?
                  ($signed(((!reg35) != reg17[(1'h0):(1'h0)])) | {$unsigned(reg28),
                      {$unsigned(wire5),
                          (wire41 << wire41)}}) : $unsigned((^reg22[(2'h3):(2'h3)])));
              reg55 <= (^~$signed(reg54));
            end
        end
      else
        begin
          for (forvar52 = (1'h0); (forvar52 < (1'h1)); forvar52 = (forvar52 + (1'h1)))
            begin
              reg56 = (~|((~wire2[(2'h2):(2'h2)]) >> (^$unsigned((reg50 < wire41)))));
            end
        end
    end
  assign wire57 = reg13[(4'h8):(1'h0)];
  assign wire58 = $unsigned(($signed(({reg12} << wire42)) ?
                      reg30[(2'h3):(2'h2)] : reg54[(3'h7):(1'h0)]));
  assign wire59 = reg17;
  assign wire60 = $unsigned(reg23);
  always
    @(posedge clk) begin
      for (forvar61 = (1'h0); (forvar61 < (2'h3)); forvar61 = (forvar61 + (1'h1)))
        begin
          for (forvar62 = (1'h0); (forvar62 < (2'h3)); forvar62 = (forvar62 + (1'h1)))
            begin
              reg63 <= (((reg7 ?
                  ((reg30 | reg54) && (reg23 >> reg40)) : wire51[(1'h1):(1'h0)]) < (~(^$unsigned(reg55)))) & $unsigned(($signed($unsigned((8'hba))) ~^ reg28[(2'h3):(2'h3)])));
              reg64 = ((+{{(!wire2)}}) ?
                  (wire1[(3'h4):(2'h3)] * (reg22 ?
                      $unsigned((8'had)) : reg33[(5'h12):(3'h4)])) : reg53[(2'h2):(1'h1)]);
              reg65 <= ((8'hae) | reg46[(3'h5):(3'h5)]);
              reg66 <= (($unsigned((&(wire57 || wire51))) ?
                  $signed((reg24[(1'h1):(1'h0)] ?
                      (reg12 <= wire5) : $unsigned(wire60))) : (((reg23 < reg40) > $unsigned(wire5)) ?
                      ($signed(wire0) < $signed(reg64)) : wire2)) * (reg33[(2'h3):(1'h0)] ?
                  ((reg24 ? {reg46} : $unsigned(reg64)) ?
                      reg50[(1'h0):(1'h0)] : {$unsigned((8'hb0))}) : reg10));
              reg67 = $unsigned(wire41);
            end
        end
    end
  assign wire68 = (!$unsigned({$signed((~|wire59)), $signed({wire2, reg40})}));
endmodule