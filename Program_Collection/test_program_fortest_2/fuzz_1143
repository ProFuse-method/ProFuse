(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h402):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h10):(1'h0)] wire4;
  input wire [(5'h12):(1'h0)] wire3;
  input wire [(5'h15):(1'h0)] wire2;
  input wire signed [(4'hf):(1'h0)] wire1;
  input wire [(4'ha):(1'h0)] wire0;
  wire signed [(2'h2):(1'h0)] wire199;
  wire [(3'h5):(1'h0)] wire198;
  wire [(3'h5):(1'h0)] wire171;
  wire [(2'h2):(1'h0)] wire170;
  wire signed [(5'h11):(1'h0)] wire169;
  wire [(2'h3):(1'h0)] wire168;
  wire signed [(4'hc):(1'h0)] wire167;
  wire [(5'h15):(1'h0)] wire114;
  reg signed [(4'he):(1'h0)] reg197 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg196 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg194 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg193 = (1'h0);
  reg [(2'h3):(1'h0)] reg190 = (1'h0);
  reg [(4'h8):(1'h0)] reg189 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg186 = (1'h0);
  reg [(4'hf):(1'h0)] reg184 = (1'h0);
  reg [(5'h11):(1'h0)] reg183 = (1'h0);
  reg [(4'h9):(1'h0)] reg180 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg179 = (1'h0);
  reg [(2'h3):(1'h0)] reg178 = (1'h0);
  reg [(3'h5):(1'h0)] reg175 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg174 = (1'h0);
  reg [(3'h7):(1'h0)] reg173 = (1'h0);
  reg [(2'h3):(1'h0)] reg166 = (1'h0);
  reg [(2'h2):(1'h0)] reg165 = (1'h0);
  reg [(5'h13):(1'h0)] reg162 = (1'h0);
  reg [(4'he):(1'h0)] reg161 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg159 = (1'h0);
  reg [(5'h11):(1'h0)] reg157 = (1'h0);
  reg [(5'h15):(1'h0)] reg155 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg153 = (1'h0);
  reg [(4'hc):(1'h0)] reg152 = (1'h0);
  reg [(4'he):(1'h0)] reg146 = (1'h0);
  reg [(4'h9):(1'h0)] reg145 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg143 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg142 = (1'h0);
  reg [(5'h14):(1'h0)] reg138 = (1'h0);
  reg [(2'h3):(1'h0)] reg134 = (1'h0);
  reg [(4'he):(1'h0)] reg126 = (1'h0);
  reg [(4'h9):(1'h0)] reg125 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg120 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg195 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar192 = (1'h0);
  reg [(5'h14):(1'h0)] reg191 = (1'h0);
  reg [(3'h7):(1'h0)] forvar188 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg187 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg185 = (1'h0);
  reg [(4'hf):(1'h0)] forvar182 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg181 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar180 = (1'h0);
  reg [(2'h2):(1'h0)] reg176 = (1'h0);
  reg [(4'h9):(1'h0)] reg182 = (1'h0);
  reg [(5'h14):(1'h0)] forvar181 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg177 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar176 = (1'h0);
  reg [(3'h4):(1'h0)] forvar172 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg164 = (1'h0);
  reg [(5'h13):(1'h0)] forvar163 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar160 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg158 = (1'h0);
  reg [(3'h4):(1'h0)] forvar156 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg154 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar151 = (1'h0);
  reg [(4'h8):(1'h0)] forvar150 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg149 = (1'h0);
  reg [(5'h13):(1'h0)] forvar148 = (1'h0);
  reg [(4'he):(1'h0)] forvar147 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg144 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg141 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg140 = (1'h0);
  reg [(5'h11):(1'h0)] forvar139 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg137 = (1'h0);
  reg [(4'hc):(1'h0)] forvar136 = (1'h0);
  reg [(5'h10):(1'h0)] forvar135 = (1'h0);
  reg [(5'h10):(1'h0)] reg133 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg132 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg131 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar130 = (1'h0);
  reg [(5'h12):(1'h0)] reg129 = (1'h0);
  reg [(3'h4):(1'h0)] reg128 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar127 = (1'h0);
  reg [(4'hf):(1'h0)] reg124 = (1'h0);
  reg [(5'h10):(1'h0)] reg123 = (1'h0);
  reg signed [(4'he):(1'h0)] reg122 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar121 = (1'h0);
  reg [(4'ha):(1'h0)] reg119 = (1'h0);
  reg [(4'h9):(1'h0)] forvar118 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar117 = (1'h0);
  reg [(5'h12):(1'h0)] reg116 = (1'h0);
  assign y = {wire199,
                 wire198,
                 wire171,
                 wire170,
                 wire169,
                 wire168,
                 wire167,
                 wire114,
                 reg197,
                 reg196,
                 reg194,
                 reg193,
                 reg190,
                 reg189,
                 reg186,
                 reg184,
                 reg183,
                 reg180,
                 reg179,
                 reg178,
                 reg175,
                 reg174,
                 reg173,
                 reg166,
                 reg165,
                 reg162,
                 reg161,
                 reg159,
                 reg157,
                 reg155,
                 reg153,
                 reg152,
                 reg146,
                 reg145,
                 reg143,
                 reg142,
                 reg138,
                 reg134,
                 reg126,
                 reg125,
                 reg120,
                 reg195,
                 forvar192,
                 reg191,
                 forvar188,
                 reg187,
                 reg185,
                 forvar182,
                 reg181,
                 forvar180,
                 reg176,
                 reg182,
                 forvar181,
                 reg177,
                 forvar176,
                 forvar172,
                 reg164,
                 forvar163,
                 forvar160,
                 reg158,
                 forvar156,
                 reg154,
                 forvar151,
                 forvar150,
                 reg149,
                 forvar148,
                 forvar147,
                 reg144,
                 reg141,
                 reg140,
                 forvar139,
                 reg137,
                 forvar136,
                 forvar135,
                 reg133,
                 reg132,
                 reg131,
                 forvar130,
                 reg129,
                 reg128,
                 forvar127,
                 reg124,
                 reg123,
                 reg122,
                 forvar121,
                 reg119,
                 forvar118,
                 forvar117,
                 reg116,
                 (1'h0)};
  module5 #() modinst115 (wire114, clk, wire2, wire4, wire3, wire1);
  always
    @(posedge clk) begin
      reg116 = $unsigned((wire3[(2'h3):(2'h3)] ?
          wire4 : ((&(wire114 >>> wire1)) > $unsigned((wire114 ?
              (8'hbe) : wire2)))));
      for (forvar117 = (1'h0); (forvar117 < (1'h0)); forvar117 = (forvar117 + (1'h1)))
        begin
          for (forvar118 = (1'h0); (forvar118 < (2'h2)); forvar118 = (forvar118 + (1'h1)))
            begin
              reg119 = {(~wire3)};
              reg120 <= (~^wire0);
            end
          for (forvar121 = (1'h0); (forvar121 < (1'h1)); forvar121 = (forvar121 + (1'h1)))
            begin
              reg122 = reg120[(3'h7):(1'h1)];
              reg123 = (~&$unsigned({($unsigned(wire4) ?
                      (reg122 ? wire0 : (8'haa)) : (8'hbf))}));
              reg124 = {(~|reg119), wire1};
              reg125 <= $signed(reg119[(4'h8):(3'h6)]);
              reg126 <= (^reg123[(4'hb):(4'h9)]);
            end
          for (forvar127 = (1'h0); (forvar127 < (3'h4)); forvar127 = (forvar127 + (1'h1)))
            begin
              reg128 = ((8'hb4) || reg116[(5'h11):(1'h0)]);
            end
          reg129 = reg124;
          for (forvar130 = (1'h0); (forvar130 < (2'h3)); forvar130 = (forvar130 + (1'h1)))
            begin
              reg131 = forvar130[(2'h2):(2'h2)];
              reg132 = (&$signed($unsigned(($unsigned(wire0) ?
                  forvar121[(2'h2):(1'h1)] : (^~reg131)))));
              reg133 = (~{forvar127[(4'hb):(1'h0)],
                  (reg126 ?
                      $signed(wire1[(4'he):(3'h6)]) : ($signed(reg122) >= $unsigned(wire3)))});
            end
        end
      reg134 <= ($unsigned(($signed(reg132[(3'h7):(2'h2)]) ^ $unsigned((wire0 ?
              reg131 : (8'ha3))))) ?
          $unsigned((~&(((8'hb0) ?
              wire114 : (7'h42)) >= forvar121[(1'h0):(1'h0)]))) : ((forvar127 ?
              forvar118[(3'h5):(2'h2)] : $unsigned((~|reg133))) >>> {$unsigned((forvar130 >> reg119)),
              (^~$unsigned(reg119))}));
    end
  always
    @(posedge clk) begin
      for (forvar135 = (1'h0); (forvar135 < (2'h3)); forvar135 = (forvar135 + (1'h1)))
        begin
          for (forvar136 = (1'h0); (forvar136 < (1'h0)); forvar136 = (forvar136 + (1'h1)))
            begin
              reg137 = wire1[(1'h0):(1'h0)];
              reg138 <= (($unsigned(wire0[(2'h3):(2'h2)]) ^ (reg120[(3'h4):(1'h1)] ?
                  ({wire2} >= (wire3 ^ wire0)) : $signed(wire1[(4'ha):(2'h3)]))) >= (^(8'ha6)));
            end
          for (forvar139 = (1'h0); (forvar139 < (1'h0)); forvar139 = (forvar139 + (1'h1)))
            begin
              reg140 = {$unsigned((&reg134[(1'h0):(1'h0)])),
                  ((~|(^(wire2 ?
                      wire114 : wire3))) >= (reg138[(4'hc):(4'hc)] + (reg120 < reg138[(4'hf):(4'hb)])))};
              reg141 = $unsigned($unsigned(forvar135[(4'hf):(4'hd)]));
              reg142 <= ($signed($unsigned(reg141[(1'h1):(1'h1)])) ?
                  $unsigned($signed(forvar139)) : (~$unsigned($unsigned(reg137))));
              reg143 <= (8'hb1);
              reg144 = reg126;
            end
          reg145 <= $unsigned((reg138[(4'ha):(3'h7)] ?
              $signed(((reg134 > reg144) <<< {reg137})) : (reg134 ?
                  wire0[(3'h6):(2'h3)] : ((reg142 + forvar136) > forvar136[(1'h0):(1'h0)]))));
        end
      reg146 <= ($signed((reg120 < reg125)) ?
          {$unsigned($signed($unsigned(reg134))),
              reg144[(1'h0):(1'h0)]} : wire114);
      for (forvar147 = (1'h0); (forvar147 < (1'h1)); forvar147 = (forvar147 + (1'h1)))
        begin
          for (forvar148 = (1'h0); (forvar148 < (2'h3)); forvar148 = (forvar148 + (1'h1)))
            begin
              reg149 = $unsigned(reg142);
            end
        end
      for (forvar150 = (1'h0); (forvar150 < (3'h4)); forvar150 = (forvar150 + (1'h1)))
        begin
          for (forvar151 = (1'h0); (forvar151 < (1'h0)); forvar151 = (forvar151 + (1'h1)))
            begin
              reg152 <= $unsigned(((forvar151[(5'h11):(3'h4)] & ($unsigned(wire2) ?
                      reg140 : $unsigned(forvar136))) ?
                  $signed((8'ha9)) : ({((8'ha9) == reg146), $unsigned(reg125)} ?
                      ($signed(wire114) ?
                          $unsigned(reg125) : {(8'hac),
                              (8'hb8)}) : reg145[(4'h8):(3'h7)])));
              reg153 <= reg143[(4'hb):(3'h4)];
              reg154 = (forvar135[(4'hf):(4'hc)] - (8'hb9));
              reg155 <= reg154;
            end
          for (forvar156 = (1'h0); (forvar156 < (1'h1)); forvar156 = (forvar156 + (1'h1)))
            begin
              reg157 <= (~$unsigned(({(-forvar135),
                      (reg145 ? (8'ha2) : wire1)} ?
                  $signed($signed(forvar147)) : ($unsigned(forvar147) ?
                      (^forvar139) : (reg137 & (8'h9d))))));
              reg158 = forvar150;
              reg159 <= (8'hba);
            end
          for (forvar160 = (1'h0); (forvar160 < (2'h2)); forvar160 = (forvar160 + (1'h1)))
            begin
              reg161 <= ((-(8'hb5)) | $unsigned((~|forvar147)));
              reg162 <= $unsigned($unsigned({(~^$signed(reg153))}));
            end
          for (forvar163 = (1'h0); (forvar163 < (1'h0)); forvar163 = (forvar163 + (1'h1)))
            begin
              reg164 = reg126[(4'he):(2'h3)];
              reg165 <= wire3[(3'h5):(1'h1)];
              reg166 <= (reg149 ?
                  $signed((8'hb3)) : ((~^reg154) ~^ $unsigned({(^reg125),
                      $unsigned(wire1)})));
            end
        end
    end
  assign wire167 = reg120[(5'h10):(4'hc)];
  assign wire168 = ($signed(((^~(reg161 ? (8'hb4) : wire167)) >= {(8'ha9)})) ?
                       {$signed(((8'hbc) ? (reg134 >>> reg125) : reg126)),
                           reg126} : wire1[(4'he):(3'h7)]);
  assign wire169 = (-(|(wire114 >> $unsigned((wire114 ? reg162 : reg165)))));
  assign wire170 = reg161[(4'ha):(1'h1)];
  assign wire171 = (({{$unsigned(wire3), $signed(reg142)},
                           $unsigned($unsigned(wire3))} > $unsigned((wire167 ?
                           reg143[(4'h9):(2'h3)] : {reg138}))) ?
                       reg146 : (!$unsigned((+(reg138 ? wire0 : reg125)))));
  always
    @(posedge clk) begin
      if (wire1[(2'h2):(2'h2)])
        begin
          for (forvar172 = (1'h0); (forvar172 < (1'h1)); forvar172 = (forvar172 + (1'h1)))
            begin
              reg173 <= ($unsigned($unsigned((((7'h44) ?
                      wire114 : reg152) ~^ $signed(wire4)))) ?
                  $unsigned(reg152[(4'h8):(2'h3)]) : (wire168[(2'h3):(2'h3)] ?
                      ({$unsigned(wire114)} == $signed($unsigned(forvar172))) : $unsigned($unsigned({(8'ha3)}))));
              reg174 <= (~^$unsigned($unsigned(($signed(reg162) ?
                  (reg143 - wire170) : reg143))));
            end
          reg175 <= ($unsigned({wire2}) != {{reg157}, {{reg142}}});
          for (forvar176 = (1'h0); (forvar176 < (3'h4)); forvar176 = (forvar176 + (1'h1)))
            begin
              reg177 = $unsigned((((wire0 <= $unsigned(reg159)) ?
                  wire2 : ((8'haf) ?
                      reg153[(5'h14):(4'he)] : $unsigned(forvar176))) >= $signed(wire171[(1'h0):(1'h0)])));
              reg178 <= (^($signed((|(reg157 ? wire171 : reg142))) ?
                  ($signed($unsigned(wire171)) >= (8'ha0)) : reg146));
              reg179 <= forvar176[(1'h0):(1'h0)];
              reg180 <= reg120[(1'h0):(1'h0)];
            end
          for (forvar181 = (1'h0); (forvar181 < (1'h0)); forvar181 = (forvar181 + (1'h1)))
            begin
              reg182 = reg174;
              reg183 <= (reg120[(4'hd):(1'h0)] ? $unsigned(wire168) : wire167);
            end
          reg184 <= $unsigned(wire1[(4'hc):(2'h2)]);
        end
      else
        begin
          for (forvar172 = (1'h0); (forvar172 < (2'h2)); forvar172 = (forvar172 + (1'h1)))
            begin
              reg173 <= $signed({{(&(wire171 <= reg162)),
                      wire168[(2'h3):(1'h0)]},
                  (wire167 >> $unsigned((~|reg180)))});
              reg176 = $unsigned(reg126[(4'hb):(4'h9)]);
              reg177 = $signed($unsigned({(!reg143),
                  (!reg183[(2'h3):(1'h0)])}));
              reg178 <= ({wire169[(1'h1):(1'h1)],
                  reg178[(2'h3):(2'h2)]} + reg125);
              reg179 <= reg153;
            end
          for (forvar180 = (1'h0); (forvar180 < (1'h1)); forvar180 = (forvar180 + (1'h1)))
            begin
              reg181 = $signed((~$unsigned(reg166)));
            end
          for (forvar182 = (1'h0); (forvar182 < (1'h1)); forvar182 = (forvar182 + (1'h1)))
            begin
              reg185 = $unsigned({(8'ha8)});
              reg186 <= (^reg152[(1'h1):(1'h0)]);
              reg187 = ($unsigned(reg153[(5'h11):(4'hb)]) ?
                  forvar176[(1'h0):(1'h0)] : reg180[(4'h8):(2'h2)]);
            end
          for (forvar188 = (1'h0); (forvar188 < (1'h0)); forvar188 = (forvar188 + (1'h1)))
            begin
              reg189 <= wire169;
              reg190 <= $signed(wire1);
              reg191 = $unsigned((8'haa));
            end
          for (forvar192 = (1'h0); (forvar192 < (1'h0)); forvar192 = (forvar192 + (1'h1)))
            begin
              reg193 <= ((forvar188 * reg165) ?
                  $signed(reg120) : {($unsigned((^~reg134)) ?
                          $unsigned((reg146 ?
                              forvar192 : (8'ha9))) : (!(reg174 ?
                              (8'hb3) : reg174))),
                      reg175[(1'h0):(1'h0)]});
              reg194 <= reg184[(2'h2):(1'h1)];
              reg195 = (reg180 ?
                  $signed((^reg153[(3'h6):(3'h6)])) : {wire168,
                      (forvar172[(2'h3):(1'h1)] * (-$unsigned((7'h41))))});
              reg196 <= (-($signed(((8'hbf) || (reg125 << reg194))) * {(forvar181 ?
                      $signed(reg173) : $unsigned(wire3))}));
              reg197 <= (^~wire169[(3'h7):(3'h7)]);
            end
        end
    end
  assign wire198 = wire4;
  assign wire199 = (|(reg145 != reg152));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module5
#(parameter param112 = ((+(((~|(8'hb9)) ~^ ((8'ha8) << (8'hbc))) ? (8'hb1) : {((8'ha7) ? (8'ha7) : (8'h9e))})) ? {((!(^~(8'hbc))) != (&(~^(8'ha8))))} : ((^~({(8'hb3), (7'h44)} ? (8'hbe) : ((8'ha7) >= (8'ha2)))) ? {((~|(8'hb8)) && ((7'h40) ? (8'ha0) : (8'hb0))), {(-(7'h42)), (&(7'h40))}} : (+(((8'ha2) <<< (8'hab)) * (7'h44))))), 
parameter param113 = param112)
(y, clk, wire9, wire8, wire7, wire6);
  output wire [(32'h189):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire9;
  input wire signed [(5'h10):(1'h0)] wire8;
  input wire signed [(4'hc):(1'h0)] wire7;
  input wire signed [(4'hf):(1'h0)] wire6;
  wire signed [(4'hb):(1'h0)] wire111;
  wire signed [(3'h4):(1'h0)] wire110;
  wire [(4'hd):(1'h0)] wire108;
  reg [(3'h6):(1'h0)] reg13 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg14 = (1'h0);
  reg [(5'h15):(1'h0)] reg17 = (1'h0);
  reg [(4'h9):(1'h0)] reg18 = (1'h0);
  reg [(3'h5):(1'h0)] reg19 = (1'h0);
  reg [(4'hf):(1'h0)] reg21 = (1'h0);
  reg [(5'h15):(1'h0)] reg22 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg24 = (1'h0);
  reg [(3'h6):(1'h0)] reg25 = (1'h0);
  reg [(5'h14):(1'h0)] reg26 = (1'h0);
  reg [(5'h14):(1'h0)] reg30 = (1'h0);
  reg [(4'ha):(1'h0)] reg32 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg33 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg34 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg39 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg40 = (1'h0);
  reg [(3'h6):(1'h0)] reg42 = (1'h0);
  reg [(3'h6):(1'h0)] reg35 = (1'h0);
  reg [(4'h9):(1'h0)] forvar34 = (1'h0);
  reg signed [(4'he):(1'h0)] reg44 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg43 = (1'h0);
  reg [(5'h11):(1'h0)] forvar41 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar38 = (1'h0);
  reg [(5'h15):(1'h0)] reg37 = (1'h0);
  reg [(3'h7):(1'h0)] reg36 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar35 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg31 = (1'h0);
  reg [(5'h12):(1'h0)] forvar29 = (1'h0);
  reg [(4'hb):(1'h0)] reg28 = (1'h0);
  reg [(3'h4):(1'h0)] reg27 = (1'h0);
  reg [(2'h2):(1'h0)] forvar23 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg20 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar16 = (1'h0);
  reg [(3'h4):(1'h0)] forvar15 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg12 = (1'h0);
  reg [(3'h6):(1'h0)] forvar11 = (1'h0);
  reg [(3'h6):(1'h0)] forvar10 = (1'h0);
  assign y = {wire111,
                 wire110,
                 wire108,
                 reg13,
                 reg14,
                 reg17,
                 reg18,
                 reg19,
                 reg21,
                 reg22,
                 reg24,
                 reg25,
                 reg26,
                 reg30,
                 reg32,
                 reg33,
                 reg34,
                 reg39,
                 reg40,
                 reg42,
                 reg35,
                 forvar34,
                 reg44,
                 reg43,
                 forvar41,
                 forvar38,
                 reg37,
                 reg36,
                 forvar35,
                 reg31,
                 forvar29,
                 reg28,
                 reg27,
                 forvar23,
                 reg20,
                 forvar16,
                 forvar15,
                 reg12,
                 forvar11,
                 forvar10,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar10 = (1'h0); (forvar10 < (3'h4)); forvar10 = (forvar10 + (1'h1)))
        begin
          for (forvar11 = (1'h0); (forvar11 < (1'h0)); forvar11 = (forvar11 + (1'h1)))
            begin
              reg12 = ({$signed($signed((wire7 ? wire6 : wire9))), forvar11} ?
                  wire7 : $unsigned((&{(wire8 * wire9),
                      ((8'ha1) ? (8'hab) : wire9)})));
            end
          reg13 <= wire8;
          reg14 <= ((&wire7) ? wire7 : (~&wire8));
        end
      for (forvar15 = (1'h0); (forvar15 < (2'h3)); forvar15 = (forvar15 + (1'h1)))
        begin
          for (forvar16 = (1'h0); (forvar16 < (2'h2)); forvar16 = (forvar16 + (1'h1)))
            begin
              reg17 <= $unsigned($unsigned($signed({$unsigned(forvar10),
                  (reg12 || wire8)})));
              reg18 <= (wire6 ?
                  ({$signed($unsigned(forvar11)),
                      forvar11} ^~ {(forvar16 + wire9)}) : (!(~^reg14)));
              reg19 <= $unsigned({reg13});
              reg20 = reg13;
            end
          reg21 <= $unsigned({reg18, (~^(-$signed(reg12)))});
          reg22 <= wire6;
          for (forvar23 = (1'h0); (forvar23 < (1'h0)); forvar23 = (forvar23 + (1'h1)))
            begin
              reg24 <= $unsigned(forvar23[(2'h2):(1'h0)]);
              reg25 <= $unsigned({forvar11});
              reg26 <= ($signed($signed(((~^forvar10) != forvar16[(5'h12):(4'hf)]))) ?
                  (((~&$signed((8'hbb))) ?
                          ({forvar11} ?
                              $unsigned((8'hbd)) : reg17[(2'h3):(1'h0)]) : (reg25 ?
                              (forvar10 ? reg12 : forvar23) : $signed(reg22))) ?
                      $unsigned($unsigned(forvar23)) : $signed($unsigned($unsigned(wire7)))) : ($signed(((~forvar10) & $signed(wire9))) ^~ $unsigned($unsigned((!reg21)))));
              reg27 = reg25[(3'h4):(2'h3)];
              reg28 = (~(^~reg12));
            end
          for (forvar29 = (1'h0); (forvar29 < (1'h1)); forvar29 = (forvar29 + (1'h1)))
            begin
              reg30 <= $unsigned($unsigned(reg24));
              reg31 = ($signed(((8'hb4) ?
                  (+(reg24 >>> reg20)) : $unsigned(reg14))) - ((~|($unsigned((8'hb0)) ?
                  (wire6 ^ (8'h9d)) : (forvar11 ?
                      (8'hab) : (8'hb4)))) & (+(((8'ha8) ?
                  wire6 : reg27) ^ wire6[(3'h7):(3'h5)]))));
              reg32 <= ((~^({$unsigned(reg13), reg26[(3'h4):(1'h0)]} ?
                  $signed((-reg19)) : ($unsigned(forvar11) ?
                      (reg27 ?
                          reg17 : (8'hb9)) : forvar23[(1'h0):(1'h0)]))) != reg14);
              reg33 <= $unsigned($unsigned(reg30[(3'h4):(1'h0)]));
            end
        end
      if ($signed((reg14[(1'h0):(1'h0)] ?
          $unsigned(($signed(reg13) ?
              (8'had) : (reg33 ? reg17 : reg24))) : $unsigned($signed(reg27)))))
        begin
          reg34 <= reg17[(2'h3):(1'h0)];
          for (forvar35 = (1'h0); (forvar35 < (2'h3)); forvar35 = (forvar35 + (1'h1)))
            begin
              reg36 = $unsigned($signed($unsigned($signed((forvar11 ?
                  forvar23 : forvar16)))));
              reg37 = (forvar15[(1'h1):(1'h1)] ~^ wire7);
            end
          for (forvar38 = (1'h0); (forvar38 < (2'h2)); forvar38 = (forvar38 + (1'h1)))
            begin
              reg39 <= $unsigned($signed(($signed((8'hbe)) <= reg32[(3'h4):(3'h4)])));
              reg40 <= $signed((^~(forvar29[(4'ha):(4'h9)] <= {(forvar10 >> (8'hac))})));
            end
          for (forvar41 = (1'h0); (forvar41 < (2'h3)); forvar41 = (forvar41 + (1'h1)))
            begin
              reg42 <= ((wire9[(1'h1):(1'h1)] << (^($unsigned(reg34) <<< (reg20 ?
                  reg14 : forvar16)))) * (forvar29[(2'h2):(1'h1)] ^~ {(-forvar29[(4'h8):(3'h4)])}));
              reg43 = (-(^~wire7[(3'h7):(1'h1)]));
            end
          reg44 = $signed((^reg43[(3'h6):(3'h5)]));
        end
      else
        begin
          for (forvar34 = (1'h0); (forvar34 < (1'h0)); forvar34 = (forvar34 + (1'h1)))
            begin
              reg35 = $signed(($signed((|(forvar11 ? reg27 : forvar15))) ?
                  (+((reg39 ? reg30 : reg19) ?
                      ((7'h42) - forvar10) : reg44)) : $signed((reg24[(1'h0):(1'h0)] >> (|(8'hb3))))));
            end
        end
    end
  module45 #() modinst109 (wire108, clk, reg30, reg22, reg21, reg17, reg18);
  assign wire110 = reg26[(1'h1):(1'h1)];
  assign wire111 = (8'hbf);
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module45
#(parameter param106 = ({(~&({(8'ha9), (8'ha4)} * ((8'haa) ^~ (8'ha3)))), ((((8'ha4) < (8'hac)) ? (|(7'h43)) : ((8'ha8) ? (8'h9d) : (8'ha2))) + (^((8'had) ? (8'hac) : (8'ha2))))} >>> (7'h43)), 
parameter param107 = ((^~param106) & param106))
(y, clk, wire50, wire49, wire48, wire47, wire46);
  output wire [(32'h2c0):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h14):(1'h0)] wire50;
  input wire signed [(3'h4):(1'h0)] wire49;
  input wire signed [(4'hf):(1'h0)] wire48;
  input wire signed [(5'h15):(1'h0)] wire47;
  input wire signed [(3'h5):(1'h0)] wire46;
  wire [(5'h10):(1'h0)] wire105;
  wire [(5'h11):(1'h0)] wire77;
  wire signed [(5'h12):(1'h0)] wire76;
  wire signed [(3'h4):(1'h0)] wire75;
  wire [(5'h12):(1'h0)] wire74;
  wire signed [(2'h2):(1'h0)] wire73;
  wire [(5'h10):(1'h0)] wire56;
  wire signed [(5'h11):(1'h0)] wire55;
  wire [(4'h8):(1'h0)] wire54;
  wire [(4'ha):(1'h0)] wire53;
  wire [(4'hb):(1'h0)] wire52;
  reg [(4'h8):(1'h0)] reg103 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg102 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg101 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg99 = (1'h0);
  reg [(4'ha):(1'h0)] reg95 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg94 = (1'h0);
  reg [(2'h2):(1'h0)] reg93 = (1'h0);
  reg [(3'h5):(1'h0)] reg90 = (1'h0);
  reg [(3'h6):(1'h0)] reg88 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg87 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg86 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg84 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg82 = (1'h0);
  reg [(4'he):(1'h0)] reg81 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg72 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg68 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg67 = (1'h0);
  reg [(5'h14):(1'h0)] reg66 = (1'h0);
  reg [(3'h4):(1'h0)] reg63 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg61 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg59 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg57 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg104 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar100 = (1'h0);
  reg [(3'h7):(1'h0)] forvar98 = (1'h0);
  reg [(5'h14):(1'h0)] forvar97 = (1'h0);
  reg [(3'h7):(1'h0)] reg96 = (1'h0);
  reg [(5'h10):(1'h0)] forvar92 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg91 = (1'h0);
  reg [(4'he):(1'h0)] forvar89 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar85 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg83 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg80 = (1'h0);
  reg [(5'h13):(1'h0)] forvar79 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar78 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg71 = (1'h0);
  reg signed [(4'he):(1'h0)] reg70 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar69 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg65 = (1'h0);
  reg [(5'h13):(1'h0)] forvar64 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg62 = (1'h0);
  reg [(4'h8):(1'h0)] forvar60 = (1'h0);
  reg [(4'he):(1'h0)] forvar58 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg51 = (1'h0);
  assign y = {wire105,
                 wire77,
                 wire76,
                 wire75,
                 wire74,
                 wire73,
                 wire56,
                 wire55,
                 wire54,
                 wire53,
                 wire52,
                 reg103,
                 reg102,
                 reg101,
                 reg99,
                 reg95,
                 reg94,
                 reg93,
                 reg90,
                 reg88,
                 reg87,
                 reg86,
                 reg84,
                 reg82,
                 reg81,
                 reg72,
                 reg68,
                 reg67,
                 reg66,
                 reg63,
                 reg61,
                 reg59,
                 reg57,
                 reg104,
                 forvar100,
                 forvar98,
                 forvar97,
                 reg96,
                 forvar92,
                 reg91,
                 forvar89,
                 forvar85,
                 reg83,
                 reg80,
                 forvar79,
                 forvar78,
                 reg71,
                 reg70,
                 forvar69,
                 reg65,
                 forvar64,
                 reg62,
                 forvar60,
                 forvar58,
                 reg51,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg51 = wire50[(3'h6):(3'h6)];
    end
  assign wire52 = {wire46[(3'h4):(2'h3)]};
  assign wire53 = $unsigned((^~$unsigned(wire47)));
  assign wire54 = ((~((|$signed(wire48)) ?
                      {wire46} : $unsigned($signed(wire52)))) << $unsigned($unsigned((wire53 >= (~|wire50)))));
  assign wire55 = (^($unsigned((~wire52[(1'h0):(1'h0)])) ?
                      (~^$unsigned(wire46)) : $unsigned($unsigned(wire52[(2'h3):(2'h3)]))));
  assign wire56 = ($unsigned($unsigned($signed($signed(wire50)))) & wire47[(4'h9):(2'h3)]);
  always
    @(posedge clk) begin
      reg57 <= ($signed(({wire46[(3'h4):(1'h1)]} ?
          $signed((~&wire56)) : {$unsigned(wire52),
              (wire55 << wire49)})) > (!wire47));
      for (forvar58 = (1'h0); (forvar58 < (2'h2)); forvar58 = (forvar58 + (1'h1)))
        begin
          reg59 <= ({$unsigned($unsigned({wire53, wire55})), (^~wire54)} ?
              ({$unsigned((wire53 && (8'hb8))),
                  ($signed(wire49) ?
                      (|wire52) : (^~wire50))} >> wire56[(4'hc):(3'h5)]) : (((&(wire46 ?
                      wire48 : wire49)) <= (!$signed(wire53))) ?
                  (({wire47, wire48} >= (wire47 < wire53)) ?
                      $signed(reg57[(4'ha):(1'h1)]) : ((|wire49) << (!wire55))) : (~&((wire52 ^ wire52) ^~ (wire50 + wire46)))));
        end
      for (forvar60 = (1'h0); (forvar60 < (2'h3)); forvar60 = (forvar60 + (1'h1)))
        begin
          if ((($signed($signed(reg59)) >> $unsigned(((forvar60 ?
                  wire46 : wire47) ?
              forvar60[(2'h2):(1'h0)] : $unsigned(reg59)))) != reg59))
            begin
              reg61 <= $signed(($signed(($signed((8'ha4)) == (~&wire50))) == (^(|$unsigned(wire47)))));
              reg62 = reg57;
              reg63 <= (wire48 != $unsigned(wire47));
            end
          else
            begin
              reg62 = (+(~&$unsigned((~&(forvar58 ? wire54 : reg57)))));
            end
          for (forvar64 = (1'h0); (forvar64 < (2'h2)); forvar64 = (forvar64 + (1'h1)))
            begin
              reg65 = (reg62[(4'h8):(3'h7)] ?
                  wire49[(2'h3):(2'h2)] : $unsigned(reg63));
              reg66 <= ($unsigned(reg62) << reg61);
              reg67 <= ($signed((-forvar58)) <= $unsigned($signed({(wire56 ?
                      wire47 : reg65)})));
              reg68 <= reg66;
            end
          for (forvar69 = (1'h0); (forvar69 < (3'h4)); forvar69 = (forvar69 + (1'h1)))
            begin
              reg70 = $unsigned($unsigned(reg67[(1'h0):(1'h0)]));
              reg71 = reg65[(3'h4):(2'h3)];
              reg72 <= {({$unsigned($signed(reg61))} ?
                      wire55[(3'h5):(3'h4)] : (~$unsigned({wire46, forvar64}))),
                  forvar64};
            end
        end
    end
  assign wire73 = (~|(($unsigned($signed(wire55)) == ((wire46 + (8'hbd)) ?
                      $unsigned(reg59) : {reg59, reg72})) <<< ($signed((reg63 ?
                      wire49 : (8'ha7))) == $unsigned($signed(wire47)))));
  assign wire74 = $unsigned((!wire73));
  assign wire75 = reg57[(2'h2):(2'h2)];
  assign wire76 = (|(wire47[(1'h1):(1'h0)] > ((wire47[(3'h7):(1'h1)] ?
                          (wire47 ? wire73 : reg72) : wire54[(1'h1):(1'h0)]) ?
                      wire53[(2'h3):(1'h1)] : $unsigned((~&wire48)))));
  assign wire77 = ({reg66[(4'hd):(3'h6)]} & (8'ha1));
  always
    @(posedge clk) begin
      for (forvar78 = (1'h0); (forvar78 < (1'h1)); forvar78 = (forvar78 + (1'h1)))
        begin
          for (forvar79 = (1'h0); (forvar79 < (3'h4)); forvar79 = (forvar79 + (1'h1)))
            begin
              reg80 = wire53;
              reg81 <= (reg80 ?
                  (wire52[(2'h3):(2'h3)] > reg68[(2'h2):(1'h1)]) : wire56);
              reg82 <= (wire54 <<< $signed(reg63));
              reg83 = ({$unsigned({$signed(reg68)}),
                      ({wire75[(1'h0):(1'h0)]} ?
                          wire48 : $unsigned(wire54[(2'h2):(2'h2)]))} ?
                  $unsigned(reg63[(3'h4):(1'h0)]) : ((reg59 || {((8'hb3) ?
                          wire47 : wire56),
                      reg63[(2'h3):(1'h0)]}) ~^ wire76[(4'hb):(3'h5)]));
              reg84 <= (~(~|(wire56[(3'h6):(3'h4)] != $unsigned($signed((8'ha6))))));
            end
          for (forvar85 = (1'h0); (forvar85 < (1'h0)); forvar85 = (forvar85 + (1'h1)))
            begin
              reg86 <= {(wire74[(4'he):(3'h6)] ?
                      $unsigned(((reg59 + forvar78) <<< reg80)) : ((8'ha2) == wire52)),
                  $unsigned((((wire75 | wire76) ?
                      wire56 : $signed(forvar79)) ^~ (reg61 - $unsigned(wire55))))};
              reg87 <= {wire74};
              reg88 <= forvar78[(3'h5):(2'h3)];
            end
          for (forvar89 = (1'h0); (forvar89 < (2'h2)); forvar89 = (forvar89 + (1'h1)))
            begin
              reg90 <= (&($signed((reg72 + (8'hac))) ?
                  {$signed((-(8'ha9))), (~^$unsigned((8'hbc)))} : reg87));
              reg91 = wire48[(1'h0):(1'h0)];
            end
          for (forvar92 = (1'h0); (forvar92 < (1'h1)); forvar92 = (forvar92 + (1'h1)))
            begin
              reg93 <= reg68;
              reg94 <= (($signed(((8'hb8) ? {reg82} : wire54[(2'h3):(1'h1)])) ?
                      reg83 : wire76) ?
                  reg63 : (-(|(wire47 ?
                      (wire77 ~^ (8'hbb)) : {forvar79, (8'ha7)}))));
              reg95 <= wire75[(1'h1):(1'h0)];
              reg96 = reg93[(2'h2):(1'h0)];
            end
        end
      for (forvar97 = (1'h0); (forvar97 < (1'h0)); forvar97 = (forvar97 + (1'h1)))
        begin
          for (forvar98 = (1'h0); (forvar98 < (2'h3)); forvar98 = (forvar98 + (1'h1)))
            begin
              reg99 <= {reg63,
                  {$unsigned((8'hb5)), $signed((!$signed(forvar92)))}};
            end
          for (forvar100 = (1'h0); (forvar100 < (2'h2)); forvar100 = (forvar100 + (1'h1)))
            begin
              reg101 <= {$unsigned($signed(($signed(wire49) ?
                      reg81[(4'hd):(4'h8)] : (wire55 ? forvar78 : wire56))))};
              reg102 <= {$unsigned((~((forvar79 ^~ forvar100) ?
                      reg57 : (wire50 ? reg91 : reg63)))),
                  (!$unsigned((~^$unsigned(reg88))))};
              reg103 <= $unsigned((8'h9d));
              reg104 = reg93[(1'h0):(1'h0)];
            end
        end
    end
  assign wire105 = (wire76[(2'h2):(1'h0)] ? reg99 : wire50);
endmodule