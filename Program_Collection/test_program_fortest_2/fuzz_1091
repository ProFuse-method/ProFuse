(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param34 = ((^({((8'ha9) >>> (8'ha1))} ? {{(8'ha4), (8'hb8)}, {(8'h9e), (8'hb7)}} : {((8'hbd) ? (8'hb1) : (8'h9e)), ((8'ha5) >> (8'ha8))})) ? {(8'hb0)} : ((+({(8'h9e)} & ((7'h44) > (8'hb7)))) ? ((((8'hab) ? (8'ha0) : (8'hbc)) ? ((8'hbe) || (7'h40)) : ((8'ha0) * (8'hb9))) != (((8'h9d) != (8'ha5)) ? ((8'hb2) ? (8'ha6) : (7'h44)) : (~&(8'hae)))) : ((((8'ha9) ? (8'hb2) : (8'hbd)) ? ((8'ha6) == (8'ha4)) : ((8'hb2) | (8'haf))) ? (((8'hbe) ? (8'ha6) : (8'ha5)) ^~ ((8'hb5) ? (8'hbc) : (7'h41))) : ({(8'hbd), (8'hab)} ? (~&(8'h9c)) : (&(8'ha6)))))))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h12d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire4;
  input wire signed [(5'h15):(1'h0)] wire3;
  input wire signed [(3'h7):(1'h0)] wire2;
  input wire [(2'h2):(1'h0)] wire1;
  input wire signed [(2'h2):(1'h0)] wire0;
  wire signed [(3'h7):(1'h0)] wire9;
  wire [(4'hb):(1'h0)] wire8;
  wire signed [(4'hd):(1'h0)] wire7;
  wire [(5'h11):(1'h0)] wire6;
  wire [(4'he):(1'h0)] wire5;
  reg [(4'h9):(1'h0)] reg32 = (1'h0);
  reg [(5'h10):(1'h0)] reg30 = (1'h0);
  reg [(2'h2):(1'h0)] reg29 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg27 = (1'h0);
  reg [(4'hc):(1'h0)] reg20 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg19 = (1'h0);
  reg [(4'he):(1'h0)] reg17 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg15 = (1'h0);
  reg [(3'h4):(1'h0)] reg12 = (1'h0);
  reg [(3'h5):(1'h0)] reg10 = (1'h0);
  reg [(4'he):(1'h0)] reg33 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar31 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg28 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar26 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar25 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg24 = (1'h0);
  reg [(4'hb):(1'h0)] reg23 = (1'h0);
  reg [(4'hf):(1'h0)] reg22 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar21 = (1'h0);
  reg [(2'h2):(1'h0)] reg18 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar16 = (1'h0);
  reg [(5'h15):(1'h0)] reg14 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar13 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar11 = (1'h0);
  assign y = {wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 reg32,
                 reg30,
                 reg29,
                 reg27,
                 reg20,
                 reg19,
                 reg17,
                 reg15,
                 reg12,
                 reg10,
                 reg33,
                 forvar31,
                 reg28,
                 forvar26,
                 forvar25,
                 reg24,
                 reg23,
                 reg22,
                 forvar21,
                 reg18,
                 forvar16,
                 reg14,
                 forvar13,
                 forvar11,
                 (1'h0)};
  assign wire5 = wire1[(2'h2):(1'h1)];
  assign wire6 = ((+(~&($signed(wire4) ~^ wire4))) ?
                     $unsigned((~|((wire5 ? wire5 : (8'hb9)) ?
                         (wire2 ?
                             wire1 : wire3) : $unsigned(wire3)))) : (((-(wire0 ?
                             wire5 : (8'ha2))) ~^ (|$signed((8'ha8)))) ?
                         ($unsigned($unsigned((8'ha5))) ?
                             $unsigned((^wire0)) : $unsigned((wire5 ?
                                 (8'hac) : (8'hab)))) : ((-(~&wire5)) ?
                             $unsigned((wire0 ?
                                 wire5 : wire4)) : $signed($signed(wire0)))));
  assign wire7 = $unsigned(((wire2 ?
                     $unsigned($unsigned(wire1)) : $signed((!wire5))) >> (^~{{wire5,
                         wire5},
                     $signed(wire0)})));
  assign wire8 = $signed({$unsigned((~^((7'h40) ? wire1 : wire6)))});
  assign wire9 = (8'hbc);
  always
    @(posedge clk) begin
      reg10 <= $signed(({(wire4 ?
              $signed(wire9) : wire2)} == ($unsigned(wire2[(3'h4):(2'h3)]) < wire0)));
      for (forvar11 = (1'h0); (forvar11 < (1'h1)); forvar11 = (forvar11 + (1'h1)))
        begin
          reg12 <= (~{wire8[(4'ha):(3'h7)],
              (({(8'hb3)} ? $signed((7'h42)) : wire8) < (8'hb8))});
          for (forvar13 = (1'h0); (forvar13 < (1'h1)); forvar13 = (forvar13 + (1'h1)))
            begin
              reg14 = $signed(forvar11);
            end
          reg15 <= $unsigned($signed(wire4[(2'h3):(1'h0)]));
          for (forvar16 = (1'h0); (forvar16 < (2'h3)); forvar16 = (forvar16 + (1'h1)))
            begin
              reg17 <= $signed(((~&(forvar11[(2'h3):(2'h3)] ?
                      (reg14 & forvar11) : (~|forvar16))) ?
                  wire7 : (~reg12)));
              reg18 = ($unsigned((($unsigned(wire3) ?
                      $unsigned(wire3) : $signed(wire3)) ?
                  $unsigned(((8'hb5) ?
                      wire5 : reg14)) : $unsigned(wire1))) >= (8'hb3));
              reg19 <= (+(~^($unsigned(wire1[(1'h0):(1'h0)]) <= $signed((~reg18)))));
              reg20 <= ((&reg10[(3'h5):(2'h3)]) != (reg18 ?
                  (((+(8'hbf)) ?
                      $signed(wire2) : {reg17,
                          forvar13}) >> $unsigned(forvar13[(1'h0):(1'h0)])) : ($unsigned((|reg10)) ?
                      (+(reg18 ? reg15 : reg15)) : (^~$unsigned(wire1)))));
            end
          for (forvar21 = (1'h0); (forvar21 < (2'h3)); forvar21 = (forvar21 + (1'h1)))
            begin
              reg22 = (!(+reg20[(4'hc):(2'h2)]));
              reg23 = (~^(!wire0));
              reg24 = ({forvar21} ?
                  $signed(({wire2[(3'h7):(1'h1)]} ?
                      $unsigned(wire7[(4'hb):(1'h1)]) : wire5)) : ((|$signed((reg14 ?
                          reg14 : forvar11))) ?
                      (~^$signed($unsigned(reg17))) : wire6));
            end
        end
      for (forvar25 = (1'h0); (forvar25 < (2'h2)); forvar25 = (forvar25 + (1'h1)))
        begin
          for (forvar26 = (1'h0); (forvar26 < (1'h0)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 <= forvar13[(2'h3):(1'h1)];
              reg28 = (((($unsigned(forvar16) - forvar11) >= ($signed(wire5) ?
                  (8'hbc) : $signed((8'hab)))) <= ($unsigned((8'hbc)) ^ ($signed(wire3) ?
                  (wire6 ?
                      forvar26 : reg14) : $unsigned((8'h9f))))) >>> ({(~(&forvar11)),
                  reg20} && (wire0 ?
                  ($unsigned(wire5) ?
                      reg15[(1'h0):(1'h0)] : reg20[(3'h4):(1'h0)]) : reg23)));
              reg29 <= $signed(((wire0[(1'h1):(1'h1)] + wire5) && reg24[(3'h6):(3'h4)]));
              reg30 <= (8'h9e);
            end
          for (forvar31 = (1'h0); (forvar31 < (1'h1)); forvar31 = (forvar31 + (1'h1)))
            begin
              reg32 <= {((reg22[(3'h5):(1'h0)] ?
                      (reg14 ?
                          $unsigned(wire4) : (wire3 ?
                              (8'ha7) : reg18)) : forvar26[(3'h4):(3'h4)]) - (wire8 ?
                      reg29[(1'h0):(1'h0)] : {(forvar11 * forvar31)})),
                  (($signed((~wire0)) < $signed(forvar26)) ?
                      (($unsigned(reg23) ?
                              (reg27 ? wire5 : (8'hb6)) : $unsigned(wire9)) ?
                          $unsigned($signed(reg24)) : (~&$unsigned(forvar16))) : (~&({reg10,
                          reg27} ^~ wire1[(2'h2):(1'h0)])))};
              reg33 = $unsigned({{(reg28 ? $unsigned(wire5) : $signed(reg20))},
                  (+(((8'hb9) ? reg17 : (8'hb3)) ?
                      $unsigned(wire6) : (forvar21 ? forvar25 : forvar13)))});
            end
        end
    end
endmodule