(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param88 = (~^((|(|((8'ha6) && (8'ha3)))) - ((((8'haf) ? (8'hbf) : (7'h44)) - (~(8'hbc))) ? ({(8'hbe)} ? ((8'hb0) ? (8'hb3) : (8'hab)) : (8'hb6)) : {((8'hbd) ? (7'h43) : (7'h41)), ((8'haf) ? (8'ha6) : (8'ha1))}))))
(y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'h175):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'he):(1'h0)] wire3;
  input wire [(4'h8):(1'h0)] wire2;
  input wire signed [(5'h15):(1'h0)] wire1;
  input wire signed [(4'hc):(1'h0)] wire0;
  wire [(5'h13):(1'h0)] wire87;
  wire signed [(5'h12):(1'h0)] wire85;
  wire signed [(4'hd):(1'h0)] wire8;
  wire signed [(4'hf):(1'h0)] wire7;
  wire [(5'h10):(1'h0)] wire6;
  wire signed [(5'h14):(1'h0)] wire5;
  wire signed [(4'ha):(1'h0)] wire4;
  reg [(3'h7):(1'h0)] reg12 = (1'h0);
  reg [(4'h8):(1'h0)] reg14 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg17 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg18 = (1'h0);
  reg [(4'ha):(1'h0)] reg21 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg24 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg25 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg28 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg30 = (1'h0);
  reg [(4'hd):(1'h0)] reg33 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg32 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg31 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar29 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg27 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar26 = (1'h0);
  reg [(2'h2):(1'h0)] reg23 = (1'h0);
  reg [(2'h3):(1'h0)] forvar22 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar20 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg19 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar16 = (1'h0);
  reg [(4'hc):(1'h0)] forvar15 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg13 = (1'h0);
  reg [(2'h3):(1'h0)] forvar11 = (1'h0);
  reg [(5'h11):(1'h0)] forvar10 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg9 = (1'h0);
  assign y = {wire87,
                 wire85,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 wire4,
                 reg12,
                 reg14,
                 reg17,
                 reg18,
                 reg21,
                 reg24,
                 reg25,
                 reg28,
                 reg30,
                 reg33,
                 reg32,
                 reg31,
                 forvar29,
                 reg27,
                 forvar26,
                 reg23,
                 forvar22,
                 forvar20,
                 reg19,
                 forvar16,
                 forvar15,
                 reg13,
                 forvar11,
                 forvar10,
                 reg9,
                 (1'h0)};
  assign wire4 = ($signed($signed($unsigned((wire2 <<< wire3)))) ?
                     ((|{$unsigned(wire0), {wire1, wire0}}) ?
                         wire2 : (~wire3[(3'h4):(2'h2)])) : {{(wire3[(2'h3):(1'h0)] * $unsigned((8'ha5)))},
                         wire1[(4'h9):(1'h1)]});
  assign wire5 = (wire4 | wire3[(3'h6):(3'h5)]);
  assign wire6 = (~^(|$unsigned(($signed(wire2) && {wire0}))));
  assign wire7 = ((~|$unsigned(((wire3 ?
                     wire3 : (7'h43)) << (wire0 ~^ (8'had))))) < $unsigned((~(8'hb2))));
  assign wire8 = $unsigned(wire3[(4'h8):(3'h4)]);
  always
    @(posedge clk) begin
      reg9 = wire4[(3'h7):(3'h6)];
      for (forvar10 = (1'h0); (forvar10 < (2'h3)); forvar10 = (forvar10 + (1'h1)))
        begin
          for (forvar11 = (1'h0); (forvar11 < (3'h4)); forvar11 = (forvar11 + (1'h1)))
            begin
              reg12 <= ((wire7 >= (wire8 >= ((wire4 ~^ wire2) ?
                      wire2 : (!wire6)))) ?
                  {wire4} : wire1[(4'h9):(1'h0)]);
              reg13 = wire5;
              reg14 <= (&(^$unsigned((~$signed(wire5)))));
            end
        end
      for (forvar15 = (1'h0); (forvar15 < (2'h2)); forvar15 = (forvar15 + (1'h1)))
        begin
          for (forvar16 = (1'h0); (forvar16 < (3'h4)); forvar16 = (forvar16 + (1'h1)))
            begin
              reg17 <= reg14[(1'h0):(1'h0)];
              reg18 <= reg17[(2'h3):(2'h3)];
              reg19 = (-$signed((-$unsigned(reg12[(2'h3):(1'h1)]))));
            end
          for (forvar20 = (1'h0); (forvar20 < (2'h2)); forvar20 = (forvar20 + (1'h1)))
            begin
              reg21 <= $unsigned(wire0[(1'h0):(1'h0)]);
            end
        end
      for (forvar22 = (1'h0); (forvar22 < (2'h2)); forvar22 = (forvar22 + (1'h1)))
        begin
          reg23 = wire3[(3'h7):(3'h5)];
          reg24 <= (^forvar15);
          reg25 <= (!((^(reg18[(3'h4):(1'h1)] ?
              (~reg14) : (reg23 > (8'haf)))) && forvar15));
          for (forvar26 = (1'h0); (forvar26 < (2'h2)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 = (reg17[(1'h1):(1'h0)] == $signed($unsigned(reg13[(4'h8):(3'h6)])));
              reg28 <= $unsigned($unsigned((forvar26[(1'h1):(1'h1)] <<< (reg17 ?
                  (7'h42) : $signed((8'ha7))))));
            end
          for (forvar29 = (1'h0); (forvar29 < (2'h2)); forvar29 = (forvar29 + (1'h1)))
            begin
              reg30 <= reg9[(2'h2):(2'h2)];
              reg31 = (($signed($signed($unsigned(wire3))) | (~|$unsigned(((7'h40) ?
                  reg28 : wire2)))) != reg19[(3'h5):(1'h0)]);
              reg32 = ((((^~(wire4 < (8'hac))) ?
                      ($signed((8'hb6)) ?
                          {reg31} : (^~reg14)) : $signed($unsigned(forvar10))) != reg27) ?
                  (~|((forvar10[(2'h2):(1'h1)] ?
                      forvar11 : forvar15) ~^ ((forvar15 == forvar26) ^ (~&(8'hb1))))) : ({$signed(reg19)} >> ($unsigned(((8'hb0) ^ reg18)) && ($signed(reg24) ?
                      (~reg14) : (reg19 ? reg13 : reg30)))));
              reg33 <= $signed((|wire4[(3'h6):(3'h6)]));
            end
        end
    end
  module34 #() modinst86 (.y(wire85), .wire38(reg24), .clk(clk), .wire39(reg33), .wire35(wire5), .wire37(reg18), .wire36(wire0));
  assign wire87 = ($unsigned((((wire4 & reg12) ?
                      (^wire1) : $unsigned(reg17)) >> $unsigned((8'hb7)))) != $unsigned(reg24));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module34  (y, clk, wire39, wire38, wire37, wire36, wire35);
  output wire [(32'h204):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hb):(1'h0)] wire39;
  input wire signed [(4'hf):(1'h0)] wire38;
  input wire signed [(4'hb):(1'h0)] wire37;
  input wire signed [(4'hb):(1'h0)] wire36;
  input wire signed [(3'h4):(1'h0)] wire35;
  wire [(4'hd):(1'h0)] wire65;
  wire [(5'h15):(1'h0)] wire40;
  reg [(4'hb):(1'h0)] reg80 = (1'h0);
  reg [(5'h13):(1'h0)] reg78 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg73 = (1'h0);
  reg [(4'ha):(1'h0)] reg72 = (1'h0);
  reg [(5'h13):(1'h0)] reg71 = (1'h0);
  reg [(4'he):(1'h0)] reg69 = (1'h0);
  reg [(5'h11):(1'h0)] reg68 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg63 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg62 = (1'h0);
  reg [(5'h12):(1'h0)] reg61 = (1'h0);
  reg [(4'hb):(1'h0)] reg60 = (1'h0);
  reg [(4'h9):(1'h0)] reg58 = (1'h0);
  reg [(4'hf):(1'h0)] reg57 = (1'h0);
  reg [(4'h8):(1'h0)] reg56 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg52 = (1'h0);
  reg [(4'hd):(1'h0)] reg51 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg48 = (1'h0);
  reg [(4'hb):(1'h0)] reg47 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg45 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg43 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg42 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg84 = (1'h0);
  reg [(4'ha):(1'h0)] reg83 = (1'h0);
  reg [(4'h8):(1'h0)] reg82 = (1'h0);
  reg [(4'h8):(1'h0)] forvar81 = (1'h0);
  reg signed [(4'he):(1'h0)] reg79 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg77 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg76 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar75 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg74 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar70 = (1'h0);
  reg [(2'h3):(1'h0)] forvar67 = (1'h0);
  reg [(4'h8):(1'h0)] forvar66 = (1'h0);
  reg [(4'h8):(1'h0)] reg64 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg59 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar57 = (1'h0);
  reg [(4'hd):(1'h0)] reg55 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg54 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg53 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg50 = (1'h0);
  reg [(4'h9):(1'h0)] reg49 = (1'h0);
  reg [(4'hd):(1'h0)] reg46 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar44 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar41 = (1'h0);
  assign y = {wire65,
                 wire40,
                 reg80,
                 reg78,
                 reg73,
                 reg72,
                 reg71,
                 reg69,
                 reg68,
                 reg63,
                 reg62,
                 reg61,
                 reg60,
                 reg58,
                 reg57,
                 reg56,
                 reg52,
                 reg51,
                 reg48,
                 reg47,
                 reg45,
                 reg43,
                 reg42,
                 reg84,
                 reg83,
                 reg82,
                 forvar81,
                 reg79,
                 reg77,
                 reg76,
                 forvar75,
                 reg74,
                 forvar70,
                 forvar67,
                 forvar66,
                 reg64,
                 reg59,
                 forvar57,
                 reg55,
                 reg54,
                 reg53,
                 reg50,
                 reg49,
                 reg46,
                 forvar44,
                 forvar41,
                 (1'h0)};
  assign wire40 = $signed((wire35 ?
                      (-$unsigned({wire35})) : $unsigned(wire36)));
  always
    @(posedge clk) begin
      for (forvar41 = (1'h0); (forvar41 < (2'h2)); forvar41 = (forvar41 + (1'h1)))
        begin
          reg42 <= wire39[(2'h2):(1'h1)];
          reg43 <= ($unsigned(wire37) & $unsigned(forvar41[(2'h3):(2'h3)]));
          for (forvar44 = (1'h0); (forvar44 < (2'h3)); forvar44 = (forvar44 + (1'h1)))
            begin
              reg45 <= $signed(wire39);
              reg46 = wire39;
            end
          reg47 <= reg43;
          if (wire35[(3'h4):(2'h2)])
            begin
              reg48 <= {$signed({reg47[(3'h7):(1'h0)]})};
              reg49 = $signed(($unsigned(($signed(wire38) ?
                  (-reg45) : (+wire35))) >= reg45[(1'h1):(1'h1)]));
              reg50 = wire38[(3'h5):(1'h1)];
              reg51 <= $signed((($unsigned(reg48) ?
                      {$unsigned(reg50),
                          (reg45 - wire35)} : (reg50 & $signed((8'hb4)))) ?
                  {(reg48 ? {reg42, (7'h43)} : (reg46 > (8'hbf)))} : wire37));
              reg52 <= ({reg42[(2'h2):(1'h0)],
                  (8'had)} ^~ ((((-reg49) ^~ $unsigned(forvar41)) ?
                  wire35 : $signed((8'h9c))) || wire39));
            end
          else
            begin
              reg48 <= reg50[(2'h2):(1'h1)];
              reg51 <= $unsigned($unsigned($unsigned(($unsigned(reg43) ~^ reg43))));
              reg53 = (reg43 ? wire36 : reg50[(1'h1):(1'h1)]);
              reg54 = reg51[(4'hd):(4'hb)];
              reg55 = (^~(($unsigned($unsigned(wire35)) ?
                      $signed($unsigned(wire38)) : ((reg54 ~^ reg48) ?
                          {reg51} : reg45)) ?
                  ($unsigned(reg48[(1'h0):(1'h0)]) * forvar44[(3'h5):(3'h4)]) : $signed((8'had))));
            end
        end
      reg56 <= $signed(($signed($unsigned($signed(forvar44))) ^~ reg55));
      if ((8'hb9))
        begin
          reg57 <= $signed(($unsigned($signed($signed(reg49))) ?
              $signed($unsigned({(7'h42)})) : wire40));
        end
      else
        begin
          for (forvar57 = (1'h0); (forvar57 < (1'h0)); forvar57 = (forvar57 + (1'h1)))
            begin
              reg58 <= reg49[(4'h9):(4'h8)];
              reg59 = (reg45 << ((reg57[(1'h0):(1'h0)] ?
                  wire37 : $unsigned((~reg42))) & wire38[(4'h8):(1'h0)]));
              reg60 <= $signed($unsigned((^(forvar57 | $unsigned(wire39)))));
              reg61 <= (~|$signed(wire39));
              reg62 <= $signed(reg47);
            end
        end
      reg63 <= (&reg45);
      reg64 = wire36;
    end
  assign wire65 = {$unsigned($signed((reg56 != wire35))),
                      {(^~reg48),
                          ($signed(wire37[(4'h8):(1'h1)]) ?
                              ($signed(wire35) + $unsigned(reg47)) : reg43)}};
  always
    @(posedge clk) begin
      for (forvar66 = (1'h0); (forvar66 < (3'h4)); forvar66 = (forvar66 + (1'h1)))
        begin
          for (forvar67 = (1'h0); (forvar67 < (1'h1)); forvar67 = (forvar67 + (1'h1)))
            begin
              reg68 <= {(reg51[(2'h3):(1'h1)] ?
                      {$unsigned((^forvar67)),
                          wire65[(4'hc):(4'hb)]} : reg60[(3'h4):(1'h0)]),
                  (8'hb5)};
              reg69 <= (8'hb9);
            end
          for (forvar70 = (1'h0); (forvar70 < (2'h3)); forvar70 = (forvar70 + (1'h1)))
            begin
              reg71 <= (8'ha8);
              reg72 <= (((~^$unsigned((~&reg60))) && forvar70) << reg52[(4'hf):(3'h4)]);
              reg73 <= (reg69[(1'h0):(1'h0)] ?
                  $unsigned(reg52[(2'h2):(1'h0)]) : $signed((wire38 ?
                      (^(+reg69)) : $signed($unsigned((8'hbb))))));
              reg74 = ($signed($signed($signed((reg61 | reg57)))) ?
                  $unsigned((+(^$signed(wire39)))) : reg73);
            end
          for (forvar75 = (1'h0); (forvar75 < (2'h3)); forvar75 = (forvar75 + (1'h1)))
            begin
              reg76 = (((((!forvar67) ?
                      (reg73 > reg43) : (reg57 ? wire35 : (8'hb0))) ?
                  reg60[(3'h7):(3'h5)] : reg47[(3'h5):(2'h3)]) < reg43[(4'hd):(2'h3)]) | forvar67[(1'h0):(1'h0)]);
              reg77 = wire36[(2'h2):(2'h2)];
              reg78 <= $signed($signed($unsigned(wire35)));
              reg79 = reg51;
              reg80 <= ($signed($signed((&reg74[(3'h6):(2'h3)]))) ?
                  ($unsigned($signed((wire37 == forvar75))) | $unsigned($signed($signed(reg51)))) : reg45[(3'h6):(1'h0)]);
            end
          for (forvar81 = (1'h0); (forvar81 < (3'h4)); forvar81 = (forvar81 + (1'h1)))
            begin
              reg82 = (-{$signed($unsigned((reg79 <<< reg71)))});
              reg83 = $signed(reg61[(4'ha):(4'h9)]);
              reg84 = reg62[(3'h4):(1'h1)];
            end
        end
    end
endmodule