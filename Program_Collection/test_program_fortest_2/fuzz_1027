(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param308 = (&(((((7'h41) ? (8'hb3) : (8'hb3)) ? (^(8'had)) : ((8'ha7) ? (8'hb0) : (7'h43))) >= (((7'h41) ? (8'hba) : (8'ha2)) << {(8'ha4)})) ? {(((8'hb9) ? (7'h40) : (7'h44)) ? ((7'h40) ^~ (8'ha0)) : ((8'h9c) ? (7'h42) : (8'hbd)))} : (({(8'ha3), (8'hab)} + (^(7'h40))) ? (((8'hbf) ? (8'hab) : (7'h41)) >> ((7'h43) ? (7'h40) : (8'hab))) : (((8'hbb) ? (8'ha5) : (7'h44)) ? ((8'h9d) - (8'hb0)) : ((8'hbc) ^ (8'hbb)))))), 
parameter param309 = ((7'h41) <<< (~&(&((~&(7'h42)) ? ((8'hba) ? param308 : param308) : (~param308))))))
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h548):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(2'h3):(1'h0)] wire0;
  input wire signed [(4'h8):(1'h0)] wire1;
  input wire [(5'h15):(1'h0)] wire2;
  input wire [(5'h15):(1'h0)] wire3;
  wire signed [(2'h3):(1'h0)] wire307;
  wire [(5'h14):(1'h0)] wire306;
  wire [(5'h15):(1'h0)] wire305;
  wire [(4'hc):(1'h0)] wire256;
  wire [(3'h6):(1'h0)] wire253;
  wire signed [(4'he):(1'h0)] wire252;
  wire signed [(3'h5):(1'h0)] wire251;
  wire [(4'h9):(1'h0)] wire250;
  wire signed [(4'ha):(1'h0)] wire249;
  wire signed [(4'hc):(1'h0)] wire248;
  wire [(4'hc):(1'h0)] wire224;
  wire signed [(5'h15):(1'h0)] wire223;
  wire signed [(5'h13):(1'h0)] wire198;
  wire signed [(5'h13):(1'h0)] wire4;
  wire [(4'ha):(1'h0)] wire5;
  wire [(5'h11):(1'h0)] wire131;
  wire [(4'hc):(1'h0)] wire196;
  reg signed [(5'h12):(1'h0)] reg304 = (1'h0);
  reg [(2'h3):(1'h0)] reg303 = (1'h0);
  reg signed [(4'he):(1'h0)] reg302 = (1'h0);
  reg [(5'h10):(1'h0)] reg301 = (1'h0);
  reg [(4'hf):(1'h0)] reg299 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg297 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg293 = (1'h0);
  reg [(4'hf):(1'h0)] reg289 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg286 = (1'h0);
  reg [(4'hc):(1'h0)] reg284 = (1'h0);
  reg [(5'h10):(1'h0)] reg280 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg278 = (1'h0);
  reg [(3'h5):(1'h0)] reg277 = (1'h0);
  reg [(4'hb):(1'h0)] reg276 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg274 = (1'h0);
  reg [(5'h10):(1'h0)] reg272 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg271 = (1'h0);
  reg [(2'h3):(1'h0)] reg270 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg269 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg267 = (1'h0);
  reg [(4'h9):(1'h0)] reg263 = (1'h0);
  reg [(5'h14):(1'h0)] reg262 = (1'h0);
  reg [(3'h6):(1'h0)] reg260 = (1'h0);
  reg [(5'h11):(1'h0)] reg259 = (1'h0);
  reg [(3'h6):(1'h0)] reg254 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg246 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg245 = (1'h0);
  reg [(4'hf):(1'h0)] reg244 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg240 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg233 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg231 = (1'h0);
  reg [(3'h7):(1'h0)] reg229 = (1'h0);
  reg [(4'h8):(1'h0)] reg228 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg226 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg222 = (1'h0);
  reg [(4'hd):(1'h0)] reg221 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg220 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg216 = (1'h0);
  reg [(4'hc):(1'h0)] reg213 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg211 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg207 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg206 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg205 = (1'h0);
  reg [(5'h11):(1'h0)] reg204 = (1'h0);
  reg [(5'h13):(1'h0)] reg202 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar300 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar298 = (1'h0);
  reg [(5'h12):(1'h0)] reg296 = (1'h0);
  reg [(5'h13):(1'h0)] reg295 = (1'h0);
  reg [(5'h15):(1'h0)] forvar294 = (1'h0);
  reg signed [(4'he):(1'h0)] reg292 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar291 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg290 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg288 = (1'h0);
  reg [(5'h14):(1'h0)] reg287 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg285 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar283 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar282 = (1'h0);
  reg signed [(4'he):(1'h0)] reg281 = (1'h0);
  reg [(2'h2):(1'h0)] reg279 = (1'h0);
  reg [(2'h3):(1'h0)] forvar275 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar273 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar268 = (1'h0);
  reg [(2'h3):(1'h0)] reg266 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar265 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar264 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg261 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar258 = (1'h0);
  reg [(3'h7):(1'h0)] forvar257 = (1'h0);
  reg signed [(4'he):(1'h0)] reg255 = (1'h0);
  reg [(4'hb):(1'h0)] reg247 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar243 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg242 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg241 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg239 = (1'h0);
  reg [(3'h5):(1'h0)] reg238 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg237 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar236 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg235 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar234 = (1'h0);
  reg signed [(4'he):(1'h0)] reg232 = (1'h0);
  reg [(4'hc):(1'h0)] reg230 = (1'h0);
  reg [(3'h6):(1'h0)] reg227 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar225 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg219 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar218 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg217 = (1'h0);
  reg [(5'h10):(1'h0)] forvar215 = (1'h0);
  reg [(5'h11):(1'h0)] reg214 = (1'h0);
  reg [(3'h6):(1'h0)] reg212 = (1'h0);
  reg [(2'h3):(1'h0)] reg210 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar209 = (1'h0);
  reg [(3'h5):(1'h0)] forvar208 = (1'h0);
  reg [(4'hf):(1'h0)] forvar203 = (1'h0);
  reg [(4'hc):(1'h0)] forvar201 = (1'h0);
  reg [(5'h14):(1'h0)] reg200 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar199 = (1'h0);
  assign y = {wire307,
                 wire306,
                 wire305,
                 wire256,
                 wire253,
                 wire252,
                 wire251,
                 wire250,
                 wire249,
                 wire248,
                 wire224,
                 wire223,
                 wire198,
                 wire4,
                 wire5,
                 wire131,
                 wire196,
                 reg304,
                 reg303,
                 reg302,
                 reg301,
                 reg299,
                 reg297,
                 reg293,
                 reg289,
                 reg286,
                 reg284,
                 reg280,
                 reg278,
                 reg277,
                 reg276,
                 reg274,
                 reg272,
                 reg271,
                 reg270,
                 reg269,
                 reg267,
                 reg263,
                 reg262,
                 reg260,
                 reg259,
                 reg254,
                 reg246,
                 reg245,
                 reg244,
                 reg240,
                 reg233,
                 reg231,
                 reg229,
                 reg228,
                 reg226,
                 reg222,
                 reg221,
                 reg220,
                 reg216,
                 reg213,
                 reg211,
                 reg207,
                 reg206,
                 reg205,
                 reg204,
                 reg202,
                 forvar300,
                 forvar298,
                 reg296,
                 reg295,
                 forvar294,
                 reg292,
                 forvar291,
                 reg290,
                 reg288,
                 reg287,
                 reg285,
                 forvar283,
                 forvar282,
                 reg281,
                 reg279,
                 forvar275,
                 forvar273,
                 forvar268,
                 reg266,
                 forvar265,
                 forvar264,
                 reg261,
                 forvar258,
                 forvar257,
                 reg255,
                 reg247,
                 forvar243,
                 reg242,
                 reg241,
                 reg239,
                 reg238,
                 reg237,
                 forvar236,
                 reg235,
                 forvar234,
                 reg232,
                 reg230,
                 reg227,
                 forvar225,
                 reg219,
                 forvar218,
                 reg217,
                 forvar215,
                 reg214,
                 reg212,
                 reg210,
                 forvar209,
                 forvar208,
                 forvar203,
                 forvar201,
                 reg200,
                 forvar199,
                 (1'h0)};
  assign wire4 = wire3;
  assign wire5 = wire4;
  module6 #() modinst132 (wire131, clk, wire3, wire1, wire4, wire5);
  module133 #() modinst197 (wire196, clk, wire3, wire2, wire1, wire4, wire131);
  assign wire198 = $unsigned($signed($signed($unsigned((wire4 ?
                       wire131 : wire3)))));
  always
    @(posedge clk) begin
      for (forvar199 = (1'h0); (forvar199 < (3'h4)); forvar199 = (forvar199 + (1'h1)))
        begin
          reg200 = (^$signed((~^$signed((wire2 < wire198)))));
          for (forvar201 = (1'h0); (forvar201 < (2'h3)); forvar201 = (forvar201 + (1'h1)))
            begin
              reg202 <= $signed(wire198);
            end
          for (forvar203 = (1'h0); (forvar203 < (2'h3)); forvar203 = (forvar203 + (1'h1)))
            begin
              reg204 <= (!wire0);
              reg205 <= ((((8'haa) ? {forvar199} : wire198) ?
                  (((reg202 ? wire198 : reg200) + (~wire2)) ?
                      wire2[(1'h0):(1'h0)] : forvar201) : (({wire196} < reg202[(4'ha):(1'h1)]) <= $signed($unsigned((8'hb6))))) + (&(((wire5 ^ forvar201) ?
                      wire2 : $unsigned(reg202)) ?
                  $signed($signed(wire2)) : {{wire2, (8'hbf)}})));
              reg206 <= $unsigned(((((~&wire5) != wire196[(4'hb):(3'h4)]) | $unsigned(wire5)) != $unsigned((!$signed((8'hb8))))));
              reg207 <= (&((((reg204 & forvar201) ?
                      (reg204 ? wire2 : reg206) : (^~reg205)) < (8'h9c)) ?
                  wire4 : (($signed(forvar201) ?
                      {wire0} : forvar201[(2'h3):(2'h3)]) || (-$signed(forvar201)))));
            end
        end
      for (forvar208 = (1'h0); (forvar208 < (1'h1)); forvar208 = (forvar208 + (1'h1)))
        begin
          for (forvar209 = (1'h0); (forvar209 < (1'h0)); forvar209 = (forvar209 + (1'h1)))
            begin
              reg210 = (($signed($signed((&wire198))) && $unsigned(reg205[(1'h1):(1'h1)])) ?
                  $signed($unsigned(reg205[(2'h3):(2'h3)])) : (!($signed((-reg200)) <<< wire198[(1'h1):(1'h0)])));
              reg211 <= $signed((~wire3[(3'h7):(3'h4)]));
              reg212 = (~$unsigned(((~|{wire196}) & $unsigned($signed(forvar208)))));
              reg213 <= $signed(reg207[(2'h2):(2'h2)]);
              reg214 = wire4;
            end
          for (forvar215 = (1'h0); (forvar215 < (1'h0)); forvar215 = (forvar215 + (1'h1)))
            begin
              reg216 <= (((((reg206 && reg205) ? (reg212 >>> reg200) : reg213) ?
                  wire3 : ((+wire196) <= $unsigned(forvar199))) + $unsigned((8'hbd))) << wire0);
              reg217 = $unsigned(wire0[(2'h2):(1'h1)]);
            end
          for (forvar218 = (1'h0); (forvar218 < (2'h3)); forvar218 = (forvar218 + (1'h1)))
            begin
              reg219 = $unsigned($unsigned(((forvar208 || (8'hae)) + ({wire196} != (^~reg206)))));
              reg220 <= $signed(forvar203);
              reg221 <= (|(forvar209 ?
                  wire196 : {$unsigned($unsigned(wire2))}));
            end
          reg222 <= wire198;
        end
    end
  assign wire223 = $signed($signed($signed(((&wire3) | reg221[(3'h4):(2'h2)]))));
  assign wire224 = {(~$unsigned(reg205[(1'h0):(1'h0)]))};
  always
    @(posedge clk) begin
      if (($signed((wire223[(5'h11):(4'h8)] || wire223[(5'h13):(2'h3)])) ?
          reg216 : $unsigned(wire196)))
        begin
          for (forvar225 = (1'h0); (forvar225 < (3'h4)); forvar225 = (forvar225 + (1'h1)))
            begin
              reg226 <= $signed($signed({reg211[(1'h1):(1'h1)]}));
              reg227 = (wire198[(2'h3):(2'h2)] ?
                  ($unsigned($unsigned(wire4[(3'h4):(1'h1)])) ?
                      wire131[(4'hd):(4'hb)] : (wire196 ?
                          $unsigned((+reg220)) : (^~(forvar225 ?
                              reg207 : (8'hb2))))) : reg204[(3'h7):(3'h5)]);
              reg228 <= (^wire0);
              reg229 <= $unsigned($unsigned(reg211));
            end
        end
      else
        begin
          for (forvar225 = (1'h0); (forvar225 < (3'h4)); forvar225 = (forvar225 + (1'h1)))
            begin
              reg227 = reg222;
              reg228 <= reg229[(2'h3):(2'h2)];
              reg230 = $signed(wire223);
              reg231 <= $unsigned(wire4);
              reg232 = (8'ha0);
            end
        end
      reg233 <= reg207[(1'h1):(1'h1)];
      for (forvar234 = (1'h0); (forvar234 < (2'h3)); forvar234 = (forvar234 + (1'h1)))
        begin
          reg235 = reg233[(4'h8):(2'h3)];
          for (forvar236 = (1'h0); (forvar236 < (2'h3)); forvar236 = (forvar236 + (1'h1)))
            begin
              reg237 = ($signed((~|($unsigned(wire3) ?
                  (8'hae) : (reg207 - reg205)))) - (~&$signed((&(~&wire5)))));
            end
          if ((^~{(~&(wire196 ?
                  ((8'hb1) ? reg206 : reg237) : (forvar234 ?
                      reg207 : reg221)))}))
            begin
              reg238 = reg211;
              reg239 = forvar236[(3'h5):(1'h1)];
              reg240 <= reg232;
              reg241 = $unsigned(((((reg204 ? reg239 : forvar225) ?
                      (reg211 ? (8'ha3) : wire2) : $unsigned(reg240)) ?
                  ((~^reg235) | reg206) : reg207[(1'h1):(1'h0)]) & $signed(((wire1 ?
                      reg220 : reg226) ?
                  wire198 : ((8'ha7) ? (7'h42) : forvar234)))));
            end
          else
            begin
              reg240 <= (forvar225[(3'h5):(3'h4)] << ((~$unsigned((reg205 ^~ forvar234))) == (($signed(wire224) ?
                  {wire3} : reg237) - (|(reg213 ? reg226 : forvar225)))));
            end
          reg242 = (wire0[(1'h0):(1'h0)] != {reg237[(2'h2):(1'h1)]});
          for (forvar243 = (1'h0); (forvar243 < (2'h2)); forvar243 = (forvar243 + (1'h1)))
            begin
              reg244 <= wire131[(4'ha):(2'h3)];
              reg245 <= ($unsigned($signed(reg216)) ?
                  reg205 : $signed((~&(|(+reg202)))));
              reg246 <= $unsigned(reg228);
            end
        end
      reg247 = $signed(((~^wire2[(3'h6):(3'h4)]) ?
          (((reg232 + reg207) ? (reg226 | wire5) : (&(8'hab))) ?
              reg244[(4'hb):(3'h7)] : reg221[(4'hd):(4'h9)]) : reg235));
    end
  assign wire248 = (reg222[(1'h1):(1'h0)] >> reg211);
  assign wire249 = wire248;
  assign wire250 = $unsigned(reg244[(4'hf):(4'hf)]);
  assign wire251 = ($unsigned(wire131) & reg211[(1'h0):(1'h0)]);
  assign wire252 = (wire223 << (($unsigned({reg220, (7'h41)}) ?
                           ($unsigned(reg228) ?
                               $unsigned(wire251) : ((8'hb2) <= wire198)) : $signed($unsigned(reg222))) ?
                       reg206 : (~|(((8'ha4) == (8'hbb)) ^ $signed(reg240)))));
  assign wire253 = $unsigned({reg202,
                       $unsigned($signed(wire5[(3'h6):(2'h3)]))});
  always
    @(posedge clk) begin
      reg254 <= ($signed($unsigned((^(reg231 ^ reg228)))) ?
          reg211[(2'h2):(2'h2)] : (7'h43));
      reg255 = $signed((&(8'hb8)));
    end
  assign wire256 = (!$unsigned({wire248[(3'h5):(3'h4)]}));
  always
    @(posedge clk) begin
      for (forvar257 = (1'h0); (forvar257 < (3'h4)); forvar257 = (forvar257 + (1'h1)))
        begin
          for (forvar258 = (1'h0); (forvar258 < (1'h0)); forvar258 = (forvar258 + (1'h1)))
            begin
              reg259 <= $unsigned((((wire223[(5'h11):(1'h1)] != wire251) && (!$signed(reg213))) & reg204));
              reg260 <= (-{reg205[(2'h2):(2'h2)]});
              reg261 = $unsigned(wire253[(2'h3):(2'h3)]);
              reg262 <= ($unsigned((((reg207 < reg254) ?
                      $unsigned((8'ha7)) : (&reg260)) ?
                  (reg216[(4'h9):(2'h2)] ?
                      (reg226 ?
                          reg254 : wire0) : reg216) : (~|(-reg221)))) - ($unsigned(reg246[(3'h6):(1'h1)]) ?
                  $signed((~^((8'hab) ?
                      reg254 : wire251))) : $signed((wire256[(4'h8):(3'h7)] ?
                      (^wire253) : reg261))));
            end
        end
      reg263 <= reg229;
      for (forvar264 = (1'h0); (forvar264 < (2'h3)); forvar264 = (forvar264 + (1'h1)))
        begin
          for (forvar265 = (1'h0); (forvar265 < (2'h2)); forvar265 = (forvar265 + (1'h1)))
            begin
              reg266 = (8'h9d);
              reg267 <= ((wire131 >>> $unsigned((reg229[(3'h7):(3'h6)] == $signed(forvar258)))) >>> $signed(reg202));
            end
          for (forvar268 = (1'h0); (forvar268 < (1'h0)); forvar268 = (forvar268 + (1'h1)))
            begin
              reg269 <= reg266[(1'h0):(1'h0)];
              reg270 <= (-(8'hb6));
              reg271 <= reg229[(1'h1):(1'h1)];
              reg272 <= ($unsigned($signed($signed((reg245 + reg254)))) ?
                  (|{$unsigned($signed(reg260))}) : reg240[(1'h1):(1'h1)]);
            end
          for (forvar273 = (1'h0); (forvar273 < (1'h1)); forvar273 = (forvar273 + (1'h1)))
            begin
              reg274 <= ((reg269 ?
                  ({$signed(reg206),
                      (reg211 ?
                          (8'hbf) : (8'ha0))} != {(reg220 > wire1)}) : (!(^reg263))) <= reg207);
            end
          for (forvar275 = (1'h0); (forvar275 < (2'h2)); forvar275 = (forvar275 + (1'h1)))
            begin
              reg276 <= reg228;
              reg277 <= (~^(wire252[(3'h5):(2'h2)] ?
                  wire131[(3'h5):(2'h2)] : reg266[(2'h2):(2'h2)]));
              reg278 <= (^~reg221);
              reg279 = (7'h43);
              reg280 <= (reg260 < (~{$signed(wire131[(3'h7):(2'h2)])}));
            end
        end
    end
  always
    @(posedge clk) begin
      reg281 = (($signed($unsigned($unsigned(wire248))) && $unsigned((reg278[(2'h3):(2'h3)] ?
          {reg254,
              reg244} : $signed(reg244)))) < (-$signed(wire198[(2'h3):(1'h1)])));
      for (forvar282 = (1'h0); (forvar282 < (1'h1)); forvar282 = (forvar282 + (1'h1)))
        begin
          for (forvar283 = (1'h0); (forvar283 < (1'h1)); forvar283 = (forvar283 + (1'h1)))
            begin
              reg284 <= reg269;
              reg285 = (~^$signed((reg205 | reg222)));
              reg286 <= ((^({(reg244 ^~ wire4),
                  (reg277 ?
                      wire4 : reg280)} & reg245[(3'h6):(3'h6)])) && (^(8'hbb)));
              reg287 = ((reg202 - $signed((!$signed(reg231)))) <<< (&reg259));
              reg288 = (reg272[(4'h9):(3'h4)] * reg222[(1'h1):(1'h0)]);
            end
          reg289 <= $unsigned({($signed($unsigned(reg277)) ?
                  ($unsigned(reg233) & {wire223}) : reg277),
              ($signed({wire251}) > reg226[(2'h3):(1'h0)])});
          reg290 = reg289[(4'hd):(2'h3)];
          for (forvar291 = (1'h0); (forvar291 < (1'h0)); forvar291 = (forvar291 + (1'h1)))
            begin
              reg292 = $signed((!(((~reg226) | reg262[(1'h0):(1'h0)]) & {{reg263},
                  forvar291[(3'h4):(3'h4)]})));
              reg293 <= (reg292 ?
                  ((~^(~(forvar283 ? reg204 : wire251))) ?
                      {$unsigned((^wire2)),
                          $signed((reg233 < reg231))} : $unsigned($signed($signed(reg288)))) : reg220[(5'h10):(4'h9)]);
            end
          for (forvar294 = (1'h0); (forvar294 < (2'h3)); forvar294 = (forvar294 + (1'h1)))
            begin
              reg295 = $signed($signed((&$signed($unsigned(wire2)))));
              reg296 = reg221;
              reg297 <= reg233;
            end
        end
      for (forvar298 = (1'h0); (forvar298 < (2'h3)); forvar298 = (forvar298 + (1'h1)))
        begin
          reg299 <= (($signed((&(!wire249))) ~^ ($unsigned(reg207[(1'h1):(1'h0)]) ?
                  reg222 : (^~$unsigned(reg271)))) ?
              ($unsigned($signed($signed(forvar282))) + reg213[(3'h6):(2'h3)]) : (-wire223[(5'h14):(2'h3)]));
          for (forvar300 = (1'h0); (forvar300 < (2'h2)); forvar300 = (forvar300 + (1'h1)))
            begin
              reg301 <= (reg267[(4'h9):(3'h6)] ^ reg293[(5'h14):(3'h7)]);
              reg302 <= ($signed((wire198 ?
                  $signed(wire3) : (7'h43))) << ((wire224[(3'h6):(1'h1)] && $unsigned((wire250 ?
                  reg277 : wire4))) == ($unsigned(reg263[(1'h0):(1'h0)]) <= (8'hae))));
              reg303 <= (~^((~&{wire224}) ?
                  $signed((wire250 ?
                      reg293[(4'hc):(3'h6)] : $unsigned((8'hbb)))) : ((wire3[(3'h6):(2'h2)] ^ {wire250,
                      (8'hb2)}) ^~ $signed(reg205[(2'h3):(1'h0)]))));
            end
          reg304 <= reg269[(4'h9):(1'h1)];
        end
    end
  assign wire305 = reg271[(1'h1):(1'h1)];
  assign wire306 = ((reg229[(3'h4):(3'h4)] ^~ (+$unsigned({wire196,
                       (8'hae)}))) <= $unsigned($signed(wire248[(4'ha):(3'h7)])));
  assign wire307 = wire306[(5'h14):(4'he)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module133
#(parameter param195 = (~^(|(|(((8'hb2) ? (8'ha1) : (8'ha3)) ? {(8'hb4)} : {(8'hbb)})))))
(y, clk, wire138, wire137, wire136, wire135, wire134);
  output wire [(32'h2a0):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h15):(1'h0)] wire138;
  input wire [(4'ha):(1'h0)] wire137;
  input wire [(3'h6):(1'h0)] wire136;
  input wire signed [(4'h9):(1'h0)] wire135;
  input wire [(5'h11):(1'h0)] wire134;
  wire signed [(5'h10):(1'h0)] wire156;
  wire [(4'he):(1'h0)] wire155;
  wire signed [(4'ha):(1'h0)] wire154;
  wire signed [(5'h11):(1'h0)] wire139;
  reg [(5'h10):(1'h0)] reg194 = (1'h0);
  reg [(5'h11):(1'h0)] reg193 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg191 = (1'h0);
  reg [(4'hc):(1'h0)] reg190 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg189 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg188 = (1'h0);
  reg [(5'h14):(1'h0)] reg186 = (1'h0);
  reg [(4'h9):(1'h0)] reg185 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg183 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg182 = (1'h0);
  reg [(4'hd):(1'h0)] reg177 = (1'h0);
  reg [(4'hd):(1'h0)] reg176 = (1'h0);
  reg [(5'h10):(1'h0)] reg175 = (1'h0);
  reg [(5'h15):(1'h0)] reg172 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg171 = (1'h0);
  reg [(4'h9):(1'h0)] reg170 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg168 = (1'h0);
  reg [(3'h5):(1'h0)] reg167 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg166 = (1'h0);
  reg [(2'h2):(1'h0)] reg162 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg161 = (1'h0);
  reg [(4'hf):(1'h0)] reg159 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg157 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg153 = (1'h0);
  reg [(5'h13):(1'h0)] reg150 = (1'h0);
  reg [(4'ha):(1'h0)] reg142 = (1'h0);
  reg [(4'hc):(1'h0)] reg192 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar187 = (1'h0);
  reg [(5'h10):(1'h0)] reg184 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg181 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg180 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar179 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg178 = (1'h0);
  reg signed [(4'he):(1'h0)] reg174 = (1'h0);
  reg [(4'h9):(1'h0)] forvar173 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg169 = (1'h0);
  reg [(3'h6):(1'h0)] forvar165 = (1'h0);
  reg [(5'h13):(1'h0)] reg164 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg163 = (1'h0);
  reg [(5'h15):(1'h0)] reg160 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar158 = (1'h0);
  reg [(3'h5):(1'h0)] reg152 = (1'h0);
  reg [(2'h2):(1'h0)] reg151 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg149 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar148 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar147 = (1'h0);
  reg [(4'hb):(1'h0)] reg146 = (1'h0);
  reg [(3'h6):(1'h0)] reg145 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg144 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg143 = (1'h0);
  reg [(3'h4):(1'h0)] forvar141 = (1'h0);
  reg [(2'h2):(1'h0)] forvar140 = (1'h0);
  assign y = {wire156,
                 wire155,
                 wire154,
                 wire139,
                 reg194,
                 reg193,
                 reg191,
                 reg190,
                 reg189,
                 reg188,
                 reg186,
                 reg185,
                 reg183,
                 reg182,
                 reg177,
                 reg176,
                 reg175,
                 reg172,
                 reg171,
                 reg170,
                 reg168,
                 reg167,
                 reg166,
                 reg162,
                 reg161,
                 reg159,
                 reg157,
                 reg153,
                 reg150,
                 reg142,
                 reg192,
                 forvar187,
                 reg184,
                 reg181,
                 reg180,
                 forvar179,
                 reg178,
                 reg174,
                 forvar173,
                 reg169,
                 forvar165,
                 reg164,
                 reg163,
                 reg160,
                 forvar158,
                 reg152,
                 reg151,
                 reg149,
                 forvar148,
                 forvar147,
                 reg146,
                 reg145,
                 reg144,
                 reg143,
                 forvar141,
                 forvar140,
                 (1'h0)};
  assign wire139 = wire136[(1'h1):(1'h0)];
  always
    @(posedge clk) begin
      for (forvar140 = (1'h0); (forvar140 < (2'h3)); forvar140 = (forvar140 + (1'h1)))
        begin
          for (forvar141 = (1'h0); (forvar141 < (1'h0)); forvar141 = (forvar141 + (1'h1)))
            begin
              reg142 <= (+$unsigned(wire136[(3'h4):(1'h0)]));
              reg143 = forvar140;
              reg144 = $signed(($unsigned(({forvar140} == (forvar140 ?
                  wire139 : wire136))) << wire139[(4'hd):(3'h5)]));
              reg145 = (wire139[(3'h7):(2'h3)] ?
                  wire135[(1'h1):(1'h1)] : (($signed((wire135 ?
                          wire137 : forvar140)) && $signed(reg142)) ?
                      ($signed(((8'hb6) ? forvar140 : wire137)) ?
                          ($signed((7'h41)) ?
                              $signed(reg144) : $signed(reg142)) : wire138[(1'h1):(1'h0)]) : reg144[(4'h8):(1'h1)]));
              reg146 = $unsigned(($signed(({forvar140, (8'hb5)} ?
                      reg143 : $signed(reg144))) ?
                  $unsigned((+$signed(wire134))) : {$unsigned((wire139 ?
                          wire137 : reg145))}));
            end
        end
      for (forvar147 = (1'h0); (forvar147 < (1'h0)); forvar147 = (forvar147 + (1'h1)))
        begin
          for (forvar148 = (1'h0); (forvar148 < (1'h1)); forvar148 = (forvar148 + (1'h1)))
            begin
              reg149 = wire134;
              reg150 <= $unsigned((($signed(forvar140[(1'h1):(1'h0)]) ^ ($signed(reg146) ?
                  $signed(wire137) : (reg144 ?
                      reg144 : reg144))) != wire139[(4'ha):(3'h7)]));
              reg151 = $signed((&(({wire139} ?
                      (wire139 ? reg143 : wire134) : reg145[(1'h0):(1'h0)]) ?
                  wire139 : $signed((~wire139)))));
              reg152 = (wire137 >>> wire135[(1'h0):(1'h0)]);
              reg153 <= forvar140;
            end
        end
    end
  assign wire154 = reg150[(5'h11):(4'he)];
  assign wire155 = (-$unsigned({(!(wire134 && wire154))}));
  assign wire156 = $unsigned(wire135);
  always
    @(posedge clk) begin
      reg157 <= {$unsigned($unsigned({wire139[(4'h9):(3'h7)],
              $signed(wire134)})),
          (~|reg142[(4'ha):(1'h1)])};
      for (forvar158 = (1'h0); (forvar158 < (2'h2)); forvar158 = (forvar158 + (1'h1)))
        begin
          if ((8'hbe))
            begin
              reg159 <= $unsigned($unsigned(wire135));
              reg160 = wire154;
              reg161 <= (8'ha2);
            end
          else
            begin
              reg159 <= $unsigned((~$unsigned(reg153[(4'ha):(4'h8)])));
              reg161 <= $signed((&$unsigned({{(8'ha8), reg159}})));
              reg162 <= $unsigned(($signed(wire155) * $signed(((reg160 + wire138) ?
                  ((8'hb7) >= wire137) : $signed(wire135)))));
              reg163 = ((((~&reg161) != {(~&wire137),
                  ((8'h9e) * wire156)}) != reg153) <<< (!wire137));
              reg164 = $unsigned((^~wire134));
            end
          for (forvar165 = (1'h0); (forvar165 < (2'h2)); forvar165 = (forvar165 + (1'h1)))
            begin
              reg166 <= ($signed($signed({(8'hbd), reg161})) ?
                  $signed($signed((reg163[(1'h1):(1'h1)] < (forvar165 ?
                      wire134 : wire134)))) : reg160);
              reg167 <= (~^reg166[(2'h2):(1'h0)]);
              reg168 <= ((wire155[(2'h3):(2'h3)] - $unsigned($signed(wire134))) | $unsigned($signed(((~forvar165) ?
                  $unsigned(wire134) : $unsigned((8'ha1))))));
            end
          if ({$signed(({$unsigned(wire139), reg160[(5'h13):(4'hd)]} ?
                  (~|$signed(reg164)) : $signed(reg159)))})
            begin
              reg169 = reg167;
              reg170 <= forvar165;
              reg171 <= ((~|(^~$signed((reg142 || reg169)))) ^ $signed($signed($signed((wire136 ^~ wire134)))));
              reg172 <= {{reg170[(4'h9):(3'h4)]}, $signed(wire134)};
            end
          else
            begin
              reg169 = reg161;
            end
        end
      for (forvar173 = (1'h0); (forvar173 < (2'h2)); forvar173 = (forvar173 + (1'h1)))
        begin
          if (reg167[(2'h3):(2'h2)])
            begin
              reg174 = (((wire139[(4'hb):(4'h8)] ?
                          $signed($signed(reg168)) : $unsigned(reg162[(1'h0):(1'h0)])) ?
                      reg172 : (~$signed($signed(wire155)))) ?
                  ((+$unsigned($signed(forvar165))) ?
                      $unsigned($unsigned({reg157, reg164})) : (((^reg162) ?
                          forvar158[(3'h5):(2'h3)] : (wire137 || forvar165)) < reg150)) : wire137);
              reg175 <= {$unsigned({{(|forvar173)},
                      ($unsigned(reg159) ? (~forvar158) : (^reg170))})};
              reg176 <= (~(wire134 ?
                  (($signed(reg159) >= (reg150 ?
                      (8'hbb) : wire156)) ^ reg172[(5'h12):(5'h11)]) : {({(8'hbe),
                              reg174} ?
                          (+wire139) : reg164[(4'hb):(4'h8)])}));
              reg177 <= ((8'ha6) ?
                  ((((^~wire134) ?
                      $signed(wire154) : reg162[(1'h0):(1'h0)]) && $unsigned((reg157 & wire134))) > (^((~(8'hba)) >= $signed(forvar165)))) : (~^(~|$signed((wire155 ?
                      reg174 : reg168)))));
            end
          else
            begin
              reg174 = $unsigned(wire136[(1'h0):(1'h0)]);
              reg175 <= (~^wire156[(4'hc):(2'h3)]);
              reg176 <= wire137[(3'h6):(1'h0)];
            end
          reg178 = (($unsigned($signed(wire155[(4'h9):(4'h9)])) & $unsigned($unsigned(wire134))) ?
              $signed(forvar165[(3'h4):(2'h2)]) : reg166);
        end
      for (forvar179 = (1'h0); (forvar179 < (2'h2)); forvar179 = (forvar179 + (1'h1)))
        begin
          if (((reg175 || wire136) || {($signed({wire138}) ?
                  ((^(8'hae)) != reg176) : (+(reg171 <<< wire154)))}))
            begin
              reg180 = $signed((^~$unsigned(reg153)));
              reg181 = (~^((~wire137[(4'h8):(3'h7)]) ?
                  {(8'ha6),
                      ((7'h40) ?
                          reg172[(4'hf):(4'hf)] : $signed(wire135))} : $signed((((8'hb4) <= reg169) ?
                      reg169 : (reg166 ? wire139 : reg157)))));
              reg182 <= $signed($signed(reg142));
              reg183 <= $signed($signed(reg181));
            end
          else
            begin
              reg180 = $signed(reg183[(2'h2):(1'h1)]);
              reg182 <= ((~^wire135[(1'h1):(1'h0)]) ?
                  wire137 : wire137[(2'h2):(2'h2)]);
              reg184 = (reg161 >>> reg142);
              reg185 <= reg171;
            end
          reg186 <= $unsigned(reg163[(3'h5):(1'h1)]);
          for (forvar187 = (1'h0); (forvar187 < (3'h4)); forvar187 = (forvar187 + (1'h1)))
            begin
              reg188 <= $unsigned(wire154);
              reg189 <= reg183;
              reg190 <= {(~^reg161[(1'h0):(1'h0)])};
              reg191 <= (wire137[(3'h4):(1'h1)] ?
                  ((~&wire137) ?
                      ($signed(wire139[(4'h8):(3'h5)]) > $unsigned((reg178 != wire138))) : $unsigned({(|wire156)})) : $signed({reg181}));
            end
        end
    end
  always
    @(posedge clk) begin
      reg192 = reg159[(3'h5):(2'h2)];
      reg193 <= reg192;
      reg194 <= $signed(((|(reg142 <= {(8'hbe), (8'hba)})) ?
          {reg193[(5'h10):(4'ha)]} : wire134));
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module6
#(parameter param129 = ({((^~{(8'h9e), (7'h41)}) & (8'haf)), (~^(8'hbb))} ? {((8'hb1) ? ({(8'ha1), (8'hac)} >>> (^(8'hb3))) : (((8'ha0) ? (7'h42) : (8'hb8)) ? ((8'haa) ? (8'hb5) : (8'hac)) : ((8'ha1) ? (8'hbf) : (8'hb5))))} : {((((7'h41) != (7'h42)) ~^ ((8'hbc) & (8'ha1))) ? (((8'ha3) << (8'hb1)) ? ((8'h9f) ? (8'hb2) : (8'hbb)) : (~|(8'hb2))) : (((8'h9d) ? (7'h43) : (8'ha4)) || ((8'hb6) >= (8'hbb)))), ((|(!(8'hba))) ? ((8'hb7) ? (8'haa) : {(7'h41)}) : ((8'hab) ? (+(8'hb1)) : ((8'ha5) ? (8'hbc) : (8'hae))))}), 
parameter param130 = (((~^((8'h9f) ? param129 : (param129 ^ param129))) ^~ (-(~|(param129 ^~ param129)))) ? (param129 && (^param129)) : (-(~(param129 ? (|param129) : (param129 ? param129 : (8'hb0)))))))
(y, clk, wire7, wire8, wire9, wire10);
  output wire [(32'h13f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'he):(1'h0)] wire7;
  input wire [(4'h8):(1'h0)] wire8;
  input wire [(5'h13):(1'h0)] wire9;
  input wire [(3'h6):(1'h0)] wire10;
  wire signed [(3'h5):(1'h0)] wire128;
  wire [(5'h13):(1'h0)] wire127;
  wire [(2'h2):(1'h0)] wire126;
  wire signed [(3'h7):(1'h0)] wire125;
  wire [(5'h15):(1'h0)] wire124;
  wire signed [(4'hf):(1'h0)] wire39;
  wire signed [(4'hc):(1'h0)] wire41;
  wire signed [(3'h5):(1'h0)] wire42;
  wire [(4'hd):(1'h0)] wire43;
  wire [(5'h13):(1'h0)] wire44;
  wire signed [(4'ha):(1'h0)] wire58;
  wire [(5'h12):(1'h0)] wire59;
  wire signed [(3'h4):(1'h0)] wire60;
  wire signed [(3'h7):(1'h0)] wire61;
  wire [(4'hb):(1'h0)] wire62;
  wire signed [(3'h7):(1'h0)] wire63;
  wire signed [(5'h13):(1'h0)] wire64;
  wire [(3'h4):(1'h0)] wire122;
  reg signed [(3'h5):(1'h0)] reg47 = (1'h0);
  reg [(2'h3):(1'h0)] reg51 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg52 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg54 = (1'h0);
  reg [(2'h2):(1'h0)] reg55 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg56 = (1'h0);
  reg [(2'h3):(1'h0)] reg57 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar53 = (1'h0);
  reg [(4'ha):(1'h0)] reg50 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg49 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar48 = (1'h0);
  reg [(5'h11):(1'h0)] forvar46 = (1'h0);
  reg [(3'h4):(1'h0)] forvar45 = (1'h0);
  assign y = {wire128,
                 wire127,
                 wire126,
                 wire125,
                 wire124,
                 wire39,
                 wire41,
                 wire42,
                 wire43,
                 wire44,
                 wire58,
                 wire59,
                 wire60,
                 wire61,
                 wire62,
                 wire63,
                 wire64,
                 wire122,
                 reg47,
                 reg51,
                 reg52,
                 reg54,
                 reg55,
                 reg56,
                 reg57,
                 forvar53,
                 reg50,
                 reg49,
                 forvar48,
                 forvar46,
                 forvar45,
                 (1'h0)};
  module11 #() modinst40 (wire39, clk, wire9, wire7, wire10, wire8);
  assign wire41 = (^($unsigned($unsigned((wire39 >> wire7))) > $signed(wire8)));
  assign wire42 = (+$signed(((+wire8[(1'h0):(1'h0)]) ?
                      $unsigned($unsigned(wire39)) : ({wire10,
                          wire41} && $signed(wire10)))));
  assign wire43 = wire9;
  assign wire44 = $unsigned($signed($signed({(^~wire39)})));
  always
    @(posedge clk) begin
      for (forvar45 = (1'h0); (forvar45 < (2'h3)); forvar45 = (forvar45 + (1'h1)))
        begin
          for (forvar46 = (1'h0); (forvar46 < (1'h0)); forvar46 = (forvar46 + (1'h1)))
            begin
              reg47 <= $unsigned((8'h9f));
            end
          for (forvar48 = (1'h0); (forvar48 < (2'h3)); forvar48 = (forvar48 + (1'h1)))
            begin
              reg49 = $signed($unsigned(wire44));
              reg50 = forvar45[(1'h1):(1'h1)];
              reg51 <= (!(~|(+(8'hb0))));
              reg52 <= ($signed(wire41[(4'h8):(3'h7)]) <= $signed((8'hab)));
            end
          for (forvar53 = (1'h0); (forvar53 < (1'h0)); forvar53 = (forvar53 + (1'h1)))
            begin
              reg54 <= (+$signed((wire39 < wire44)));
              reg55 <= $signed((8'ha4));
              reg56 <= (8'hbf);
              reg57 = reg47[(3'h5):(3'h5)];
            end
        end
    end
  assign wire58 = $signed($signed((~^(~$signed((8'ha0))))));
  assign wire59 = (((-wire58[(4'h9):(4'h9)]) <<< (~|wire7[(4'he):(4'he)])) | (~wire58));
  assign wire60 = wire44[(4'h8):(2'h2)];
  assign wire61 = (wire60 ? (~$signed(wire41[(4'hb):(4'h8)])) : wire8);
  assign wire62 = (^~(~^$unsigned((8'ha3))));
  assign wire63 = $unsigned($signed($unsigned($unsigned((wire9 ?
                      reg47 : (7'h42))))));
  assign wire64 = wire7[(4'h9):(4'h8)];
  module65 #() modinst123 (.clk(clk), .wire69(wire61), .wire66(wire9), .wire68(wire8), .wire67(reg52), .y(wire122));
  assign wire124 = wire60[(2'h3):(1'h1)];
  assign wire125 = $signed((+wire7));
  assign wire126 = (((+(-(reg55 ? wire58 : reg55))) ?
                       $unsigned(wire58[(4'ha):(3'h6)]) : ($unsigned((reg47 ?
                           wire9 : wire61)) >>> $unsigned(wire7[(4'ha):(2'h3)]))) >> wire60);
  assign wire127 = ((({(wire42 ? reg52 : wire122), {wire9, wire62}} ?
                           wire43[(4'hb):(1'h0)] : ({reg54,
                               (8'hb7)} >> $signed(wire58))) ?
                       {$signed({reg51, (8'hbf)}),
                           wire63[(3'h6):(3'h6)]} : $unsigned((|$signed(wire64)))) & {$unsigned(($unsigned(wire124) ?
                           (-wire43) : wire10)),
                       ($unsigned(reg47) ?
                           $signed(wire64) : $unsigned((|wire62)))});
  assign wire128 = (($signed($signed((~&reg55))) ?
                       wire127[(1'h1):(1'h1)] : $unsigned($signed($signed(wire10)))) + (&$unsigned($signed($unsigned(wire10)))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module65
#(parameter param121 = ((-(~&(((8'h9c) ? (8'h9d) : (8'hbc)) || (~|(8'ha3))))) ? (({(~&(8'ha0))} ? (^~((7'h42) > (7'h41))) : (((8'hb1) == (8'hb4)) ? ((8'hb8) ? (8'had) : (8'hbc)) : ((8'ha9) <= (8'h9e)))) < {(((8'hbb) ? (8'hac) : (8'ha9)) > {(7'h42)}), ({(8'haa)} == (+(8'haa)))}) : {((((8'hb2) ? (8'hb2) : (8'hbf)) != ((8'ha4) ? (8'ha4) : (8'hb9))) ? (((8'hb0) ? (8'hb3) : (8'hae)) ? {(8'hbe), (8'hbe)} : (8'haf)) : ((~^(8'ha2)) || ((8'ha3) ? (8'hb5) : (8'hbf))))}))
(y, clk, wire69, wire68, wire67, wire66);
  output wire [(32'h26a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire69;
  input wire signed [(3'h5):(1'h0)] wire68;
  input wire signed [(5'h12):(1'h0)] wire67;
  input wire [(5'h11):(1'h0)] wire66;
  wire [(5'h11):(1'h0)] wire120;
  wire signed [(4'hc):(1'h0)] wire119;
  wire signed [(4'hd):(1'h0)] wire115;
  wire signed [(4'h8):(1'h0)] wire114;
  wire [(2'h3):(1'h0)] wire113;
  wire [(5'h13):(1'h0)] wire112;
  wire signed [(4'hd):(1'h0)] wire111;
  wire [(4'h9):(1'h0)] wire110;
  wire signed [(5'h12):(1'h0)] wire109;
  wire signed [(4'hf):(1'h0)] wire108;
  wire [(3'h5):(1'h0)] wire107;
  wire [(5'h10):(1'h0)] wire76;
  wire signed [(5'h12):(1'h0)] wire75;
  wire [(5'h12):(1'h0)] wire74;
  wire signed [(5'h13):(1'h0)] wire73;
  wire [(4'hd):(1'h0)] wire72;
  wire [(5'h14):(1'h0)] wire71;
  wire signed [(3'h7):(1'h0)] wire70;
  reg signed [(4'h9):(1'h0)] reg118 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg106 = (1'h0);
  reg [(5'h14):(1'h0)] reg105 = (1'h0);
  reg [(5'h13):(1'h0)] reg103 = (1'h0);
  reg [(3'h4):(1'h0)] reg102 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg100 = (1'h0);
  reg [(3'h5):(1'h0)] reg95 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg88 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg87 = (1'h0);
  reg [(4'hb):(1'h0)] reg84 = (1'h0);
  reg [(5'h15):(1'h0)] reg82 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg81 = (1'h0);
  reg [(5'h10):(1'h0)] reg80 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg117 = (1'h0);
  reg [(3'h7):(1'h0)] forvar116 = (1'h0);
  reg [(4'he):(1'h0)] reg104 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar101 = (1'h0);
  reg [(2'h3):(1'h0)] reg99 = (1'h0);
  reg [(2'h3):(1'h0)] reg98 = (1'h0);
  reg [(3'h7):(1'h0)] reg97 = (1'h0);
  reg [(3'h6):(1'h0)] forvar96 = (1'h0);
  reg [(5'h14):(1'h0)] forvar94 = (1'h0);
  reg [(4'hc):(1'h0)] forvar93 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg92 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg91 = (1'h0);
  reg [(4'hf):(1'h0)] forvar90 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar89 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg86 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg85 = (1'h0);
  reg [(5'h11):(1'h0)] forvar83 = (1'h0);
  reg [(4'hf):(1'h0)] reg79 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar78 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar77 = (1'h0);
  assign y = {wire120,
                 wire119,
                 wire115,
                 wire114,
                 wire113,
                 wire112,
                 wire111,
                 wire110,
                 wire109,
                 wire108,
                 wire107,
                 wire76,
                 wire75,
                 wire74,
                 wire73,
                 wire72,
                 wire71,
                 wire70,
                 reg118,
                 reg106,
                 reg105,
                 reg103,
                 reg102,
                 reg100,
                 reg95,
                 reg88,
                 reg87,
                 reg84,
                 reg82,
                 reg81,
                 reg80,
                 reg117,
                 forvar116,
                 reg104,
                 forvar101,
                 reg99,
                 reg98,
                 reg97,
                 forvar96,
                 forvar94,
                 forvar93,
                 reg92,
                 reg91,
                 forvar90,
                 forvar89,
                 reg86,
                 reg85,
                 forvar83,
                 reg79,
                 forvar78,
                 forvar77,
                 (1'h0)};
  assign wire70 = (wire69 <= (((~^(!wire66)) >> $unsigned(wire66[(2'h2):(2'h2)])) * $signed($unsigned($signed(wire68)))));
  assign wire71 = $signed($unsigned(wire69[(1'h1):(1'h0)]));
  assign wire72 = {((($signed(wire69) ?
                              $signed(wire69) : $signed(wire71)) * $signed($signed(wire71))) ?
                          $unsigned((~|wire68)) : ($unsigned(((8'ha8) ?
                              wire70 : (8'ha2))) + $signed($signed(wire66))))};
  assign wire73 = wire66;
  assign wire74 = $signed($unsigned((($unsigned((8'ha5)) ?
                          $unsigned(wire73) : (wire72 ? (7'h43) : wire66)) ?
                      (|$signed(wire70)) : wire68)));
  assign wire75 = $unsigned((($signed($signed(wire73)) ?
                          ((wire71 != wire71) << (!wire66)) : (^$signed((8'hb7)))) ?
                      wire67 : wire70[(1'h0):(1'h0)]));
  assign wire76 = {$signed((&{$signed(wire68), (^~wire74)}))};
  always
    @(posedge clk) begin
      for (forvar77 = (1'h0); (forvar77 < (1'h0)); forvar77 = (forvar77 + (1'h1)))
        begin
          for (forvar78 = (1'h0); (forvar78 < (2'h2)); forvar78 = (forvar78 + (1'h1)))
            begin
              reg79 = wire73[(4'hb):(4'ha)];
              reg80 <= ({reg79[(4'hb):(4'ha)]} ^ forvar78[(1'h0):(1'h0)]);
              reg81 <= ({forvar77[(4'ha):(1'h1)]} ?
                  $unsigned((+wire70[(3'h5):(2'h2)])) : wire68);
              reg82 <= ({(((wire74 ? forvar78 : reg79) << (|wire76)) ?
                          wire68 : wire73[(1'h1):(1'h0)])} ?
                  wire76 : $signed(((|(forvar78 ?
                      wire71 : wire72)) - wire72[(1'h0):(1'h0)])));
            end
          for (forvar83 = (1'h0); (forvar83 < (1'h1)); forvar83 = (forvar83 + (1'h1)))
            begin
              reg84 <= $signed(((8'hbc) != wire73));
              reg85 = ($signed((^reg81[(5'h12):(4'hf)])) ?
                  $signed(reg81[(3'h6):(1'h1)]) : $unsigned($unsigned((reg80 ?
                      reg84[(3'h6):(3'h4)] : (reg82 <= (8'hbe))))));
              reg86 = (($signed($signed($signed((8'had)))) >= reg81) ?
                  (^~forvar77[(3'h5):(2'h2)]) : wire71);
              reg87 <= ({(8'ha8)} & $signed(reg80));
              reg88 <= ((reg79 <<< $unsigned(reg81[(4'hd):(1'h1)])) == ((~&($signed(wire71) ?
                      forvar83[(4'ha):(2'h3)] : $unsigned(reg86))) ?
                  (~&$unsigned((wire72 ?
                      wire68 : forvar78))) : $signed(reg85[(1'h0):(1'h0)])));
            end
        end
      for (forvar89 = (1'h0); (forvar89 < (1'h1)); forvar89 = (forvar89 + (1'h1)))
        begin
          for (forvar90 = (1'h0); (forvar90 < (2'h2)); forvar90 = (forvar90 + (1'h1)))
            begin
              reg91 = wire73[(4'hb):(1'h0)];
              reg92 = (($signed({$unsigned((7'h43))}) ?
                      reg79 : reg86[(2'h3):(2'h3)]) ?
                  $signed(wire68) : $unsigned(reg88));
            end
        end
      for (forvar93 = (1'h0); (forvar93 < (1'h0)); forvar93 = (forvar93 + (1'h1)))
        begin
          for (forvar94 = (1'h0); (forvar94 < (2'h2)); forvar94 = (forvar94 + (1'h1)))
            begin
              reg95 <= ($unsigned(reg85[(1'h1):(1'h0)]) > ((8'hac) ?
                  $signed($signed((^reg80))) : $unsigned(wire70)));
            end
          for (forvar96 = (1'h0); (forvar96 < (2'h3)); forvar96 = (forvar96 + (1'h1)))
            begin
              reg97 = (8'hb0);
              reg98 = $signed((8'h9e));
            end
          if (($signed($unsigned($unsigned(((8'haa) ? reg98 : (8'ha3))))) ?
              reg80[(4'he):(4'hc)] : ($unsigned((wire66 != {reg97, forvar90})) ?
                  (~&({wire68, reg86} != wire71)) : {reg97, forvar94})))
            begin
              reg99 = $unsigned((^(~^(-(forvar93 ? forvar83 : reg98)))));
            end
          else
            begin
              reg100 <= $unsigned((&$unsigned(($signed(reg95) ?
                  reg84[(2'h3):(1'h1)] : (reg88 != wire73)))));
            end
          for (forvar101 = (1'h0); (forvar101 < (2'h3)); forvar101 = (forvar101 + (1'h1)))
            begin
              reg102 <= reg81;
              reg103 <= $signed((wire69[(3'h7):(2'h2)] ?
                  $unsigned({$signed(forvar96),
                      $unsigned(forvar77)}) : $unsigned(((!forvar93) ?
                      wire73[(4'hd):(3'h6)] : $unsigned((8'hb4))))));
              reg104 = $signed(($unsigned($signed((wire72 ? reg86 : (8'hb1)))) ?
                  (8'ha6) : ((~&$unsigned((8'h9d))) ^~ $unsigned($signed(wire73)))));
              reg105 <= $unsigned(({((forvar83 < forvar83) ?
                      $signed(reg86) : reg97),
                  (&(forvar96 + reg87))} < (7'h41)));
              reg106 <= wire74;
            end
        end
    end
  assign wire107 = $signed(wire74[(2'h2):(2'h2)]);
  assign wire108 = (((-(|(reg105 ? (7'h43) : reg105))) ?
                           wire68[(3'h5):(2'h3)] : reg100) ?
                       ((({reg88} ^~ $signed(wire74)) ?
                               ($unsigned((8'hb9)) + wire73) : (wire68 ?
                                   wire73[(5'h10):(4'h8)] : (wire76 ?
                                       (8'hae) : wire75))) ?
                           $unsigned((^{reg100})) : (((-reg84) ?
                                   $signed(wire67) : $unsigned(reg106)) ?
                               ((^~wire75) ? reg84 : $signed(reg82)) : {(reg88 ?
                                       reg106 : wire70)})) : {(~^{(reg102 << reg103)}),
                           (wire75 ? reg100[(4'he):(4'hd)] : reg84)});
  assign wire109 = $unsigned((~((+$signed((8'hb0))) > (wire75 ~^ reg106[(3'h4):(3'h4)]))));
  assign wire110 = $signed((~|{wire66[(4'hd):(2'h3)]}));
  assign wire111 = wire66[(3'h5):(1'h1)];
  assign wire112 = $signed(wire111);
  assign wire113 = reg80;
  assign wire114 = $signed($unsigned((~^((reg105 ?
                       wire109 : wire68) - wire75[(1'h0):(1'h0)]))));
  assign wire115 = wire110[(3'h6):(3'h6)];
  always
    @(posedge clk) begin
      for (forvar116 = (1'h0); (forvar116 < (2'h3)); forvar116 = (forvar116 + (1'h1)))
        begin
          reg117 = (($signed((+reg81)) ~^ (^~($signed(reg81) ?
                  reg103[(2'h2):(1'h0)] : wire75[(2'h2):(1'h0)]))) ?
              $unsigned($unsigned($signed((|reg103)))) : wire114);
        end
      reg118 <= ((!(-(reg88 ? $signed((8'h9d)) : (~|wire110)))) ?
          ((reg106[(2'h2):(1'h1)] > $unsigned($unsigned(reg88))) <= (|reg81)) : reg102);
    end
  assign wire119 = {$signed({reg118[(3'h4):(1'h1)]}), $unsigned((8'hb0))};
  assign wire120 = reg100[(4'he):(4'hd)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11  (y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h104):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire15;
  input wire [(4'he):(1'h0)] wire14;
  input wire [(3'h6):(1'h0)] wire13;
  input wire signed [(4'h8):(1'h0)] wire12;
  wire [(3'h4):(1'h0)] wire38;
  wire signed [(4'h9):(1'h0)] wire17;
  wire signed [(4'ha):(1'h0)] wire16;
  reg [(5'h10):(1'h0)] reg37 = (1'h0);
  reg [(4'h9):(1'h0)] reg36 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg35 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg34 = (1'h0);
  reg [(4'ha):(1'h0)] reg31 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg30 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg28 = (1'h0);
  reg [(4'hd):(1'h0)] reg26 = (1'h0);
  reg [(3'h7):(1'h0)] reg24 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg22 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg21 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg20 = (1'h0);
  reg [(3'h7):(1'h0)] reg33 = (1'h0);
  reg [(2'h2):(1'h0)] forvar32 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar29 = (1'h0);
  reg [(5'h10):(1'h0)] reg27 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar25 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg23 = (1'h0);
  reg [(4'hc):(1'h0)] forvar19 = (1'h0);
  reg [(3'h6):(1'h0)] forvar18 = (1'h0);
  assign y = {wire38,
                 wire17,
                 wire16,
                 reg37,
                 reg36,
                 reg35,
                 reg34,
                 reg31,
                 reg30,
                 reg28,
                 reg26,
                 reg24,
                 reg22,
                 reg21,
                 reg20,
                 reg33,
                 forvar32,
                 forvar29,
                 reg27,
                 forvar25,
                 reg23,
                 forvar19,
                 forvar18,
                 (1'h0)};
  assign wire16 = $signed(wire15);
  assign wire17 = wire16;
  always
    @(posedge clk) begin
      for (forvar18 = (1'h0); (forvar18 < (2'h2)); forvar18 = (forvar18 + (1'h1)))
        begin
          for (forvar19 = (1'h0); (forvar19 < (1'h1)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 <= (&($signed(wire13[(3'h5):(1'h1)]) ~^ wire13));
              reg21 <= (+((forvar18 < ((wire12 ? forvar18 : (8'hb3)) ?
                      (+wire14) : (forvar18 - forvar19))) ?
                  wire17 : wire15[(1'h0):(1'h0)]));
              reg22 <= wire17;
              reg23 = (+$signed(((^$unsigned(wire16)) <= (+$signed(forvar18)))));
              reg24 <= wire15;
            end
          for (forvar25 = (1'h0); (forvar25 < (3'h4)); forvar25 = (forvar25 + (1'h1)))
            begin
              reg26 <= wire17[(4'h8):(3'h6)];
              reg27 = $signed(wire15[(3'h4):(1'h1)]);
              reg28 <= ($signed(wire13) ?
                  ((((~reg26) ?
                      (&(7'h42)) : (~^(8'h9e))) << ($unsigned(wire17) & $unsigned(wire17))) ^ (8'hb9)) : reg20);
            end
          for (forvar29 = (1'h0); (forvar29 < (1'h1)); forvar29 = (forvar29 + (1'h1)))
            begin
              reg30 <= $signed({(~reg22[(4'he):(4'ha)]),
                  (~^$unsigned(wire12))});
              reg31 <= reg21[(4'ha):(4'h9)];
            end
          for (forvar32 = (1'h0); (forvar32 < (2'h2)); forvar32 = (forvar32 + (1'h1)))
            begin
              reg33 = $unsigned($signed($signed((~|(-(8'hbe))))));
              reg34 <= ($unsigned({($signed(reg24) || $unsigned(wire16))}) > (reg27[(4'h8):(4'h8)] <<< reg23));
              reg35 <= $unsigned($unsigned({(+(wire14 ? reg34 : wire17))}));
            end
        end
      reg36 <= (forvar19[(3'h7):(1'h1)] && ($unsigned({(wire13 > (8'hb5))}) ?
          $unsigned(wire17[(4'h9):(3'h5)]) : wire15));
      reg37 <= (~^{((8'hb9) ?
              wire14[(3'h5):(1'h1)] : ($signed(forvar29) ?
                  reg28[(3'h4):(1'h1)] : $unsigned(reg34)))});
    end
  assign wire38 = wire13;
endmodule