(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param305 = (|(({(~|(7'h43)), (~|(8'ha3))} ? (^~(-(8'hbe))) : {(&(8'had)), ((8'hb5) | (8'h9c))}) - (((~(8'ha0)) << ((8'ha4) ? (8'h9d) : (7'h41))) ^~ {{(8'hbd)}, ((7'h42) + (8'hb7))}))), 
parameter param306 = (|(~((((8'hb9) ? param305 : param305) ^~ ((8'ha1) | param305)) ? param305 : ((8'ha6) ? (8'hac) : (param305 ? param305 : param305))))))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h94e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h10):(1'h0)] wire4;
  input wire signed [(5'h12):(1'h0)] wire3;
  input wire signed [(5'h14):(1'h0)] wire2;
  input wire [(5'h12):(1'h0)] wire1;
  input wire signed [(3'h5):(1'h0)] wire0;
  wire signed [(4'hf):(1'h0)] wire304;
  wire signed [(3'h6):(1'h0)] wire303;
  wire signed [(4'hc):(1'h0)] wire302;
  wire signed [(5'h15):(1'h0)] wire301;
  wire signed [(3'h6):(1'h0)] wire300;
  wire [(4'hc):(1'h0)] wire299;
  wire [(5'h12):(1'h0)] wire298;
  wire [(5'h14):(1'h0)] wire245;
  wire signed [(4'ha):(1'h0)] wire75;
  wire signed [(5'h15):(1'h0)] wire26;
  wire [(5'h15):(1'h0)] wire25;
  wire signed [(4'hd):(1'h0)] wire24;
  wire signed [(5'h11):(1'h0)] wire77;
  wire [(3'h7):(1'h0)] wire116;
  wire [(2'h3):(1'h0)] wire159;
  wire signed [(2'h3):(1'h0)] wire160;
  wire signed [(4'h8):(1'h0)] wire243;
  reg [(5'h10):(1'h0)] reg296 = (1'h0);
  reg [(4'h9):(1'h0)] reg295 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg294 = (1'h0);
  reg [(4'h8):(1'h0)] reg292 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg289 = (1'h0);
  reg [(4'hd):(1'h0)] reg287 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg286 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg283 = (1'h0);
  reg [(2'h3):(1'h0)] reg278 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg274 = (1'h0);
  reg [(4'hb):(1'h0)] reg272 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg270 = (1'h0);
  reg [(5'h11):(1'h0)] reg269 = (1'h0);
  reg [(4'h9):(1'h0)] reg268 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg267 = (1'h0);
  reg [(2'h2):(1'h0)] reg264 = (1'h0);
  reg [(4'h9):(1'h0)] reg262 = (1'h0);
  reg [(3'h6):(1'h0)] reg257 = (1'h0);
  reg [(3'h5):(1'h0)] reg253 = (1'h0);
  reg [(4'ha):(1'h0)] reg251 = (1'h0);
  reg [(3'h4):(1'h0)] reg249 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg22 = (1'h0);
  reg [(3'h5):(1'h0)] reg21 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg18 = (1'h0);
  reg [(5'h14):(1'h0)] reg17 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg16 = (1'h0);
  reg [(3'h6):(1'h0)] reg13 = (1'h0);
  reg [(5'h14):(1'h0)] reg11 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg10 = (1'h0);
  reg [(5'h12):(1'h0)] reg7 = (1'h0);
  reg [(4'hf):(1'h0)] reg82 = (1'h0);
  reg [(5'h15):(1'h0)] reg85 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg89 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg90 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg91 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg92 = (1'h0);
  reg [(3'h6):(1'h0)] reg94 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg96 = (1'h0);
  reg [(4'hc):(1'h0)] reg98 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg102 = (1'h0);
  reg [(5'h11):(1'h0)] reg104 = (1'h0);
  reg [(5'h12):(1'h0)] reg106 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg107 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg109 = (1'h0);
  reg [(2'h3):(1'h0)] reg110 = (1'h0);
  reg [(5'h15):(1'h0)] reg111 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg113 = (1'h0);
  reg [(2'h2):(1'h0)] reg115 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg118 = (1'h0);
  reg [(5'h11):(1'h0)] reg120 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg121 = (1'h0);
  reg [(5'h15):(1'h0)] reg124 = (1'h0);
  reg [(5'h12):(1'h0)] reg126 = (1'h0);
  reg [(3'h7):(1'h0)] reg128 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg130 = (1'h0);
  reg [(5'h15):(1'h0)] reg131 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg134 = (1'h0);
  reg [(4'he):(1'h0)] reg135 = (1'h0);
  reg signed [(4'he):(1'h0)] reg117 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg140 = (1'h0);
  reg [(5'h10):(1'h0)] reg141 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg145 = (1'h0);
  reg [(2'h3):(1'h0)] reg150 = (1'h0);
  reg [(4'hd):(1'h0)] reg151 = (1'h0);
  reg [(3'h7):(1'h0)] reg152 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg154 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg155 = (1'h0);
  reg [(5'h13):(1'h0)] reg156 = (1'h0);
  reg [(5'h12):(1'h0)] reg158 = (1'h0);
  reg [(5'h15):(1'h0)] reg163 = (1'h0);
  reg [(4'ha):(1'h0)] reg170 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg172 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg178 = (1'h0);
  reg [(4'h9):(1'h0)] reg181 = (1'h0);
  reg [(4'hd):(1'h0)] reg184 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg185 = (1'h0);
  reg [(4'ha):(1'h0)] reg187 = (1'h0);
  reg [(5'h10):(1'h0)] reg191 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg194 = (1'h0);
  reg [(5'h10):(1'h0)] reg297 = (1'h0);
  reg [(5'h15):(1'h0)] reg293 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar291 = (1'h0);
  reg [(4'h9):(1'h0)] reg290 = (1'h0);
  reg [(4'ha):(1'h0)] reg288 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar285 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg284 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar282 = (1'h0);
  reg [(3'h4):(1'h0)] reg281 = (1'h0);
  reg [(5'h12):(1'h0)] reg280 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg279 = (1'h0);
  reg [(4'ha):(1'h0)] reg277 = (1'h0);
  reg [(3'h5):(1'h0)] forvar276 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar275 = (1'h0);
  reg [(3'h7):(1'h0)] reg273 = (1'h0);
  reg [(4'h8):(1'h0)] forvar271 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar266 = (1'h0);
  reg [(4'h9):(1'h0)] forvar265 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar263 = (1'h0);
  reg [(3'h6):(1'h0)] reg261 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar260 = (1'h0);
  reg [(3'h6):(1'h0)] reg259 = (1'h0);
  reg [(5'h14):(1'h0)] reg258 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg256 = (1'h0);
  reg [(5'h10):(1'h0)] forvar255 = (1'h0);
  reg [(5'h10):(1'h0)] forvar254 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar252 = (1'h0);
  reg [(5'h11):(1'h0)] forvar250 = (1'h0);
  reg [(2'h3):(1'h0)] forvar248 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar247 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg193 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar192 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg190 = (1'h0);
  reg signed [(4'he):(1'h0)] reg189 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg188 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar186 = (1'h0);
  reg [(5'h14):(1'h0)] reg183 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar182 = (1'h0);
  reg [(3'h7):(1'h0)] forvar180 = (1'h0);
  reg [(5'h12):(1'h0)] reg179 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar177 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg176 = (1'h0);
  reg [(5'h10):(1'h0)] reg175 = (1'h0);
  reg [(5'h10):(1'h0)] reg174 = (1'h0);
  reg [(3'h6):(1'h0)] reg173 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar171 = (1'h0);
  reg [(4'hf):(1'h0)] reg169 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg168 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar167 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg166 = (1'h0);
  reg [(3'h6):(1'h0)] reg165 = (1'h0);
  reg [(2'h2):(1'h0)] reg164 = (1'h0);
  reg [(5'h12):(1'h0)] forvar162 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar161 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg157 = (1'h0);
  reg [(4'he):(1'h0)] forvar153 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg149 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar148 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar147 = (1'h0);
  reg [(3'h5):(1'h0)] reg146 = (1'h0);
  reg [(4'hf):(1'h0)] forvar144 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg143 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg142 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar139 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar138 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg137 = (1'h0);
  reg [(4'hd):(1'h0)] reg136 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar133 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg132 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar129 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg127 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg125 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar123 = (1'h0);
  reg [(3'h6):(1'h0)] reg122 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg119 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar117 = (1'h0);
  reg [(4'hb):(1'h0)] reg114 = (1'h0);
  reg [(2'h2):(1'h0)] forvar112 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar108 = (1'h0);
  reg [(4'hd):(1'h0)] reg105 = (1'h0);
  reg [(3'h7):(1'h0)] forvar103 = (1'h0);
  reg [(3'h4):(1'h0)] reg101 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg100 = (1'h0);
  reg [(4'he):(1'h0)] reg99 = (1'h0);
  reg [(4'ha):(1'h0)] forvar97 = (1'h0);
  reg [(3'h6):(1'h0)] reg95 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar93 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg88 = (1'h0);
  reg [(4'ha):(1'h0)] forvar87 = (1'h0);
  reg [(2'h3):(1'h0)] reg86 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg84 = (1'h0);
  reg [(2'h2):(1'h0)] reg83 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg81 = (1'h0);
  reg [(4'h9):(1'h0)] reg80 = (1'h0);
  reg [(3'h5):(1'h0)] reg79 = (1'h0);
  reg [(3'h5):(1'h0)] forvar78 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg23 = (1'h0);
  reg [(3'h7):(1'h0)] forvar20 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg19 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar15 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar14 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg12 = (1'h0);
  reg [(2'h2):(1'h0)] forvar9 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg8 = (1'h0);
  reg [(5'h12):(1'h0)] forvar6 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg5 = (1'h0);
  assign y = {wire304,
                 wire303,
                 wire302,
                 wire301,
                 wire300,
                 wire299,
                 wire298,
                 wire245,
                 wire75,
                 wire26,
                 wire25,
                 wire24,
                 wire77,
                 wire116,
                 wire159,
                 wire160,
                 wire243,
                 reg296,
                 reg295,
                 reg294,
                 reg292,
                 reg289,
                 reg287,
                 reg286,
                 reg283,
                 reg278,
                 reg274,
                 reg272,
                 reg270,
                 reg269,
                 reg268,
                 reg267,
                 reg264,
                 reg262,
                 reg257,
                 reg253,
                 reg251,
                 reg249,
                 reg22,
                 reg21,
                 reg18,
                 reg17,
                 reg16,
                 reg13,
                 reg11,
                 reg10,
                 reg7,
                 reg82,
                 reg85,
                 reg89,
                 reg90,
                 reg91,
                 reg92,
                 reg94,
                 reg96,
                 reg98,
                 reg102,
                 reg104,
                 reg106,
                 reg107,
                 reg109,
                 reg110,
                 reg111,
                 reg113,
                 reg115,
                 reg118,
                 reg120,
                 reg121,
                 reg124,
                 reg126,
                 reg128,
                 reg130,
                 reg131,
                 reg134,
                 reg135,
                 reg117,
                 reg140,
                 reg141,
                 reg145,
                 reg150,
                 reg151,
                 reg152,
                 reg154,
                 reg155,
                 reg156,
                 reg158,
                 reg163,
                 reg170,
                 reg172,
                 reg178,
                 reg181,
                 reg184,
                 reg185,
                 reg187,
                 reg191,
                 reg194,
                 reg297,
                 reg293,
                 forvar291,
                 reg290,
                 reg288,
                 forvar285,
                 reg284,
                 forvar282,
                 reg281,
                 reg280,
                 reg279,
                 reg277,
                 forvar276,
                 forvar275,
                 reg273,
                 forvar271,
                 forvar266,
                 forvar265,
                 forvar263,
                 reg261,
                 forvar260,
                 reg259,
                 reg258,
                 reg256,
                 forvar255,
                 forvar254,
                 forvar252,
                 forvar250,
                 forvar248,
                 forvar247,
                 reg193,
                 forvar192,
                 reg190,
                 reg189,
                 reg188,
                 forvar186,
                 reg183,
                 forvar182,
                 forvar180,
                 reg179,
                 forvar177,
                 reg176,
                 reg175,
                 reg174,
                 reg173,
                 forvar171,
                 reg169,
                 reg168,
                 forvar167,
                 reg166,
                 reg165,
                 reg164,
                 forvar162,
                 forvar161,
                 reg157,
                 forvar153,
                 reg149,
                 forvar148,
                 forvar147,
                 reg146,
                 forvar144,
                 reg143,
                 reg142,
                 forvar139,
                 forvar138,
                 reg137,
                 reg136,
                 forvar133,
                 reg132,
                 forvar129,
                 reg127,
                 reg125,
                 forvar123,
                 reg122,
                 reg119,
                 forvar117,
                 reg114,
                 forvar112,
                 forvar108,
                 reg105,
                 forvar103,
                 reg101,
                 reg100,
                 reg99,
                 forvar97,
                 reg95,
                 forvar93,
                 reg88,
                 forvar87,
                 reg86,
                 reg84,
                 reg83,
                 reg81,
                 reg80,
                 reg79,
                 forvar78,
                 reg23,
                 forvar20,
                 reg19,
                 forvar15,
                 forvar14,
                 reg12,
                 forvar9,
                 reg8,
                 forvar6,
                 reg5,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg5 = (8'hbd);
      for (forvar6 = (1'h0); (forvar6 < (2'h3)); forvar6 = (forvar6 + (1'h1)))
        begin
          reg7 <= (+(^~($unsigned({wire2}) || (-(forvar6 >> (8'hb5))))));
          reg8 = wire4;
          for (forvar9 = (1'h0); (forvar9 < (1'h0)); forvar9 = (forvar9 + (1'h1)))
            begin
              reg10 <= {reg8,
                  $unsigned($unsigned($unsigned(wire2[(3'h4):(2'h2)])))};
              reg11 <= reg10[(1'h1):(1'h0)];
              reg12 = ((((((8'hbb) == reg7) ?
                      (~(7'h40)) : $signed(wire1)) - forvar6) < reg10) ?
                  $signed(({reg11} ?
                      $signed(wire4) : (8'hbd))) : $signed(($signed($unsigned(forvar9)) || $unsigned($unsigned(wire0)))));
              reg13 <= (^((8'h9c) ?
                  (((wire4 >> reg12) ^ forvar9) | ((forvar9 >= (8'hb0)) ~^ (wire1 ^~ (8'ha2)))) : wire4[(4'he):(3'h4)]));
            end
        end
      for (forvar14 = (1'h0); (forvar14 < (2'h2)); forvar14 = (forvar14 + (1'h1)))
        begin
          for (forvar15 = (1'h0); (forvar15 < (1'h1)); forvar15 = (forvar15 + (1'h1)))
            begin
              reg16 <= $signed($signed((~^reg7[(3'h4):(3'h4)])));
              reg17 <= (~|(|(reg10 || $signed((-forvar9)))));
              reg18 <= $signed($signed(($signed((forvar6 ?
                  wire3 : (8'ha7))) || ((reg11 ?
                  reg5 : wire0) && wire3[(5'h11):(4'hd)]))));
              reg19 = {$unsigned($unsigned({$unsigned((8'hb1))})), reg10};
            end
          for (forvar20 = (1'h0); (forvar20 < (3'h4)); forvar20 = (forvar20 + (1'h1)))
            begin
              reg21 <= wire4[(4'ha):(1'h1)];
              reg22 <= forvar15;
              reg23 = ((reg19 ?
                  reg11 : ($unsigned(forvar6) ?
                      (&$unsigned(reg16)) : reg11[(3'h6):(1'h1)])) + (~^$signed($signed($unsigned(wire3)))));
            end
        end
    end
  assign wire24 = ($unsigned(((~&wire3[(1'h0):(1'h0)]) >>> $unsigned($unsigned(reg21)))) ~^ {{$unsigned(reg21)}});
  assign wire25 = {$unsigned($signed({(reg16 ? wire3 : wire3)})),
                      $unsigned((reg18[(2'h3):(2'h3)] ?
                          wire24[(4'hd):(3'h6)] : {reg11[(1'h0):(1'h0)]}))};
  assign wire26 = $unsigned((wire2 ?
                      $unsigned($signed((reg13 ?
                          reg11 : reg18))) : $signed((^(reg7 ^ wire3)))));
  module27 #() modinst76 (.wire30(wire2), .y(wire75), .wire29(reg11), .wire31(wire4), .wire28(wire26), .clk(clk));
  assign wire77 = reg21;
  always
    @(posedge clk) begin
      for (forvar78 = (1'h0); (forvar78 < (1'h1)); forvar78 = (forvar78 + (1'h1)))
        begin
          if (((~|({(!wire75)} * $unsigned($signed(wire1)))) >> $unsigned($unsigned(((8'ha2) ^ (~wire77))))))
            begin
              reg79 = wire1;
              reg80 = wire1[(4'hc):(3'h5)];
              reg81 = $unsigned($unsigned((wire1 && (~|(forvar78 ?
                  wire3 : (8'had))))));
            end
          else
            begin
              reg82 <= {$unsigned($unsigned((^(reg13 - reg13)))),
                  forvar78[(1'h1):(1'h0)]};
              reg83 = reg16;
              reg84 = ($signed(((wire75 ? {(7'h42), wire0} : (wire25 < wire0)) ?
                  $signed({wire1, reg22}) : reg80[(3'h6):(3'h6)])) == wire77);
              reg85 <= ($signed(({(wire24 ? reg13 : reg82), (8'ha6)} ?
                      $unsigned($unsigned(wire24)) : ((reg84 ~^ (8'hb1)) ?
                          {reg82} : $unsigned(reg83)))) ?
                  ((($unsigned((8'hb1)) ?
                      wire24[(1'h1):(1'h1)] : wire2) >> $unsigned(wire1)) >> reg7[(4'hc):(4'hc)]) : (wire2[(5'h13):(4'ha)] ?
                      reg79[(3'h4):(2'h3)] : $unsigned($unsigned($unsigned(wire26)))));
              reg86 = (reg22[(4'ha):(3'h4)] ?
                  wire75 : $unsigned(((reg82 ?
                      (~|(8'h9c)) : (wire4 <= reg83)) + ($unsigned(wire24) ?
                      (~|reg10) : $signed(wire77)))));
            end
          for (forvar87 = (1'h0); (forvar87 < (2'h2)); forvar87 = (forvar87 + (1'h1)))
            begin
              reg88 = wire25;
              reg89 <= (reg22 ?
                  $unsigned($unsigned(((~&reg79) <<< $unsigned(wire3)))) : reg85[(5'h13):(1'h1)]);
              reg90 <= ((^~($unsigned({reg79}) != reg79)) * (~^(($unsigned(wire1) ?
                  $unsigned(forvar87) : $signed(reg83)) - ($signed(reg81) ?
                  (!reg84) : $unsigned(reg84)))));
              reg91 <= ((wire77[(4'hc):(1'h0)] ?
                  ($unsigned((~^reg88)) <= forvar78[(1'h1):(1'h0)]) : (wire4[(3'h7):(2'h3)] ?
                      reg11 : (((8'ha6) ? reg21 : reg17) ?
                          forvar78[(2'h3):(1'h0)] : reg17))) <<< wire3);
              reg92 <= $unsigned((wire26[(3'h6):(2'h3)] ?
                  ((&(~&reg80)) || ((reg7 > (8'hb6)) >>> reg83[(1'h0):(1'h0)])) : {$unsigned((wire3 ?
                          reg22 : reg85))}));
            end
          for (forvar93 = (1'h0); (forvar93 < (2'h3)); forvar93 = (forvar93 + (1'h1)))
            begin
              reg94 <= wire1[(4'ha):(4'ha)];
              reg95 = $unsigned((^(reg11[(3'h4):(2'h3)] >>> $unsigned(forvar87[(4'h9):(2'h2)]))));
              reg96 <= {$signed(reg92)};
            end
          for (forvar97 = (1'h0); (forvar97 < (2'h2)); forvar97 = (forvar97 + (1'h1)))
            begin
              reg98 <= (~$unsigned($unsigned({reg90})));
              reg99 = $unsigned($unsigned(($unsigned($unsigned((8'hb4))) <<< (~|{(8'ha0)}))));
              reg100 = (($unsigned(reg92) ?
                  reg84 : reg79[(3'h5):(3'h5)]) >>> $unsigned(reg7));
              reg101 = (reg13[(3'h6):(3'h6)] | reg80);
              reg102 <= {(-reg81[(1'h0):(1'h0)])};
            end
        end
      for (forvar103 = (1'h0); (forvar103 < (2'h3)); forvar103 = (forvar103 + (1'h1)))
        begin
          if ($signed($signed((wire26 >>> (~reg95[(1'h0):(1'h0)])))))
            begin
              reg104 <= (&((&((wire26 + (8'ha5)) <<< $signed(reg90))) <<< (+($unsigned(reg92) >> $unsigned(reg94)))));
            end
          else
            begin
              reg105 = $signed($unsigned($unsigned(((~^reg85) ~^ (reg102 ?
                  wire2 : (8'hb1))))));
              reg106 <= $signed(wire4);
              reg107 <= $unsigned((({((8'ha0) ? forvar103 : reg22),
                      (reg106 ^~ reg88)} ?
                  forvar97[(4'ha):(1'h0)] : $unsigned(wire2)) | $signed((^~{reg99,
                  wire0}))));
            end
          for (forvar108 = (1'h0); (forvar108 < (1'h1)); forvar108 = (forvar108 + (1'h1)))
            begin
              reg109 <= reg96;
              reg110 <= $unsigned($unsigned($signed(forvar103)));
              reg111 <= {$unsigned({wire77[(3'h6):(3'h4)],
                      (~&(reg88 * (8'hae)))})};
            end
          for (forvar112 = (1'h0); (forvar112 < (2'h3)); forvar112 = (forvar112 + (1'h1)))
            begin
              reg113 <= ($unsigned(forvar93) ?
                  $unsigned(($signed($unsigned(reg101)) && reg89[(4'h8):(3'h6)])) : wire1[(5'h11):(1'h0)]);
              reg114 = ((7'h43) ?
                  ($signed((~|reg17[(4'he):(4'hc)])) ?
                      reg18[(1'h0):(1'h0)] : reg7[(4'h9):(3'h5)]) : reg7[(3'h4):(3'h4)]);
            end
        end
      reg115 <= (($unsigned({(wire25 < reg96)}) & ((^$signed(reg83)) | (reg81[(4'hb):(1'h0)] ?
              (^reg96) : (~&wire26)))) ?
          reg102 : reg88[(3'h5):(1'h1)]);
    end
  assign wire116 = (reg17 ^ (^~({(^~reg10)} ?
                       (&(reg113 != reg82)) : (~^((8'hbd) ? wire3 : reg107)))));
  always
    @(posedge clk) begin
      if (reg98)
        begin
          for (forvar117 = (1'h0); (forvar117 < (1'h0)); forvar117 = (forvar117 + (1'h1)))
            begin
              reg118 <= reg10;
              reg119 = reg91;
              reg120 <= reg22[(1'h1):(1'h0)];
              reg121 <= (7'h40);
              reg122 = (&reg89);
            end
          for (forvar123 = (1'h0); (forvar123 < (1'h0)); forvar123 = (forvar123 + (1'h1)))
            begin
              reg124 <= (^($signed(((wire25 == wire0) ?
                  reg121 : (^(8'h9d)))) ^~ (($signed(reg107) ?
                      (wire25 < forvar123) : $signed(forvar117)) ?
                  $unsigned((forvar117 & reg82)) : (reg11 ?
                      wire25[(5'h10):(4'h9)] : (wire2 <<< reg115)))));
              reg125 = ((8'ha7) <<< (((reg124[(4'hf):(3'h6)] * (reg113 ?
                      reg109 : (7'h42))) ?
                  $signed((!reg102)) : (|$unsigned(forvar117))) + reg13[(1'h0):(1'h0)]));
              reg126 <= (($unsigned(wire24[(2'h3):(1'h0)]) ?
                      $unsigned($signed({(8'hbd)})) : ($unsigned((8'hb4)) ?
                          ((reg124 ~^ reg122) >= ((8'hbf) && forvar123)) : (8'hb8))) ?
                  {(+wire116),
                      $signed(wire1[(4'ha):(4'h8)])} : ((!(wire1[(3'h7):(2'h2)] ?
                      wire0 : (wire75 ? reg120 : reg92))) < {(~|((7'h40) ?
                          reg17 : reg111)),
                      reg85}));
              reg127 = reg121[(4'hb):(4'hb)];
              reg128 <= reg126;
            end
          for (forvar129 = (1'h0); (forvar129 < (3'h4)); forvar129 = (forvar129 + (1'h1)))
            begin
              reg130 <= $unsigned({$signed({(reg121 ? wire116 : reg121)})});
              reg131 <= reg11[(3'h6):(2'h2)];
              reg132 = (reg131 || reg115[(1'h1):(1'h1)]);
            end
          for (forvar133 = (1'h0); (forvar133 < (2'h2)); forvar133 = (forvar133 + (1'h1)))
            begin
              reg134 <= $unsigned({$unsigned($signed((wire116 ?
                      wire4 : (8'hab)))),
                  reg111[(5'h15):(2'h2)]});
              reg135 <= (reg115 ?
                  reg18 : {((^(wire25 <<< reg110)) && ((reg131 ?
                          reg102 : (8'h9c)) >>> (wire75 >> wire75))),
                      (((~reg125) ?
                          reg106 : reg92[(5'h13):(5'h12)]) << ((reg109 >= reg21) - (reg127 > reg7)))});
              reg136 = reg132;
            end
        end
      else
        begin
          if ((~^(reg115[(2'h2):(1'h1)] ?
              (8'ha8) : $unsigned(reg128[(3'h4):(2'h2)]))))
            begin
              reg117 <= $signed(forvar117);
              reg119 = {($unsigned(((^~reg122) ?
                          (reg113 ? reg128 : reg85) : $unsigned(reg7))) ?
                      (!((reg122 < (8'hb9)) ~^ $unsigned(reg89))) : $signed(wire77)),
                  (&((((8'hab) >> reg92) ^ (8'hb6)) ?
                      reg102 : (&(reg89 - wire2))))};
            end
          else
            begin
              reg117 <= reg16;
            end
          reg120 <= wire4;
        end
      reg137 = ($unsigned($signed($unsigned((~^(8'h9f))))) ?
          $signed($unsigned(reg118[(1'h0):(1'h0)])) : $unsigned(reg122[(3'h5):(2'h2)]));
      for (forvar138 = (1'h0); (forvar138 < (1'h1)); forvar138 = (forvar138 + (1'h1)))
        begin
          for (forvar139 = (1'h0); (forvar139 < (1'h1)); forvar139 = (forvar139 + (1'h1)))
            begin
              reg140 <= {$unsigned((reg132 ?
                      (-$signed(reg91)) : reg119[(1'h0):(1'h0)]))};
              reg141 <= wire116[(1'h0):(1'h0)];
              reg142 = $signed(wire2);
              reg143 = (8'h9f);
            end
          for (forvar144 = (1'h0); (forvar144 < (1'h1)); forvar144 = (forvar144 + (1'h1)))
            begin
              reg145 <= reg135[(2'h2):(1'h0)];
            end
          reg146 = ((wire75 >> {((|(8'h9e)) ?
                  $signed(reg121) : {forvar129,
                      reg90})}) - wire4[(5'h10):(1'h0)]);
        end
      for (forvar147 = (1'h0); (forvar147 < (2'h2)); forvar147 = (forvar147 + (1'h1)))
        begin
          for (forvar148 = (1'h0); (forvar148 < (3'h4)); forvar148 = (forvar148 + (1'h1)))
            begin
              reg149 = reg130;
              reg150 <= reg117;
              reg151 <= $unsigned(reg118[(1'h1):(1'h0)]);
              reg152 <= (8'h9e);
            end
          for (forvar153 = (1'h0); (forvar153 < (1'h1)); forvar153 = (forvar153 + (1'h1)))
            begin
              reg154 <= {forvar147[(4'h8):(3'h4)],
                  {$signed(((!(8'ha5)) ?
                          (8'h9e) : ((8'h9d) ? (7'h43) : forvar117)))}};
              reg155 <= ((!$signed({$signed(wire75)})) * {$signed($signed(wire25[(2'h2):(2'h2)])),
                  reg120});
              reg156 <= (($unsigned(((reg94 <= reg132) ?
                          $signed(reg91) : $signed(reg134))) ?
                      (8'h9e) : (reg122 ?
                          $unsigned(((8'had) - reg98)) : $signed($unsigned(wire26)))) ?
                  (((~|(wire77 ? wire1 : wire116)) ?
                      ((reg142 & reg136) ?
                          (reg122 ? reg109 : reg143) : (reg122 ?
                              forvar147 : reg128)) : reg128) || ({(reg146 ~^ reg143)} ?
                      reg154 : (~&reg149[(1'h1):(1'h0)]))) : ((8'hb0) << forvar148));
            end
          reg157 = reg122[(3'h5):(1'h0)];
          reg158 <= ($signed($unsigned($signed($unsigned(wire116)))) > $signed((~^forvar123)));
        end
    end
  assign wire159 = {$signed($signed(reg94)), reg10};
  assign wire160 = reg85;
  always
    @(posedge clk) begin
      for (forvar161 = (1'h0); (forvar161 < (3'h4)); forvar161 = (forvar161 + (1'h1)))
        begin
          for (forvar162 = (1'h0); (forvar162 < (1'h1)); forvar162 = (forvar162 + (1'h1)))
            begin
              reg163 <= reg155;
              reg164 = ($signed($signed(reg120)) ?
                  ($unsigned(($signed(reg117) ?
                          $signed((8'ha0)) : $unsigned(reg16))) ?
                      $signed({(+reg156)}) : {($unsigned(wire160) ?
                              (^reg21) : $signed((8'hb8)))}) : {reg109[(4'h8):(3'h6)],
                      reg126[(3'h6):(1'h0)]});
              reg165 = wire160;
              reg166 = (reg22 ?
                  reg7 : {(((!reg141) > $signed(reg11)) <= wire116)});
            end
          for (forvar167 = (1'h0); (forvar167 < (2'h3)); forvar167 = (forvar167 + (1'h1)))
            begin
              reg168 = $unsigned(($signed(forvar161) ?
                  (({reg82} ?
                          (reg92 ? reg141 : reg150) : (reg126 ?
                              reg13 : reg117)) ?
                      reg85[(3'h5):(2'h3)] : (~^$unsigned((8'hae)))) : reg110));
              reg169 = (reg126[(4'hd):(3'h5)] & ({{(reg17 ? reg109 : reg164)},
                      ((reg124 ? reg94 : reg115) || reg151)} ?
                  (~&reg111[(4'h8):(4'h8)]) : ({(|wire1), $signed(reg18)} ?
                      ((8'hae) & $unsigned(reg156)) : $unsigned($signed(reg155)))));
              reg170 <= (wire3[(4'ha):(3'h4)] + reg85[(3'h7):(1'h0)]);
            end
          for (forvar171 = (1'h0); (forvar171 < (2'h2)); forvar171 = (forvar171 + (1'h1)))
            begin
              reg172 <= ($unsigned($unsigned((reg110[(2'h2):(1'h0)] ?
                      $unsigned(reg22) : wire25))) ?
                  $signed($signed((~^(wire2 ?
                      reg111 : reg156)))) : (!$signed($unsigned((&reg18)))));
              reg173 = $signed((~^$unsigned($unsigned(reg102[(3'h6):(2'h2)]))));
              reg174 = reg17;
              reg175 = (($signed($signed(((8'hae) & (8'h9f)))) ?
                      reg13[(3'h6):(3'h4)] : {(&(+reg85)),
                          $signed((~|wire26))}) ?
                  ($unsigned((~^reg126)) ?
                      $unsigned(reg110) : $signed($signed($signed((8'hab))))) : (forvar167 ?
                      $signed(((forvar162 ? reg174 : reg96) ?
                          reg163[(3'h5):(3'h5)] : (+reg130))) : (+(reg91[(3'h4):(1'h0)] ?
                          ((8'hb4) * wire2) : reg168[(3'h5):(3'h4)]))));
              reg176 = (-{$signed(($signed((8'hba)) ?
                      $unsigned(reg107) : wire26))});
            end
          for (forvar177 = (1'h0); (forvar177 < (1'h1)); forvar177 = (forvar177 + (1'h1)))
            begin
              reg178 <= (8'hb3);
              reg179 = (reg11 <<< (8'ha0));
            end
        end
      for (forvar180 = (1'h0); (forvar180 < (3'h4)); forvar180 = (forvar180 + (1'h1)))
        begin
          reg181 <= (~|$unsigned($signed((&$signed(reg154)))));
          for (forvar182 = (1'h0); (forvar182 < (2'h3)); forvar182 = (forvar182 + (1'h1)))
            begin
              reg183 = (((wire75[(2'h2):(1'h1)] ?
                      (^~{reg16,
                          wire159}) : ($signed(wire0) <= (reg141 ^ reg154))) ?
                  $signed({(reg155 ? reg156 : (8'h9d)),
                      $signed(reg22)}) : $signed((wire3[(2'h2):(1'h1)] >> (reg121 >= reg7)))) * (!$unsigned({$signed(reg151)})));
              reg184 <= $signed($signed(($unsigned(reg126[(2'h3):(1'h1)]) ^ ($signed(reg16) << reg175))));
            end
          reg185 <= ($signed((^reg91)) ? reg174 : reg150);
        end
      for (forvar186 = (1'h0); (forvar186 < (1'h1)); forvar186 = (forvar186 + (1'h1)))
        begin
          if ($signed((|reg94[(3'h5):(1'h1)])))
            begin
              reg187 <= $signed(((~|(&$signed(reg128))) <= ($unsigned((reg82 < reg118)) ?
                  $signed((wire116 << (8'hb5))) : $signed({reg134, wire75}))));
              reg188 = (!($signed({(reg187 <<< forvar167), $signed(reg121)}) ?
                  reg22 : (($unsigned(reg183) ? $signed(wire159) : (!reg151)) ?
                      $unsigned((reg150 ?
                          reg131 : reg176)) : ((reg130 - (8'hbf)) ~^ $unsigned((8'ha5))))));
              reg189 = $signed((~^reg96[(4'hb):(3'h5)]));
              reg190 = $unsigned({$signed($signed({reg85})), (7'h42)});
              reg191 <= {$unsigned({((reg117 ? reg185 : (8'ha1)) ~^ {(8'hb3),
                          reg184}),
                      $unsigned((reg151 ? wire116 : reg163))})};
            end
          else
            begin
              reg188 = ((($signed($unsigned((8'hbf))) + (~(~|reg22))) ?
                  reg10[(4'he):(4'h9)] : reg174[(4'h8):(3'h7)]) | $unsigned(({reg163,
                      (8'ha0)} ?
                  reg121 : $signed(wire3[(2'h3):(2'h3)]))));
            end
          for (forvar192 = (1'h0); (forvar192 < (3'h4)); forvar192 = (forvar192 + (1'h1)))
            begin
              reg193 = $unsigned((reg181[(1'h1):(1'h0)] | (8'hba)));
            end
        end
      reg194 <= $unsigned((^($unsigned((forvar177 ? reg178 : forvar161)) ?
          reg191[(4'h9):(4'h9)] : $signed(reg154[(4'h8):(3'h5)]))));
    end
  module195 #() modinst244 (.y(wire243), .wire198(wire2), .clk(clk), .wire199(reg155), .wire197(reg163), .wire200(reg131), .wire196(reg113));
  module224 #() modinst246 (wire245, clk, reg17, reg135, reg90, reg156, reg118);
  always
    @(posedge clk) begin
      for (forvar247 = (1'h0); (forvar247 < (1'h1)); forvar247 = (forvar247 + (1'h1)))
        begin
          for (forvar248 = (1'h0); (forvar248 < (3'h4)); forvar248 = (forvar248 + (1'h1)))
            begin
              reg249 <= reg13;
            end
          for (forvar250 = (1'h0); (forvar250 < (2'h2)); forvar250 = (forvar250 + (1'h1)))
            begin
              reg251 <= {(((reg102 * (reg91 | (7'h41))) ?
                          ($unsigned(reg156) ?
                              ((7'h44) < forvar250) : $signed(reg134)) : {reg131,
                              $unsigned(reg18)}) ?
                      ($signed((reg158 ?
                          reg85 : reg111)) != wire25[(5'h13):(3'h4)]) : reg130),
                  reg7[(2'h2):(2'h2)]};
            end
          for (forvar252 = (1'h0); (forvar252 < (1'h0)); forvar252 = (forvar252 + (1'h1)))
            begin
              reg253 <= ($signed($signed((forvar250 ?
                  $unsigned(reg115) : {(8'hbc)}))) << ((reg154[(4'hb):(4'h8)] <<< ((~&reg156) ?
                  $unsigned(reg131) : $signed(wire116))) ~^ $signed(((7'h42) ?
                  reg104 : (reg17 ? (8'hb7) : reg7)))));
            end
        end
      for (forvar254 = (1'h0); (forvar254 < (1'h0)); forvar254 = (forvar254 + (1'h1)))
        begin
          for (forvar255 = (1'h0); (forvar255 < (3'h4)); forvar255 = (forvar255 + (1'h1)))
            begin
              reg256 = ($unsigned((($unsigned(reg90) > {reg118, reg163}) ?
                  ($signed(reg98) ~^ (reg170 && reg131)) : $signed(reg96[(4'ha):(2'h2)]))) >>> ({$unsigned(reg194)} ?
                  forvar254[(2'h2):(1'h0)] : $signed((reg135[(4'ha):(3'h4)] ?
                      $unsigned(reg151) : $unsigned((8'hb9))))));
              reg257 <= (reg16 ?
                  {reg140} : $signed({($unsigned(reg104) ?
                          {reg181} : (wire75 > forvar252))}));
              reg258 = wire3;
              reg259 = {(^~(&$signed({wire160, wire0}))),
                  reg258[(4'hd):(4'hc)]};
            end
          for (forvar260 = (1'h0); (forvar260 < (1'h0)); forvar260 = (forvar260 + (1'h1)))
            begin
              reg261 = forvar254;
              reg262 <= {reg90,
                  ((~^(~|(reg94 > wire26))) ?
                      $signed(({forvar248, wire116} ?
                          (8'hb4) : reg11)) : (({reg145} == wire245) > (-((8'hb3) < reg155))))};
            end
          for (forvar263 = (1'h0); (forvar263 < (2'h3)); forvar263 = (forvar263 + (1'h1)))
            begin
              reg264 <= ((((~&(|reg145)) ?
                  $unsigned((|reg10)) : (-{reg262,
                      reg185})) > ((forvar250 << reg258[(5'h12):(4'h9)]) ?
                  (~&(~^(8'hae))) : $signed((+reg145)))) && $unsigned({(wire26 != $signed(reg106)),
                  (8'h9d)}));
            end
        end
      for (forvar265 = (1'h0); (forvar265 < (3'h4)); forvar265 = (forvar265 + (1'h1)))
        begin
          for (forvar266 = (1'h0); (forvar266 < (1'h1)); forvar266 = (forvar266 + (1'h1)))
            begin
              reg267 <= $unsigned($unsigned(wire26));
              reg268 <= (|$unsigned(wire26[(4'h8):(2'h2)]));
              reg269 <= $unsigned($unsigned($unsigned(((~|reg253) == (-(8'hba))))));
            end
          reg270 <= reg264;
          for (forvar271 = (1'h0); (forvar271 < (1'h1)); forvar271 = (forvar271 + (1'h1)))
            begin
              reg272 <= wire0;
              reg273 = (((reg155[(2'h3):(2'h2)] ?
                      ((reg163 ^ reg154) * $unsigned(reg251)) : (reg155 != reg259)) << reg124) ?
                  reg104 : ((((-reg268) <= reg90) >>> ($signed(reg172) ?
                      reg134 : ((7'h42) ? reg91 : forvar266))) || reg16));
              reg274 <= ((8'h9e) ?
                  (($signed({reg141, reg17}) <<< {$unsigned(wire245),
                      $signed(reg145)}) < (+{{wire1, (8'h9d)},
                      reg126[(5'h10):(4'h9)]})) : wire24);
            end
        end
      for (forvar275 = (1'h0); (forvar275 < (1'h0)); forvar275 = (forvar275 + (1'h1)))
        begin
          for (forvar276 = (1'h0); (forvar276 < (1'h1)); forvar276 = (forvar276 + (1'h1)))
            begin
              reg277 = (((&$unsigned((wire26 || reg121))) ^ reg126) ?
                  reg135[(3'h5):(2'h3)] : (reg17[(4'h9):(2'h2)] <= ($unsigned($signed((8'haf))) ?
                      ($unsigned(reg18) ?
                          wire26[(2'h3):(1'h0)] : $unsigned(reg172)) : (!reg251[(3'h4):(1'h0)]))));
              reg278 <= $unsigned($unsigned((~^(((8'hb8) <= reg187) ^ (reg92 ?
                  reg13 : forvar248)))));
              reg279 = ((forvar275[(4'h9):(1'h0)] <<< $unsigned(((wire159 | reg158) ?
                  (+(8'hb2)) : {wire24}))) * $unsigned($unsigned((reg256 ?
                  {reg141, reg191} : {reg91, (8'h9d)}))));
              reg280 = (((~(reg106[(3'h7):(3'h6)] ? (~^reg92) : (|(8'ha7)))) ?
                  (($unsigned(reg16) & forvar250) ?
                      forvar260[(4'ha):(1'h1)] : (reg272 >>> (reg191 + reg194))) : $signed((|$signed(forvar254)))) << (+reg187[(3'h4):(1'h1)]));
              reg281 = reg134[(4'hf):(4'hd)];
            end
        end
      for (forvar282 = (1'h0); (forvar282 < (1'h1)); forvar282 = (forvar282 + (1'h1)))
        begin
          reg283 <= (~({((wire243 ?
                  reg267 : reg158) + $unsigned(reg152))} ~^ $signed({((8'hb1) ?
                  forvar276 : wire26),
              wire2[(4'he):(1'h0)]})));
          reg284 = (+$unsigned(wire116));
          for (forvar285 = (1'h0); (forvar285 < (2'h3)); forvar285 = (forvar285 + (1'h1)))
            begin
              reg286 <= (~(reg251 == ((~&$signed((8'hb1))) * $unsigned($unsigned(wire159)))));
              reg287 <= (((8'hac) & (7'h40)) ?
                  $signed(forvar247[(1'h0):(1'h0)]) : {$unsigned($unsigned((reg283 && reg152))),
                      (reg150[(2'h2):(2'h2)] & $signed((wire75 ?
                          forvar265 : wire0)))});
              reg288 = reg194[(3'h4):(2'h3)];
              reg289 <= (8'hae);
              reg290 = $unsigned((8'hbf));
            end
          for (forvar291 = (1'h0); (forvar291 < (3'h4)); forvar291 = (forvar291 + (1'h1)))
            begin
              reg292 <= (8'hbb);
              reg293 = {forvar260,
                  ($unsigned(wire26) ?
                      $unsigned($unsigned((reg115 ?
                          (7'h40) : wire0))) : $unsigned({(reg111 ?
                              reg128 : (8'haf))}))};
              reg294 <= $unsigned(reg284);
            end
          if ($unsigned((^~(reg120[(4'h8):(2'h3)] == reg178[(3'h7):(3'h5)]))))
            begin
              reg295 <= (reg277[(3'h6):(3'h6)] == $unsigned(($unsigned((reg267 ?
                      reg294 : reg261)) ?
                  ((8'haa) == $signed(reg257)) : $signed($unsigned(wire26)))));
            end
          else
            begin
              reg295 <= $signed(wire4[(4'h8):(2'h3)]);
              reg296 <= (+(($unsigned($unsigned(wire1)) <= (((8'ha8) ~^ reg158) ?
                  $signed(reg280) : (&reg273))) == reg259[(3'h5):(3'h5)]));
              reg297 = ($unsigned($signed({(~|reg124), wire26})) && (8'ha1));
            end
        end
    end
  assign wire298 = {$unsigned(reg287)};
  assign wire299 = (((-(reg13[(1'h1):(1'h1)] ^ ((8'had) << reg156))) && (~|{(reg85 ?
                               (7'h40) : wire2)})) ?
                       {($unsigned((reg113 ? wire0 : reg22)) ?
                               $signed((+(8'ha8))) : $signed((reg262 ?
                                   reg106 : reg11))),
                           {reg267[(4'hc):(1'h1)],
                               reg257}} : $signed($unsigned(reg296[(4'hf):(3'h6)])));
  assign wire300 = {($unsigned(reg120) << reg113[(4'h8):(3'h5)]),
                       reg141[(3'h5):(2'h2)]};
  assign wire301 = (!wire25[(4'h8):(3'h4)]);
  assign wire302 = (reg152[(1'h1):(1'h1)] ?
                       reg117 : $unsigned(($signed(((8'hbb) ?
                               (8'h9e) : reg16)) ?
                           reg251 : reg130[(3'h5):(2'h2)])));
  assign wire303 = $unsigned(reg21[(1'h1):(1'h0)]);
  assign wire304 = reg264[(1'h1):(1'h1)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module195
#(parameter param241 = ({(^~(~{(8'haf)})), (^~((~^(8'hb3)) & ((8'ha6) || (8'haf))))} ? (^(8'h9f)) : (~&((-((8'h9c) & (8'ha8))) || (|(^~(8'ha9)))))), 
parameter param242 = (param241 == param241))
(y, clk, wire196, wire197, wire198, wire199, wire200);
  output wire [(32'h163):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'he):(1'h0)] wire196;
  input wire signed [(5'h15):(1'h0)] wire197;
  input wire [(5'h14):(1'h0)] wire198;
  input wire signed [(3'h5):(1'h0)] wire199;
  input wire signed [(5'h15):(1'h0)] wire200;
  wire signed [(5'h13):(1'h0)] wire240;
  wire [(3'h4):(1'h0)] wire239;
  wire signed [(4'he):(1'h0)] wire238;
  wire signed [(2'h3):(1'h0)] wire201;
  wire signed [(3'h6):(1'h0)] wire236;
  reg [(5'h15):(1'h0)] reg223 = (1'h0);
  reg [(5'h15):(1'h0)] reg222 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg221 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg220 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg217 = (1'h0);
  reg [(4'he):(1'h0)] reg215 = (1'h0);
  reg signed [(4'he):(1'h0)] reg214 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg213 = (1'h0);
  reg [(5'h10):(1'h0)] reg211 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg208 = (1'h0);
  reg [(5'h13):(1'h0)] reg207 = (1'h0);
  reg [(3'h7):(1'h0)] reg206 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg204 = (1'h0);
  reg [(5'h13):(1'h0)] reg202 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar219 = (1'h0);
  reg [(5'h10):(1'h0)] reg218 = (1'h0);
  reg [(4'h8):(1'h0)] reg216 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar212 = (1'h0);
  reg [(2'h2):(1'h0)] forvar210 = (1'h0);
  reg [(4'hd):(1'h0)] forvar209 = (1'h0);
  reg [(4'ha):(1'h0)] forvar205 = (1'h0);
  reg [(5'h14):(1'h0)] forvar203 = (1'h0);
  assign y = {wire240,
                 wire239,
                 wire238,
                 wire201,
                 wire236,
                 reg223,
                 reg222,
                 reg221,
                 reg220,
                 reg217,
                 reg215,
                 reg214,
                 reg213,
                 reg211,
                 reg208,
                 reg207,
                 reg206,
                 reg204,
                 reg202,
                 forvar219,
                 reg218,
                 reg216,
                 forvar212,
                 forvar210,
                 forvar209,
                 forvar205,
                 forvar203,
                 (1'h0)};
  assign wire201 = $unsigned(($unsigned({(wire196 ? wire197 : wire200)}) ?
                       ((^~$unsigned((8'hbb))) ?
                           $signed(wire200[(4'he):(3'h7)]) : (-$signed(wire197))) : $unsigned(wire198)));
  always
    @(posedge clk) begin
      reg202 <= ((~(!wire200[(5'h14):(2'h2)])) || $signed(($signed(wire198[(4'hf):(4'hb)]) ?
          $signed($unsigned(wire198)) : (^wire199))));
      for (forvar203 = (1'h0); (forvar203 < (2'h3)); forvar203 = (forvar203 + (1'h1)))
        begin
          reg204 <= $unsigned($signed({$unsigned((~(8'hb0)))}));
          for (forvar205 = (1'h0); (forvar205 < (1'h1)); forvar205 = (forvar205 + (1'h1)))
            begin
              reg206 <= wire197;
              reg207 <= forvar205[(1'h1):(1'h1)];
            end
        end
    end
  always
    @(posedge clk) begin
      reg208 <= ($unsigned((^~(wire201[(1'h1):(1'h1)] == (reg206 ?
          wire196 : wire198)))) * (8'ha8));
      for (forvar209 = (1'h0); (forvar209 < (1'h1)); forvar209 = (forvar209 + (1'h1)))
        begin
          for (forvar210 = (1'h0); (forvar210 < (1'h1)); forvar210 = (forvar210 + (1'h1)))
            begin
              reg211 <= (&$unsigned(wire198));
            end
          for (forvar212 = (1'h0); (forvar212 < (1'h0)); forvar212 = (forvar212 + (1'h1)))
            begin
              reg213 <= ($signed((~|$unsigned($signed(wire198)))) ?
                  ((+wire199[(1'h0):(1'h0)]) & {(-(reg208 - reg207)),
                      $unsigned($unsigned(reg208))}) : $signed(($signed($signed(reg204)) | (+reg207[(5'h12):(2'h2)]))));
            end
          if ($unsigned($unsigned(($unsigned(reg211[(3'h7):(3'h5)]) * $signed((reg202 == reg206))))))
            begin
              reg214 <= (wire200 << $signed((~|($signed(wire201) ?
                  reg202 : (reg211 ? wire201 : reg207)))));
              reg215 <= $signed(reg202);
              reg216 = (|wire201[(1'h1):(1'h0)]);
              reg217 <= reg213;
              reg218 = ((forvar212 ?
                  (reg213[(5'h12):(4'hf)] ?
                      {{forvar210}} : (reg206 ?
                          ((8'hbb) ? reg211 : wire196) : ((8'hb2) ?
                              wire199 : reg211))) : (reg207 ?
                      $unsigned((-(8'haf))) : $signed($signed((8'hb9))))) | ($signed(($signed(wire197) ?
                      (&(8'h9c)) : $unsigned(wire199))) ?
                  (+forvar212) : (reg215 && (-{reg217}))));
            end
          else
            begin
              reg214 <= $signed(reg202[(5'h13):(1'h1)]);
            end
          for (forvar219 = (1'h0); (forvar219 < (2'h2)); forvar219 = (forvar219 + (1'h1)))
            begin
              reg220 <= forvar210;
              reg221 <= forvar212[(4'ha):(3'h5)];
              reg222 <= ($signed((8'h9d)) ?
                  $signed($unsigned((wire199[(3'h4):(1'h0)] <<< reg216))) : (8'hb8));
            end
        end
      reg223 <= $signed((~|(~|(reg206[(3'h4):(3'h4)] ^ forvar209))));
    end
  module224 #() modinst237 (wire236, clk, reg222, reg217, reg213, wire198, reg220);
  assign wire238 = ($signed({(+(reg217 ^~ (8'ha9)))}) - reg208[(2'h3):(1'h0)]);
  assign wire239 = (~|$unsigned(reg206));
  assign wire240 = {reg214};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module27  (y, clk, wire28, wire29, wire30, wire31);
  output wire [(32'h3f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h15):(1'h0)] wire28;
  input wire [(5'h14):(1'h0)] wire29;
  input wire [(5'h14):(1'h0)] wire30;
  input wire signed [(5'h10):(1'h0)] wire31;
  wire signed [(2'h2):(1'h0)] wire74;
  wire signed [(5'h13):(1'h0)] wire49;
  wire signed [(4'ha):(1'h0)] wire51;
  wire signed [(4'h8):(1'h0)] wire52;
  wire [(5'h14):(1'h0)] wire53;
  wire [(2'h3):(1'h0)] wire72;
  assign y = {wire74, wire49, wire51, wire52, wire53, wire72, (1'h0)};
  module32 #() modinst50 (.y(wire49), .clk(clk), .wire33(wire29), .wire34(wire28), .wire36(wire31), .wire35(wire30));
  assign wire51 = {$unsigned(wire31)};
  assign wire52 = (wire28[(2'h3):(2'h3)] != wire29[(3'h7):(3'h6)]);
  assign wire53 = $signed(($unsigned(wire30) <<< wire30[(4'ha):(1'h1)]));
  module54 #() modinst73 (wire72, clk, wire52, wire31, wire29, wire53, wire28);
  assign wire74 = (|(~&(((+wire72) ? (wire51 ? wire72 : wire72) : (^wire29)) ?
                      (8'ha4) : wire49)));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module54  (y, clk, wire59, wire58, wire57, wire56, wire55);
  output wire [(32'h7d):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(2'h3):(1'h0)] wire59;
  input wire [(5'h10):(1'h0)] wire58;
  input wire [(5'h14):(1'h0)] wire57;
  input wire [(3'h5):(1'h0)] wire56;
  input wire [(2'h3):(1'h0)] wire55;
  wire signed [(4'hc):(1'h0)] wire71;
  wire signed [(3'h7):(1'h0)] wire70;
  wire signed [(3'h6):(1'h0)] wire69;
  wire [(4'hb):(1'h0)] wire68;
  wire [(4'he):(1'h0)] wire67;
  wire signed [(4'hd):(1'h0)] wire60;
  reg signed [(5'h15):(1'h0)] reg66 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg65 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg63 = (1'h0);
  reg [(3'h7):(1'h0)] reg64 = (1'h0);
  reg [(2'h2):(1'h0)] forvar62 = (1'h0);
  reg [(3'h6):(1'h0)] forvar61 = (1'h0);
  assign y = {wire71,
                 wire70,
                 wire69,
                 wire68,
                 wire67,
                 wire60,
                 reg66,
                 reg65,
                 reg63,
                 reg64,
                 forvar62,
                 forvar61,
                 (1'h0)};
  assign wire60 = wire57;
  always
    @(posedge clk) begin
      for (forvar61 = (1'h0); (forvar61 < (2'h3)); forvar61 = (forvar61 + (1'h1)))
        begin
          for (forvar62 = (1'h0); (forvar62 < (1'h1)); forvar62 = (forvar62 + (1'h1)))
            begin
              reg63 <= ({$signed(($signed(wire59) - forvar61[(3'h4):(1'h1)]))} ^~ wire60);
              reg64 = ($signed((~^{((8'ha4) ?
                      forvar61 : forvar62)})) == (({$unsigned(wire60)} ?
                      (+reg63[(3'h7):(2'h3)]) : ($unsigned(wire58) ?
                          (reg63 ? wire59 : wire59) : (wire57 ?
                              forvar61 : wire58))) ?
                  (^$signed((~|wire56))) : {$unsigned($signed((8'hae))),
                      ({wire60, (8'hb9)} ? (!forvar62) : (^wire60))}));
              reg65 <= {((+$signed(reg63[(2'h3):(1'h1)])) < (8'ha1)),
                  (wire55[(1'h0):(1'h0)] ?
                      ($unsigned(wire55) >>> ({wire60} ?
                          (forvar62 & wire57) : reg64)) : (8'hb2))};
              reg66 <= $signed((reg64 ?
                  reg65[(3'h7):(2'h3)] : ($signed($unsigned((7'h44))) ?
                      {wire57} : reg64[(3'h6):(1'h0)])));
            end
        end
    end
  assign wire67 = (~|$signed($signed((~^(+wire57)))));
  assign wire68 = wire58[(4'hb):(3'h4)];
  assign wire69 = {$signed(($signed(reg65) ?
                          ((wire60 - wire68) ?
                              $signed(reg65) : (!wire55)) : wire59))};
  assign wire70 = ((({$signed((8'ha1))} ?
                          wire67 : wire55[(2'h3):(1'h0)]) | $unsigned(reg63)) ?
                      {(($signed(reg63) - $signed(reg66)) >>> (^$signed(reg65))),
                          $unsigned(wire68[(4'hb):(3'h6)])} : ($unsigned($signed((|wire59))) >> {$signed((~|wire57))}));
  assign wire71 = (^$unsigned($signed((!(wire68 ? wire59 : wire69)))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module32  (y, clk, wire36, wire35, wire34, wire33);
  output wire [(32'h99):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h4):(1'h0)] wire36;
  input wire signed [(5'h13):(1'h0)] wire35;
  input wire signed [(2'h3):(1'h0)] wire34;
  input wire [(5'h10):(1'h0)] wire33;
  wire signed [(4'hc):(1'h0)] wire48;
  wire signed [(5'h13):(1'h0)] wire47;
  wire [(3'h7):(1'h0)] wire46;
  reg [(5'h12):(1'h0)] reg41 = (1'h0);
  reg [(4'he):(1'h0)] reg40 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg39 = (1'h0);
  reg [(4'hf):(1'h0)] reg45 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg44 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg43 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar42 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar38 = (1'h0);
  reg [(3'h5):(1'h0)] forvar37 = (1'h0);
  assign y = {wire48,
                 wire47,
                 wire46,
                 reg41,
                 reg40,
                 reg39,
                 reg45,
                 reg44,
                 reg43,
                 forvar42,
                 forvar38,
                 forvar37,
                 (1'h0)};
  always
    @(posedge clk) begin
      for (forvar37 = (1'h0); (forvar37 < (2'h3)); forvar37 = (forvar37 + (1'h1)))
        begin
          for (forvar38 = (1'h0); (forvar38 < (1'h1)); forvar38 = (forvar38 + (1'h1)))
            begin
              reg39 <= wire34;
              reg40 <= ($signed(wire33) << $unsigned($unsigned(((reg39 ?
                      wire35 : wire33) ?
                  forvar37 : {forvar37}))));
            end
          reg41 <= (wire33[(4'he):(3'h6)] & ({(~wire35[(4'hc):(3'h4)]),
              ((wire33 ? reg39 : reg39) ?
                  wire36 : $unsigned(forvar38))} ^~ ({$unsigned(reg39)} ?
              {$unsigned(wire35), $signed(wire34)} : (((7'h41) ?
                  (8'hb1) : reg40) + (~|forvar37)))));
          for (forvar42 = (1'h0); (forvar42 < (2'h3)); forvar42 = (forvar42 + (1'h1)))
            begin
              reg43 = (~^$signed(($unsigned($unsigned(wire34)) ?
                  (~^(wire35 << (7'h42))) : $unsigned((wire33 ?
                      reg39 : wire36)))));
              reg44 = $unsigned(forvar38[(1'h1):(1'h0)]);
              reg45 = {(|reg43[(1'h1):(1'h0)])};
            end
        end
    end
  assign wire46 = reg41;
  assign wire47 = ((reg41[(4'h8):(3'h6)] & ($unsigned((^~reg41)) ?
                      (reg40 ? (+reg40) : (^reg41)) : (((7'h43) * wire36) ?
                          reg39 : (8'ha8)))) << wire34[(1'h0):(1'h0)]);
  assign wire48 = wire47[(5'h12):(2'h3)];
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module224  (y, clk, wire229, wire228, wire227, wire226, wire225);
  output wire [(32'h3a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h14):(1'h0)] wire229;
  input wire signed [(4'he):(1'h0)] wire228;
  input wire [(5'h10):(1'h0)] wire227;
  input wire [(4'hb):(1'h0)] wire226;
  input wire [(2'h2):(1'h0)] wire225;
  wire [(4'h8):(1'h0)] wire235;
  wire signed [(4'h8):(1'h0)] wire234;
  wire signed [(3'h6):(1'h0)] wire233;
  wire [(4'hf):(1'h0)] wire232;
  wire signed [(3'h6):(1'h0)] wire231;
  wire signed [(4'he):(1'h0)] wire230;
  assign y = {wire235, wire234, wire233, wire232, wire231, wire230, (1'h0)};
  assign wire230 = (wire228[(4'h9):(3'h4)] | $unsigned($unsigned($signed($signed((8'hae))))));
  assign wire231 = ((($unsigned(wire226[(4'h8):(2'h3)]) <<< $signed((wire226 ?
                       wire227 : wire228))) ~^ (wire225 | $unsigned((wire230 ?
                       wire229 : (8'h9f))))) >>> wire227);
  assign wire232 = $unsigned((($unsigned(wire231) ^~ wire230[(4'ha):(3'h4)]) - $unsigned(wire230[(4'h8):(1'h0)])));
  assign wire233 = wire228[(2'h3):(2'h2)];
  assign wire234 = (-(wire228[(4'hd):(4'h8)] ?
                       ($unsigned((wire232 ?
                           wire231 : wire227)) >= wire228[(3'h7):(2'h2)]) : $unsigned({wire226})));
  assign wire235 = $unsigned(wire227);
endmodule