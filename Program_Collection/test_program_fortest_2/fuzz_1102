(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param33 = {{(((7'h42) && {(8'ha0)}) ? ({(8'haa)} ? ((8'ha6) ~^ (8'hbc)) : ((8'ha6) ? (8'hb8) : (8'ha4))) : (((8'h9d) ? (8'hb5) : (8'h9e)) ? ((7'h44) ? (8'hb5) : (8'hbe)) : (8'ha5)))}, (((((8'ha4) >> (8'h9c)) ? (~&(8'ha6)) : (8'hbf)) * ({(8'hb8), (8'h9c)} <<< ((8'hb3) ? (8'hb4) : (8'hb6)))) ? (8'hb5) : (((8'hb2) ^ ((8'hbe) * (8'hac))) ? (((8'ha5) ? (8'ha4) : (8'hba)) | ((8'hae) ? (8'hb9) : (8'hba))) : (~^(!(8'ha5)))))})
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h178):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h6):(1'h0)] wire4;
  input wire signed [(5'h14):(1'h0)] wire3;
  input wire signed [(3'h5):(1'h0)] wire2;
  input wire [(5'h14):(1'h0)] wire1;
  input wire [(5'h13):(1'h0)] wire0;
  wire signed [(5'h15):(1'h0)] wire32;
  wire signed [(5'h12):(1'h0)] wire31;
  wire signed [(3'h7):(1'h0)] wire30;
  reg [(4'ha):(1'h0)] reg27 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg25 = (1'h0);
  reg [(3'h6):(1'h0)] reg22 = (1'h0);
  reg [(5'h14):(1'h0)] reg20 = (1'h0);
  reg signed [(4'he):(1'h0)] reg19 = (1'h0);
  reg [(5'h11):(1'h0)] reg18 = (1'h0);
  reg [(5'h12):(1'h0)] reg13 = (1'h0);
  reg [(2'h3):(1'h0)] reg6 = (1'h0);
  reg [(5'h12):(1'h0)] reg11 = (1'h0);
  reg [(4'h9):(1'h0)] reg9 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg8 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg29 = (1'h0);
  reg [(4'ha):(1'h0)] reg28 = (1'h0);
  reg [(5'h13):(1'h0)] forvar26 = (1'h0);
  reg [(4'hc):(1'h0)] forvar24 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar23 = (1'h0);
  reg [(5'h15):(1'h0)] forvar21 = (1'h0);
  reg [(5'h11):(1'h0)] reg17 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg16 = (1'h0);
  reg [(4'hb):(1'h0)] forvar15 = (1'h0);
  reg signed [(4'he):(1'h0)] reg14 = (1'h0);
  reg [(5'h10):(1'h0)] reg12 = (1'h0);
  reg [(4'h8):(1'h0)] reg10 = (1'h0);
  reg [(3'h6):(1'h0)] forvar10 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg7 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar6 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg5 = (1'h0);
  assign y = {wire32,
                 wire31,
                 wire30,
                 reg27,
                 reg25,
                 reg22,
                 reg20,
                 reg19,
                 reg18,
                 reg13,
                 reg6,
                 reg11,
                 reg9,
                 reg8,
                 reg29,
                 reg28,
                 forvar26,
                 forvar24,
                 forvar23,
                 forvar21,
                 reg17,
                 reg16,
                 forvar15,
                 reg14,
                 reg12,
                 reg10,
                 forvar10,
                 reg7,
                 forvar6,
                 reg5,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg5 = ($unsigned($unsigned(wire0)) != $unsigned($signed($unsigned(wire0[(3'h4):(3'h4)]))));
      if (wire2)
        begin
          for (forvar6 = (1'h0); (forvar6 < (1'h1)); forvar6 = (forvar6 + (1'h1)))
            begin
              reg7 = forvar6;
              reg8 <= ($unsigned($signed($unsigned((reg7 ? wire1 : wire3)))) ?
                  (^(^$unsigned(wire0))) : $signed({wire0[(4'hc):(4'ha)],
                      wire1}));
              reg9 <= wire0;
            end
          for (forvar10 = (1'h0); (forvar10 < (2'h3)); forvar10 = (forvar10 + (1'h1)))
            begin
              reg11 <= wire3;
            end
        end
      else
        begin
          reg6 <= $unsigned($unsigned((reg7[(3'h4):(2'h3)] ^~ ($unsigned((8'h9e)) >>> (wire4 ?
              wire0 : reg8)))));
          if ($unsigned(((((forvar6 & reg6) ?
                      forvar10[(2'h3):(1'h0)] : reg7[(4'hd):(4'hd)]) ?
                  (wire2[(2'h2):(1'h0)] ?
                      (^~reg7) : wire0) : $unsigned(wire1)) ?
              $unsigned(((8'ha6) ?
                  (!reg7) : reg7[(1'h1):(1'h1)])) : $signed(($unsigned(reg5) >>> (wire4 - (8'hbd)))))))
            begin
              reg8 <= (+{(8'hb6)});
              reg10 = $unsigned(wire0[(3'h4):(1'h1)]);
              reg11 <= $unsigned((~&$signed($unsigned((forvar10 ?
                  wire0 : wire2)))));
              reg12 = (^((((reg9 + wire3) > $signed(wire1)) ?
                  reg10 : (wire1[(3'h4):(3'h4)] >> (forvar6 != (8'ha9)))) ^~ (8'hb6)));
              reg13 <= (^~(^~(($signed(wire4) <= $unsigned((8'ha5))) + $signed($unsigned((8'ha6))))));
            end
          else
            begin
              reg8 <= {$signed({reg7[(4'h8):(3'h7)]})};
            end
          reg14 = (~|((wire1[(4'h8):(3'h4)] + forvar10) ?
              (-{forvar6[(2'h3):(2'h3)]}) : $unsigned(((forvar10 ^~ wire0) <= (!wire0)))));
          for (forvar15 = (1'h0); (forvar15 < (1'h0)); forvar15 = (forvar15 + (1'h1)))
            begin
              reg16 = (wire1 + wire1[(4'hd):(4'hc)]);
              reg17 = (wire1[(5'h10):(5'h10)] ?
                  $unsigned(wire1) : $unsigned($signed($unsigned(wire2[(1'h1):(1'h0)]))));
              reg18 <= $signed($unsigned(($unsigned((wire0 > wire4)) <<< $unsigned((~&wire1)))));
              reg19 <= (^~reg14);
              reg20 <= forvar15[(3'h5):(2'h2)];
            end
        end
      for (forvar21 = (1'h0); (forvar21 < (1'h0)); forvar21 = (forvar21 + (1'h1)))
        begin
          reg22 <= $unsigned($signed(reg5));
        end
      for (forvar23 = (1'h0); (forvar23 < (2'h3)); forvar23 = (forvar23 + (1'h1)))
        begin
          for (forvar24 = (1'h0); (forvar24 < (3'h4)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 <= $unsigned((~^{((wire2 ? reg5 : reg18) ~^ (reg10 ?
                      reg7 : forvar10)),
                  (reg5[(2'h2):(1'h1)] ?
                      (forvar10 ? reg19 : reg18) : $signed(forvar24))}));
            end
          for (forvar26 = (1'h0); (forvar26 < (2'h3)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 <= (forvar26[(3'h6):(3'h4)] * {((7'h44) ^ $unsigned((&forvar10)))});
              reg28 = reg6[(2'h2):(2'h2)];
              reg29 = forvar26;
            end
        end
    end
  assign wire30 = {((((8'hb6) ^~ (!reg6)) <= (reg22 ?
                          (^(8'hbb)) : $unsigned(wire0))) << (~&(^(^wire3))))};
  assign wire31 = ($signed((-((reg20 <= reg22) < (^~reg11)))) <= (reg11[(4'hb):(3'h6)] ?
                      $unsigned($signed((wire4 ?
                          wire30 : wire0))) : wire4[(1'h1):(1'h0)]));
  assign wire32 = (reg11 ?
                      {(~^$unsigned($signed(reg6)))} : (({(reg19 == (8'hb8)),
                              (reg19 - reg19)} ?
                          ({(8'h9d), (8'hb2)} ?
                              (~wire31) : (^wire30)) : wire30) + (|{{wire1},
                          (reg9 ? reg25 : (8'ha6))})));
endmodule