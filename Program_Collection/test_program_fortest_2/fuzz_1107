(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param296 = ((+((8'hbe) ? (((8'ha6) >> (7'h42)) ? ((8'hb7) ? (8'hb8) : (8'ha1)) : (~&(8'ha4))) : (8'haa))) - ({(+((8'hb6) ~^ (8'haa)))} >> (!((&(8'ha8)) ? (|(8'hb5)) : ((8'ha3) ? (8'ha1) : (8'ha4)))))), 
parameter param297 = param296)
(y, clk, wire0, wire1, wire2, wire3);
  output wire [(32'h186):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'ha):(1'h0)] wire0;
  input wire [(4'hb):(1'h0)] wire1;
  input wire signed [(4'hb):(1'h0)] wire2;
  input wire signed [(5'h14):(1'h0)] wire3;
  wire [(4'hb):(1'h0)] wire295;
  wire [(3'h6):(1'h0)] wire294;
  wire [(5'h14):(1'h0)] wire293;
  wire signed [(3'h7):(1'h0)] wire277;
  wire signed [(5'h11):(1'h0)] wire5;
  wire signed [(3'h5):(1'h0)] wire6;
  wire [(4'he):(1'h0)] wire7;
  wire signed [(5'h12):(1'h0)] wire8;
  wire signed [(3'h6):(1'h0)] wire9;
  wire [(2'h3):(1'h0)] wire10;
  wire [(5'h14):(1'h0)] wire133;
  wire [(4'h8):(1'h0)] wire135;
  wire [(4'ha):(1'h0)] wire136;
  wire signed [(3'h6):(1'h0)] wire137;
  wire [(5'h13):(1'h0)] wire275;
  reg signed [(3'h5):(1'h0)] reg292 = (1'h0);
  reg [(3'h4):(1'h0)] reg289 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg288 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg284 = (1'h0);
  reg [(4'he):(1'h0)] reg281 = (1'h0);
  reg [(5'h14):(1'h0)] reg280 = (1'h0);
  reg [(5'h14):(1'h0)] reg4 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar291 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg290 = (1'h0);
  reg [(4'hc):(1'h0)] reg287 = (1'h0);
  reg [(5'h11):(1'h0)] forvar286 = (1'h0);
  reg [(5'h11):(1'h0)] forvar285 = (1'h0);
  reg [(4'hf):(1'h0)] reg283 = (1'h0);
  reg [(4'hd):(1'h0)] reg282 = (1'h0);
  reg [(5'h11):(1'h0)] forvar279 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar278 = (1'h0);
  assign y = {wire295,
                 wire294,
                 wire293,
                 wire277,
                 wire5,
                 wire6,
                 wire7,
                 wire8,
                 wire9,
                 wire10,
                 wire133,
                 wire135,
                 wire136,
                 wire137,
                 wire275,
                 reg292,
                 reg289,
                 reg288,
                 reg284,
                 reg281,
                 reg280,
                 reg4,
                 forvar291,
                 reg290,
                 reg287,
                 forvar286,
                 forvar285,
                 reg283,
                 reg282,
                 forvar279,
                 forvar278,
                 (1'h0)};
  always
    @(posedge clk) begin
      reg4 <= wire1;
    end
  assign wire5 = (~^({{(wire0 ? reg4 : reg4)}} | $signed(wire2)));
  assign wire6 = $unsigned(reg4);
  assign wire7 = ($unsigned((~|{wire2[(1'h0):(1'h0)]})) > (-((wire3 < $unsigned(wire3)) ?
                     {wire0[(3'h6):(3'h4)]} : ((8'h9e) <<< (&(8'hbd))))));
  assign wire8 = wire7[(4'h9):(3'h7)];
  assign wire9 = (wire6 << $unsigned((~|($signed((7'h43)) << reg4))));
  assign wire10 = (wire3 ?
                      $unsigned($unsigned(wire0[(1'h0):(1'h0)])) : $signed(wire9));
  module11 #() modinst134 (.wire12(wire8), .wire15(wire1), .wire14(wire3), .wire13(wire5), .clk(clk), .y(wire133));
  assign wire135 = wire133;
  assign wire136 = wire2;
  assign wire137 = $unsigned(($unsigned({$signed(wire9),
                       (wire1 ? wire2 : (8'hac))}) + wire1));
  module138 #() modinst276 (wire275, clk, wire3, wire2, wire9, reg4);
  assign wire277 = (((^(((7'h43) > wire136) >>> {wire0,
                       wire3})) <<< ($signed($signed(wire6)) > $signed($unsigned(wire275)))) >> (reg4 <<< $signed(wire6)));
  always
    @(posedge clk) begin
      for (forvar278 = (1'h0); (forvar278 < (2'h2)); forvar278 = (forvar278 + (1'h1)))
        begin
          for (forvar279 = (1'h0); (forvar279 < (2'h3)); forvar279 = (forvar279 + (1'h1)))
            begin
              reg280 <= $signed(({wire9[(3'h6):(1'h0)],
                  {$signed((8'ha1))}} ^~ $unsigned($unsigned($signed(wire8)))));
              reg281 <= $unsigned($unsigned(($unsigned(reg280[(3'h6):(3'h4)]) ?
                  wire135[(1'h1):(1'h0)] : wire9)));
              reg282 = $unsigned((8'ha4));
              reg283 = wire2;
            end
          reg284 <= $signed(($unsigned((8'ha4)) << (((wire3 >> wire5) ?
                  $unsigned((8'ha3)) : (|wire135)) ?
              wire135[(4'h8):(1'h0)] : $signed(wire135))));
        end
      for (forvar285 = (1'h0); (forvar285 < (2'h3)); forvar285 = (forvar285 + (1'h1)))
        begin
          for (forvar286 = (1'h0); (forvar286 < (2'h2)); forvar286 = (forvar286 + (1'h1)))
            begin
              reg287 = (~&$signed(reg284[(4'he):(2'h3)]));
              reg288 <= {((($signed(reg283) && (8'ha1)) < forvar286[(2'h3):(2'h3)]) >> $unsigned(forvar285[(5'h10):(5'h10)]))};
              reg289 <= (((~&(!wire2[(3'h4):(3'h4)])) ^~ $unsigned($signed($signed((7'h41))))) ?
                  $signed($signed((~|$signed(forvar285)))) : $unsigned($unsigned(($signed(wire5) + $signed(wire135)))));
              reg290 = forvar286[(4'he):(3'h4)];
            end
          for (forvar291 = (1'h0); (forvar291 < (1'h1)); forvar291 = (forvar291 + (1'h1)))
            begin
              reg292 <= $signed(($unsigned((-$unsigned(wire1))) ^ {((wire7 ?
                      wire7 : wire136) <<< reg283[(4'h9):(2'h3)])}));
            end
        end
    end
  assign wire293 = $unsigned(wire1[(3'h6):(2'h3)]);
  assign wire294 = ({$signed(wire133[(4'ha):(4'ha)]),
                           {{wire1[(4'ha):(3'h5)], $unsigned(wire133)}}} ?
                       $signed((~wire137[(2'h3):(2'h3)])) : (^(!wire277[(3'h6):(2'h2)])));
  assign wire295 = {(+reg292), wire136[(3'h6):(3'h6)]};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module138
#(parameter param273 = (((7'h44) ? (({(8'ha3), (8'hb7)} ? ((7'h42) > (7'h43)) : (~&(8'hae))) << (((8'hb8) >= (7'h40)) ? ((8'hbc) <= (8'hb9)) : ((8'ha2) ? (8'hb4) : (8'hbc)))) : (~(+((8'ha7) ? (7'h42) : (8'ha6))))) ? (~^(~&(8'hac))) : ((&((~(7'h42)) ? ((7'h44) ? (8'hbc) : (8'hb0)) : {(8'hb2)})) * (|(((8'h9c) < (8'h9e)) * (~&(8'ha4)))))), 
parameter param274 = (({(|{(8'hb3), param273})} >> ({(^~param273), (~^param273)} ~^ ({param273, param273} - ((8'ha2) ~^ (7'h43))))) ? ((8'hb5) & {(+(&(8'hb3)))}) : (param273 ? (~&{(param273 ~^ (8'hb6))}) : (((param273 ^ param273) - {param273}) | param273))))
(y, clk, wire142, wire141, wire140, wire139);
  output wire [(32'h5c0):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h11):(1'h0)] wire142;
  input wire [(4'hb):(1'h0)] wire141;
  input wire [(3'h5):(1'h0)] wire140;
  input wire [(4'h8):(1'h0)] wire139;
  wire signed [(4'hc):(1'h0)] wire266;
  wire [(4'hd):(1'h0)] wire265;
  wire signed [(4'h9):(1'h0)] wire264;
  wire [(5'h12):(1'h0)] wire263;
  wire [(4'ha):(1'h0)] wire262;
  wire [(5'h10):(1'h0)] wire260;
  wire signed [(5'h14):(1'h0)] wire259;
  wire [(5'h14):(1'h0)] wire258;
  wire signed [(5'h13):(1'h0)] wire257;
  wire signed [(4'hd):(1'h0)] wire178;
  wire [(2'h3):(1'h0)] wire147;
  wire [(4'h9):(1'h0)] wire146;
  wire [(2'h3):(1'h0)] wire145;
  wire [(3'h4):(1'h0)] wire144;
  wire signed [(5'h14):(1'h0)] wire143;
  reg [(3'h5):(1'h0)] reg271 = (1'h0);
  reg [(4'hc):(1'h0)] reg270 = (1'h0);
  reg [(5'h13):(1'h0)] reg269 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg261 = (1'h0);
  reg [(4'hb):(1'h0)] reg255 = (1'h0);
  reg [(3'h4):(1'h0)] reg250 = (1'h0);
  reg [(5'h13):(1'h0)] reg249 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg246 = (1'h0);
  reg signed [(4'he):(1'h0)] reg244 = (1'h0);
  reg [(3'h4):(1'h0)] reg243 = (1'h0);
  reg [(3'h7):(1'h0)] reg241 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg238 = (1'h0);
  reg [(3'h5):(1'h0)] reg235 = (1'h0);
  reg [(4'h9):(1'h0)] reg233 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg231 = (1'h0);
  reg [(4'hb):(1'h0)] reg227 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg226 = (1'h0);
  reg [(5'h14):(1'h0)] reg225 = (1'h0);
  reg [(4'h8):(1'h0)] reg223 = (1'h0);
  reg [(4'hf):(1'h0)] reg218 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg215 = (1'h0);
  reg [(5'h15):(1'h0)] reg213 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg212 = (1'h0);
  reg [(3'h6):(1'h0)] reg203 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg199 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg197 = (1'h0);
  reg [(4'h8):(1'h0)] reg195 = (1'h0);
  reg [(5'h12):(1'h0)] reg194 = (1'h0);
  reg [(4'hf):(1'h0)] reg192 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg191 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg188 = (1'h0);
  reg [(4'hc):(1'h0)] reg186 = (1'h0);
  reg [(3'h5):(1'h0)] reg185 = (1'h0);
  reg signed [(4'he):(1'h0)] reg184 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg182 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg181 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg180 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg177 = (1'h0);
  reg [(4'hd):(1'h0)] reg172 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg171 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg164 = (1'h0);
  reg [(5'h14):(1'h0)] reg163 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg162 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg160 = (1'h0);
  reg [(2'h3):(1'h0)] reg159 = (1'h0);
  reg [(4'h8):(1'h0)] reg158 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg157 = (1'h0);
  reg [(2'h2):(1'h0)] reg156 = (1'h0);
  reg [(3'h6):(1'h0)] reg155 = (1'h0);
  reg [(5'h11):(1'h0)] reg153 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg152 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg151 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg150 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg272 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg268 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar267 = (1'h0);
  reg [(2'h3):(1'h0)] reg256 = (1'h0);
  reg [(5'h13):(1'h0)] reg254 = (1'h0);
  reg [(4'hb):(1'h0)] reg253 = (1'h0);
  reg [(5'h10):(1'h0)] forvar252 = (1'h0);
  reg [(4'h8):(1'h0)] reg251 = (1'h0);
  reg [(3'h5):(1'h0)] reg248 = (1'h0);
  reg [(3'h5):(1'h0)] forvar247 = (1'h0);
  reg [(5'h10):(1'h0)] forvar245 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg242 = (1'h0);
  reg [(4'h9):(1'h0)] forvar240 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar239 = (1'h0);
  reg [(5'h14):(1'h0)] reg237 = (1'h0);
  reg [(4'h8):(1'h0)] forvar236 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar234 = (1'h0);
  reg [(4'hf):(1'h0)] reg232 = (1'h0);
  reg [(4'h8):(1'h0)] reg230 = (1'h0);
  reg [(3'h5):(1'h0)] reg229 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar228 = (1'h0);
  reg [(4'hf):(1'h0)] reg224 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar222 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg221 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar220 = (1'h0);
  reg [(4'ha):(1'h0)] forvar219 = (1'h0);
  reg [(3'h7):(1'h0)] reg217 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg216 = (1'h0);
  reg [(5'h12):(1'h0)] forvar214 = (1'h0);
  reg [(4'hb):(1'h0)] reg211 = (1'h0);
  reg [(4'h9):(1'h0)] reg210 = (1'h0);
  reg [(4'hd):(1'h0)] forvar209 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar208 = (1'h0);
  reg [(3'h7):(1'h0)] reg207 = (1'h0);
  reg [(5'h11):(1'h0)] reg206 = (1'h0);
  reg [(4'hc):(1'h0)] reg205 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg204 = (1'h0);
  reg signed [(4'hd):(1'h0)] forvar202 = (1'h0);
  reg [(5'h15):(1'h0)] reg201 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg200 = (1'h0);
  reg [(5'h15):(1'h0)] reg198 = (1'h0);
  reg [(2'h3):(1'h0)] forvar196 = (1'h0);
  reg [(2'h2):(1'h0)] reg193 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg190 = (1'h0);
  reg [(3'h5):(1'h0)] forvar189 = (1'h0);
  reg [(5'h14):(1'h0)] forvar187 = (1'h0);
  reg [(5'h14):(1'h0)] reg183 = (1'h0);
  reg [(4'h9):(1'h0)] forvar179 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg176 = (1'h0);
  reg [(4'ha):(1'h0)] reg175 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar174 = (1'h0);
  reg [(5'h13):(1'h0)] reg173 = (1'h0);
  reg [(3'h7):(1'h0)] reg170 = (1'h0);
  reg [(2'h2):(1'h0)] forvar169 = (1'h0);
  reg [(4'ha):(1'h0)] reg168 = (1'h0);
  reg [(5'h14):(1'h0)] reg167 = (1'h0);
  reg [(4'hf):(1'h0)] forvar166 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar165 = (1'h0);
  reg [(2'h3):(1'h0)] forvar161 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar154 = (1'h0);
  reg [(5'h10):(1'h0)] forvar149 = (1'h0);
  reg [(5'h14):(1'h0)] forvar148 = (1'h0);
  assign y = {wire266,
                 wire265,
                 wire264,
                 wire263,
                 wire262,
                 wire260,
                 wire259,
                 wire258,
                 wire257,
                 wire178,
                 wire147,
                 wire146,
                 wire145,
                 wire144,
                 wire143,
                 reg271,
                 reg270,
                 reg269,
                 reg261,
                 reg255,
                 reg250,
                 reg249,
                 reg246,
                 reg244,
                 reg243,
                 reg241,
                 reg238,
                 reg235,
                 reg233,
                 reg231,
                 reg227,
                 reg226,
                 reg225,
                 reg223,
                 reg218,
                 reg215,
                 reg213,
                 reg212,
                 reg203,
                 reg199,
                 reg197,
                 reg195,
                 reg194,
                 reg192,
                 reg191,
                 reg188,
                 reg186,
                 reg185,
                 reg184,
                 reg182,
                 reg181,
                 reg180,
                 reg177,
                 reg172,
                 reg171,
                 reg164,
                 reg163,
                 reg162,
                 reg160,
                 reg159,
                 reg158,
                 reg157,
                 reg156,
                 reg155,
                 reg153,
                 reg152,
                 reg151,
                 reg150,
                 reg272,
                 reg268,
                 forvar267,
                 reg256,
                 reg254,
                 reg253,
                 forvar252,
                 reg251,
                 reg248,
                 forvar247,
                 forvar245,
                 reg242,
                 forvar240,
                 forvar239,
                 reg237,
                 forvar236,
                 forvar234,
                 reg232,
                 reg230,
                 reg229,
                 forvar228,
                 reg224,
                 forvar222,
                 reg221,
                 forvar220,
                 forvar219,
                 reg217,
                 reg216,
                 forvar214,
                 reg211,
                 reg210,
                 forvar209,
                 forvar208,
                 reg207,
                 reg206,
                 reg205,
                 reg204,
                 forvar202,
                 reg201,
                 reg200,
                 reg198,
                 forvar196,
                 reg193,
                 reg190,
                 forvar189,
                 forvar187,
                 reg183,
                 forvar179,
                 reg176,
                 reg175,
                 forvar174,
                 reg173,
                 reg170,
                 forvar169,
                 reg168,
                 reg167,
                 forvar166,
                 forvar165,
                 forvar161,
                 forvar154,
                 forvar149,
                 forvar148,
                 (1'h0)};
  assign wire143 = $signed(($signed(($unsigned(wire142) ?
                       (wire139 ~^ wire139) : (8'hb9))) ^~ $unsigned($signed((~^wire141)))));
  assign wire144 = wire143;
  assign wire145 = $unsigned((8'hbb));
  assign wire146 = $signed(wire142);
  assign wire147 = ((((!(wire144 ? wire143 : wire141)) ?
                       ((wire146 ? wire144 : wire141) ?
                           wire144[(3'h4):(3'h4)] : {wire142}) : wire145) == {($unsigned((8'hb0)) ^ {wire146})}) & (wire144 >>> $signed(wire142)));
  always
    @(posedge clk) begin
      for (forvar148 = (1'h0); (forvar148 < (1'h1)); forvar148 = (forvar148 + (1'h1)))
        begin
          for (forvar149 = (1'h0); (forvar149 < (1'h0)); forvar149 = (forvar149 + (1'h1)))
            begin
              reg150 <= (wire147[(2'h3):(2'h2)] ^~ (forvar149 ?
                  $signed($unsigned(forvar148[(5'h10):(5'h10)])) : ((wire145[(1'h1):(1'h0)] ~^ (+forvar149)) ?
                      ($signed(wire144) ?
                          wire147[(1'h1):(1'h0)] : (~(8'hb5))) : ({forvar149} | ((8'h9f) ?
                          wire141 : wire143)))));
              reg151 <= $unsigned($unsigned(forvar148));
              reg152 <= wire147;
              reg153 <= ((8'ha7) ? reg151[(2'h2):(2'h2)] : $unsigned(reg151));
            end
          for (forvar154 = (1'h0); (forvar154 < (3'h4)); forvar154 = (forvar154 + (1'h1)))
            begin
              reg155 <= $signed((+((^~(-reg153)) | reg151[(2'h3):(2'h3)])));
              reg156 <= ((^~$signed(wire145[(1'h0):(1'h0)])) ?
                  (~&forvar148) : {(wire141 ?
                          (wire141[(4'ha):(3'h4)] << (wire147 ?
                              wire139 : wire141)) : ($signed(wire139) & (wire145 - wire140)))});
              reg157 <= (((wire147 ? $signed((-wire143)) : reg156) << (wire146 ?
                  (~^reg156) : $unsigned(reg153))) | $unsigned($signed($signed(reg152))));
              reg158 <= $signed($signed(wire147[(1'h1):(1'h0)]));
              reg159 <= (wire144 ?
                  wire139[(1'h1):(1'h1)] : ((~&$unsigned({forvar149})) ?
                      {((~^wire141) <<< (reg152 << reg151)),
                          (8'haa)} : $signed((reg157[(5'h15):(5'h10)] ?
                          $signed(reg150) : (reg150 != reg156)))));
            end
          reg160 <= reg152;
          for (forvar161 = (1'h0); (forvar161 < (2'h3)); forvar161 = (forvar161 + (1'h1)))
            begin
              reg162 <= reg151[(2'h3):(2'h2)];
              reg163 <= $signed($unsigned(wire145));
            end
          reg164 <= ((7'h42) < $unsigned((($unsigned(reg152) && $unsigned(wire147)) < forvar149[(4'h8):(2'h2)])));
        end
      for (forvar165 = (1'h0); (forvar165 < (3'h4)); forvar165 = (forvar165 + (1'h1)))
        begin
          for (forvar166 = (1'h0); (forvar166 < (2'h3)); forvar166 = (forvar166 + (1'h1)))
            begin
              reg167 = (({$unsigned((|reg164)),
                      ($signed(wire143) * (!(8'haa)))} ?
                  forvar154[(4'hb):(3'h5)] : (($unsigned((8'h9c)) ?
                          reg153[(4'h9):(4'h9)] : (8'hbf)) ?
                      wire147 : (((8'hbf) ? reg153 : (8'hbc)) ?
                          (forvar165 ?
                              reg156 : wire144) : forvar165))) >> reg150[(5'h10):(4'hc)]);
              reg168 = reg156[(2'h2):(2'h2)];
            end
          for (forvar169 = (1'h0); (forvar169 < (2'h2)); forvar169 = (forvar169 + (1'h1)))
            begin
              reg170 = (!reg152);
              reg171 <= $unsigned(reg167);
              reg172 <= forvar169;
              reg173 = reg153[(5'h11):(4'he)];
            end
          for (forvar174 = (1'h0); (forvar174 < (1'h1)); forvar174 = (forvar174 + (1'h1)))
            begin
              reg175 = $signed((reg153[(4'h9):(1'h1)] * reg173[(5'h10):(4'h8)]));
              reg176 = wire140;
              reg177 <= $signed($unsigned(reg172));
            end
        end
    end
  assign wire178 = reg153[(4'h9):(4'h8)];
  always
    @(posedge clk) begin
      for (forvar179 = (1'h0); (forvar179 < (3'h4)); forvar179 = (forvar179 + (1'h1)))
        begin
          if (reg171)
            begin
              reg180 <= ((reg156 <= ($unsigned(wire145) ?
                  reg156 : forvar179)) || forvar179[(4'h9):(2'h3)]);
              reg181 <= $signed($unsigned((($signed(wire143) ?
                  (reg171 ? (8'hb7) : reg159) : {reg171}) || ({reg172,
                      wire146} ?
                  $signed(reg151) : (reg171 + wire143)))));
              reg182 <= reg157[(5'h11):(4'h9)];
            end
          else
            begin
              reg180 <= reg157[(3'h5):(3'h4)];
              reg183 = {((((!reg157) + (+wire147)) - reg152) < reg180),
                  $signed($unsigned((|$signed(reg157))))};
              reg184 <= ($unsigned($unsigned($unsigned(wire145))) ?
                  reg172 : wire146[(1'h0):(1'h0)]);
              reg185 <= $unsigned($unsigned($unsigned((^~{(8'hba)}))));
              reg186 <= $unsigned($unsigned(((^~((8'hb9) ?
                  wire146 : (8'ha2))) && ((~&reg156) ?
                  reg157[(5'h12):(4'he)] : reg151))));
            end
          for (forvar187 = (1'h0); (forvar187 < (2'h3)); forvar187 = (forvar187 + (1'h1)))
            begin
              reg188 <= reg172;
            end
          for (forvar189 = (1'h0); (forvar189 < (3'h4)); forvar189 = (forvar189 + (1'h1)))
            begin
              reg190 = $signed((({(8'hbc)} ?
                      $unsigned($unsigned(wire147)) : ((~^forvar179) << reg153)) ?
                  $unsigned($unsigned($unsigned(wire139))) : $signed(wire147)));
              reg191 <= $unsigned(((-wire143) ?
                  {(reg153 == reg163[(3'h4):(2'h3)])} : (reg159 & (wire147 ?
                      $unsigned((8'hae)) : (forvar187 >= (8'hae))))));
              reg192 <= (|reg188[(4'h8):(2'h3)]);
              reg193 = reg155[(2'h2):(1'h1)];
            end
        end
      reg194 <= (-($unsigned({wire140}) <= reg164[(2'h2):(2'h2)]));
    end
  always
    @(posedge clk) begin
      reg195 <= (!$unsigned($signed($signed(reg172[(3'h4):(2'h2)]))));
      if (($unsigned(($unsigned($signed(reg188)) >> wire144[(2'h2):(1'h1)])) * $signed((((8'hac) ?
              reg184[(3'h5):(1'h1)] : (reg172 ? reg191 : reg150)) ?
          $signed(reg172) : reg163[(4'ha):(3'h6)]))))
        begin
          for (forvar196 = (1'h0); (forvar196 < (2'h2)); forvar196 = (forvar196 + (1'h1)))
            begin
              reg197 <= reg156[(1'h0):(1'h0)];
              reg198 = (~&($unsigned($unsigned($signed(reg188))) < (reg191[(2'h2):(1'h1)] | ($unsigned(reg184) >> reg163))));
              reg199 <= $unsigned($signed({(&((8'had) && reg151)), (8'ha5)}));
              reg200 = wire143;
              reg201 = ($unsigned($signed(reg199[(2'h3):(1'h1)])) >> ($signed(reg195[(2'h3):(1'h1)]) ^~ $unsigned($signed({wire142,
                  reg188}))));
            end
          for (forvar202 = (1'h0); (forvar202 < (1'h1)); forvar202 = (forvar202 + (1'h1)))
            begin
              reg203 <= {(^~(reg199[(1'h1):(1'h0)] ~^ (~^(&wire139))))};
              reg204 = ((reg152 - (~^$unsigned($unsigned(reg156)))) & wire145[(2'h3):(1'h1)]);
              reg205 = (~$signed(reg164[(3'h4):(1'h1)]));
              reg206 = (|{$signed($signed((reg152 || reg159)))});
              reg207 = wire147;
            end
        end
      else
        begin
          for (forvar196 = (1'h0); (forvar196 < (2'h3)); forvar196 = (forvar196 + (1'h1)))
            begin
              reg197 <= $unsigned((~&(wire141[(4'h8):(3'h6)] ?
                  (~|(reg156 >= reg207)) : (reg200 && ((8'hbb) <<< reg188)))));
            end
          reg198 = $unsigned((((~$signed((8'hb9))) ?
              {(wire147 ? reg185 : reg157),
                  reg206[(3'h5):(3'h4)]} : (&(wire178 > forvar202))) == reg160[(1'h0):(1'h0)]));
          reg200 = (~^$unsigned(({reg194} << ((reg151 + reg186) <= $unsigned(reg182)))));
        end
    end
  always
    @(posedge clk) begin
      for (forvar208 = (1'h0); (forvar208 < (1'h0)); forvar208 = (forvar208 + (1'h1)))
        begin
          for (forvar209 = (1'h0); (forvar209 < (1'h1)); forvar209 = (forvar209 + (1'h1)))
            begin
              reg210 = $signed($unsigned($signed((wire143 <= wire144))));
              reg211 = reg177;
            end
          reg212 <= {(wire144[(1'h0):(1'h0)] ?
                  (8'h9f) : wire146[(2'h3):(1'h0)])};
          reg213 <= (~($unsigned(wire146[(3'h4):(1'h0)]) ?
              $signed(((wire140 ~^ reg158) == ((8'hbf) ^ reg163))) : (~^wire143[(5'h13):(4'h8)])));
          for (forvar214 = (1'h0); (forvar214 < (1'h0)); forvar214 = (forvar214 + (1'h1)))
            begin
              reg215 <= $unsigned({reg185});
              reg216 = (^((wire145[(1'h1):(1'h1)] ?
                  $signed($unsigned(reg181)) : (((8'hb5) >= forvar209) ?
                      $unsigned(reg195) : $unsigned(wire143))) <= (-((8'h9e) && $unsigned(reg171)))));
              reg217 = (~^(reg160[(2'h3):(1'h1)] ?
                  reg164 : (~reg191[(3'h4):(2'h3)])));
              reg218 <= (~&(reg192[(4'he):(4'hb)] ?
                  $signed(((~reg162) ?
                      {reg195} : (^~(8'ha7)))) : (reg188[(1'h1):(1'h1)] ?
                      (^(wire147 >= reg182)) : {(reg186 >= reg160), reg185})));
            end
        end
      for (forvar219 = (1'h0); (forvar219 < (2'h3)); forvar219 = (forvar219 + (1'h1)))
        begin
          for (forvar220 = (1'h0); (forvar220 < (1'h1)); forvar220 = (forvar220 + (1'h1)))
            begin
              reg221 = wire139;
            end
          for (forvar222 = (1'h0); (forvar222 < (1'h0)); forvar222 = (forvar222 + (1'h1)))
            begin
              reg223 <= reg153;
              reg224 = wire146[(4'h8):(3'h6)];
              reg225 <= wire141;
              reg226 <= ({(+$signed((8'hab))),
                  $signed((8'hba))} > $signed(({(~|reg155)} ?
                  {$signed(reg171)} : (8'hb0))));
            end
          reg227 <= ((({(wire139 | forvar222)} < (|{(8'haf),
                  reg177})) << $unsigned((7'h42))) ?
              (reg156[(1'h0):(1'h0)] ?
                  $unsigned(reg171) : wire139[(3'h7):(3'h6)]) : forvar222);
          for (forvar228 = (1'h0); (forvar228 < (1'h1)); forvar228 = (forvar228 + (1'h1)))
            begin
              reg229 = ((|((~reg212[(1'h1):(1'h0)]) && $signed(reg213))) ?
                  $unsigned((~|(reg184 ?
                      reg150[(3'h7):(2'h2)] : {(8'h9f)}))) : ((forvar228[(4'ha):(3'h7)] ?
                      reg211 : (^{reg216})) >= (reg158[(2'h2):(1'h0)] ?
                      reg155[(2'h2):(2'h2)] : ($unsigned((7'h44)) | (forvar209 != reg159)))));
              reg230 = ((forvar214 ?
                      {(~|$signed((7'h44))),
                          wire142} : {reg199[(3'h7):(3'h4)]}) ?
                  (8'ha7) : ($unsigned(($signed(reg157) >> reg182[(5'h10):(3'h6)])) ?
                      $signed(wire147[(2'h2):(1'h1)]) : $unsigned($unsigned((reg180 ?
                          reg225 : forvar228)))));
              reg231 <= (+$signed({reg151[(3'h4):(2'h3)]}));
              reg232 = reg194[(4'hd):(3'h7)];
              reg233 <= (-wire141[(1'h1):(1'h0)]);
            end
        end
      for (forvar234 = (1'h0); (forvar234 < (1'h0)); forvar234 = (forvar234 + (1'h1)))
        begin
          reg235 <= (|$signed({reg152, $unsigned((reg213 == reg172))}));
          for (forvar236 = (1'h0); (forvar236 < (2'h2)); forvar236 = (forvar236 + (1'h1)))
            begin
              reg237 = ({$signed({{wire147, reg197}, $signed(reg188)}),
                      $unsigned($signed((reg192 | reg186)))} ?
                  (wire146[(4'h9):(2'h2)] >= $signed(reg177)) : (8'hae));
            end
          reg238 <= reg230[(1'h0):(1'h0)];
        end
      for (forvar239 = (1'h0); (forvar239 < (1'h0)); forvar239 = (forvar239 + (1'h1)))
        begin
          for (forvar240 = (1'h0); (forvar240 < (1'h1)); forvar240 = (forvar240 + (1'h1)))
            begin
              reg241 <= ((8'ha2) >> $unsigned(((8'haf) ?
                  $signed(reg233) : (8'hbb))));
              reg242 = $unsigned({(((reg195 ? wire140 : forvar219) ?
                          (|reg156) : $unsigned(reg241)) ?
                      $signed(reg212[(2'h3):(1'h0)]) : ($signed((8'hb4)) ~^ forvar228))});
              reg243 <= $signed(($unsigned($signed((&wire141))) ?
                  (-$signed((reg180 ~^ forvar234))) : (($unsigned(wire178) | $signed(reg152)) > (~^(~(8'hb6))))));
              reg244 <= ((&(~^((wire145 <<< reg242) | {reg197, reg158}))) ?
                  $signed((~^reg171[(2'h2):(1'h1)])) : $signed(({wire143[(4'hf):(4'hb)],
                          $unsigned((7'h43))} ?
                      ((wire139 ?
                          wire143 : (8'hbb)) == $unsigned(wire147)) : $signed({reg153,
                          reg153}))));
            end
        end
      for (forvar245 = (1'h0); (forvar245 < (2'h2)); forvar245 = (forvar245 + (1'h1)))
        begin
          reg246 <= $unsigned(reg210[(3'h7):(2'h3)]);
          for (forvar247 = (1'h0); (forvar247 < (1'h1)); forvar247 = (forvar247 + (1'h1)))
            begin
              reg248 = forvar228;
              reg249 <= forvar240[(2'h3):(1'h0)];
              reg250 <= {(wire143[(4'hc):(4'hc)] ?
                      ($signed((reg217 ? forvar208 : (8'h9e))) ?
                          {$unsigned((8'ha3)), (~&reg242)} : (forvar220 ?
                              $signed(reg246) : {reg211})) : ({{reg246},
                          $signed(wire139)} < $signed((reg155 < wire140)))),
                  (reg171 | {(8'hbf), $unsigned((~^reg216))})};
            end
          reg251 = $unsigned(((^~$signed($unsigned((8'hbf)))) >>> ($unsigned((reg172 ?
              reg203 : wire140)) || $signed((reg210 ? (8'ha0) : wire139)))));
          for (forvar252 = (1'h0); (forvar252 < (1'h1)); forvar252 = (forvar252 + (1'h1)))
            begin
              reg253 = (8'h9f);
              reg254 = reg153[(3'h7):(1'h0)];
              reg255 <= (reg188[(1'h0):(1'h0)] ?
                  ((($signed(reg227) ?
                      (reg253 ?
                          reg172 : reg184) : reg235[(2'h2):(1'h0)]) == (~&$signed(reg238))) + reg250[(3'h4):(2'h3)]) : reg225[(3'h7):(3'h5)]);
              reg256 = $unsigned((8'hac));
            end
        end
    end
  assign wire257 = $unsigned({reg231});
  assign wire258 = (~|$unsigned(reg244));
  assign wire259 = (reg184 >>> (!reg199));
  assign wire260 = $unsigned({$signed(($signed(reg160) != $signed(reg243)))});
  always
    @(posedge clk) begin
      reg261 <= reg184;
    end
  assign wire262 = reg226;
  assign wire263 = {$unsigned({$unsigned((reg163 >= reg249))}),
                       (&((8'ha1) ?
                           ($unsigned(reg151) ?
                               reg197[(2'h3):(1'h1)] : {reg152}) : (wire258 >>> reg192)))};
  assign wire264 = {($signed((~reg243)) ?
                           (((wire139 ~^ reg195) ?
                               {wire142} : ((8'hab) && (8'hb2))) <= {reg180}) : reg218[(1'h0):(1'h0)]),
                       $signed($unsigned(($unsigned(reg227) * (reg185 >> wire146))))};
  assign wire265 = (8'h9e);
  assign wire266 = $unsigned((reg164[(3'h4):(2'h3)] <<< $unsigned(($signed(reg192) ?
                       (wire263 >>> reg233) : (7'h41)))));
  always
    @(posedge clk) begin
      for (forvar267 = (1'h0); (forvar267 < (2'h3)); forvar267 = (forvar267 + (1'h1)))
        begin
          reg268 = reg246[(3'h5):(3'h4)];
          if ((&(-$signed(wire146[(3'h4):(2'h3)]))))
            begin
              reg269 <= $unsigned(((^(~(reg191 ?
                  reg215 : (8'hbf)))) > (-wire145)));
              reg270 <= (8'h9e);
              reg271 <= (~|($unsigned($signed(reg182[(5'h10):(2'h2)])) && wire262));
            end
          else
            begin
              reg269 <= reg195[(1'h1):(1'h1)];
              reg272 = $signed({reg255, $unsigned(((8'hbf) * (8'ha2)))});
            end
        end
    end
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module11
#(parameter param131 = (((((~&(8'hb4)) && (^~(8'hba))) ? {((8'haa) ? (8'hbc) : (8'h9e)), ((8'ha0) + (8'hb6))} : ((-(8'hb1)) ? ((8'hbc) ? (8'hb8) : (8'hbc)) : ((8'ha4) ? (8'h9d) : (8'hb6)))) ? (^(((8'hb7) ? (7'h44) : (8'ha4)) < ((8'hbb) ? (8'hb0) : (8'hb8)))) : (((&(8'ha9)) ? ((8'hb6) || (8'ha9)) : (~^(8'haf))) ? (7'h43) : (((8'hbb) ? (8'hb1) : (7'h44)) << (8'haa)))) ? (((&(&(7'h42))) ? ((~(7'h40)) >= (^~(8'hb4))) : (7'h41)) ? ((((8'hb3) ^~ (7'h40)) - {(8'hb0), (8'hb0)}) ^ (((7'h42) ? (7'h41) : (8'hac)) <= ((8'ha8) + (8'hb8)))) : (8'hbf)) : ((8'ha4) && (~&(~^(8'hb7))))), 
parameter param132 = (~^param131))
(y, clk, wire15, wire14, wire13, wire12);
  output wire [(32'h1d7):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(4'hb):(1'h0)] wire15;
  input wire signed [(2'h2):(1'h0)] wire14;
  input wire [(4'h9):(1'h0)] wire13;
  input wire signed [(2'h3):(1'h0)] wire12;
  wire [(5'h13):(1'h0)] wire130;
  wire signed [(5'h15):(1'h0)] wire129;
  wire [(5'h15):(1'h0)] wire127;
  wire signed [(4'hc):(1'h0)] wire44;
  wire [(4'h8):(1'h0)] wire43;
  wire signed [(2'h2):(1'h0)] wire42;
  wire signed [(4'hc):(1'h0)] wire41;
  wire [(4'hb):(1'h0)] wire40;
  wire signed [(4'hb):(1'h0)] wire16;
  reg [(4'h8):(1'h0)] reg18 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg20 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg21 = (1'h0);
  reg [(5'h15):(1'h0)] reg22 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg23 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg26 = (1'h0);
  reg [(5'h10):(1'h0)] reg28 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg32 = (1'h0);
  reg [(3'h6):(1'h0)] reg37 = (1'h0);
  reg [(5'h15):(1'h0)] reg38 = (1'h0);
  reg [(3'h4):(1'h0)] reg31 = (1'h0);
  reg [(5'h12):(1'h0)] reg39 = (1'h0);
  reg [(4'he):(1'h0)] reg29 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg36 = (1'h0);
  reg [(2'h3):(1'h0)] forvar35 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg34 = (1'h0);
  reg [(2'h2):(1'h0)] reg33 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar31 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg30 = (1'h0);
  reg [(5'h15):(1'h0)] forvar29 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar27 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar25 = (1'h0);
  reg [(4'hf):(1'h0)] reg24 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar19 = (1'h0);
  reg [(2'h2):(1'h0)] forvar17 = (1'h0);
  assign y = {wire130,
                 wire129,
                 wire127,
                 wire44,
                 wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire16,
                 reg18,
                 reg20,
                 reg21,
                 reg22,
                 reg23,
                 reg26,
                 reg28,
                 reg32,
                 reg37,
                 reg38,
                 reg31,
                 reg39,
                 reg29,
                 reg36,
                 forvar35,
                 reg34,
                 reg33,
                 forvar31,
                 reg30,
                 forvar29,
                 forvar27,
                 forvar25,
                 reg24,
                 forvar19,
                 forvar17,
                 (1'h0)};
  assign wire16 = ($unsigned($unsigned((wire12[(1'h1):(1'h1)] >= (wire15 + wire13)))) ?
                      ($signed($unsigned((~|(8'ha6)))) < $signed(((wire14 || (8'h9c)) ?
                          $signed(wire12) : (wire12 ?
                              (8'hae) : wire12)))) : (wire12[(1'h1):(1'h0)] - wire15));
  always
    @(posedge clk) begin
      for (forvar17 = (1'h0); (forvar17 < (1'h1)); forvar17 = (forvar17 + (1'h1)))
        begin
          reg18 <= ((((forvar17 ?
                          (forvar17 ? forvar17 : wire15) : (wire12 ?
                              wire14 : (8'hb5))) ?
                      $signed($unsigned(wire16)) : forvar17) ?
                  (^~{(wire13 ? wire12 : forvar17)}) : wire12[(1'h1):(1'h1)]) ?
              $signed((($unsigned(forvar17) ? {wire15, wire14} : {forvar17}) ?
                  {(wire13 <<< wire16), wire15} : $unsigned({wire15,
                      wire13}))) : (|(+wire15)));
          for (forvar19 = (1'h0); (forvar19 < (3'h4)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 <= {wire16[(3'h4):(3'h4)]};
              reg21 <= ((^~$signed((+(reg18 ? reg20 : (8'hba))))) ?
                  $unsigned(($signed({wire16}) >> $signed({forvar17,
                      wire15}))) : (&$signed(wire16)));
              reg22 <= (^~($unsigned($signed((~(8'ha6)))) && $signed($signed(forvar17))));
              reg23 <= (wire16 ? (^(~^wire12[(1'h0):(1'h0)])) : (7'h44));
              reg24 = wire13[(1'h0):(1'h0)];
            end
          for (forvar25 = (1'h0); (forvar25 < (2'h3)); forvar25 = (forvar25 + (1'h1)))
            begin
              reg26 <= $signed((|{reg24, reg22}));
            end
        end
      if ({reg24[(4'hf):(2'h3)]})
        begin
          for (forvar27 = (1'h0); (forvar27 < (2'h2)); forvar27 = (forvar27 + (1'h1)))
            begin
              reg28 <= (~|(reg18[(2'h2):(2'h2)] ~^ {((reg22 >>> reg20) ?
                      (reg23 ? wire12 : reg18) : (~reg24))}));
            end
          for (forvar29 = (1'h0); (forvar29 < (3'h4)); forvar29 = (forvar29 + (1'h1)))
            begin
              reg30 = $signed($unsigned(reg28[(1'h1):(1'h0)]));
            end
          for (forvar31 = (1'h0); (forvar31 < (1'h1)); forvar31 = (forvar31 + (1'h1)))
            begin
              reg32 <= (($signed(forvar29) ?
                      ($signed({wire13, wire15}) < {forvar19[(4'hb):(4'h8)],
                          $signed(wire14)}) : reg26[(2'h3):(1'h1)]) ?
                  reg24 : ((({(7'h43), reg23} || $unsigned(wire14)) ?
                      (reg23 ?
                          (wire16 <<< reg20) : wire13[(3'h4):(1'h1)]) : $unsigned((^reg20))) & reg22));
              reg33 = ((reg24[(4'h8):(1'h1)] ?
                      ((reg22 & $unsigned(wire14)) ?
                          reg22[(4'he):(1'h0)] : ((~&forvar17) ?
                              (reg26 < (8'hb4)) : (8'hb0))) : (^~($signed(reg32) > (reg23 == (7'h41))))) ?
                  $signed({((^reg20) + {forvar17})}) : {$signed(reg21[(2'h2):(2'h2)]),
                      reg26[(3'h6):(3'h4)]});
            end
          reg34 = (!$signed((((reg24 ?
                  forvar29 : reg21) >>> (forvar27 >= reg33)) ?
              ({wire15, reg20} | reg24[(3'h5):(3'h4)]) : $unsigned((reg28 ?
                  reg32 : reg32)))));
          for (forvar35 = (1'h0); (forvar35 < (2'h3)); forvar35 = (forvar35 + (1'h1)))
            begin
              reg36 = $signed($signed($signed(wire15)));
              reg37 <= reg36;
              reg38 <= forvar35[(1'h0):(1'h0)];
            end
        end
      else
        begin
          for (forvar27 = (1'h0); (forvar27 < (2'h2)); forvar27 = (forvar27 + (1'h1)))
            begin
              reg29 = {($signed($signed((^~reg23))) >>> reg28)};
            end
          reg31 <= $unsigned($unsigned(((reg22[(2'h2):(1'h1)] <= reg30) ?
              ({reg23, forvar25} ?
                  (8'haa) : {reg29}) : wire12[(2'h3):(2'h2)])));
        end
      reg39 = $unsigned(((^$signed(forvar27[(4'h8):(1'h0)])) ?
          forvar35[(2'h3):(1'h0)] : forvar29));
    end
  assign wire40 = reg21[(2'h2):(1'h1)];
  assign wire41 = reg38;
  assign wire42 = {(+((~^(~&reg20)) < $signed((8'hba)))), (8'h9f)};
  assign wire43 = wire40[(3'h6):(2'h3)];
  assign wire44 = (((8'hb6) | (~&$signed((wire41 <<< reg37)))) ?
                      reg31 : (~$unsigned((reg28[(3'h5):(3'h4)] > (+wire12)))));
  module45 #() modinst128 (wire127, clk, wire44, reg22, wire16, wire13, wire43);
  assign wire129 = $unsigned($signed(reg20));
  assign wire130 = (reg20[(4'h9):(4'h9)] >>> (reg21 < ($unsigned($unsigned(wire43)) ?
                       (((8'hb9) || wire42) >>> {reg18}) : $signed({reg38,
                           wire42}))));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module45  (y, clk, wire50, wire49, wire48, wire47, wire46);
  output wire [(32'h339):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(3'h4):(1'h0)] wire50;
  input wire [(5'h13):(1'h0)] wire49;
  input wire signed [(4'hb):(1'h0)] wire48;
  input wire [(3'h6):(1'h0)] wire47;
  input wire signed [(4'h8):(1'h0)] wire46;
  wire signed [(2'h2):(1'h0)] wire110;
  wire [(5'h10):(1'h0)] wire109;
  wire [(4'h8):(1'h0)] wire84;
  wire [(4'ha):(1'h0)] wire83;
  wire [(5'h13):(1'h0)] wire82;
  wire [(2'h3):(1'h0)] wire81;
  wire signed [(3'h4):(1'h0)] wire80;
  wire [(5'h12):(1'h0)] wire53;
  wire signed [(4'h8):(1'h0)] wire52;
  wire [(5'h14):(1'h0)] wire51;
  reg [(5'h11):(1'h0)] reg126 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg125 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg123 = (1'h0);
  reg [(4'hb):(1'h0)] reg120 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg117 = (1'h0);
  reg [(4'ha):(1'h0)] reg116 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg114 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg112 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg108 = (1'h0);
  reg [(4'hf):(1'h0)] reg107 = (1'h0);
  reg [(5'h10):(1'h0)] reg103 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg102 = (1'h0);
  reg [(5'h15):(1'h0)] reg99 = (1'h0);
  reg [(3'h5):(1'h0)] reg98 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg97 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg94 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg93 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg92 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg91 = (1'h0);
  reg [(5'h12):(1'h0)] reg90 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg88 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg87 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg79 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg77 = (1'h0);
  reg [(3'h5):(1'h0)] reg76 = (1'h0);
  reg signed [(4'he):(1'h0)] reg75 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg74 = (1'h0);
  reg [(5'h11):(1'h0)] reg73 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg70 = (1'h0);
  reg [(4'h8):(1'h0)] reg68 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg67 = (1'h0);
  reg [(5'h13):(1'h0)] reg62 = (1'h0);
  reg signed [(4'he):(1'h0)] reg61 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg59 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg57 = (1'h0);
  reg [(4'hd):(1'h0)] reg55 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar124 = (1'h0);
  reg [(4'hd):(1'h0)] reg122 = (1'h0);
  reg [(4'ha):(1'h0)] reg121 = (1'h0);
  reg [(5'h12):(1'h0)] reg119 = (1'h0);
  reg [(5'h10):(1'h0)] forvar118 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg115 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar113 = (1'h0);
  reg signed [(4'ha):(1'h0)] forvar111 = (1'h0);
  reg [(4'h9):(1'h0)] reg106 = (1'h0);
  reg [(3'h6):(1'h0)] forvar105 = (1'h0);
  reg [(3'h4):(1'h0)] reg104 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg101 = (1'h0);
  reg [(4'ha):(1'h0)] forvar100 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg96 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar95 = (1'h0);
  reg [(3'h4):(1'h0)] forvar89 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar86 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar85 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg78 = (1'h0);
  reg [(5'h12):(1'h0)] reg71 = (1'h0);
  reg [(3'h4):(1'h0)] forvar68 = (1'h0);
  reg [(3'h5):(1'h0)] reg72 = (1'h0);
  reg [(3'h5):(1'h0)] forvar71 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg69 = (1'h0);
  reg [(3'h6):(1'h0)] reg66 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar65 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar64 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg63 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar60 = (1'h0);
  reg [(5'h14):(1'h0)] reg58 = (1'h0);
  reg [(4'h8):(1'h0)] reg56 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar54 = (1'h0);
  assign y = {wire110,
                 wire109,
                 wire84,
                 wire83,
                 wire82,
                 wire81,
                 wire80,
                 wire53,
                 wire52,
                 wire51,
                 reg126,
                 reg125,
                 reg123,
                 reg120,
                 reg117,
                 reg116,
                 reg114,
                 reg112,
                 reg108,
                 reg107,
                 reg103,
                 reg102,
                 reg99,
                 reg98,
                 reg97,
                 reg94,
                 reg93,
                 reg92,
                 reg91,
                 reg90,
                 reg88,
                 reg87,
                 reg79,
                 reg77,
                 reg76,
                 reg75,
                 reg74,
                 reg73,
                 reg70,
                 reg68,
                 reg67,
                 reg62,
                 reg61,
                 reg59,
                 reg57,
                 reg55,
                 forvar124,
                 reg122,
                 reg121,
                 reg119,
                 forvar118,
                 reg115,
                 forvar113,
                 forvar111,
                 reg106,
                 forvar105,
                 reg104,
                 reg101,
                 forvar100,
                 reg96,
                 forvar95,
                 forvar89,
                 forvar86,
                 forvar85,
                 reg78,
                 reg71,
                 forvar68,
                 reg72,
                 forvar71,
                 reg69,
                 reg66,
                 forvar65,
                 forvar64,
                 reg63,
                 forvar60,
                 reg58,
                 reg56,
                 forvar54,
                 (1'h0)};
  assign wire51 = wire50[(2'h3):(1'h1)];
  assign wire52 = ({{{(!wire48), {wire46}}, {{wire48, wire48}}}} ?
                      (~|$unsigned($unsigned((!wire49)))) : {(8'h9f)});
  assign wire53 = (~&wire52);
  always
    @(posedge clk) begin
      if ($unsigned(((~|(~^(&wire53))) >= (((^~wire53) ?
          {(8'hb7), wire49} : ((8'hae) ?
              wire53 : wire53)) >= $unsigned($signed(wire51))))))
        begin
          for (forvar54 = (1'h0); (forvar54 < (1'h0)); forvar54 = (forvar54 + (1'h1)))
            begin
              reg55 <= $unsigned(wire47);
            end
          reg56 = (($signed(wire50[(1'h1):(1'h0)]) ?
              ($signed((~|wire50)) - ({reg55} >>> (wire50 <= wire46))) : {((forvar54 >> reg55) * $signed((8'hac))),
                  $signed((wire51 ? wire46 : wire53))}) | (&((8'hb1) ?
              wire47[(2'h2):(1'h1)] : $signed({wire53}))));
          reg57 <= $signed($signed($unsigned(wire47[(2'h3):(1'h1)])));
        end
      else
        begin
          for (forvar54 = (1'h0); (forvar54 < (3'h4)); forvar54 = (forvar54 + (1'h1)))
            begin
              reg56 = {(wire50 ?
                      {(wire50[(2'h2):(1'h0)] << wire53),
                          {wire51}} : $signed(wire52)),
                  ($signed(forvar54[(1'h1):(1'h0)]) ?
                      (|{{(8'ha4)}, (wire50 == (8'hae))}) : (^$signed((wire47 ?
                          wire52 : wire47))))};
              reg58 = $signed((wire51 ^ ($unsigned((reg55 ?
                  reg57 : (8'h9e))) >>> ((wire50 ?
                  wire51 : (8'hb4)) != (wire49 ? (8'h9f) : wire50)))));
              reg59 <= {$signed(forvar54[(1'h0):(1'h0)]), reg58};
            end
          for (forvar60 = (1'h0); (forvar60 < (2'h2)); forvar60 = (forvar60 + (1'h1)))
            begin
              reg61 <= wire52;
              reg62 <= ((^~$signed({forvar60[(4'he):(3'h4)]})) ~^ $unsigned((!($unsigned(wire47) ?
                  (+wire46) : (~|(8'h9e))))));
              reg63 = $unsigned($unsigned({wire46, $unsigned((~reg59))}));
            end
        end
      for (forvar64 = (1'h0); (forvar64 < (1'h0)); forvar64 = (forvar64 + (1'h1)))
        begin
          for (forvar65 = (1'h0); (forvar65 < (2'h3)); forvar65 = (forvar65 + (1'h1)))
            begin
              reg66 = reg58[(5'h14):(4'hf)];
              reg67 <= reg55;
            end
        end
      if (reg63[(3'h6):(1'h0)])
        begin
          reg68 <= $signed((wire49 <= {((reg55 ? forvar60 : (8'ha4)) & {(8'hb0),
                  (7'h43)}),
              $signed($signed((8'hb6)))}));
          reg69 = {($signed($signed($signed((8'h9e)))) && (reg61 == ((wire51 ?
                  wire46 : (8'h9c)) < ((8'ha6) ? wire48 : reg61)))),
              {{wire52}, (|(~|reg62))}};
          reg70 <= (8'hb9);
          for (forvar71 = (1'h0); (forvar71 < (2'h3)); forvar71 = (forvar71 + (1'h1)))
            begin
              reg72 = (~wire49[(2'h2):(2'h2)]);
              reg73 <= (8'ha4);
            end
        end
      else
        begin
          for (forvar68 = (1'h0); (forvar68 < (2'h2)); forvar68 = (forvar68 + (1'h1)))
            begin
              reg69 = $unsigned(forvar60);
              reg70 <= $signed((reg73[(4'hf):(3'h6)] << reg68));
              reg71 = {forvar64[(1'h0):(1'h0)], wire51};
              reg73 <= wire53[(5'h10):(5'h10)];
              reg74 <= ({$signed((~|$unsigned(forvar54))), reg71} ^~ (8'hb1));
            end
          reg75 <= forvar68[(3'h4):(2'h2)];
          reg76 <= $unsigned((reg72[(1'h0):(1'h0)] ^ forvar71));
          reg77 <= $unsigned((((+(reg73 != reg62)) >= ((~reg68) >= $signed(wire51))) ?
              ((((8'hb6) >>> reg67) & {reg55, reg61}) ?
                  (~$unsigned(forvar64)) : ($unsigned((8'hbd)) <= (~forvar64))) : reg63[(1'h0):(1'h0)]));
        end
      reg78 = $unsigned(((~^reg73) >>> $signed(wire50)));
      reg79 <= reg76;
    end
  assign wire80 = $unsigned((~&$signed(($signed(wire50) ^ reg74[(2'h2):(2'h2)]))));
  assign wire81 = reg77;
  assign wire82 = ($unsigned((({wire47} <= ((8'hb7) ? reg67 : wire51)) ?
                          reg61 : (reg68 ?
                              reg61[(3'h5):(1'h0)] : $unsigned(reg76)))) ?
                      $signed((~&reg73)) : (~&wire48));
  assign wire83 = wire48;
  assign wire84 = $unsigned(reg55[(2'h3):(2'h3)]);
  always
    @(posedge clk) begin
      for (forvar85 = (1'h0); (forvar85 < (1'h0)); forvar85 = (forvar85 + (1'h1)))
        begin
          for (forvar86 = (1'h0); (forvar86 < (2'h2)); forvar86 = (forvar86 + (1'h1)))
            begin
              reg87 <= (reg79[(2'h3):(1'h0)] ?
                  wire48[(3'h7):(3'h4)] : ($signed($unsigned((reg68 >>> forvar85))) ?
                      (^~(forvar86[(2'h2):(1'h0)] ?
                          (8'hb4) : $signed(reg76))) : (({wire48, reg77} ?
                              $unsigned(reg68) : reg79[(1'h1):(1'h0)]) ?
                          $signed($unsigned(wire80)) : (wire50 << (reg73 ?
                              reg76 : reg79)))));
              reg88 <= reg73[(4'hf):(4'h9)];
            end
          for (forvar89 = (1'h0); (forvar89 < (2'h2)); forvar89 = (forvar89 + (1'h1)))
            begin
              reg90 <= ({(wire53[(4'ha):(3'h5)] ?
                          ((wire84 ? reg68 : reg73) ?
                              (+reg70) : $signed(reg77)) : ($signed(forvar85) == $signed((8'hbe)))),
                      $unsigned($unsigned((8'hbf)))} ?
                  reg87 : ((!(reg79 ? reg70 : $unsigned(reg76))) ?
                      $unsigned((&$signed(reg67))) : {reg70}));
              reg91 <= {(|reg62)};
              reg92 <= wire84[(2'h3):(2'h2)];
              reg93 <= $unsigned((($unsigned($signed(wire83)) | ($signed(wire49) & reg57)) ?
                  {(!(wire51 ? forvar86 : reg76)),
                      $unsigned($unsigned((8'hbe)))} : (^~((reg77 ?
                      reg76 : reg55) ^ $unsigned(reg55)))));
              reg94 <= reg73;
            end
          for (forvar95 = (1'h0); (forvar95 < (1'h1)); forvar95 = (forvar95 + (1'h1)))
            begin
              reg96 = (forvar95 ^ reg73);
              reg97 <= ((forvar86[(3'h4):(3'h4)] ?
                  (({reg79, wire47} > (reg57 && reg70)) ?
                      (~^reg75) : ({wire47, reg79} ?
                          forvar89 : {wire84,
                              reg57})) : reg57) == $unsigned((~|$unsigned($signed((8'hac))))));
              reg98 <= ((wire51 ?
                  (wire47[(1'h1):(1'h1)] || ({reg92, reg68} ?
                      $unsigned(reg93) : {reg94})) : (-(&(wire53 + wire83)))) < reg93);
              reg99 <= (^~reg90);
            end
          for (forvar100 = (1'h0); (forvar100 < (2'h3)); forvar100 = (forvar100 + (1'h1)))
            begin
              reg101 = $unsigned($signed(wire82));
              reg102 <= $unsigned(((((reg88 || reg93) ?
                  (reg57 ?
                      forvar86 : reg75) : (~|wire52)) >>> $signed((reg99 << (7'h42)))) != (($signed(reg98) >>> (~(8'ha5))) ?
                  wire47[(2'h2):(1'h0)] : ((&reg96) ?
                      ((8'ha9) != forvar85) : wire47[(3'h6):(1'h0)]))));
              reg103 <= (8'hb1);
              reg104 = reg91[(5'h10):(4'h8)];
            end
          for (forvar105 = (1'h0); (forvar105 < (2'h3)); forvar105 = (forvar105 + (1'h1)))
            begin
              reg106 = reg59[(1'h1):(1'h1)];
              reg107 <= ($unsigned((!reg88[(4'hc):(4'h8)])) ?
                  reg76[(1'h0):(1'h0)] : $signed(forvar85));
              reg108 <= $signed(wire81);
            end
        end
    end
  assign wire109 = {$signed(wire80[(2'h3):(1'h0)])};
  assign wire110 = reg97[(2'h2):(2'h2)];
  always
    @(posedge clk) begin
      for (forvar111 = (1'h0); (forvar111 < (2'h3)); forvar111 = (forvar111 + (1'h1)))
        begin
          reg112 <= $signed($unsigned($unsigned($signed(reg108))));
          for (forvar113 = (1'h0); (forvar113 < (2'h2)); forvar113 = (forvar113 + (1'h1)))
            begin
              reg114 <= reg67;
              reg115 = $unsigned((|{(&(reg107 ? reg79 : reg55)), reg79}));
              reg116 <= ((!$unsigned((reg108[(3'h6):(3'h5)] * wire83[(1'h1):(1'h0)]))) ?
                  {reg62[(2'h2):(2'h2)],
                      ($unsigned($signed(reg102)) + (reg55 ?
                          {(8'hbf)} : (reg112 > wire109)))} : (-((8'hb4) ?
                      ((!forvar113) - $signed((8'ha2))) : $unsigned((8'hbe)))));
              reg117 <= $unsigned($unsigned((+($signed(wire84) ?
                  (&(8'hb9)) : $unsigned(wire51)))));
            end
          for (forvar118 = (1'h0); (forvar118 < (2'h2)); forvar118 = (forvar118 + (1'h1)))
            begin
              reg119 = (reg87 ? wire109 : reg97);
              reg120 <= $signed($unsigned(reg114[(1'h1):(1'h1)]));
              reg121 = forvar111;
              reg122 = $unsigned(reg103[(2'h3):(2'h2)]);
              reg123 <= reg112;
            end
          for (forvar124 = (1'h0); (forvar124 < (2'h2)); forvar124 = (forvar124 + (1'h1)))
            begin
              reg125 <= (8'ha3);
            end
          reg126 <= (reg121 ? wire80[(2'h2):(2'h2)] : wire82);
        end
    end
endmodule