(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param44 = {(!(^~((~|(8'ha8)) <<< ((8'hb4) != (8'hba)))))}, 
parameter param45 = (param44 ? param44 : (param44 ? param44 : (!((~|param44) ^~ (param44 != param44))))))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h1ff):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire signed [(5'h13):(1'h0)] wire4;
  input wire signed [(4'ha):(1'h0)] wire3;
  input wire signed [(5'h11):(1'h0)] wire2;
  input wire [(4'hd):(1'h0)] wire1;
  input wire [(3'h5):(1'h0)] wire0;
  wire [(3'h5):(1'h0)] wire43;
  wire [(4'hd):(1'h0)] wire42;
  wire signed [(4'hc):(1'h0)] wire41;
  wire signed [(5'h10):(1'h0)] wire40;
  wire signed [(5'h10):(1'h0)] wire39;
  wire [(5'h13):(1'h0)] wire35;
  wire signed [(4'h8):(1'h0)] wire5;
  reg signed [(2'h3):(1'h0)] reg38 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg37 = (1'h0);
  reg [(4'hf):(1'h0)] reg22 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg34 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg32 = (1'h0);
  reg [(2'h2):(1'h0)] reg31 = (1'h0);
  reg [(3'h6):(1'h0)] reg28 = (1'h0);
  reg [(2'h3):(1'h0)] reg26 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg24 = (1'h0);
  reg [(4'h8):(1'h0)] reg23 = (1'h0);
  reg [(3'h5):(1'h0)] reg21 = (1'h0);
  reg [(5'h13):(1'h0)] reg17 = (1'h0);
  reg [(4'hc):(1'h0)] reg15 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg14 = (1'h0);
  reg [(3'h6):(1'h0)] reg13 = (1'h0);
  reg [(4'hc):(1'h0)] reg10 = (1'h0);
  reg [(4'hc):(1'h0)] reg9 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg6 = (1'h0);
  reg [(5'h15):(1'h0)] reg36 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg29 = (1'h0);
  reg signed [(4'h9):(1'h0)] forvar27 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg33 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg30 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar29 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg27 = (1'h0);
  reg [(3'h7):(1'h0)] reg25 = (1'h0);
  reg [(3'h5):(1'h0)] forvar22 = (1'h0);
  reg [(3'h4):(1'h0)] reg20 = (1'h0);
  reg [(4'hf):(1'h0)] forvar19 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg18 = (1'h0);
  reg [(3'h5):(1'h0)] reg16 = (1'h0);
  reg [(4'hf):(1'h0)] forvar10 = (1'h0);
  reg [(4'ha):(1'h0)] reg8 = (1'h0);
  reg [(5'h10):(1'h0)] forvar7 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg12 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg11 = (1'h0);
  reg [(4'hf):(1'h0)] forvar8 = (1'h0);
  reg [(5'h14):(1'h0)] reg7 = (1'h0);
  assign y = {wire43,
                 wire42,
                 wire41,
                 wire40,
                 wire39,
                 wire35,
                 wire5,
                 reg38,
                 reg37,
                 reg22,
                 reg34,
                 reg32,
                 reg31,
                 reg28,
                 reg26,
                 reg24,
                 reg23,
                 reg21,
                 reg17,
                 reg15,
                 reg14,
                 reg13,
                 reg10,
                 reg9,
                 reg6,
                 reg36,
                 reg29,
                 forvar27,
                 reg33,
                 reg30,
                 forvar29,
                 reg27,
                 reg25,
                 forvar22,
                 reg20,
                 forvar19,
                 reg18,
                 reg16,
                 forvar10,
                 reg8,
                 forvar7,
                 reg12,
                 reg11,
                 forvar8,
                 reg7,
                 (1'h0)};
  assign wire5 = (wire4[(4'hc):(3'h4)] ^~ (wire4 ^ wire4));
  always
    @(posedge clk) begin
      reg6 <= (($signed({$unsigned(wire4), wire2}) ?
          wire3 : $unsigned(((~(8'hb1)) <<< wire3))) <= wire1[(4'h8):(1'h1)]);
      if (((7'h42) ?
          ($signed(reg6[(4'h8):(3'h6)]) ?
              (~^((wire1 ?
                  wire3 : wire0) >>> (wire5 < wire2))) : $unsigned(((wire0 != (8'hab)) > ((8'hb9) >> (8'h9d))))) : wire4[(4'ha):(4'h9)]))
        begin
          reg7 = $unsigned(((^{$signed(wire0)}) ?
              $signed(wire4[(4'hd):(4'hd)]) : $signed($signed(wire1))));
          for (forvar8 = (1'h0); (forvar8 < (2'h3)); forvar8 = (forvar8 + (1'h1)))
            begin
              reg9 <= $unsigned(($signed(({reg7} && reg7[(3'h4):(2'h3)])) ?
                  $signed($signed((8'ha3))) : $signed($unsigned(wire1))));
              reg10 <= (forvar8 == wire5);
              reg11 = (&$signed(wire4[(2'h3):(1'h1)]));
              reg12 = wire5;
            end
        end
      else
        begin
          for (forvar7 = (1'h0); (forvar7 < (2'h3)); forvar7 = (forvar7 + (1'h1)))
            begin
              reg8 = {((wire2 ?
                          (reg7[(2'h2):(1'h0)] ?
                              (wire0 >>> wire0) : $unsigned((7'h40))) : ((wire5 ?
                              forvar8 : forvar8) >>> $unsigned(forvar8))) ?
                      (-$unsigned((reg6 || (8'hab)))) : $signed($unsigned($signed(wire0))))};
              reg9 <= $signed(($unsigned((!$signed(wire3))) > {reg8,
                  ((reg11 | wire2) > $unsigned(reg7))}));
            end
          for (forvar10 = (1'h0); (forvar10 < (1'h0)); forvar10 = (forvar10 + (1'h1)))
            begin
              reg13 <= ({reg9} ?
                  forvar8[(4'ha):(2'h3)] : (^$unsigned({(wire4 ?
                          reg7 : reg6)})));
              reg14 <= $unsigned(wire1);
              reg15 <= (reg8 ?
                  (forvar7[(2'h3):(2'h2)] >>> (8'h9f)) : (reg10[(4'ha):(3'h4)] ?
                      reg14 : $unsigned(((reg12 ?
                          wire3 : reg12) <<< $unsigned(forvar8)))));
              reg16 = wire0[(2'h2):(1'h1)];
              reg17 <= (^~$unsigned((-((8'ha4) ^ reg7[(3'h6):(3'h5)]))));
            end
          reg18 = (wire0 ?
              wire3 : $unsigned(($signed({(8'ha8)}) ?
                  (wire2[(5'h11):(2'h3)] ?
                      $unsigned(reg12) : wire0) : $signed(wire3))));
          for (forvar19 = (1'h0); (forvar19 < (1'h1)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 = reg16[(3'h4):(1'h1)];
              reg21 <= (($unsigned(((8'hbd) ?
                      (reg7 * reg7) : (wire4 ? wire5 : reg12))) ?
                  $unsigned(wire5[(1'h1):(1'h0)]) : $unsigned({$unsigned(reg11),
                      reg16})) << wire1[(4'hd):(4'h9)]);
            end
        end
      if ((^$signed({wire5})))
        begin
          for (forvar22 = (1'h0); (forvar22 < (2'h3)); forvar22 = (forvar22 + (1'h1)))
            begin
              reg23 <= (~(|(reg12 ?
                  $unsigned((reg8 ^~ reg18)) : $signed((wire2 >= reg14)))));
              reg24 <= forvar8[(4'hb):(3'h5)];
              reg25 = {(^($signed(wire0[(1'h1):(1'h1)]) || $unsigned($signed(wire3))))};
              reg26 <= wire5[(3'h4):(2'h2)];
              reg27 = (8'hae);
            end
          reg28 <= ($signed($signed((^~reg10))) >>> ($unsigned(((!(8'hab)) ?
                  {reg14} : $unsigned(reg10))) ?
              wire2[(2'h3):(1'h1)] : reg21));
          for (forvar29 = (1'h0); (forvar29 < (1'h0)); forvar29 = (forvar29 + (1'h1)))
            begin
              reg30 = ((reg16 ?
                  $unsigned(((wire3 >>> reg18) ^~ $signed(reg14))) : {(reg27 || (8'hbd))}) > (($unsigned((reg7 ?
                      forvar22 : reg21)) <<< $unsigned((wire2 ?
                      reg12 : forvar7))) ?
                  {reg8,
                      (forvar10 ?
                          (forvar10 ? (8'hae) : reg7) : (forvar8 ?
                              (8'ha4) : reg16))} : $unsigned($signed($unsigned(forvar29)))));
              reg31 <= ({({(reg26 ? forvar22 : (8'ha9)),
                          (~&wire4)} && (~^reg8[(4'h8):(1'h1)]))} ?
                  $unsigned(reg25) : (-reg25[(1'h0):(1'h0)]));
              reg32 <= $unsigned(reg12[(1'h0):(1'h0)]);
              reg33 = (({($signed(reg8) ?
                      (+forvar29) : (|reg12))} ~^ (forvar7[(4'hd):(4'ha)] ?
                  reg27 : $unsigned(reg27[(4'he):(4'hc)]))) >> $unsigned($signed($signed((reg16 ?
                  reg13 : reg11)))));
              reg34 <= (reg15 ?
                  (reg27 || (reg7 ~^ reg32)) : (&$signed({{reg9, reg7}})));
            end
        end
      else
        begin
          reg22 <= (^~(8'ha6));
          reg23 <= (~|($unsigned(($unsigned(forvar22) ~^ $signed(reg20))) ?
              (forvar22 ?
                  {((7'h41) ?
                          reg17 : (8'hb6))} : $signed($signed(wire0))) : wire4));
          reg24 <= $unsigned($unsigned(($signed((~|wire2)) ?
              (!(8'haa)) : reg13[(1'h0):(1'h0)])));
          reg26 <= ($signed(reg21) ?
              (($signed((forvar29 ? reg30 : reg18)) ?
                  wire0[(1'h0):(1'h0)] : (wire4 <= (reg20 ?
                      reg33 : forvar10))) >= reg31) : $signed((($unsigned(forvar19) >= reg31) * {(8'hb2),
                  ((8'ha3) ? reg28 : reg15)})));
          for (forvar27 = (1'h0); (forvar27 < (2'h3)); forvar27 = (forvar27 + (1'h1)))
            begin
              reg29 = wire3[(2'h2):(1'h0)];
            end
        end
    end
  assign wire35 = ($unsigned(reg31[(1'h0):(1'h0)]) ?
                      $signed((($signed(reg15) ?
                              (reg22 ?
                                  wire0 : (8'hb4)) : reg23[(3'h5):(3'h5)]) ?
                          (reg24[(4'ha):(4'h9)] == (+reg13)) : $signed({reg21}))) : ((~&$unsigned(wire1)) ?
                          (!$signed(reg9[(4'h8):(2'h2)])) : $signed((reg6 == $unsigned(reg13)))));
  always
    @(posedge clk) begin
      reg36 = $signed((!$unsigned((~&wire35[(3'h6):(1'h0)]))));
      reg37 <= wire5[(1'h0):(1'h0)];
      reg38 <= (~^(~|{{$signed(reg15), reg31}, reg28[(3'h5):(2'h3)]}));
    end
  assign wire39 = reg10[(4'h9):(4'h9)];
  assign wire40 = reg31;
  assign wire41 = $signed(((8'hbf) >= (~&(wire39 ?
                      $unsigned((8'hbb)) : (reg14 ? reg22 : reg34)))));
  assign wire42 = reg14[(3'h5):(3'h5)];
  assign wire43 = ($signed((reg6 ? $unsigned($unsigned(reg13)) : reg37)) ?
                      (~^((wire35 <= (~|(8'hb8))) ?
                          ($unsigned(reg31) ?
                              wire5 : (reg31 >> wire4)) : {(&wire39)})) : wire0);
endmodule