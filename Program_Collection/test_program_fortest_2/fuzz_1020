(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param336 = (|(8'ha0)), 
parameter param337 = (((~|param336) ? ((((8'haa) ? param336 : param336) ? {param336} : param336) ? ((param336 ? param336 : param336) * (param336 >>> (8'hbc))) : ((~^param336) ? (8'ha9) : param336)) : (&param336)) > ((+((~|param336) * ((8'ha7) ? param336 : param336))) <= {(param336 ? (param336 ? (8'ha1) : param336) : (7'h41)), {(param336 > param336)}})))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h6db):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h15):(1'h0)] wire4;
  input wire [(5'h11):(1'h0)] wire3;
  input wire [(4'hc):(1'h0)] wire2;
  input wire [(5'h12):(1'h0)] wire1;
  input wire [(5'h13):(1'h0)] wire0;
  wire [(3'h7):(1'h0)] wire335;
  wire [(4'he):(1'h0)] wire289;
  wire [(5'h12):(1'h0)] wire288;
  wire signed [(3'h7):(1'h0)] wire287;
  wire signed [(4'hc):(1'h0)] wire286;
  wire signed [(4'ha):(1'h0)] wire225;
  wire signed [(2'h2):(1'h0)] wire187;
  wire [(5'h14):(1'h0)] wire186;
  wire signed [(2'h2):(1'h0)] wire184;
  wire signed [(3'h4):(1'h0)] wire9;
  wire signed [(4'h8):(1'h0)] wire8;
  wire signed [(3'h7):(1'h0)] wire7;
  wire [(4'h9):(1'h0)] wire6;
  wire [(3'h7):(1'h0)] wire5;
  reg [(4'ha):(1'h0)] reg332 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg325 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg330 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg328 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg326 = (1'h0);
  reg [(4'hd):(1'h0)] reg324 = (1'h0);
  reg signed [(4'he):(1'h0)] reg322 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg320 = (1'h0);
  reg [(4'hc):(1'h0)] reg316 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg310 = (1'h0);
  reg [(3'h5):(1'h0)] reg307 = (1'h0);
  reg [(4'h9):(1'h0)] reg302 = (1'h0);
  reg [(3'h5):(1'h0)] reg300 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg298 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg293 = (1'h0);
  reg [(4'he):(1'h0)] reg292 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg285 = (1'h0);
  reg [(4'hf):(1'h0)] reg284 = (1'h0);
  reg [(5'h14):(1'h0)] reg281 = (1'h0);
  reg [(2'h2):(1'h0)] reg275 = (1'h0);
  reg [(2'h2):(1'h0)] reg273 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg272 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg271 = (1'h0);
  reg [(3'h7):(1'h0)] reg269 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg268 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg265 = (1'h0);
  reg [(5'h13):(1'h0)] reg263 = (1'h0);
  reg [(4'hf):(1'h0)] reg261 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg260 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg259 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg257 = (1'h0);
  reg [(3'h7):(1'h0)] reg252 = (1'h0);
  reg [(5'h11):(1'h0)] reg250 = (1'h0);
  reg [(5'h10):(1'h0)] reg246 = (1'h0);
  reg [(5'h13):(1'h0)] reg244 = (1'h0);
  reg [(4'hc):(1'h0)] reg243 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg242 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg240 = (1'h0);
  reg [(3'h6):(1'h0)] reg239 = (1'h0);
  reg [(3'h4):(1'h0)] reg236 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg233 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg232 = (1'h0);
  reg [(3'h4):(1'h0)] reg230 = (1'h0);
  reg [(4'ha):(1'h0)] reg229 = (1'h0);
  reg [(3'h5):(1'h0)] reg228 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg224 = (1'h0);
  reg [(3'h6):(1'h0)] reg223 = (1'h0);
  reg [(4'he):(1'h0)] reg221 = (1'h0);
  reg [(4'hb):(1'h0)] reg218 = (1'h0);
  reg [(4'hf):(1'h0)] reg216 = (1'h0);
  reg [(3'h6):(1'h0)] reg215 = (1'h0);
  reg signed [(4'he):(1'h0)] reg214 = (1'h0);
  reg [(4'hd):(1'h0)] reg211 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg210 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg208 = (1'h0);
  reg [(5'h15):(1'h0)] reg202 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg199 = (1'h0);
  reg [(4'hb):(1'h0)] reg198 = (1'h0);
  reg [(3'h5):(1'h0)] reg196 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg194 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg192 = (1'h0);
  reg [(4'hf):(1'h0)] reg334 = (1'h0);
  reg [(4'hb):(1'h0)] reg333 = (1'h0);
  reg [(2'h3):(1'h0)] forvar331 = (1'h0);
  reg [(3'h4):(1'h0)] forvar323 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg329 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg327 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar325 = (1'h0);
  reg [(2'h3):(1'h0)] reg323 = (1'h0);
  reg [(4'h9):(1'h0)] forvar321 = (1'h0);
  reg [(4'ha):(1'h0)] reg319 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg318 = (1'h0);
  reg [(3'h5):(1'h0)] reg317 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar315 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg314 = (1'h0);
  reg [(5'h14):(1'h0)] reg313 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg312 = (1'h0);
  reg [(2'h2):(1'h0)] reg311 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar309 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar308 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg306 = (1'h0);
  reg [(5'h15):(1'h0)] reg305 = (1'h0);
  reg [(3'h6):(1'h0)] forvar304 = (1'h0);
  reg [(5'h14):(1'h0)] reg303 = (1'h0);
  reg [(4'h8):(1'h0)] forvar301 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar299 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg297 = (1'h0);
  reg [(4'h8):(1'h0)] reg296 = (1'h0);
  reg [(5'h14):(1'h0)] forvar295 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg294 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar291 = (1'h0);
  reg signed [(4'hb):(1'h0)] forvar290 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg283 = (1'h0);
  reg [(2'h3):(1'h0)] forvar282 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg280 = (1'h0);
  reg [(5'h10):(1'h0)] reg279 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg278 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg277 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar276 = (1'h0);
  reg [(4'h9):(1'h0)] forvar274 = (1'h0);
  reg [(5'h12):(1'h0)] reg270 = (1'h0);
  reg [(4'hc):(1'h0)] reg267 = (1'h0);
  reg [(3'h4):(1'h0)] forvar266 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg264 = (1'h0);
  reg [(4'ha):(1'h0)] forvar262 = (1'h0);
  reg [(4'ha):(1'h0)] reg258 = (1'h0);
  reg [(2'h2):(1'h0)] reg256 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar255 = (1'h0);
  reg [(4'hf):(1'h0)] reg254 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg253 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar251 = (1'h0);
  reg [(5'h10):(1'h0)] forvar249 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar248 = (1'h0);
  reg [(2'h2):(1'h0)] reg247 = (1'h0);
  reg [(4'hd):(1'h0)] reg245 = (1'h0);
  reg [(2'h2):(1'h0)] reg241 = (1'h0);
  reg [(4'h8):(1'h0)] reg238 = (1'h0);
  reg [(3'h6):(1'h0)] reg237 = (1'h0);
  reg signed [(5'h13):(1'h0)] reg235 = (1'h0);
  reg [(4'hc):(1'h0)] forvar234 = (1'h0);
  reg [(4'hf):(1'h0)] reg231 = (1'h0);
  reg [(4'ha):(1'h0)] forvar227 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar226 = (1'h0);
  reg [(3'h4):(1'h0)] reg222 = (1'h0);
  reg [(4'h8):(1'h0)] forvar220 = (1'h0);
  reg [(5'h15):(1'h0)] reg219 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar217 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg213 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar212 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg209 = (1'h0);
  reg [(5'h11):(1'h0)] forvar207 = (1'h0);
  reg [(3'h7):(1'h0)] forvar206 = (1'h0);
  reg [(3'h4):(1'h0)] reg205 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg204 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar203 = (1'h0);
  reg [(3'h6):(1'h0)] reg201 = (1'h0);
  reg [(2'h2):(1'h0)] reg200 = (1'h0);
  reg [(4'h9):(1'h0)] forvar197 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg195 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar193 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg191 = (1'h0);
  reg [(2'h3):(1'h0)] forvar190 = (1'h0);
  reg [(4'hb):(1'h0)] reg189 = (1'h0);
  reg [(3'h5):(1'h0)] forvar188 = (1'h0);
  assign y = {wire335,
                 wire289,
                 wire288,
                 wire287,
                 wire286,
                 wire225,
                 wire187,
                 wire186,
                 wire184,
                 wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 reg332,
                 reg325,
                 reg330,
                 reg328,
                 reg326,
                 reg324,
                 reg322,
                 reg320,
                 reg316,
                 reg310,
                 reg307,
                 reg302,
                 reg300,
                 reg298,
                 reg293,
                 reg292,
                 reg285,
                 reg284,
                 reg281,
                 reg275,
                 reg273,
                 reg272,
                 reg271,
                 reg269,
                 reg268,
                 reg265,
                 reg263,
                 reg261,
                 reg260,
                 reg259,
                 reg257,
                 reg252,
                 reg250,
                 reg246,
                 reg244,
                 reg243,
                 reg242,
                 reg240,
                 reg239,
                 reg236,
                 reg233,
                 reg232,
                 reg230,
                 reg229,
                 reg228,
                 reg224,
                 reg223,
                 reg221,
                 reg218,
                 reg216,
                 reg215,
                 reg214,
                 reg211,
                 reg210,
                 reg208,
                 reg202,
                 reg199,
                 reg198,
                 reg196,
                 reg194,
                 reg192,
                 reg334,
                 reg333,
                 forvar331,
                 forvar323,
                 reg329,
                 reg327,
                 forvar325,
                 reg323,
                 forvar321,
                 reg319,
                 reg318,
                 reg317,
                 forvar315,
                 reg314,
                 reg313,
                 reg312,
                 reg311,
                 forvar309,
                 forvar308,
                 reg306,
                 reg305,
                 forvar304,
                 reg303,
                 forvar301,
                 forvar299,
                 reg297,
                 reg296,
                 forvar295,
                 reg294,
                 forvar291,
                 forvar290,
                 reg283,
                 forvar282,
                 reg280,
                 reg279,
                 reg278,
                 reg277,
                 forvar276,
                 forvar274,
                 reg270,
                 reg267,
                 forvar266,
                 reg264,
                 forvar262,
                 reg258,
                 reg256,
                 forvar255,
                 reg254,
                 reg253,
                 forvar251,
                 forvar249,
                 forvar248,
                 reg247,
                 reg245,
                 reg241,
                 reg238,
                 reg237,
                 reg235,
                 forvar234,
                 reg231,
                 forvar227,
                 forvar226,
                 reg222,
                 forvar220,
                 reg219,
                 forvar217,
                 reg213,
                 forvar212,
                 reg209,
                 forvar207,
                 forvar206,
                 reg205,
                 reg204,
                 forvar203,
                 reg201,
                 reg200,
                 forvar197,
                 reg195,
                 forvar193,
                 reg191,
                 forvar190,
                 reg189,
                 forvar188,
                 (1'h0)};
  assign wire5 = ($unsigned(((wire1 <= $unsigned((8'hbe))) && wire2[(3'h7):(1'h1)])) ?
                     (~^$signed($signed($signed((8'hb7))))) : (-wire2));
  assign wire6 = (wire4[(4'ha):(3'h4)] ?
                     $unsigned(((+(&wire0)) ^~ $unsigned((wire2 != wire3)))) : wire2);
  assign wire7 = ((^~((+(wire2 >> wire2)) < $signed($signed(wire4)))) ?
                     wire5 : wire2[(4'ha):(3'h7)]);
  assign wire8 = (~&wire7);
  assign wire9 = wire6;
  module10 #() modinst185 (.wire13(wire6), .clk(clk), .y(wire184), .wire14(wire0), .wire11(wire4), .wire12(wire1));
  assign wire186 = wire4[(3'h5):(2'h2)];
  assign wire187 = wire7;
  always
    @(posedge clk) begin
      for (forvar188 = (1'h0); (forvar188 < (1'h0)); forvar188 = (forvar188 + (1'h1)))
        begin
          reg189 = $signed((8'h9f));
          for (forvar190 = (1'h0); (forvar190 < (1'h1)); forvar190 = (forvar190 + (1'h1)))
            begin
              reg191 = ((~(|wire186)) ?
                  (~&(~(wire0[(4'hc):(3'h7)] ?
                      $signed((8'hb7)) : $signed(wire7)))) : ((^(forvar188[(1'h1):(1'h1)] ?
                      (^~(8'h9f)) : wire7[(3'h4):(2'h3)])) ^~ $signed($unsigned($unsigned(wire6)))));
              reg192 <= (&($signed($unsigned((wire8 > wire186))) ?
                  wire7[(3'h4):(3'h4)] : ({(!forvar190)} | wire9[(1'h0):(1'h0)])));
            end
          for (forvar193 = (1'h0); (forvar193 < (1'h0)); forvar193 = (forvar193 + (1'h1)))
            begin
              reg194 <= {wire9[(3'h4):(1'h1)]};
              reg195 = $signed($unsigned((~&$signed($signed(forvar190)))));
              reg196 <= {{(wire186[(4'hd):(4'hb)] ?
                          ((wire184 == wire2) ?
                              $unsigned(wire7) : {wire0}) : (~^{wire1,
                              wire0}))}};
            end
          for (forvar197 = (1'h0); (forvar197 < (1'h0)); forvar197 = (forvar197 + (1'h1)))
            begin
              reg198 <= (wire8[(3'h6):(3'h5)] ?
                  forvar197 : $signed($signed(wire9[(1'h0):(1'h0)])));
              reg199 <= (!(forvar190 ^~ $signed(forvar197[(2'h3):(2'h3)])));
              reg200 = reg198;
              reg201 = $unsigned(reg198);
              reg202 <= wire7;
            end
          for (forvar203 = (1'h0); (forvar203 < (2'h3)); forvar203 = (forvar203 + (1'h1)))
            begin
              reg204 = (~&reg194[(3'h7):(1'h0)]);
            end
        end
    end
  always
    @(posedge clk) begin
      reg205 = wire7[(3'h4):(1'h0)];
      for (forvar206 = (1'h0); (forvar206 < (2'h3)); forvar206 = (forvar206 + (1'h1)))
        begin
          for (forvar207 = (1'h0); (forvar207 < (1'h0)); forvar207 = (forvar207 + (1'h1)))
            begin
              reg208 <= $signed({(8'hbe)});
              reg209 = wire2[(4'ha):(4'h9)];
              reg210 <= (((8'hbc) | $signed($unsigned(((8'haa) ?
                      wire6 : (8'hb8))))) ?
                  $unsigned(forvar206) : $unsigned((8'ha9)));
              reg211 <= $signed((wire5 ^~ reg210));
            end
          for (forvar212 = (1'h0); (forvar212 < (1'h1)); forvar212 = (forvar212 + (1'h1)))
            begin
              reg213 = wire8;
              reg214 <= reg198[(2'h3):(1'h0)];
              reg215 <= wire7;
              reg216 <= $signed($unsigned(wire184[(2'h2):(1'h0)]));
            end
          for (forvar217 = (1'h0); (forvar217 < (1'h1)); forvar217 = (forvar217 + (1'h1)))
            begin
              reg218 <= reg198;
              reg219 = $unsigned((!wire9[(1'h1):(1'h0)]));
            end
          for (forvar220 = (1'h0); (forvar220 < (2'h2)); forvar220 = (forvar220 + (1'h1)))
            begin
              reg221 <= (^forvar207[(4'he):(4'hb)]);
              reg222 = (($signed($signed((forvar220 ? reg194 : (8'hae)))) ?
                      $unsigned((reg210[(3'h4):(1'h0)] <<< (reg214 || forvar207))) : $signed(forvar212)) ?
                  {forvar207} : $signed({(wire4[(1'h1):(1'h0)] & forvar207),
                      ($unsigned(wire8) ?
                          {reg214} : forvar217[(3'h7):(1'h1)])}));
              reg223 <= reg219;
            end
        end
      reg224 <= $signed($unsigned((wire184 ?
          $signed(reg216[(4'hc):(3'h6)]) : $signed($signed(forvar220)))));
    end
  assign wire225 = (($signed(wire184) ?
                           $unsigned($unsigned($unsigned(reg218))) : {$unsigned($unsigned(wire184))}) ?
                       wire184[(2'h2):(1'h1)] : ($unsigned($signed(((8'hbe) ?
                           reg218 : wire1))) && $signed((+$unsigned(wire4)))));
  always
    @(posedge clk) begin
      for (forvar226 = (1'h0); (forvar226 < (1'h0)); forvar226 = (forvar226 + (1'h1)))
        begin
          for (forvar227 = (1'h0); (forvar227 < (3'h4)); forvar227 = (forvar227 + (1'h1)))
            begin
              reg228 <= wire2[(1'h1):(1'h1)];
              reg229 <= $signed({wire7[(3'h5):(1'h0)],
                  (((!reg228) != (reg215 ^ wire3)) ?
                      (!(+reg228)) : $unsigned((~&reg210)))});
              reg230 <= $unsigned($unsigned((^wire7)));
              reg231 = $signed((reg228[(1'h0):(1'h0)] && $signed($signed(wire8[(2'h3):(1'h1)]))));
              reg232 <= (($signed((8'hb4)) ?
                  $unsigned($unsigned((~^(8'ha9)))) : (~&wire186)) != (&forvar226));
            end
          reg233 <= (((reg202 ?
                      ((-(8'hb1)) ?
                          ((8'hb8) == forvar227) : ((8'hbd) ~^ reg223)) : wire9) ?
                  wire0 : {$unsigned($unsigned((7'h43))),
                      $signed($unsigned(forvar227))}) ?
              $unsigned({(+(wire187 - (8'ha4)))}) : reg223);
          for (forvar234 = (1'h0); (forvar234 < (2'h3)); forvar234 = (forvar234 + (1'h1)))
            begin
              reg235 = $signed(reg192);
              reg236 <= (wire8[(3'h4):(3'h4)] ?
                  ($signed($unsigned(wire9)) ?
                      $signed((8'ha1)) : $unsigned(reg230[(3'h4):(2'h2)])) : (!(+($unsigned(wire6) != wire0[(5'h12):(5'h11)]))));
              reg237 = (~&wire8[(2'h3):(1'h1)]);
              reg238 = ($signed((!(&{reg218,
                  (7'h40)}))) << $signed((~|(|{reg211, wire7}))));
              reg239 <= (^~wire7[(1'h0):(1'h0)]);
            end
          reg240 <= ($signed(reg215[(2'h2):(1'h0)]) ~^ (~^(^wire186[(5'h14):(4'hd)])));
          if ($signed({reg216[(4'hb):(3'h7)]}))
            begin
              reg241 = (reg229 ?
                  ($unsigned($unsigned(reg239)) <= reg214) : (~^reg239[(3'h4):(1'h1)]));
              reg242 <= (^~($signed($unsigned($signed(reg232))) ?
                  {$unsigned(reg233),
                      reg214[(3'h7):(1'h0)]} : $signed($unsigned(wire225))));
              reg243 <= ($signed(($unsigned((wire225 ^ reg214)) >>> ((reg232 >> reg229) ?
                      (+reg214) : (&reg232)))) ?
                  reg192 : (^$unsigned(reg215[(3'h6):(2'h3)])));
              reg244 <= reg214;
            end
          else
            begin
              reg242 <= (~reg241[(1'h1):(1'h0)]);
              reg245 = $signed($signed(reg221[(2'h3):(2'h3)]));
              reg246 <= {wire225,
                  {(reg230 ?
                          (reg237[(3'h5):(3'h5)] >>> (~^reg244)) : (&(~reg240)))}};
              reg247 = (forvar234[(4'hc):(3'h6)] * $unsigned(forvar226));
            end
        end
      for (forvar248 = (1'h0); (forvar248 < (1'h1)); forvar248 = (forvar248 + (1'h1)))
        begin
          for (forvar249 = (1'h0); (forvar249 < (2'h2)); forvar249 = (forvar249 + (1'h1)))
            begin
              reg250 <= (~|$signed((!($unsigned(wire8) & (reg215 >>> reg243)))));
            end
          for (forvar251 = (1'h0); (forvar251 < (1'h0)); forvar251 = (forvar251 + (1'h1)))
            begin
              reg252 <= $signed($signed(wire8));
              reg253 = reg242[(4'h8):(3'h5)];
              reg254 = reg245[(4'hb):(3'h6)];
            end
          for (forvar255 = (1'h0); (forvar255 < (2'h2)); forvar255 = (forvar255 + (1'h1)))
            begin
              reg256 = reg230;
              reg257 <= $signed(reg243);
              reg258 = forvar255[(4'hc):(2'h2)];
              reg259 <= $signed(((-wire7) ?
                  $unsigned(($unsigned(wire225) != ((8'had) ?
                      (8'hb0) : reg239))) : wire1));
              reg260 <= $unsigned($unsigned($unsigned((~^reg231))));
            end
          reg261 <= reg214[(2'h2):(2'h2)];
          for (forvar262 = (1'h0); (forvar262 < (3'h4)); forvar262 = (forvar262 + (1'h1)))
            begin
              reg263 <= ((~$unsigned({$unsigned(reg257)})) ? reg208 : wire9);
            end
        end
      reg264 = (reg228 ? $unsigned(reg259) : reg238[(3'h6):(3'h4)]);
    end
  always
    @(posedge clk) begin
      reg265 <= ($signed(reg224) ?
          $signed($unsigned({reg252[(3'h6):(1'h0)],
              (reg261 && reg216)})) : wire1);
      for (forvar266 = (1'h0); (forvar266 < (1'h1)); forvar266 = (forvar266 + (1'h1)))
        begin
          if ($unsigned($signed((^~(8'hb6)))))
            begin
              reg267 = $signed((((8'ha9) - ($unsigned(reg260) << reg216)) ?
                  $unsigned($unsigned((+reg265))) : wire187));
              reg268 <= reg199;
              reg269 <= $signed(reg246[(1'h0):(1'h0)]);
              reg270 = {(!(&$unsigned((|reg263)))), $unsigned($signed(reg243))};
              reg271 <= $unsigned(((((~reg246) + (-wire9)) | {(reg236 & wire5)}) != ($unsigned(reg270) ?
                  $unsigned(reg244) : (^(reg214 + reg270)))));
            end
          else
            begin
              reg268 <= (~^(7'h43));
              reg269 <= $signed(wire8);
              reg271 <= (wire7[(2'h3):(1'h1)] <= reg250[(1'h0):(1'h0)]);
              reg272 <= {$signed((reg250[(1'h1):(1'h1)] ?
                      $signed($signed(reg246)) : {$unsigned(reg202)}))};
            end
          reg273 <= (reg194 ^~ (8'hac));
          for (forvar274 = (1'h0); (forvar274 < (3'h4)); forvar274 = (forvar274 + (1'h1)))
            begin
              reg275 <= (+(($unsigned((+wire6)) ?
                  $unsigned({reg243,
                      reg261}) : $unsigned($signed(reg270))) != $signed(reg194)));
            end
          for (forvar276 = (1'h0); (forvar276 < (2'h3)); forvar276 = (forvar276 + (1'h1)))
            begin
              reg277 = $unsigned((8'hb6));
              reg278 = reg216[(4'ha):(1'h1)];
              reg279 = (-$unsigned($unsigned(reg224[(4'h8):(3'h5)])));
              reg280 = $signed($unsigned($unsigned(reg218)));
              reg281 <= {reg208[(4'hb):(1'h0)],
                  ($unsigned((^~((7'h42) == reg232))) ?
                      $unsigned((reg243 ?
                          $unsigned((8'hbf)) : $unsigned(reg272))) : (reg233 ?
                          reg280 : {reg279, (8'hb6)}))};
            end
          for (forvar282 = (1'h0); (forvar282 < (2'h3)); forvar282 = (forvar282 + (1'h1)))
            begin
              reg283 = (($unsigned($signed($signed(reg229))) <<< $unsigned(($unsigned(wire5) ?
                      $unsigned(wire186) : forvar276[(2'h2):(1'h0)]))) ?
                  reg243 : ((reg260 | (~&$unsigned(reg211))) ?
                      (({reg194} ? reg242[(1'h0):(1'h0)] : wire2) ?
                          ((reg243 != forvar282) | (wire5 ?
                              wire2 : reg228)) : reg224) : $unsigned(wire225[(3'h6):(3'h5)])));
              reg284 <= wire7;
              reg285 <= ($unsigned($unsigned((&(&reg244)))) ?
                  (!((8'h9c) ?
                      ((reg263 ?
                          (8'ha3) : reg210) | wire3) : $unsigned(wire6[(2'h3):(2'h3)]))) : (8'hb3));
            end
        end
    end
  assign wire286 = ($signed((($unsigned(reg194) ?
                           wire9[(3'h4):(1'h1)] : $signed((7'h42))) + $signed(((8'ha9) ?
                           reg275 : reg259)))) ?
                       reg216 : reg275[(2'h2):(1'h0)]);
  assign wire287 = {(~|($signed((~|(8'hb0))) * wire186[(4'hd):(1'h1)])),
                       reg246[(3'h5):(1'h1)]};
  assign wire288 = ($signed((({wire184} ^~ (reg232 ?
                           wire286 : (8'hbc))) << (8'ha1))) ?
                       (((reg224[(3'h6):(1'h1)] > (reg260 ? wire0 : wire187)) ?
                               (|((8'h9c) ?
                                   reg240 : reg281)) : {wire6[(4'h9):(4'h8)]}) ?
                           $signed((-(reg198 > reg218))) : (|$signed(reg273))) : (!$signed(wire9)));
  assign wire289 = (+wire184[(1'h1):(1'h1)]);
  always
    @(posedge clk) begin
      for (forvar290 = (1'h0); (forvar290 < (2'h2)); forvar290 = (forvar290 + (1'h1)))
        begin
          for (forvar291 = (1'h0); (forvar291 < (2'h3)); forvar291 = (forvar291 + (1'h1)))
            begin
              reg292 <= (($signed(($signed(reg215) ^~ (^wire184))) ?
                  (($unsigned(wire289) <= (reg224 <<< reg199)) < (~^{forvar291})) : (8'hb9)) < (reg192 ^ $unsigned((~^{reg275,
                  reg194}))));
              reg293 <= (8'ha4);
              reg294 = (forvar290[(3'h7):(3'h5)] ?
                  (reg210[(3'h4):(1'h0)] > {reg192,
                      ($signed(reg192) ?
                          (reg257 ?
                              wire0 : wire289) : ((8'hb6) + reg260))}) : wire289);
            end
          for (forvar295 = (1'h0); (forvar295 < (1'h1)); forvar295 = (forvar295 + (1'h1)))
            begin
              reg296 = {{reg216[(3'h7):(3'h7)]}};
            end
          reg297 = ({$signed(wire6[(4'h9):(3'h7)])} ?
              (8'hbd) : $unsigned(($unsigned((reg208 ? wire4 : (8'hb5))) ?
                  (reg229[(3'h7):(3'h7)] ^~ reg192) : $unsigned($unsigned(reg210)))));
        end
      reg298 <= $unsigned($unsigned((!$unsigned(((8'ha1) & forvar295)))));
      for (forvar299 = (1'h0); (forvar299 < (2'h3)); forvar299 = (forvar299 + (1'h1)))
        begin
          reg300 <= $unsigned($unsigned((wire3[(4'hd):(4'h8)] ?
              ($unsigned(wire3) ^ (reg230 ?
                  wire9 : wire9)) : wire8[(3'h7):(3'h4)])));
          for (forvar301 = (1'h0); (forvar301 < (3'h4)); forvar301 = (forvar301 + (1'h1)))
            begin
              reg302 <= (reg252[(3'h5):(3'h4)] ?
                  ((reg218[(2'h3):(2'h2)] && $unsigned(reg265)) ?
                      $signed($unsigned(reg257[(2'h2):(1'h1)])) : (!$unsigned(reg246[(4'hc):(4'ha)]))) : $signed($unsigned(((reg215 == reg223) ?
                      {reg214} : (-reg246)))));
              reg303 = $unsigned($signed($unsigned((8'hb4))));
            end
          for (forvar304 = (1'h0); (forvar304 < (2'h2)); forvar304 = (forvar304 + (1'h1)))
            begin
              reg305 = (~&reg297);
              reg306 = wire1;
            end
          reg307 <= $unsigned(reg271);
        end
      for (forvar308 = (1'h0); (forvar308 < (2'h2)); forvar308 = (forvar308 + (1'h1)))
        begin
          for (forvar309 = (1'h0); (forvar309 < (3'h4)); forvar309 = (forvar309 + (1'h1)))
            begin
              reg310 <= (|($unsigned({reg293, {wire7, reg260}}) ?
                  $signed((|reg307)) : $signed($signed($signed(reg208)))));
              reg311 = ($unsigned(forvar291) ?
                  {($unsigned((wire7 ? reg232 : reg252)) ?
                          {$unsigned(reg300)} : (+(wire0 ? reg259 : reg285))),
                      (~^(8'ha1))} : (8'hb1));
              reg312 = wire287;
              reg313 = (~^$signed($signed(((wire8 ^ reg261) ^~ (reg303 <= reg218)))));
              reg314 = $unsigned($unsigned({reg194[(4'he):(1'h1)],
                  $unsigned($unsigned((8'hb1)))}));
            end
          for (forvar315 = (1'h0); (forvar315 < (1'h0)); forvar315 = (forvar315 + (1'h1)))
            begin
              reg316 <= (8'hae);
              reg317 = {{wire5,
                      (reg196 ?
                          ($signed(reg316) ?
                              {reg281,
                                  (8'hba)} : reg263[(3'h6):(1'h0)]) : (7'h43))}};
              reg318 = forvar295[(1'h1):(1'h1)];
              reg319 = $unsigned($unsigned((~&$unsigned(wire6[(1'h0):(1'h0)]))));
            end
          reg320 <= reg281[(4'hf):(4'h8)];
          for (forvar321 = (1'h0); (forvar321 < (1'h0)); forvar321 = (forvar321 + (1'h1)))
            begin
              reg322 <= (|(reg298 || {$unsigned((reg257 + reg320)),
                  (reg216 ? reg273 : reg312)}));
            end
        end
      if ((+(reg312[(1'h1):(1'h0)] ?
          (((|wire225) | $signed((8'ha2))) ?
              (^~((8'hb6) ? reg310 : (8'ha8))) : reg214) : reg196)))
        begin
          reg323 = (-reg281);
          reg324 <= $unsigned($signed($unsigned(({wire8,
              reg317} >>> reg314[(4'hd):(3'h4)]))));
          for (forvar325 = (1'h0); (forvar325 < (1'h0)); forvar325 = (forvar325 + (1'h1)))
            begin
              reg326 <= reg218;
              reg327 = reg192;
              reg328 <= {$unsigned(reg265)};
              reg329 = reg318;
              reg330 <= $signed({$signed($unsigned((~&reg263)))});
            end
        end
      else
        begin
          for (forvar323 = (1'h0); (forvar323 < (1'h0)); forvar323 = (forvar323 + (1'h1)))
            begin
              reg324 <= ((~reg327[(4'hc):(1'h1)]) ?
                  ($unsigned($unsigned($signed(reg281))) ?
                      reg328 : $unsigned(reg230[(1'h1):(1'h0)])) : {{(~^wire286),
                          forvar325}});
              reg325 <= (|{{(!forvar309),
                      ((reg271 >>> wire0) ?
                          reg323[(2'h2):(2'h2)] : {reg312, wire289})}});
              reg326 <= (((^(^(reg239 ?
                  reg259 : reg218))) << $signed(reg297)) ^~ (+reg320));
              reg328 <= $unsigned($unsigned(($unsigned(reg208[(5'h14):(4'h8)]) | (&$unsigned(reg269)))));
              reg330 <= {{(~$unsigned((reg317 - reg246)))},
                  (reg272[(4'h9):(4'h8)] - $unsigned(($unsigned(reg199) > reg261)))};
            end
          for (forvar331 = (1'h0); (forvar331 < (3'h4)); forvar331 = (forvar331 + (1'h1)))
            begin
              reg332 <= ($unsigned($signed(reg198)) * $unsigned($unsigned({(^~reg300),
                  $unsigned((8'ha2))})));
              reg333 = $signed((+{($signed(reg285) ?
                      (&reg194) : reg275[(1'h1):(1'h0)]),
                  $unsigned(reg300)}));
              reg334 = ($signed((~&{(&reg214), reg333[(2'h3):(1'h0)]})) ?
                  forvar301 : {$signed(((+reg257) ?
                          reg320[(2'h3):(1'h0)] : ((8'hae) ?
                              reg325 : reg192)))});
            end
        end
    end
  assign wire335 = (reg263[(4'h8):(2'h2)] ?
                       $signed((8'hbb)) : $unsigned((8'hb8)));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module10
#(parameter param183 = ((((((8'hbd) ? (7'h41) : (8'hba)) << ((8'ha3) >= (7'h41))) != {((8'ha0) ? (8'hac) : (8'hb2)), (8'ha9)}) ^ (!((~^(8'hb6)) < ((8'hac) >>> (8'hb8))))) >> ({(|((8'h9c) ? (8'h9f) : (8'ha2)))} > (-(~^{(8'hb4)})))))
(y, clk, wire11, wire12, wire13, wire14);
  output wire [(32'h33a):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h15):(1'h0)] wire11;
  input wire signed [(5'h12):(1'h0)] wire12;
  input wire [(4'h9):(1'h0)] wire13;
  input wire [(5'h13):(1'h0)] wire14;
  wire [(5'h13):(1'h0)] wire182;
  wire signed [(4'hc):(1'h0)] wire181;
  wire signed [(3'h6):(1'h0)] wire133;
  wire [(5'h10):(1'h0)] wire15;
  wire [(2'h2):(1'h0)] wire16;
  wire signed [(5'h12):(1'h0)] wire17;
  wire [(4'hd):(1'h0)] wire96;
  reg signed [(2'h2):(1'h0)] reg180 = (1'h0);
  reg [(3'h5):(1'h0)] reg179 = (1'h0);
  reg [(4'h9):(1'h0)] reg174 = (1'h0);
  reg [(5'h10):(1'h0)] reg173 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg168 = (1'h0);
  reg [(5'h13):(1'h0)] reg166 = (1'h0);
  reg [(3'h6):(1'h0)] reg162 = (1'h0);
  reg [(4'hb):(1'h0)] reg161 = (1'h0);
  reg [(3'h7):(1'h0)] reg159 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg157 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg154 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg153 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg151 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg150 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg147 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg146 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg145 = (1'h0);
  reg signed [(4'he):(1'h0)] reg141 = (1'h0);
  reg [(4'he):(1'h0)] reg140 = (1'h0);
  reg [(4'hb):(1'h0)] reg138 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg135 = (1'h0);
  reg [(4'hd):(1'h0)] reg110 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg109 = (1'h0);
  reg [(5'h12):(1'h0)] reg107 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg106 = (1'h0);
  reg [(5'h15):(1'h0)] reg102 = (1'h0);
  reg [(4'he):(1'h0)] reg101 = (1'h0);
  reg [(2'h3):(1'h0)] reg100 = (1'h0);
  reg [(5'h15):(1'h0)] reg178 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar177 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg176 = (1'h0);
  reg [(4'hc):(1'h0)] reg175 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar172 = (1'h0);
  reg [(3'h7):(1'h0)] reg171 = (1'h0);
  reg [(4'h9):(1'h0)] forvar170 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar169 = (1'h0);
  reg [(4'hc):(1'h0)] reg167 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg165 = (1'h0);
  reg signed [(4'he):(1'h0)] reg164 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar163 = (1'h0);
  reg [(4'hf):(1'h0)] reg160 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar158 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar156 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar155 = (1'h0);
  reg [(3'h4):(1'h0)] reg152 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg149 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar148 = (1'h0);
  reg [(5'h15):(1'h0)] reg144 = (1'h0);
  reg [(4'ha):(1'h0)] reg143 = (1'h0);
  reg [(5'h10):(1'h0)] forvar142 = (1'h0);
  reg [(2'h3):(1'h0)] reg139 = (1'h0);
  reg [(5'h13):(1'h0)] forvar137 = (1'h0);
  reg [(5'h10):(1'h0)] forvar136 = (1'h0);
  reg signed [(5'h10):(1'h0)] reg111 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg108 = (1'h0);
  reg [(4'hf):(1'h0)] forvar105 = (1'h0);
  reg [(4'hb):(1'h0)] reg104 = (1'h0);
  reg [(3'h6):(1'h0)] forvar103 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar99 = (1'h0);
  reg [(5'h15):(1'h0)] forvar98 = (1'h0);
  assign y = {wire182,
                 wire181,
                 wire133,
                 wire15,
                 wire16,
                 wire17,
                 wire96,
                 reg180,
                 reg179,
                 reg174,
                 reg173,
                 reg168,
                 reg166,
                 reg162,
                 reg161,
                 reg159,
                 reg157,
                 reg154,
                 reg153,
                 reg151,
                 reg150,
                 reg147,
                 reg146,
                 reg145,
                 reg141,
                 reg140,
                 reg138,
                 reg135,
                 reg110,
                 reg109,
                 reg107,
                 reg106,
                 reg102,
                 reg101,
                 reg100,
                 reg178,
                 forvar177,
                 reg176,
                 reg175,
                 forvar172,
                 reg171,
                 forvar170,
                 forvar169,
                 reg167,
                 reg165,
                 reg164,
                 forvar163,
                 reg160,
                 forvar158,
                 forvar156,
                 forvar155,
                 reg152,
                 reg149,
                 forvar148,
                 reg144,
                 reg143,
                 forvar142,
                 reg139,
                 forvar137,
                 forvar136,
                 reg111,
                 reg108,
                 forvar105,
                 reg104,
                 forvar103,
                 forvar99,
                 forvar98,
                 (1'h0)};
  assign wire15 = (|wire12[(4'hc):(4'h9)]);
  assign wire16 = ($unsigned($signed((wire13[(3'h5):(3'h5)] ?
                          ((8'haa) ~^ wire14) : {wire14, wire15}))) ?
                      (wire15[(4'h9):(2'h2)] | ($signed($signed((8'hb6))) <<< $signed(wire12))) : (({{wire12},
                          ((8'hb5) >> (8'hb1))} - wire14[(4'hf):(3'h7)]) >= (~&((8'hbd) ~^ $unsigned(wire15)))));
  assign wire17 = ((7'h40) ?
                      ((7'h43) != wire15) : $unsigned(wire14[(4'ha):(3'h6)]));
  module18 #() modinst97 (wire96, clk, wire15, wire17, wire12, wire13, wire14);
  always
    @(posedge clk) begin
      for (forvar98 = (1'h0); (forvar98 < (2'h3)); forvar98 = (forvar98 + (1'h1)))
        begin
          for (forvar99 = (1'h0); (forvar99 < (3'h4)); forvar99 = (forvar99 + (1'h1)))
            begin
              reg100 <= $unsigned({{(~^(~^(8'hb4)))}, wire11});
              reg101 <= forvar98[(5'h12):(4'hc)];
            end
          reg102 <= $unsigned(((wire17[(3'h4):(1'h0)] ?
                  $signed(((7'h40) ^~ forvar99)) : $unsigned((wire17 == forvar99))) ?
              ($signed((wire11 ?
                  wire17 : wire96)) || reg100) : wire15[(4'hf):(4'h9)]));
          for (forvar103 = (1'h0); (forvar103 < (3'h4)); forvar103 = (forvar103 + (1'h1)))
            begin
              reg104 = wire16;
            end
          for (forvar105 = (1'h0); (forvar105 < (3'h4)); forvar105 = (forvar105 + (1'h1)))
            begin
              reg106 <= (((^~$unsigned($signed(wire16))) == reg102[(2'h2):(2'h2)]) ?
                  ($unsigned((8'ha0)) ?
                      {($signed(reg101) <<< wire96[(1'h0):(1'h0)]),
                          $unsigned((^wire13))} : ($unsigned(forvar103) ?
                          $signed((forvar99 ?
                              wire13 : (8'hb5))) : (((8'h9f) ^ reg102) ?
                              (wire12 ?
                                  reg104 : wire17) : $signed(reg100)))) : ((((~forvar99) ?
                          wire11 : (8'ha2)) - wire11) ?
                      $signed($unsigned($unsigned(wire17))) : {(~^(reg101 ?
                              wire15 : reg101))}));
              reg107 <= (!$unsigned(forvar105[(4'he):(2'h2)]));
              reg108 = (($signed(((~^forvar105) ?
                  {reg106} : (|reg107))) == ($signed($unsigned(reg104)) ?
                  {reg107} : {((8'ha7) ? (8'ha3) : wire17)})) << forvar105);
              reg109 <= $signed({$signed($signed(((8'hbc) ?
                      (8'ha2) : (8'ha6)))),
                  wire14[(4'hb):(2'h3)]});
            end
        end
    end
  always
    @(posedge clk) begin
      reg110 <= $signed(reg107);
      reg111 = (-reg100);
    end
  module112 #() modinst134 (wire133, clk, reg102, wire17, reg107, wire96);
  always
    @(posedge clk) begin
      reg135 <= (8'hbb);
      for (forvar136 = (1'h0); (forvar136 < (1'h0)); forvar136 = (forvar136 + (1'h1)))
        begin
          for (forvar137 = (1'h0); (forvar137 < (1'h0)); forvar137 = (forvar137 + (1'h1)))
            begin
              reg138 <= $unsigned(wire16);
              reg139 = (8'ha3);
              reg140 <= wire133;
              reg141 <= ($signed((+$unsigned((~&forvar137)))) ?
                  (|{(+forvar137[(5'h13):(4'ha)]),
                      $unsigned($unsigned(reg107))}) : $signed(($unsigned((reg110 && wire14)) & wire17)));
            end
          for (forvar142 = (1'h0); (forvar142 < (2'h3)); forvar142 = (forvar142 + (1'h1)))
            begin
              reg143 = $signed($unsigned(((^{(8'hb7), reg141}) ?
                  wire17 : $signed({forvar137, reg138}))));
              reg144 = $unsigned(wire96[(4'hc):(3'h5)]);
              reg145 <= ((({reg139[(2'h3):(1'h0)],
                  (!wire15)} + reg144[(2'h3):(2'h3)]) | (({(8'ha1)} - (reg107 >> reg100)) ?
                  reg101 : forvar136[(4'ha):(1'h0)])) + $unsigned((~wire15[(5'h10):(3'h6)])));
              reg146 <= (&{$unsigned(((wire15 ?
                      wire15 : reg144) ~^ (^(8'ha9)))),
                  (8'haa)});
              reg147 <= ((|wire11[(1'h0):(1'h0)]) >= (reg140 ^~ (~|wire12[(4'h9):(1'h1)])));
            end
          for (forvar148 = (1'h0); (forvar148 < (3'h4)); forvar148 = (forvar148 + (1'h1)))
            begin
              reg149 = (&wire13[(2'h3):(1'h1)]);
              reg150 <= $signed((!{($unsigned(reg100) ?
                      $signed(reg106) : forvar137[(3'h4):(1'h1)])}));
              reg151 <= (forvar148 ?
                  (~^(!$unsigned({reg147,
                      forvar148}))) : $signed((~^wire11[(5'h12):(3'h6)])));
              reg152 = reg144;
              reg153 <= (&(~($unsigned((&reg143)) != reg141)));
            end
        end
      reg154 <= (reg140 == forvar137[(4'ha):(2'h3)]);
      for (forvar155 = (1'h0); (forvar155 < (1'h0)); forvar155 = (forvar155 + (1'h1)))
        begin
          for (forvar156 = (1'h0); (forvar156 < (1'h0)); forvar156 = (forvar156 + (1'h1)))
            begin
              reg157 <= $signed($signed((^($signed(forvar142) ?
                  forvar156 : wire14[(3'h7):(3'h5)]))));
            end
          for (forvar158 = (1'h0); (forvar158 < (3'h4)); forvar158 = (forvar158 + (1'h1)))
            begin
              reg159 <= wire16[(1'h0):(1'h0)];
              reg160 = $unsigned($signed($unsigned($unsigned(reg100[(1'h0):(1'h0)]))));
              reg161 <= $unsigned($signed($unsigned($signed((~&wire15)))));
              reg162 <= reg157[(1'h0):(1'h0)];
            end
          for (forvar163 = (1'h0); (forvar163 < (3'h4)); forvar163 = (forvar163 + (1'h1)))
            begin
              reg164 = (reg154 ? (~|reg140[(4'he):(2'h2)]) : wire12);
              reg165 = wire13[(1'h1):(1'h1)];
              reg166 <= {forvar163[(4'h8):(1'h0)]};
              reg167 = (^~reg107);
              reg168 <= reg109;
            end
        end
      for (forvar169 = (1'h0); (forvar169 < (3'h4)); forvar169 = (forvar169 + (1'h1)))
        begin
          for (forvar170 = (1'h0); (forvar170 < (1'h1)); forvar170 = (forvar170 + (1'h1)))
            begin
              reg171 = forvar142;
            end
          for (forvar172 = (1'h0); (forvar172 < (1'h1)); forvar172 = (forvar172 + (1'h1)))
            begin
              reg173 <= (8'hb2);
              reg174 <= reg161[(4'ha):(2'h3)];
              reg175 = (^~((~(8'hb7)) ?
                  {reg100, (8'haf)} : (reg107[(4'ha):(2'h2)] ?
                      (&$signed(reg109)) : {(~^reg107)})));
              reg176 = {$signed(((reg168[(3'h7):(1'h1)] << $unsigned(reg101)) ~^ (^$signed((8'hb4))))),
                  $unsigned((+$signed(reg167)))};
            end
          for (forvar177 = (1'h0); (forvar177 < (2'h2)); forvar177 = (forvar177 + (1'h1)))
            begin
              reg178 = ((reg174 ?
                      reg160 : ((-(~|wire13)) ^ (~(wire133 > reg171)))) ?
                  reg110[(4'h8):(3'h5)] : (((reg173[(4'he):(4'hb)] ?
                          $unsigned((8'ha7)) : $unsigned(wire14)) < reg164[(4'h9):(1'h0)]) ?
                      $signed($unsigned($signed(forvar177))) : reg139[(2'h2):(1'h1)]));
              reg179 <= $signed(((+reg143) != wire17));
              reg180 <= ($signed(((((8'ha4) ? reg143 : reg144) ?
                  $unsigned(reg140) : ((7'h41) < reg175)) < $unsigned($signed(reg151)))) < ((+$unsigned({(8'hb7)})) ?
                  reg102[(5'h14):(1'h0)] : $unsigned((^~(^wire17)))));
            end
        end
    end
  assign wire181 = wire133[(3'h5):(3'h4)];
  assign wire182 = {$signed((reg173 ?
                           reg138[(3'h6):(1'h0)] : $unsigned((reg110 ~^ (7'h41))))),
                       (-$unsigned($signed({(8'hb4)})))};
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module112
#(parameter param131 = ({((((8'hb1) ? (8'h9c) : (8'hb6)) < ((8'ha3) & (8'ha2))) ? (((7'h43) ? (8'h9e) : (8'h9c)) ? ((8'ha5) >>> (8'hbd)) : ((8'haf) && (8'hb6))) : {((8'ha9) || (8'hba)), ((8'hbf) << (8'ha0))}), (+(!{(8'h9c), (8'haa)}))} ^~ (((((8'haa) >> (8'hb9)) ~^ (~(8'hb0))) == (((8'ha6) ? (8'ha2) : (8'ha5)) ? {(8'haf)} : ((8'hb8) | (8'hab)))) + {(((8'ha2) == (8'hae)) ? ((8'h9f) ^~ (8'h9e)) : (~(8'hbc))), (((8'hac) ? (8'ha7) : (8'hb7)) * ((7'h41) ? (8'hbe) : (8'hb6)))})), 
parameter param132 = ((param131 ? (((param131 & param131) == (param131 ? param131 : param131)) ^~ {param131}) : (&(^{param131, param131}))) ^~ ({(+(-param131))} ? {((param131 ? param131 : param131) << param131)} : ((~|(param131 ? param131 : param131)) >> ((param131 ? param131 : (8'hb7)) <= param131)))))
(y, clk, wire116, wire115, wire114, wire113);
  output wire [(32'h8e):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'he):(1'h0)] wire116;
  input wire signed [(4'hf):(1'h0)] wire115;
  input wire signed [(5'h10):(1'h0)] wire114;
  input wire signed [(4'hd):(1'h0)] wire113;
  wire [(4'hc):(1'h0)] wire130;
  wire signed [(4'ha):(1'h0)] wire129;
  wire signed [(4'he):(1'h0)] wire128;
  wire signed [(5'h10):(1'h0)] wire127;
  wire signed [(4'h9):(1'h0)] wire126;
  wire [(2'h2):(1'h0)] wire125;
  wire signed [(3'h4):(1'h0)] wire124;
  wire [(2'h3):(1'h0)] wire123;
  wire [(4'hc):(1'h0)] wire122;
  wire signed [(3'h4):(1'h0)] wire121;
  wire [(4'ha):(1'h0)] wire120;
  wire signed [(3'h7):(1'h0)] wire119;
  wire [(5'h12):(1'h0)] wire118;
  wire signed [(5'h14):(1'h0)] wire117;
  assign y = {wire130,
                 wire129,
                 wire128,
                 wire127,
                 wire126,
                 wire125,
                 wire124,
                 wire123,
                 wire122,
                 wire121,
                 wire120,
                 wire119,
                 wire118,
                 wire117,
                 (1'h0)};
  assign wire117 = wire115[(1'h1):(1'h1)];
  assign wire118 = wire115;
  assign wire119 = (wire117 ?
                       ({($unsigned((8'ha8)) ? (wire117 | wire113) : wire114),
                           {$signed(wire118)}} != {$signed((+wire113)),
                           wire118[(4'hb):(2'h3)]}) : wire116[(3'h4):(1'h1)]);
  assign wire120 = $unsigned($unsigned((8'hb0)));
  assign wire121 = $signed((wire116 ?
                       $signed(wire116) : wire113[(2'h3):(2'h3)]));
  assign wire122 = ((wire120[(3'h4):(2'h2)] ?
                           $signed((~^{wire114})) : $unsigned({(8'h9c)})) ?
                       (wire119 == wire115[(4'hc):(1'h0)]) : $unsigned({$unsigned({wire113}),
                           $signed((wire113 ? wire113 : wire116))}));
  assign wire123 = $signed((8'hbd));
  assign wire124 = (8'hb7);
  assign wire125 = {($unsigned(wire121[(2'h3):(1'h0)]) >>> {wire118[(3'h7):(3'h7)],
                           $signed(((8'hbb) ^ wire113))})};
  assign wire126 = wire113[(1'h0):(1'h0)];
  assign wire127 = (&$unsigned(wire124));
  assign wire128 = wire117[(3'h4):(1'h1)];
  assign wire129 = ($unsigned(($signed((wire127 <= wire116)) ?
                           wire126 : $signed((wire113 ? wire123 : wire114)))) ?
                       wire114 : (|(8'ha7)));
  assign wire130 = ($signed({wire124[(1'h0):(1'h0)],
                           $signed(wire124[(3'h4):(1'h0)])}) ?
                       (|($unsigned({wire123,
                           wire127}) >> (~^(wire114 ~^ wire114)))) : ($unsigned(wire113) >> $signed(wire118[(4'hd):(4'hd)])));
endmodule

(* use_dsp48="no" *) (* use_dsp="no" *) module module18
#(parameter param95 = (((|(((7'h42) ? (8'ha6) : (8'ha2)) ? (-(7'h44)) : (|(8'ha7)))) ? ((((8'hac) ? (8'hbd) : (8'h9e)) ? ((8'hb0) != (8'hac)) : {(8'hbc), (8'had)}) ? ((&(8'hbc)) + ((8'ha6) ? (8'ha2) : (8'h9d))) : ({(8'hab), (8'hba)} + ((8'ha2) && (8'hab)))) : (((~|(8'hbc)) || (|(8'ha2))) << (((8'hb8) ? (8'h9c) : (8'had)) >>> ((8'hb3) >>> (8'hb8))))) > (((^~{(8'ha6)}) != ((~^(8'ha2)) ? (~(8'hb1)) : ((8'hbe) < (7'h42)))) ? {(((8'hb9) || (8'h9e)) ? ((8'ha4) ? (8'haf) : (8'hb7)) : (~^(8'ha4))), ({(8'hb0)} ? ((8'h9d) >> (8'hb4)) : (+(8'ha7)))} : (~^(^~((8'hb7) ? (8'ha0) : (8'ha8)))))))
(y, clk, wire23, wire22, wire21, wire20, wire19);
  output wire [(32'h2da):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'ha):(1'h0)] wire23;
  input wire signed [(5'h12):(1'h0)] wire22;
  input wire signed [(5'h12):(1'h0)] wire21;
  input wire [(4'h9):(1'h0)] wire20;
  input wire signed [(5'h13):(1'h0)] wire19;
  wire [(4'h9):(1'h0)] wire94;
  wire signed [(5'h13):(1'h0)] wire93;
  wire signed [(5'h14):(1'h0)] wire92;
  wire [(4'hb):(1'h0)] wire91;
  wire [(5'h15):(1'h0)] wire34;
  wire [(4'h9):(1'h0)] wire33;
  wire [(3'h6):(1'h0)] wire30;
  wire signed [(5'h10):(1'h0)] wire29;
  wire signed [(4'hc):(1'h0)] wire28;
  wire [(2'h3):(1'h0)] wire27;
  wire [(5'h11):(1'h0)] wire26;
  wire [(3'h6):(1'h0)] wire25;
  wire signed [(4'hc):(1'h0)] wire24;
  reg signed [(4'hf):(1'h0)] reg90 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg89 = (1'h0);
  reg [(4'he):(1'h0)] reg88 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg87 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg86 = (1'h0);
  reg signed [(4'hd):(1'h0)] reg85 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg80 = (1'h0);
  reg [(2'h2):(1'h0)] reg79 = (1'h0);
  reg [(4'he):(1'h0)] reg77 = (1'h0);
  reg [(3'h6):(1'h0)] reg75 = (1'h0);
  reg [(3'h5):(1'h0)] reg73 = (1'h0);
  reg [(5'h12):(1'h0)] reg70 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg69 = (1'h0);
  reg [(4'h9):(1'h0)] reg67 = (1'h0);
  reg [(3'h7):(1'h0)] reg65 = (1'h0);
  reg [(4'hc):(1'h0)] reg64 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg63 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg59 = (1'h0);
  reg [(3'h4):(1'h0)] reg58 = (1'h0);
  reg [(3'h5):(1'h0)] reg46 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg45 = (1'h0);
  reg [(2'h2):(1'h0)] reg44 = (1'h0);
  reg [(4'hc):(1'h0)] reg42 = (1'h0);
  reg [(5'h14):(1'h0)] reg40 = (1'h0);
  reg [(5'h13):(1'h0)] reg39 = (1'h0);
  reg [(5'h10):(1'h0)] reg32 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar84 = (1'h0);
  reg [(4'h8):(1'h0)] reg83 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg82 = (1'h0);
  reg [(3'h4):(1'h0)] forvar81 = (1'h0);
  reg signed [(3'h6):(1'h0)] forvar78 = (1'h0);
  reg [(5'h15):(1'h0)] reg76 = (1'h0);
  reg [(3'h6):(1'h0)] reg74 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar72 = (1'h0);
  reg [(4'hb):(1'h0)] forvar71 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg68 = (1'h0);
  reg signed [(2'h2):(1'h0)] forvar66 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg62 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar61 = (1'h0);
  reg [(4'hc):(1'h0)] forvar60 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg57 = (1'h0);
  reg [(4'ha):(1'h0)] reg56 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg55 = (1'h0);
  reg [(3'h4):(1'h0)] forvar54 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg53 = (1'h0);
  reg [(4'hc):(1'h0)] reg52 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg51 = (1'h0);
  reg [(5'h11):(1'h0)] forvar50 = (1'h0);
  reg [(4'h9):(1'h0)] reg49 = (1'h0);
  reg [(3'h6):(1'h0)] reg48 = (1'h0);
  reg [(3'h5):(1'h0)] forvar47 = (1'h0);
  reg [(4'he):(1'h0)] reg43 = (1'h0);
  reg [(2'h2):(1'h0)] forvar41 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg38 = (1'h0);
  reg signed [(2'h3):(1'h0)] forvar37 = (1'h0);
  reg [(3'h5):(1'h0)] forvar36 = (1'h0);
  reg [(4'hb):(1'h0)] reg35 = (1'h0);
  reg [(2'h2):(1'h0)] reg31 = (1'h0);
  assign y = {wire94,
                 wire93,
                 wire92,
                 wire91,
                 wire34,
                 wire33,
                 wire30,
                 wire29,
                 wire28,
                 wire27,
                 wire26,
                 wire25,
                 wire24,
                 reg90,
                 reg89,
                 reg88,
                 reg87,
                 reg86,
                 reg85,
                 reg80,
                 reg79,
                 reg77,
                 reg75,
                 reg73,
                 reg70,
                 reg69,
                 reg67,
                 reg65,
                 reg64,
                 reg63,
                 reg59,
                 reg58,
                 reg46,
                 reg45,
                 reg44,
                 reg42,
                 reg40,
                 reg39,
                 reg32,
                 forvar84,
                 reg83,
                 reg82,
                 forvar81,
                 forvar78,
                 reg76,
                 reg74,
                 forvar72,
                 forvar71,
                 reg68,
                 forvar66,
                 reg62,
                 forvar61,
                 forvar60,
                 reg57,
                 reg56,
                 reg55,
                 forvar54,
                 reg53,
                 reg52,
                 reg51,
                 forvar50,
                 reg49,
                 reg48,
                 forvar47,
                 reg43,
                 forvar41,
                 reg38,
                 forvar37,
                 forvar36,
                 reg35,
                 reg31,
                 (1'h0)};
  assign wire24 = (wire22 != wire20);
  assign wire25 = $signed(({$signed({wire23, wire24})} >= wire22));
  assign wire26 = wire20;
  assign wire27 = ($unsigned(($signed(wire20) || ((8'hb0) | wire19[(1'h1):(1'h0)]))) ?
                      wire21[(5'h12):(4'ha)] : (8'h9c));
  assign wire28 = (~&$signed({wire25[(2'h3):(1'h0)],
                      {wire22[(4'h8):(2'h2)], (wire22 ? (8'had) : wire25)}}));
  assign wire29 = $signed(((~$signed((wire25 ?
                      (8'hb5) : wire20))) <<< (((wire22 ? (8'hb0) : wire27) ?
                      wire25 : $signed(wire27)) ^~ $unsigned((&wire22)))));
  assign wire30 = (^~wire19);
  always
    @(posedge clk) begin
      reg31 = wire30;
      reg32 <= $signed(((wire24[(4'ha):(1'h1)] ?
              $signed((wire25 ^ wire29)) : (((8'hbb) < wire19) ?
                  ((8'hb9) ? wire19 : wire26) : wire25[(3'h5):(1'h0)])) ?
          ((wire26 ? {wire22} : wire21) ^~ (-{wire29})) : wire19));
    end
  assign wire33 = reg32[(2'h3):(1'h0)];
  assign wire34 = $unsigned($signed(($unsigned($unsigned(wire30)) ?
                      wire29[(4'ha):(1'h1)] : {wire23[(3'h7):(3'h5)],
                          (reg32 ? wire26 : (8'had))})));
  always
    @(posedge clk) begin
      reg35 = (wire30 != wire22);
      for (forvar36 = (1'h0); (forvar36 < (1'h1)); forvar36 = (forvar36 + (1'h1)))
        begin
          for (forvar37 = (1'h0); (forvar37 < (2'h2)); forvar37 = (forvar37 + (1'h1)))
            begin
              reg38 = $unsigned(wire22);
              reg39 <= ({$unsigned((|$signed(reg32)))} ?
                  wire23 : (wire24 ?
                      (wire30 ?
                          wire29 : (((8'hba) ? wire30 : wire24) ?
                              (~wire25) : $signed(wire28))) : (wire22 ?
                          $unsigned($unsigned(wire24)) : {(|wire20)})));
              reg40 <= $signed(({wire34[(4'h9):(3'h4)],
                  $unsigned($unsigned(reg32))} ^~ (^(!wire27))));
            end
          for (forvar41 = (1'h0); (forvar41 < (1'h1)); forvar41 = (forvar41 + (1'h1)))
            begin
              reg42 <= ((~&(7'h44)) ~^ $unsigned((((~wire34) ?
                      {(8'hb2), wire24} : $signed(forvar41)) ?
                  (forvar37 ? (!wire34) : $unsigned(reg39)) : wire33)));
              reg43 = ($signed(wire30[(3'h4):(1'h1)]) ?
                  wire28[(2'h3):(2'h3)] : $unsigned($unsigned(wire25[(1'h0):(1'h0)])));
              reg44 <= $unsigned($signed($signed(forvar41)));
              reg45 <= (wire34[(4'hc):(1'h0)] ? reg35 : (!{forvar36}));
              reg46 <= wire33[(3'h5):(3'h4)];
            end
          for (forvar47 = (1'h0); (forvar47 < (1'h0)); forvar47 = (forvar47 + (1'h1)))
            begin
              reg48 = $unsigned(reg32[(4'hc):(4'hb)]);
              reg49 = reg40[(5'h10):(1'h0)];
            end
          for (forvar50 = (1'h0); (forvar50 < (2'h3)); forvar50 = (forvar50 + (1'h1)))
            begin
              reg51 = $unsigned({$unsigned(wire22[(5'h11):(1'h0)]),
                  wire34[(5'h14):(2'h2)]});
              reg52 = wire21[(1'h1):(1'h1)];
              reg53 = wire21;
            end
          for (forvar54 = (1'h0); (forvar54 < (2'h3)); forvar54 = (forvar54 + (1'h1)))
            begin
              reg55 = wire29;
              reg56 = $signed($signed(((~&((7'h41) >= (8'ha1))) ?
                  {$unsigned(reg43),
                      (wire34 ? reg46 : reg55)} : (~(reg32 << wire30)))));
              reg57 = forvar37[(2'h2):(1'h0)];
              reg58 <= ($unsigned((wire20[(3'h7):(2'h2)] ?
                  forvar37[(2'h3):(2'h3)] : $signed({wire24}))) != wire26);
              reg59 <= wire20;
            end
        end
      for (forvar60 = (1'h0); (forvar60 < (2'h3)); forvar60 = (forvar60 + (1'h1)))
        begin
          for (forvar61 = (1'h0); (forvar61 < (2'h2)); forvar61 = (forvar61 + (1'h1)))
            begin
              reg62 = forvar60;
              reg63 <= {reg58, {reg46, reg45[(2'h2):(2'h2)]}};
              reg64 <= $unsigned($signed((~|$unsigned(reg44[(1'h1):(1'h0)]))));
              reg65 <= (forvar50 ?
                  wire21 : $unsigned(($signed(reg44[(2'h2):(1'h1)]) >= ($unsigned((8'ha1)) < reg63[(3'h5):(2'h2)]))));
            end
          for (forvar66 = (1'h0); (forvar66 < (2'h3)); forvar66 = (forvar66 + (1'h1)))
            begin
              reg67 <= (((~^($unsigned(reg63) + $signed(wire30))) <= {reg63[(1'h0):(1'h0)]}) * (reg48[(3'h4):(2'h2)] ?
                  wire21 : (&{(|reg63), wire29[(4'h9):(1'h0)]})));
              reg68 = $signed((~reg35[(4'h9):(2'h3)]));
              reg69 <= $signed((reg51[(1'h1):(1'h0)] ?
                  $unsigned($signed((reg35 ? reg39 : wire30))) : (reg68 ?
                      {(wire25 & reg48)} : $unsigned(reg51))));
            end
        end
      reg70 <= wire26[(4'he):(4'hd)];
      for (forvar71 = (1'h0); (forvar71 < (3'h4)); forvar71 = (forvar71 + (1'h1)))
        begin
          for (forvar72 = (1'h0); (forvar72 < (2'h2)); forvar72 = (forvar72 + (1'h1)))
            begin
              reg73 <= ({$unsigned(((reg62 ? reg52 : forvar61) ?
                      $unsigned(forvar36) : (reg35 ? forvar37 : reg32))),
                  reg44[(2'h2):(1'h1)]} - $unsigned(reg64[(4'hb):(4'h9)]));
              reg74 = $signed({reg52,
                  (forvar72[(1'h1):(1'h0)] ?
                      {$unsigned(forvar41)} : (^~wire22))});
              reg75 <= (8'hb2);
              reg76 = $signed($signed(($signed((reg44 << reg48)) - (-(8'ha7)))));
              reg77 <= ($unsigned(reg68) ?
                  {wire30,
                      (reg46 ?
                          $signed(forvar71[(1'h1):(1'h1)]) : reg56[(3'h7):(2'h2)])} : (({(+reg32),
                          $signed(reg55)} >= reg67) ?
                      forvar37[(1'h1):(1'h0)] : $signed((reg56 <= forvar41))));
            end
          for (forvar78 = (1'h0); (forvar78 < (2'h3)); forvar78 = (forvar78 + (1'h1)))
            begin
              reg79 <= $unsigned((^~wire34[(5'h14):(4'hc)]));
              reg80 <= $signed(reg48);
            end
          for (forvar81 = (1'h0); (forvar81 < (2'h3)); forvar81 = (forvar81 + (1'h1)))
            begin
              reg82 = forvar36;
              reg83 = $signed(((^reg68[(5'h14):(4'hc)]) ?
                  $signed(reg59) : (~{((8'hba) ^ reg55), $signed(forvar71)})));
            end
          for (forvar84 = (1'h0); (forvar84 < (2'h3)); forvar84 = (forvar84 + (1'h1)))
            begin
              reg85 <= (-(8'hbd));
              reg86 <= reg80;
              reg87 <= $signed((($signed({reg70}) ?
                      {$signed(wire22)} : $unsigned($signed((8'hb8)))) ?
                  (^(reg63 ?
                      (^~wire23) : $unsigned((8'hb9)))) : ({$signed(reg65)} ?
                      ($signed(reg86) != (forvar66 ?
                          reg44 : reg63)) : $signed(reg39))));
              reg88 <= reg38[(3'h4):(1'h1)];
              reg89 <= (({reg38, $signed(wire25[(1'h0):(1'h0)])} ?
                  {$signed($unsigned(reg79)),
                      ($signed(reg63) ? (7'h42) : {(8'hb3)})} : reg55) > reg39);
            end
          reg90 <= reg32[(5'h10):(1'h0)];
        end
    end
  assign wire91 = reg46[(2'h2):(1'h1)];
  assign wire92 = reg70;
  assign wire93 = (|reg79[(2'h2):(2'h2)]);
  assign wire94 = $signed(($unsigned(reg64[(3'h7):(1'h1)]) ?
                      ((~|$signed(reg89)) ?
                          {$unsigned(wire27),
                              (wire34 ? reg67 : wire27)} : ((reg69 + reg65) ?
                              ((8'hbe) >= reg65) : (reg65 >>> reg64))) : ((8'h9d) ?
                          wire91[(4'h9):(3'h5)] : $unsigned((wire30 ?
                              wire27 : wire22)))));
endmodule