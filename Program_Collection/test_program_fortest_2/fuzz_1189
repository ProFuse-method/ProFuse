(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h11c):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(4'hd):(1'h0)] wire4;
  input wire signed [(3'h4):(1'h0)] wire3;
  input wire signed [(5'h14):(1'h0)] wire2;
  input wire [(3'h5):(1'h0)] wire1;
  input wire signed [(4'hf):(1'h0)] wire0;
  wire [(4'hc):(1'h0)] wire31;
  wire signed [(4'ha):(1'h0)] wire30;
  wire signed [(4'hc):(1'h0)] wire29;
  wire [(5'h15):(1'h0)] wire28;
  wire [(4'h9):(1'h0)] wire27;
  wire signed [(5'h10):(1'h0)] wire26;
  wire [(4'h8):(1'h0)] wire6;
  wire signed [(3'h7):(1'h0)] wire5;
  reg signed [(4'h9):(1'h0)] reg23 = (1'h0);
  reg [(3'h6):(1'h0)] reg18 = (1'h0);
  reg [(4'hd):(1'h0)] reg13 = (1'h0);
  reg [(4'hc):(1'h0)] reg12 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg11 = (1'h0);
  reg [(3'h5):(1'h0)] reg10 = (1'h0);
  reg [(2'h2):(1'h0)] reg9 = (1'h0);
  reg [(5'h11):(1'h0)] reg25 = (1'h0);
  reg [(4'h8):(1'h0)] reg24 = (1'h0);
  reg signed [(3'h4):(1'h0)] reg22 = (1'h0);
  reg [(4'hd):(1'h0)] reg21 = (1'h0);
  reg [(2'h3):(1'h0)] forvar20 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar19 = (1'h0);
  reg [(5'h14):(1'h0)] reg17 = (1'h0);
  reg [(3'h6):(1'h0)] reg16 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar15 = (1'h0);
  reg [(4'hb):(1'h0)] forvar14 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar8 = (1'h0);
  reg [(5'h10):(1'h0)] forvar7 = (1'h0);
  assign y = {wire31,
                 wire30,
                 wire29,
                 wire28,
                 wire27,
                 wire26,
                 wire6,
                 wire5,
                 reg23,
                 reg18,
                 reg13,
                 reg12,
                 reg11,
                 reg10,
                 reg9,
                 reg25,
                 reg24,
                 reg22,
                 reg21,
                 forvar20,
                 forvar19,
                 reg17,
                 reg16,
                 forvar15,
                 forvar14,
                 forvar8,
                 forvar7,
                 (1'h0)};
  assign wire5 = $unsigned(wire2[(4'h9):(2'h3)]);
  assign wire6 = {(~|wire2)};
  always
    @(posedge clk) begin
      for (forvar7 = (1'h0); (forvar7 < (2'h2)); forvar7 = (forvar7 + (1'h1)))
        begin
          for (forvar8 = (1'h0); (forvar8 < (2'h3)); forvar8 = (forvar8 + (1'h1)))
            begin
              reg9 <= ((|wire4[(2'h3):(1'h1)]) || (8'hb4));
              reg10 <= wire2[(5'h12):(4'hb)];
              reg11 <= {(^wire0),
                  (($unsigned((forvar7 ? wire1 : reg9)) ?
                          (~(forvar8 ? forvar7 : wire6)) : $unsigned(reg9)) ?
                      ($signed(wire6[(3'h7):(2'h2)]) ?
                          {{forvar7, (8'hbf)},
                              wire0[(4'ha):(2'h2)]} : (+$unsigned((8'ha6)))) : {(^wire6),
                          (+((7'h43) ? (8'hba) : wire4))})};
              reg12 <= (wire6 ?
                  ((~$unsigned((~^forvar7))) ?
                      $signed({{wire1},
                          wire6[(1'h0):(1'h0)]}) : (~|reg11)) : ((+($signed(forvar7) < wire0)) ?
                      $unsigned(((forvar7 * reg10) ?
                          (wire5 * wire6) : $unsigned(reg11))) : wire4[(1'h1):(1'h0)]));
              reg13 <= wire6;
            end
        end
      for (forvar14 = (1'h0); (forvar14 < (2'h2)); forvar14 = (forvar14 + (1'h1)))
        begin
          for (forvar15 = (1'h0); (forvar15 < (3'h4)); forvar15 = (forvar15 + (1'h1)))
            begin
              reg16 = ($unsigned(reg13) ?
                  $unsigned({wire0[(3'h5):(1'h1)],
                      reg13}) : wire2[(5'h10):(2'h3)]);
            end
        end
      reg17 = {((8'had) >>> (((wire2 >= wire0) ~^ (~|(8'hae))) ?
              ((forvar14 ? reg11 : forvar7) & ((8'ha6) ?
                  (8'ha9) : forvar14)) : ((reg12 ? wire1 : (8'hb0)) ?
                  $signed(forvar8) : $signed(wire4)))),
          forvar8};
      reg18 <= (($signed({((7'h41) ? (8'hb0) : forvar15), {wire6, reg13}}) ?
              reg11[(1'h1):(1'h0)] : reg10) ?
          forvar7 : $signed($unsigned((reg16[(2'h3):(1'h0)] >> {wire3}))));
      for (forvar19 = (1'h0); (forvar19 < (2'h2)); forvar19 = (forvar19 + (1'h1)))
        begin
          for (forvar20 = (1'h0); (forvar20 < (2'h2)); forvar20 = (forvar20 + (1'h1)))
            begin
              reg21 = forvar15;
              reg22 = $signed((~^reg21));
              reg23 <= (^~((^$signed((~forvar8))) ?
                  $unsigned(forvar14[(2'h3):(2'h3)]) : $signed($signed({reg9}))));
              reg24 = ((~&reg10) > reg21[(4'h8):(1'h1)]);
              reg25 = ($unsigned(reg9) ?
                  $signed(reg17[(1'h1):(1'h0)]) : (^(wire4 ?
                      reg12[(4'ha):(3'h5)] : ((^~reg16) ?
                          reg23 : $unsigned(reg24)))));
            end
        end
    end
  assign wire26 = (^~$unsigned(((8'haf) & ({reg18, reg13} << $signed(wire1)))));
  assign wire27 = reg11;
  assign wire28 = (~^$signed($unsigned($signed((~&(7'h42))))));
  assign wire29 = reg11[(1'h0):(1'h0)];
  assign wire30 = $signed(wire28[(5'h13):(4'hb)]);
  assign wire31 = $signed(((8'haa) ?
                      $unsigned((wire29 ?
                          reg11[(1'h0):(1'h0)] : $unsigned(wire29))) : {(|(wire26 ?
                              wire2 : (8'hbb)))}));
endmodule