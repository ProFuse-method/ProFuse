(* use_dsp48="no" *) (* use_dsp="no" *) module top  (y, clk, wire3, wire2, wire1, wire0);
  output wire [(32'heb):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire3;
  input wire signed [(4'hc):(1'h0)] wire2;
  input wire signed [(4'hb):(1'h0)] wire1;
  input wire [(3'h5):(1'h0)] wire0;
  wire [(4'hb):(1'h0)] wire12;
  wire signed [(5'h11):(1'h0)] wire6;
  wire [(2'h3):(1'h0)] wire5;
  wire [(5'h13):(1'h0)] wire4;
  reg signed [(4'hf):(1'h0)] reg25 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg22 = (1'h0);
  reg [(5'h13):(1'h0)] reg21 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg20 = (1'h0);
  reg signed [(2'h3):(1'h0)] reg19 = (1'h0);
  reg [(3'h4):(1'h0)] reg17 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg16 = (1'h0);
  reg [(3'h6):(1'h0)] reg14 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg11 = (1'h0);
  reg [(4'h9):(1'h0)] reg10 = (1'h0);
  reg signed [(4'hb):(1'h0)] reg9 = (1'h0);
  reg [(5'h13):(1'h0)] reg8 = (1'h0);
  reg [(3'h7):(1'h0)] reg7 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg24 = (1'h0);
  reg [(3'h7):(1'h0)] forvar23 = (1'h0);
  reg [(4'h9):(1'h0)] reg18 = (1'h0);
  reg [(4'hd):(1'h0)] forvar15 = (1'h0);
  reg [(5'h12):(1'h0)] reg13 = (1'h0);
  assign y = {wire12,
                 wire6,
                 wire5,
                 wire4,
                 reg25,
                 reg22,
                 reg21,
                 reg20,
                 reg19,
                 reg17,
                 reg16,
                 reg14,
                 reg11,
                 reg10,
                 reg9,
                 reg8,
                 reg7,
                 reg24,
                 forvar23,
                 reg18,
                 forvar15,
                 reg13,
                 (1'h0)};
  assign wire4 = {{(~$unsigned($unsigned((8'ha2))))}};
  assign wire5 = ("T3BMYmsOmYrkWdunqv6m" ?
                     $unsigned((wire2 ?
                         wire1[(3'h5):(1'h0)] : (^(wire3 ?
                             wire4 : wire2)))) : "mQ");
  assign wire6 = ($unsigned((~&$unsigned((wire0 ? wire1 : wire1)))) ?
                     $signed("CkS") : "8GBg9kX4SsvC3cZmiXP");
  always
    @(posedge clk) begin
      reg7 <= "cGOtTx9ThnXl2ur7aS";
      reg8 <= "C6K3JT8bX2Ip4zwzdT";
      reg9 <= {{(wire1[(1'h0):(1'h0)] ? "XOfOnv" : reg8), reg8[(4'he):(1'h0)]}};
      reg10 <= wire4[(2'h3):(2'h3)];
      reg11 <= "U";
    end
  assign wire12 = reg11[(4'h9):(3'h4)];
  always
    @(posedge clk) begin
      reg13 = wire12[(1'h1):(1'h1)];
      reg14 <= (8'ha3);
      for (forvar15 = (1'h0); (forvar15 < (2'h2)); forvar15 = (forvar15 + (1'h1)))
        begin
          if ($signed({$unsigned(wire2[(4'h8):(1'h0)]),
              $signed((^$unsigned(wire2)))}))
            begin
              reg16 <= $unsigned((~|{(8'ha3)}));
              reg17 <= "l1H8dO5UY8wDXFiikG";
            end
          else
            begin
              reg18 = $signed(wire4);
              reg19 <= ($unsigned((^wire1)) ? reg8 : $signed((reg8 != wire4)));
              reg20 <= (8'hb3);
              reg21 <= (|$unsigned(wire5[(1'h0):(1'h0)]));
              reg22 <= $unsigned("KBL");
            end
          for (forvar23 = (1'h0); (forvar23 < (3'h4)); forvar23 = (forvar23 + (1'h1)))
            begin
              reg24 = $unsigned({reg10[(2'h3):(2'h3)]});
              reg25 <= ((((~&reg10) != $unsigned((!wire3))) ?
                  ((~reg24) <<< ("X" <= reg10[(3'h6):(1'h1)])) : reg11) < reg16[(2'h2):(1'h1)]);
            end
        end
    end
endmodule