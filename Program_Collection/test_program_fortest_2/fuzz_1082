(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param57 = (((8'h9c) > ({((8'ha6) ^~ (8'ha0))} ~^ {{(8'ha1)}})) ^ (((~^((8'haa) * (8'hb0))) < (((8'hb6) ? (8'hbd) : (8'haa)) >> ((8'hb9) ? (8'hbc) : (8'ha6)))) ^~ (((~^(8'hbf)) ? ((8'ha4) ? (7'h44) : (8'ha1)) : {(8'hbb)}) ^~ {((8'ha6) ^ (8'ha7))}))), 
parameter param58 = ((~(~^{(^param57)})) == (+(((param57 ? param57 : param57) ? {(8'ha2)} : (param57 <<< (8'ha2))) << ((param57 ? (8'hb0) : param57) ? (param57 <<< (7'h44)) : (!(8'ha6)))))))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h26f):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(3'h7):(1'h0)] wire4;
  input wire signed [(4'hf):(1'h0)] wire3;
  input wire [(5'h11):(1'h0)] wire2;
  input wire [(5'h14):(1'h0)] wire1;
  input wire signed [(3'h6):(1'h0)] wire0;
  wire [(4'h8):(1'h0)] wire7;
  wire [(4'h9):(1'h0)] wire6;
  wire [(4'h8):(1'h0)] wire5;
  reg signed [(3'h7):(1'h0)] reg55 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg47 = (1'h0);
  reg [(5'h12):(1'h0)] reg43 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg40 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg39 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg38 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg37 = (1'h0);
  reg [(5'h10):(1'h0)] reg36 = (1'h0);
  reg [(5'h10):(1'h0)] reg31 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg30 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg29 = (1'h0);
  reg [(5'h13):(1'h0)] reg27 = (1'h0);
  reg [(5'h12):(1'h0)] reg25 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg20 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg18 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg17 = (1'h0);
  reg [(3'h4):(1'h0)] reg16 = (1'h0);
  reg [(5'h13):(1'h0)] reg12 = (1'h0);
  reg [(4'hf):(1'h0)] reg10 = (1'h0);
  reg signed [(2'h2):(1'h0)] reg56 = (1'h0);
  reg signed [(3'h5):(1'h0)] forvar54 = (1'h0);
  reg [(5'h12):(1'h0)] forvar53 = (1'h0);
  reg [(4'hd):(1'h0)] reg52 = (1'h0);
  reg [(4'hb):(1'h0)] reg51 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg50 = (1'h0);
  reg [(5'h10):(1'h0)] forvar49 = (1'h0);
  reg [(2'h3):(1'h0)] reg48 = (1'h0);
  reg [(3'h5):(1'h0)] forvar46 = (1'h0);
  reg signed [(3'h6):(1'h0)] reg45 = (1'h0);
  reg [(5'h10):(1'h0)] reg44 = (1'h0);
  reg [(4'ha):(1'h0)] reg42 = (1'h0);
  reg [(4'h9):(1'h0)] reg41 = (1'h0);
  reg signed [(5'h11):(1'h0)] forvar35 = (1'h0);
  reg signed [(3'h7):(1'h0)] forvar34 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg33 = (1'h0);
  reg [(4'hb):(1'h0)] reg32 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar28 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg26 = (1'h0);
  reg signed [(5'h10):(1'h0)] forvar24 = (1'h0);
  reg [(5'h14):(1'h0)] reg23 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar22 = (1'h0);
  reg [(3'h5):(1'h0)] reg21 = (1'h0);
  reg signed [(5'h12):(1'h0)] forvar19 = (1'h0);
  reg [(5'h14):(1'h0)] reg15 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar14 = (1'h0);
  reg signed [(4'hc):(1'h0)] forvar13 = (1'h0);
  reg [(2'h3):(1'h0)] forvar11 = (1'h0);
  reg [(4'hb):(1'h0)] reg9 = (1'h0);
  reg signed [(3'h4):(1'h0)] forvar8 = (1'h0);
  assign y = {wire7,
                 wire6,
                 wire5,
                 reg55,
                 reg47,
                 reg43,
                 reg40,
                 reg39,
                 reg38,
                 reg37,
                 reg36,
                 reg31,
                 reg30,
                 reg29,
                 reg27,
                 reg25,
                 reg20,
                 reg18,
                 reg17,
                 reg16,
                 reg12,
                 reg10,
                 reg56,
                 forvar54,
                 forvar53,
                 reg52,
                 reg51,
                 reg50,
                 forvar49,
                 reg48,
                 forvar46,
                 reg45,
                 reg44,
                 reg42,
                 reg41,
                 forvar35,
                 forvar34,
                 reg33,
                 reg32,
                 forvar28,
                 reg26,
                 forvar24,
                 reg23,
                 forvar22,
                 reg21,
                 forvar19,
                 reg15,
                 forvar14,
                 forvar13,
                 forvar11,
                 reg9,
                 forvar8,
                 (1'h0)};
  assign wire5 = wire0[(1'h0):(1'h0)];
  assign wire6 = $signed(wire4[(3'h4):(1'h0)]);
  assign wire7 = ((wire2[(3'h4):(1'h1)] == (($unsigned(wire4) <<< (wire6 & wire6)) == (~(8'ha6)))) << ($signed($unsigned((~(8'hb6)))) * wire4));
  always
    @(posedge clk) begin
      for (forvar8 = (1'h0); (forvar8 < (2'h3)); forvar8 = (forvar8 + (1'h1)))
        begin
          reg9 = forvar8;
          reg10 <= {wire3};
          for (forvar11 = (1'h0); (forvar11 < (1'h1)); forvar11 = (forvar11 + (1'h1)))
            begin
              reg12 <= wire6;
            end
        end
      for (forvar13 = (1'h0); (forvar13 < (2'h2)); forvar13 = (forvar13 + (1'h1)))
        begin
          for (forvar14 = (1'h0); (forvar14 < (3'h4)); forvar14 = (forvar14 + (1'h1)))
            begin
              reg15 = $signed($unsigned($unsigned(((wire1 < (7'h41)) >>> (wire4 ?
                  forvar8 : wire1)))));
              reg16 <= wire7;
              reg17 <= (wire5 ?
                  ($unsigned(($signed(wire5) ?
                      $signed(forvar8) : $unsigned(reg9))) >= ($unsigned($signed(wire0)) ?
                      ((wire7 ^~ (8'ha0)) ?
                          forvar11[(1'h1):(1'h1)] : $signed(wire6)) : $unsigned({wire3}))) : (+wire3[(4'hc):(4'h8)]));
            end
          reg18 <= (8'ha3);
          for (forvar19 = (1'h0); (forvar19 < (2'h2)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 <= $signed($signed({((~|wire7) < (wire3 ? wire2 : wire6)),
                  $signed(wire0)}));
            end
          reg21 = (|$signed($unsigned($unsigned((reg16 <<< wire0)))));
        end
      for (forvar22 = (1'h0); (forvar22 < (2'h2)); forvar22 = (forvar22 + (1'h1)))
        begin
          reg23 = $signed(wire0[(3'h5):(2'h2)]);
          for (forvar24 = (1'h0); (forvar24 < (1'h1)); forvar24 = (forvar24 + (1'h1)))
            begin
              reg25 <= (-$signed(reg23));
              reg26 = $unsigned(reg10[(4'h9):(4'h8)]);
              reg27 <= ((^~(($signed(wire0) ?
                          $unsigned(wire5) : reg26[(3'h5):(1'h1)]) ?
                      (~^$signed((8'hba))) : $unsigned((wire0 ?
                          wire3 : reg20)))) ?
                  reg25 : reg16);
            end
          for (forvar28 = (1'h0); (forvar28 < (2'h3)); forvar28 = (forvar28 + (1'h1)))
            begin
              reg29 <= $unsigned(reg10);
              reg30 <= $unsigned((forvar13 >= $signed($signed($unsigned(wire1)))));
              reg31 <= ($signed(forvar13) ~^ $unsigned((~&$unsigned($signed((8'ha1))))));
              reg32 = (($signed($signed(((8'ha4) >>> reg9))) << ((^$unsigned(reg17)) >> ((7'h42) <<< {wire3,
                  (8'hb1)}))) ^ (|{$unsigned(reg10)}));
              reg33 = $unsigned(((wire0[(3'h6):(3'h6)] <<< $signed((wire0 ?
                      forvar22 : forvar14))) ?
                  (reg32[(4'h9):(1'h1)] ?
                      reg15 : reg18[(3'h5):(2'h3)]) : ((^$signed((8'hbd))) ?
                      (8'hab) : (&(reg15 << reg17)))));
            end
        end
      for (forvar34 = (1'h0); (forvar34 < (2'h3)); forvar34 = (forvar34 + (1'h1)))
        begin
          for (forvar35 = (1'h0); (forvar35 < (2'h3)); forvar35 = (forvar35 + (1'h1)))
            begin
              reg36 <= wire2[(3'h6):(3'h4)];
              reg37 <= (+(~(~&((reg23 ?
                  reg10 : reg20) >= ((8'ha0) ^~ wire2)))));
              reg38 <= ({(((forvar8 < reg33) ?
                      (&forvar28) : wire7[(3'h7):(2'h2)]) | $signed((wire2 >>> (8'ha8)))),
                  (~&($signed(reg9) != $signed(reg37)))} < reg26);
              reg39 <= ($signed(reg15) ?
                  $unsigned($signed(reg31[(4'hf):(1'h0)])) : $unsigned({forvar14[(3'h4):(1'h1)],
                      reg26}));
            end
          if (reg9[(4'ha):(3'h6)])
            begin
              reg40 <= $signed(forvar35);
              reg41 = reg23;
              reg42 = forvar34;
              reg43 <= $signed($signed((+wire4)));
              reg44 = (^reg41[(3'h6):(3'h4)]);
            end
          else
            begin
              reg40 <= (^$signed((~|((^reg18) ? (-reg31) : $signed((8'hba))))));
              reg41 = $unsigned(((~&{(wire6 ? (8'ha7) : reg39),
                      {forvar35, wire7}}) ?
                  ((reg29[(3'h5):(1'h0)] == $signed(reg31)) <= $signed($signed(reg43))) : reg37[(2'h3):(2'h3)]));
              reg42 = forvar22;
              reg44 = ($unsigned((!{$unsigned(wire0)})) > $signed((reg40 >> (+(reg12 != reg41)))));
              reg45 = (|$signed((~&{forvar19})));
            end
          for (forvar46 = (1'h0); (forvar46 < (1'h0)); forvar46 = (forvar46 + (1'h1)))
            begin
              reg47 <= wire2[(4'hd):(4'h8)];
              reg48 = wire1;
            end
          for (forvar49 = (1'h0); (forvar49 < (3'h4)); forvar49 = (forvar49 + (1'h1)))
            begin
              reg50 = $unsigned(($signed(((|reg26) ?
                      wire3[(4'hb):(1'h1)] : (reg16 * reg23))) ?
                  reg37 : (forvar49 ?
                      $signed(forvar13[(3'h6):(3'h6)]) : {{wire4, reg36},
                          $unsigned(forvar49)})));
              reg51 = wire2[(3'h6):(2'h3)];
            end
        end
    end
  always
    @(posedge clk) begin
      reg52 = $signed($unsigned(({reg25} ?
          (&(reg38 ? wire2 : (7'h40))) : ((!reg12) ? wire1 : reg25))));
      for (forvar53 = (1'h0); (forvar53 < (1'h0)); forvar53 = (forvar53 + (1'h1)))
        begin
          for (forvar54 = (1'h0); (forvar54 < (1'h1)); forvar54 = (forvar54 + (1'h1)))
            begin
              reg55 <= reg43[(4'hc):(4'ha)];
              reg56 = {$unsigned($unsigned(reg17[(1'h1):(1'h0)]))};
            end
        end
    end
endmodule