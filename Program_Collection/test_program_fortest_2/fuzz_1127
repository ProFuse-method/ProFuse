(* use_dsp48="no" *) (* use_dsp="no" *) module top
#(parameter param41 = ((({((8'ha8) > (8'hb7))} ? (~((7'h43) >= (7'h44))) : (^((8'hb9) >>> (7'h40)))) != (~&((^(8'ha7)) ? (8'hba) : ((8'hae) >= (8'hbf))))) - (((~&(|(8'hbf))) ? (8'hbc) : ({(8'h9f)} * (~|(8'ha9)))) ? (-(((8'hb3) ? (8'hb8) : (8'ha3)) ? {(8'ha5)} : ((8'haa) ? (8'hbe) : (8'had)))) : {((&(8'hbe)) ? ((8'haf) ? (8'hae) : (8'had)) : ((8'hb3) ? (8'ha7) : (8'ha4))), (|((7'h43) + (8'hb9)))})))
(y, clk, wire4, wire3, wire2, wire1, wire0);
  output wire [(32'h1c8):(32'h0)] y;
  input wire [(1'h0):(1'h0)] clk;
  input wire [(5'h11):(1'h0)] wire4;
  input wire signed [(5'h12):(1'h0)] wire3;
  input wire [(5'h13):(1'h0)] wire2;
  input wire signed [(5'h10):(1'h0)] wire1;
  input wire [(2'h3):(1'h0)] wire0;
  wire signed [(4'hb):(1'h0)] wire9;
  wire signed [(4'ha):(1'h0)] wire8;
  wire signed [(5'h15):(1'h0)] wire7;
  wire [(2'h3):(1'h0)] wire6;
  wire signed [(5'h13):(1'h0)] wire5;
  reg [(4'hf):(1'h0)] reg40 = (1'h0);
  reg signed [(4'ha):(1'h0)] reg39 = (1'h0);
  reg signed [(5'h12):(1'h0)] reg33 = (1'h0);
  reg [(4'hb):(1'h0)] reg32 = (1'h0);
  reg signed [(4'h8):(1'h0)] reg31 = (1'h0);
  reg [(4'he):(1'h0)] reg29 = (1'h0);
  reg signed [(4'hc):(1'h0)] reg28 = (1'h0);
  reg signed [(5'h11):(1'h0)] reg25 = (1'h0);
  reg [(3'h6):(1'h0)] reg23 = (1'h0);
  reg [(3'h7):(1'h0)] reg22 = (1'h0);
  reg [(4'ha):(1'h0)] reg18 = (1'h0);
  reg signed [(5'h14):(1'h0)] reg16 = (1'h0);
  reg [(3'h5):(1'h0)] reg14 = (1'h0);
  reg signed [(4'h9):(1'h0)] reg38 = (1'h0);
  reg [(4'hf):(1'h0)] reg37 = (1'h0);
  reg [(4'h9):(1'h0)] reg36 = (1'h0);
  reg signed [(4'he):(1'h0)] forvar35 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg34 = (1'h0);
  reg signed [(5'h14):(1'h0)] forvar30 = (1'h0);
  reg [(5'h12):(1'h0)] reg27 = (1'h0);
  reg [(3'h5):(1'h0)] forvar26 = (1'h0);
  reg signed [(4'hf):(1'h0)] reg24 = (1'h0);
  reg [(3'h6):(1'h0)] forvar22 = (1'h0);
  reg signed [(3'h5):(1'h0)] reg21 = (1'h0);
  reg signed [(5'h15):(1'h0)] reg20 = (1'h0);
  reg signed [(4'hf):(1'h0)] forvar19 = (1'h0);
  reg signed [(5'h15):(1'h0)] forvar17 = (1'h0);
  reg [(5'h11):(1'h0)] forvar15 = (1'h0);
  reg signed [(3'h7):(1'h0)] reg13 = (1'h0);
  reg [(3'h7):(1'h0)] reg12 = (1'h0);
  reg signed [(4'h8):(1'h0)] forvar11 = (1'h0);
  reg signed [(5'h13):(1'h0)] forvar10 = (1'h0);
  assign y = {wire9,
                 wire8,
                 wire7,
                 wire6,
                 wire5,
                 reg40,
                 reg39,
                 reg33,
                 reg32,
                 reg31,
                 reg29,
                 reg28,
                 reg25,
                 reg23,
                 reg22,
                 reg18,
                 reg16,
                 reg14,
                 reg38,
                 reg37,
                 reg36,
                 forvar35,
                 reg34,
                 forvar30,
                 reg27,
                 forvar26,
                 reg24,
                 forvar22,
                 reg21,
                 reg20,
                 forvar19,
                 forvar17,
                 forvar15,
                 reg13,
                 reg12,
                 forvar11,
                 forvar10,
                 (1'h0)};
  assign wire5 = $signed((~&(-$unsigned(wire4))));
  assign wire6 = (&$unsigned((~&(wire1[(4'ha):(3'h4)] * $unsigned(wire4)))));
  assign wire7 = (($unsigned(wire6[(1'h1):(1'h1)]) > $unsigned(wire0[(1'h1):(1'h1)])) ?
                     ({(|{wire3})} ?
                         $unsigned($unsigned((wire3 || wire5))) : (~|wire4)) : wire3[(1'h1):(1'h1)]);
  assign wire8 = (~^wire1[(3'h7):(3'h4)]);
  assign wire9 = $signed(((~&wire5[(4'he):(4'h9)]) & ($signed((wire3 ?
                         wire4 : wire0)) ?
                     ({wire3} ?
                         $signed(wire3) : (|wire7)) : ($unsigned(wire5) > $unsigned(wire5)))));
  always
    @(posedge clk) begin
      for (forvar10 = (1'h0); (forvar10 < (2'h2)); forvar10 = (forvar10 + (1'h1)))
        begin
          for (forvar11 = (1'h0); (forvar11 < (2'h3)); forvar11 = (forvar11 + (1'h1)))
            begin
              reg12 = $unsigned(wire6);
              reg13 = wire4;
              reg14 <= (({((forvar10 & wire0) ?
                              reg12[(2'h3):(2'h2)] : reg12[(2'h2):(1'h0)]),
                          (!(wire0 ? reg12 : wire4))} ?
                      {(wire4[(1'h0):(1'h0)] ?
                              $unsigned(wire4) : reg13[(2'h3):(1'h1)])} : (({reg12} ?
                              {wire5} : wire0[(1'h1):(1'h0)]) ?
                          (&(^reg12)) : ((wire8 ?
                              wire2 : wire9) == (forvar11 > wire8)))) ?
                  (($signed(reg12) < (~&(!wire1))) <= wire1) : wire5[(5'h11):(4'hb)]);
            end
          for (forvar15 = (1'h0); (forvar15 < (3'h4)); forvar15 = (forvar15 + (1'h1)))
            begin
              reg16 <= (&$unsigned((-($unsigned(wire3) ?
                  {forvar15} : $signed(wire8)))));
            end
          for (forvar17 = (1'h0); (forvar17 < (2'h3)); forvar17 = (forvar17 + (1'h1)))
            begin
              reg18 <= {forvar11, wire3[(3'h7):(2'h2)]};
            end
          for (forvar19 = (1'h0); (forvar19 < (1'h1)); forvar19 = (forvar19 + (1'h1)))
            begin
              reg20 = $signed(reg18);
              reg21 = $signed((^~(8'hb6)));
            end
        end
      if ((~|((~{wire4,
          wire3[(1'h0):(1'h0)]}) | (+$signed((reg13 >>> reg16))))))
        begin
          reg22 <= (~|((~&({forvar10} >> reg16)) ?
              wire0[(2'h2):(2'h2)] : forvar17));
        end
      else
        begin
          for (forvar22 = (1'h0); (forvar22 < (3'h4)); forvar22 = (forvar22 + (1'h1)))
            begin
              reg23 <= (forvar15[(2'h2):(2'h2)] ?
                  reg13 : $signed(wire1[(4'hf):(4'ha)]));
              reg24 = $signed(((reg18[(3'h7):(3'h5)] ?
                  (8'hb3) : (+$signed(reg23))) ^ reg16[(4'hc):(2'h3)]));
              reg25 <= wire5;
            end
          for (forvar26 = (1'h0); (forvar26 < (1'h1)); forvar26 = (forvar26 + (1'h1)))
            begin
              reg27 = (reg23[(3'h5):(1'h0)] && (~|{$unsigned($unsigned(reg25))}));
              reg28 <= {(({$unsigned(forvar15), (^~wire6)} ?
                      (~^wire7[(1'h0):(1'h0)]) : wire7) && (~(reg18 ?
                      (forvar26 >>> wire5) : reg12)))};
              reg29 <= $signed(((8'haa) || $signed((^(~^(8'haf))))));
            end
          for (forvar30 = (1'h0); (forvar30 < (2'h2)); forvar30 = (forvar30 + (1'h1)))
            begin
              reg31 <= ($signed(wire1[(4'h8):(1'h0)]) >>> (-$unsigned($signed($signed((8'hbc))))));
              reg32 <= $unsigned($unsigned((forvar17 ?
                  $signed($unsigned(reg29)) : $unsigned(forvar19[(4'hd):(1'h1)]))));
              reg33 <= $signed(wire8[(3'h6):(2'h2)]);
              reg34 = (reg32 != $signed($signed(($unsigned(reg18) ?
                  (-reg25) : $signed(reg25)))));
            end
          for (forvar35 = (1'h0); (forvar35 < (2'h2)); forvar35 = (forvar35 + (1'h1)))
            begin
              reg36 = ((8'hbe) ?
                  (~^{(reg16 + (wire0 && (8'h9d))),
                      {$signed(forvar19),
                          {(8'ha1), reg13}}}) : ($signed(reg20[(3'h7):(3'h5)]) ?
                      forvar19 : (($unsigned((7'h43)) ?
                              (forvar30 >> reg33) : {forvar22}) ?
                          $unsigned($signed(forvar11)) : reg31[(1'h0):(1'h0)])));
              reg37 = (wire7[(3'h4):(1'h1)] > (+forvar30[(4'hb):(1'h0)]));
              reg38 = wire3[(3'h4):(1'h0)];
              reg39 <= (~({reg21} ?
                  reg24 : (^$unsigned(wire3[(4'hb):(2'h2)]))));
              reg40 <= reg38;
            end
        end
    end
endmodule